
projecy-thermometer-dth11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d0  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d60  08003d60  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d68  08003d68  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000003c  08003dac  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08003dac  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004165  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a8  00000000  00000000  000241c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  00025778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00013455  00000000  00000000  00025cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000068dc  00000000  00000000  0003910d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0007405f  00000000  00000000  0003f9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000b3a48  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000468  00000000  00000000  000b3a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010b0  00000000  00000000  000b3f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002478 	.word	0x08002478

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002478 	.word	0x08002478

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 80004b4:	f000 fae0 	bl	8000a78 <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 80004b8:	2010      	movs	r0, #16
 80004ba:	f000 fb1d 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80004be:	2000      	movs	r0, #0
 80004c0:	f000 fafa 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 80004c4:	2011      	movs	r0, #17
 80004c6:	f000 fb17 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 faf4 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 80004d0:	2044      	movs	r0, #68	; 0x44
 80004d2:	f000 fb11 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 faee 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 80004dc:	2011      	movs	r0, #17
 80004de:	f000 faeb 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 80004e2:	2045      	movs	r0, #69	; 0x45
 80004e4:	f000 fb08 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fae5 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 80004ee:	20ab      	movs	r0, #171	; 0xab
 80004f0:	f000 fae2 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 80004f4:	204e      	movs	r0, #78	; 0x4e
 80004f6:	f000 faff 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fadc 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8000500:	204f      	movs	r0, #79	; 0x4f
 8000502:	f000 faf9 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fad6 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 800050c:	20f0      	movs	r0, #240	; 0xf0
 800050e:	f000 faf3 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8000512:	201f      	movs	r0, #31
 8000514:	f000 fad0 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 8000518:	2021      	movs	r0, #33	; 0x21
 800051a:	f000 faed 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 800051e:	2003      	movs	r0, #3
 8000520:	f000 faca 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8000524:	202c      	movs	r0, #44	; 0x2c
 8000526:	f000 fae7 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 800052a:	20a0      	movs	r0, #160	; 0xa0
 800052c:	f000 fac4 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8000530:	203c      	movs	r0, #60	; 0x3c
 8000532:	f000 fae1 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 8000536:	2064      	movs	r0, #100	; 0x64
 8000538:	f000 fabe 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 800053c:	2032      	movs	r0, #50	; 0x32
 800053e:	f000 fadb 	bl	8000af8 <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e00c      	b.n	8000564 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <gde021a1_Init+0xd0>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	b29b      	uxth	r3, r3
 8000554:	0018      	movs	r0, r3
 8000556:	f000 faaf 	bl	8000ab8 <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	3201      	adds	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b59      	cmp	r3, #89	; 0x59
 800056a:	d9ee      	bls.n	800054a <gde021a1_Init+0xa2>
  }
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	08003ce8 	.word	0x08003ce8

0800057c <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	0002      	movs	r2, r0
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 8000588:	2024      	movs	r0, #36	; 0x24
 800058a:	f000 fab5 	bl	8000af8 <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b29b      	uxth	r3, r3
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fa8f 	bl	8000ab8 <EPD_IO_WriteData>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80005a2:	b5b0      	push	{r4, r5, r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	0005      	movs	r5, r0
 80005aa:	000c      	movs	r4, r1
 80005ac:	0010      	movs	r0, r2
 80005ae:	0019      	movs	r1, r3
 80005b0:	1dbb      	adds	r3, r7, #6
 80005b2:	1c2a      	adds	r2, r5, #0
 80005b4:	801a      	strh	r2, [r3, #0]
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	1c22      	adds	r2, r4, #0
 80005ba:	801a      	strh	r2, [r3, #0]
 80005bc:	1cbb      	adds	r3, r7, #2
 80005be:	1c02      	adds	r2, r0, #0
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	003b      	movs	r3, r7
 80005c4:	1c0a      	adds	r2, r1, #0
 80005c6:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 80005c8:	2044      	movs	r0, #68	; 0x44
 80005ca:	f000 fa95 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fa70 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 80005d8:	003b      	movs	r3, r7
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fa6b 	bl	8000ab8 <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 80005e2:	2045      	movs	r0, #69	; 0x45
 80005e4:	f000 fa88 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fa63 	bl	8000ab8 <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fa5e 	bl	8000ab8 <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 80005fc:	204e      	movs	r0, #78	; 0x4e
 80005fe:	f000 fa7b 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fa56 	bl	8000ab8 <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 800060c:	204f      	movs	r0, #79	; 0x4f
 800060e:	f000 fa73 	bl	8000af8 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8000612:	1dbb      	adds	r3, r7, #6
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fa4e 	bl	8000ab8 <EPD_IO_WriteData>
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bdb0      	pop	{r4, r5, r7, pc}

08000624 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 8000628:	23ac      	movs	r3, #172	; 0xac
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 8000634:	2312      	movs	r3, #18
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8000640:	2022      	movs	r0, #34	; 0x22
 8000642:	f000 fa59 	bl	8000af8 <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 8000646:	20c4      	movs	r0, #196	; 0xc4
 8000648:	f000 fa36 	bl	8000ab8 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800064c:	2020      	movs	r0, #32
 800064e:	f000 fa53 	bl	8000af8 <EPD_IO_WriteReg>
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 800065c:	2022      	movs	r0, #34	; 0x22
 800065e:	f000 fa4b 	bl	8000af8 <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 8000662:	2003      	movs	r0, #3
 8000664:	f000 fa28 	bl	8000ab8 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 8000668:	2020      	movs	r0, #32
 800066a:	f000 fa45 	bl	8000af8 <EPD_IO_WriteReg>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	0005      	movs	r5, r0
 800067c:	000c      	movs	r4, r1
 800067e:	0010      	movs	r0, r2
 8000680:	0019      	movs	r1, r3
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	1c2a      	adds	r2, r5, #0
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	1c22      	adds	r2, r4, #0
 800068c:	801a      	strh	r2, [r3, #0]
 800068e:	1cbb      	adds	r3, r7, #2
 8000690:	1c02      	adds	r2, r0, #0
 8000692:	801a      	strh	r2, [r3, #0]
 8000694:	003b      	movs	r3, r7
 8000696:	1c0a      	adds	r2, r1, #0
 8000698:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 800069e:	230f      	movs	r3, #15
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 80006a6:	2308      	movs	r3, #8
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 80006ae:	230d      	movs	r3, #13
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80006b6:	2024      	movs	r0, #36	; 0x24
 80006b8:	f000 fa1e 	bl	8000af8 <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 80006bc:	1cbb      	adds	r3, r7, #2
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2207      	movs	r2, #7
 80006c2:	4013      	ands	r3, r2
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d000      	beq.n	80006cc <gde021a1_DrawImage+0x58>
 80006ca:	e087      	b.n	80007dc <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	e073      	b.n	80007ba <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 80006d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	18d2      	adds	r2, r2, r3
 80006d8:	210f      	movs	r1, #15
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d05f      	beq.n	80007a8 <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80006e8:	230e      	movs	r3, #14
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e054      	b.n	800079c <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	e029      	b.n	800074c <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 80006f8:	230f      	movs	r3, #15
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	d00d      	beq.n	8000720 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 8000704:	2008      	movs	r0, #8
 8000706:	183a      	adds	r2, r7, r0
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2203      	movs	r2, #3
 8000710:	4393      	bics	r3, r2
 8000712:	b2d9      	uxtb	r1, r3
 8000714:	183a      	adds	r2, r7, r0
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	18d3      	adds	r3, r2, r3
 800071a:	1c0a      	adds	r2, r1, #0
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e00c      	b.n	800073a <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8000720:	2008      	movs	r0, #8
 8000722:	183a      	adds	r2, r7, r0
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	18d3      	adds	r3, r2, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2203      	movs	r2, #3
 800072c:	4313      	orrs	r3, r2
 800072e:	b2d9      	uxtb	r1, r3
 8000730:	183a      	adds	r2, r7, r0
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	18d3      	adds	r3, r2, r3
 8000736:	1c0a      	adds	r2, r1, #0
 8000738:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 800073a:	220f      	movs	r2, #15
 800073c:	18bb      	adds	r3, r7, r2
 800073e:	18ba      	adds	r2, r7, r2
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	0852      	lsrs	r2, r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	3301      	adds	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d9d2      	bls.n	80006f8 <gde021a1_DrawImage+0x84>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000752:	2108      	movs	r1, #8
 8000754:	187b      	adds	r3, r7, r1
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	019b      	lsls	r3, r3, #6
 800075a:	b25a      	sxtb	r2, r3
 800075c:	187b      	adds	r3, r7, r1
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25a      	sxtb	r2, r3
 8000768:	187b      	adds	r3, r7, r1
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b25a      	sxtb	r2, r3
 8000774:	187b      	adds	r3, r7, r1
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b25a      	sxtb	r2, r3
 800077e:	210d      	movs	r1, #13
 8000780:	187b      	adds	r3, r7, r1
 8000782:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 8000784:	187b      	adds	r3, r7, r1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f994 	bl	8000ab8 <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000790:	210e      	movs	r1, #14
 8000792:	187b      	adds	r3, r7, r1
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	187b      	adds	r3, r7, r1
 8000798:	3201      	adds	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	230e      	movs	r3, #14
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d9a5      	bls.n	80006f2 <gde021a1_DrawImage+0x7e>
 80007a6:	e005      	b.n	80007b4 <gde021a1_DrawImage+0x140>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 80007a8:	20ff      	movs	r0, #255	; 0xff
 80007aa:	f000 f985 	bl	8000ab8 <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	f000 f982 	bl	8000ab8 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	003b      	movs	r3, r7
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	1cba      	adds	r2, r7, #2
 80007c0:	8812      	ldrh	r2, [r2, #0]
 80007c2:	0892      	lsrs	r2, r2, #2
 80007c4:	b292      	uxth	r2, r2
 80007c6:	4353      	muls	r3, r2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	da00      	bge.n	80007ce <gde021a1_DrawImage+0x15a>
 80007cc:	3301      	adds	r3, #1
 80007ce:	105b      	asrs	r3, r3, #1
 80007d0:	001a      	movs	r2, r3
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d200      	bcs.n	80007da <gde021a1_DrawImage+0x166>
 80007d8:	e77b      	b.n	80006d2 <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 80007da:	e10f      	b.n	80009fc <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	e0fb      	b.n	80009da <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 80007e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	18d2      	adds	r2, r2, r3
 80007e8:	230f      	movs	r3, #15
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	1cbb      	adds	r3, r7, #2
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	3301      	adds	r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da00      	bge.n	8000804 <gde021a1_DrawImage+0x190>
 8000802:	3301      	adds	r3, #1
 8000804:	105b      	asrs	r3, r3, #1
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f7ff fd03 	bl	8000214 <__aeabi_uidivmod>
 800080e:	1e0b      	subs	r3, r1, #0
 8000810:	d100      	bne.n	8000814 <gde021a1_DrawImage+0x1a0>
 8000812:	e071      	b.n	80008f8 <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d05f      	beq.n	80008de <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 800081e:	230e      	movs	r3, #14
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e054      	b.n	80008d2 <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	e029      	b.n	8000882 <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 800082e:	230f      	movs	r3, #15
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2201      	movs	r2, #1
 8000836:	4013      	ands	r3, r2
 8000838:	d00d      	beq.n	8000856 <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 800083a:	2008      	movs	r0, #8
 800083c:	183a      	adds	r2, r7, r0
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2203      	movs	r2, #3
 8000846:	4393      	bics	r3, r2
 8000848:	b2d9      	uxtb	r1, r3
 800084a:	183a      	adds	r2, r7, r0
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	18d3      	adds	r3, r2, r3
 8000850:	1c0a      	adds	r2, r1, #0
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e00c      	b.n	8000870 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 8000856:	2008      	movs	r0, #8
 8000858:	183a      	adds	r2, r7, r0
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2203      	movs	r2, #3
 8000862:	4313      	orrs	r3, r2
 8000864:	b2d9      	uxtb	r1, r3
 8000866:	183a      	adds	r2, r7, r0
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	1c0a      	adds	r2, r1, #0
 800086e:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8000870:	220f      	movs	r2, #15
 8000872:	18bb      	adds	r3, r7, r2
 8000874:	18ba      	adds	r2, r7, r2
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	0852      	lsrs	r2, r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	3301      	adds	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d9d2      	bls.n	800082e <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000888:	2108      	movs	r1, #8
 800088a:	187b      	adds	r3, r7, r1
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	019b      	lsls	r3, r3, #6
 8000890:	b25a      	sxtb	r2, r3
 8000892:	187b      	adds	r3, r7, r1
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	b25b      	sxtb	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b25a      	sxtb	r2, r3
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b25a      	sxtb	r2, r3
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	78db      	ldrb	r3, [r3, #3]
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	210d      	movs	r1, #13
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 f8f9 	bl	8000ab8 <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80008c6:	210e      	movs	r1, #14
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	3201      	adds	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	230e      	movs	r3, #14
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d9a5      	bls.n	8000828 <gde021a1_DrawImage+0x1b4>
 80008dc:	e07a      	b.n	80009d4 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 80008de:	230f      	movs	r3, #15
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d000      	beq.n	80008ea <gde021a1_DrawImage+0x276>
 80008e8:	e074      	b.n	80009d4 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	f000 f8e4 	bl	8000ab8 <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 80008f0:	20ff      	movs	r0, #255	; 0xff
 80008f2:	f000 f8e1 	bl	8000ab8 <EPD_IO_WriteData>
 80008f6:	e06d      	b.n	80009d4 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	1cbb      	adds	r3, r7, #2
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	b29b      	uxth	r3, r3
 8000904:	3301      	adds	r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	da00      	bge.n	800090c <gde021a1_DrawImage+0x298>
 800090a:	3301      	adds	r3, #1
 800090c:	105b      	asrs	r3, r3, #1
 800090e:	0019      	movs	r1, r3
 8000910:	0010      	movs	r0, r2
 8000912:	f7ff fc7f 	bl	8000214 <__aeabi_uidivmod>
 8000916:	1e0b      	subs	r3, r1, #0
 8000918:	d15c      	bne.n	80009d4 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 800091a:	230f      	movs	r3, #15
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2bf0      	cmp	r3, #240	; 0xf0
 8000922:	d04f      	beq.n	80009c4 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e029      	b.n	800097e <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 800092a:	230f      	movs	r3, #15
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2201      	movs	r2, #1
 8000932:	4013      	ands	r3, r2
 8000934:	d00d      	beq.n	8000952 <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 8000936:	2008      	movs	r0, #8
 8000938:	183a      	adds	r2, r7, r0
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	18d3      	adds	r3, r2, r3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2203      	movs	r2, #3
 8000942:	4393      	bics	r3, r2
 8000944:	b2d9      	uxtb	r1, r3
 8000946:	183a      	adds	r2, r7, r0
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	1c0a      	adds	r2, r1, #0
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e00c      	b.n	800096c <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 8000952:	2008      	movs	r0, #8
 8000954:	183a      	adds	r2, r7, r0
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2203      	movs	r2, #3
 800095e:	4313      	orrs	r3, r2
 8000960:	b2d9      	uxtb	r1, r3
 8000962:	183a      	adds	r2, r7, r0
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	1c0a      	adds	r2, r1, #0
 800096a:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 800096c:	220f      	movs	r2, #15
 800096e:	18bb      	adds	r3, r7, r2
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	0852      	lsrs	r2, r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	3301      	adds	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d9d2      	bls.n	800092a <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000984:	2108      	movs	r1, #8
 8000986:	187b      	adds	r3, r7, r1
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	019b      	lsls	r3, r3, #6
 800098c:	b25a      	sxtb	r2, r3
 800098e:	187b      	adds	r3, r7, r1
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	b25b      	sxtb	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b25a      	sxtb	r2, r3
 800099a:	187b      	adds	r3, r7, r1
 800099c:	789b      	ldrb	r3, [r3, #2]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b25a      	sxtb	r2, r3
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	78db      	ldrb	r3, [r3, #3]
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b25a      	sxtb	r2, r3
 80009b0:	210d      	movs	r1, #13
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 f87b 	bl	8000ab8 <EPD_IO_WriteData>
 80009c2:	e007      	b.n	80009d4 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2bf0      	cmp	r3, #240	; 0xf0
 80009cc:	d102      	bne.n	80009d4 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	f000 f872 	bl	8000ab8 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3301      	adds	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	003b      	movs	r3, r7
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	1cba      	adds	r2, r7, #2
 80009e0:	8812      	ldrh	r2, [r2, #0]
 80009e2:	0892      	lsrs	r2, r2, #2
 80009e4:	b292      	uxth	r2, r2
 80009e6:	3201      	adds	r2, #1
 80009e8:	4353      	muls	r3, r2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da00      	bge.n	80009f0 <gde021a1_DrawImage+0x37c>
 80009ee:	3301      	adds	r3, #1
 80009f0:	105b      	asrs	r3, r3, #1
 80009f2:	001a      	movs	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d200      	bcs.n	80009fc <gde021a1_DrawImage+0x388>
 80009fa:	e6f2      	b.n	80007e2 <gde021a1_DrawImage+0x16e>
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b006      	add	sp, #24
 8000a02:	bdb0      	pop	{r4, r5, r7, pc}

08000a04 <LoopDelay>:
#define GLUE(a, b) a##b
#define PIN_SET(a) do {GLUE(a, _GPIO_PORT)->BSRR = (1 << GLUE(a, _PIN));} while(0)
#define PIN_CLR(a) do {GLUE(a, _GPIO_PORT)->BSRR = (1 << (GLUE(a, _PIN) + 16));} while(0)
#define PIN_GET(a) (!!(GLUE(a, _GPIO_PORT)->IDR & (1 << GLUE(a, _PIN))))

void LoopDelay(volatile uint32_t n) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 8000a0c:	e002      	b.n	8000a14 <LoopDelay+0x10>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f9      	bne.n	8000a0e <LoopDelay+0xa>
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SPIx_Init>:
#define DISCOVERY_SPIx_MOSI_GPIO_PORT           GPIOB
#define DISCOVERY_SPIx_MOSI_PIN                 5
// no - there's no MISO connected, and PB4 is used for LED on the DISCO
// #define DISCOVERY_SPIx_MISO_PIN                 GPIO_PIN_4                 /* PB.04 */

static void SPIx_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
  DISCOVERY_SPIx->CR1 = 0
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <SPIx_Init+0x10>)
 8000a2a:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <SPIx_Init+0x14>)
 8000a2c:	601a      	str	r2, [r3, #0]
    | ( 0 * SPI_CR1_CRCNEXT  )         // Transmit CRC next
    | ( 0 * SPI_CR1_CRCEN    )         // Hardware CRC calculation enable
    | ( 0 * SPI_CR1_BIDIOE   )         // Output enable in bidirectional mode
    | ( 0 * SPI_CR1_BIDIMODE )         // Bidirectional data mode enable
  ;
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013000 	.word	0x40013000
 8000a38:	00000357 	.word	0x00000357

08000a3c <SPIx_Write>:
static uint32_t SPIx_Read(void) {
  return 0;
}


static void SPIx_Write(uint8_t n) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
  DISCOVERY_SPIx->DR = n;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <SPIx_Write+0x38>)
 8000a4a:	1dfa      	adds	r2, r7, #7
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	60da      	str	r2, [r3, #12]
  while (!(DISCOVERY_SPIx->SR & SPI_SR_TXE)) {
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <SPIx_Write+0x38>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2202      	movs	r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	d0fa      	beq.n	8000a52 <SPIx_Write+0x16>
    // wait until empty
  }
  while ((DISCOVERY_SPIx->SR & SPI_SR_BSY)) {
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SPIx_Write+0x38>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	4013      	ands	r3, r2
 8000a66:	d1fa      	bne.n	8000a5e <SPIx_Write+0x22>
    // wait until not busy
  }
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40013000 	.word	0x40013000

08000a78 <EPD_IO_Init>:

#define EPD_PWR_GPIO_PORT                       GPIOB
#define EPD_PWR_PIN                             10


void EPD_IO_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  // pins pinit - see gpio-clock init and gpio pins init in main()

  /* Enable Display */
  PIN_CLR(EPD_PWR);
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <EPD_IO_Init+0x3c>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	04d2      	lsls	r2, r2, #19
 8000a82:	619a      	str	r2, [r3, #24]

  /* Set or Reset the control line */
  PIN_CLR(EPD_CS);
 8000a84:	23a0      	movs	r3, #160	; 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0612      	lsls	r2, r2, #24
 8000a8c:	619a      	str	r2, [r3, #24]
  PIN_SET(EPD_CS);
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0212      	lsls	r2, r2, #8
 8000a96:	619a      	str	r2, [r3, #24]

  /* EPD reset pin mamagement */
  PIN_SET(EPD_RESET);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <EPD_IO_Init+0x3c>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	619a      	str	r2, [r3, #24]
  EPD_Delay(10);
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f000 f84a 	bl	8000b38 <EPD_Delay>

  PIN_SET(DISCOVERY_SPIx_SCK);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <EPD_IO_Init+0x3c>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	619a      	str	r2, [r3, #24]
  /* SPI Configuration */
  SPIx_Init();
 8000aaa:	f7ff ffbb 	bl	8000a24 <SPIx_Init>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	50000400 	.word	0x50000400

08000ab8 <EPD_IO_WriteData>:



void EPD_IO_WriteData(uint16_t n) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	0002      	movs	r2, r0
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8000ac4:	23a0      	movs	r3, #160	; 0xa0
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0612      	lsls	r2, r2, #24
 8000acc:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to High */
  PIN_SET(EPD_DC);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <EPD_IO_WriteData+0x3c>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	619a      	str	r2, [r3, #24]
  /* Send Data */
  SPIx_Write(n);
 8000ad6:	1dbb      	adds	r3, r7, #6
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ffad 	bl	8000a3c <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0212      	lsls	r2, r2, #8
 8000aea:	619a      	str	r2, [r3, #24]
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	50000400 	.word	0x50000400

08000af8 <EPD_IO_WriteReg>:
/**
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t n) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0002      	movs	r2, r0
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0612      	lsls	r2, r2, #24
 8000b0c:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to Low */
  PIN_CLR(EPD_DC);
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <EPD_IO_WriteReg+0x3c>)
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	0512      	lsls	r2, r2, #20
 8000b14:	619a      	str	r2, [r3, #24]
  /* Send Command */
  SPIx_Write(n);
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff ff8e 	bl	8000a3c <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	0212      	lsls	r2, r2, #8
 8000b28:	619a      	str	r2, [r3, #24]
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	50000400 	.word	0x50000400

08000b38 <EPD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t n) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  LoopDelay(n * 3000);  // some fancy factor to get it roughly in ms
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <EPD_Delay+0x1c>)
 8000b44:	4353      	muls	r3, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff ff5c 	bl	8000a04 <LoopDelay>
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	00000bb8 	.word	0x00000bb8

08000b58 <Init_ePaper_GPIOs>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Init_ePaper_GPIOs(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	/*!< Set MSION bit */
	RCC->CR |= (uint32_t)0x00000100;
 8000b5c:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0049      	lsls	r1, r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]

	/*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
	RCC->CFGR &= (uint32_t) 0x88FF400C;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b70:	4935      	ldr	r1, [pc, #212]	; (8000c48 <Init_ePaper_GPIOs+0xf0>)
 8000b72:	400a      	ands	r2, r1
 8000b74:	60da      	str	r2, [r3, #12]

	/*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFF6;
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b7c:	4933      	ldr	r1, [pc, #204]	; (8000c4c <Init_ePaper_GPIOs+0xf4>)
 8000b7e:	400a      	ands	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]

	/*!< Reset HSI48ON  bit */
	RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	609a      	str	r2, [r3, #8]

	/*!< Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b94:	492e      	ldr	r1, [pc, #184]	; (8000c50 <Init_ePaper_GPIOs+0xf8>)
 8000b96:	400a      	ands	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]

	/*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
	RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000ba0:	492c      	ldr	r1, [pc, #176]	; (8000c54 <Init_ePaper_GPIOs+0xfc>)
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	60da      	str	r2, [r3, #12]

	/*!< Disable all interrupts */
	RCC->CIER = 0x00000000;
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]

	RCC->IOPENR |= 0
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
			| RCC_IOPENR_GPIOAEN
			| RCC_IOPENR_GPIOBEN
	  ;
	RCC->APB2ENR |= 0
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <Init_ePaper_GPIOs+0xec>)
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	0149      	lsls	r1, r1, #5
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
			| RCC_APB2ENR_SPI1EN
	  ;

	GPIOA->MODER = (GPIOA->MODER
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE5)      // RED LED
			& (~GPIO_MODER_MODE8)      // EPD_BUSY
			& (~GPIO_MODER_MODE15)     // EPD_CS
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <Init_ePaper_GPIOs+0x100>)
 8000bce:	401a      	ands	r2, r3
	GPIOA->MODER = (GPIOA->MODER
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
	) | (0
 8000bd4:	4921      	ldr	r1, [pc, #132]	; (8000c5c <Init_ePaper_GPIOs+0x104>)
 8000bd6:	430a      	orrs	r2, r1
	GPIOA->MODER = (GPIOA->MODER
 8000bd8:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE5_0)   // RED LED
			| (GPIO_Mode_In  * GPIO_MODER_MODE8_0)   // EPD_BUSY
			| (GPIO_Mode_Out * GPIO_MODER_MODE15_0)  // EPD_CS
	);

	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8000bda:	23a0      	movs	r3, #160	; 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
			& (~GPIO_OSPEEDER_OSPEED15)    // EPD_CS
	) | (0
 8000be4:	21c0      	movs	r1, #192	; 0xc0
 8000be6:	0609      	lsls	r1, r1, #24
 8000be8:	430a      	orrs	r2, r1
	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8000bea:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED15_0)  // EPD_CS
	);
	GPIOA->PUPDR = (GPIOA->PUPDR
 8000bec:	23a0      	movs	r3, #160	; 0xa0
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD8)    // EPD_BUSY
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <Init_ePaper_GPIOs+0x108>)
 8000bf4:	401a      	ands	r2, r3
	GPIOA->PUPDR = (GPIOA->PUPDR
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
	) | (0
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	0289      	lsls	r1, r1, #10
 8000bfe:	430a      	orrs	r2, r1
	GPIOA->PUPDR = (GPIOA->PUPDR
 8000c00:	60da      	str	r2, [r3, #12]
			| (GPIO_PullDown * GPIO_PUPDR_PUPD8_0)  // EPD_BUSY
	);

	GPIOB->MODER = (GPIOB->MODER
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE4)      // GREEN LED
			& (~GPIO_MODER_MODE2)      // EPD_RESET
			& (~GPIO_MODER_MODE10)     // EPD_PWR
			& (~GPIO_MODER_MODE11)     // EPD_DC
			& (~GPIO_MODER_MODE3)      // SPIx_SCK
			& (~GPIO_MODER_MODE5)      // SPIx_MOSI
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <Init_ePaper_GPIOs+0x110>)
 8000c08:	401a      	ands	r2, r3
	GPIOB->MODER = (GPIOB->MODER
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
	) | (0
 8000c0c:	4917      	ldr	r1, [pc, #92]	; (8000c6c <Init_ePaper_GPIOs+0x114>)
 8000c0e:	430a      	orrs	r2, r1
	GPIOB->MODER = (GPIOB->MODER
 8000c10:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE10_0)  // EPD_PWR
			| (GPIO_Mode_Out * GPIO_MODER_MODE11_0)  // EPD_DC
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE3_0)  // SPIx_SCK
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE5_0)  // SPIx_MOSI
	);
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
			& (~GPIO_OSPEEDER_OSPEED2)     // EPD_RESET
			& (~GPIO_OSPEEDER_OSPEED10)    // EPD_PWR
			& (~GPIO_OSPEEDER_OSPEED11)    // EPD_DC
			& (~GPIO_OSPEEDER_OSPEED3)     // SPIx_SCK
			& (~GPIO_OSPEEDER_OSPEED5)     // SPIx_MOSI
	) | (0
 8000c18:	4915      	ldr	r1, [pc, #84]	; (8000c70 <Init_ePaper_GPIOs+0x118>)
 8000c1a:	430a      	orrs	r2, r1
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8000c1c:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED10_0)  // EPD_PWR
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED11_0)  // EPD_DC
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED3_0)   // SPIx_SCK
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED5_0)   // SPIx_MOSI
	);
	GPIOB->PUPDR = (GPIOB->PUPDR
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
 8000c20:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD3)    // SPIx_SCK
			& (~GPIO_PUPDR_PUPD5)    // SPIx_MOSI
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <Init_ePaper_GPIOs+0x11c>)
 8000c24:	401a      	ands	r2, r3
	GPIOB->PUPDR = (GPIOB->PUPDR
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
	) | (0
 8000c28:	2184      	movs	r1, #132	; 0x84
 8000c2a:	0109      	lsls	r1, r1, #4
 8000c2c:	430a      	orrs	r2, r1
	GPIOB->PUPDR = (GPIOB->PUPDR
 8000c2e:	60da      	str	r2, [r3, #12]
			| (GPIO_PullUp   * GPIO_PUPDR_PUPD3_0)  // SPIx_SCK
			| (GPIO_PullDown * GPIO_PUPDR_PUPD5_0)  // SPIx_MOSI
	);
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <Init_ePaper_GPIOs+0x10c>)
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL3_0))    // SPIx_SCK
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL5_0))    // SPIx_MOSI
	) | (0
 8000c36:	4910      	ldr	r1, [pc, #64]	; (8000c78 <Init_ePaper_GPIOs+0x120>)
 8000c38:	400a      	ands	r2, r1
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8000c3a:	621a      	str	r2, [r3, #32]
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL3_0)  // SPIx_SCK
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL5_0)  // SPIx_MOSI
	);
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40021000 	.word	0x40021000
 8000c48:	88ff400c 	.word	0x88ff400c
 8000c4c:	fef6fff6 	.word	0xfef6fff6
 8000c50:	fffbffff 	.word	0xfffbffff
 8000c54:	ff02ffff 	.word	0xff02ffff
 8000c58:	3ffcf3ff 	.word	0x3ffcf3ff
 8000c5c:	40000400 	.word	0x40000400
 8000c60:	fffcffff 	.word	0xfffcffff
 8000c64:	50000400 	.word	0x50000400
 8000c68:	ff0ff00f 	.word	0xff0ff00f
 8000c6c:	00500990 	.word	0x00500990
 8000c70:	00f00cf0 	.word	0x00f00cf0
 8000c74:	fffff33f 	.word	0xfffff33f
 8000c78:	ff0f0fff 	.word	0xff0f0fff

08000c7c <main>:

int main(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t buf[5], res;

	HAL_Init();
 8000c82:	f000 fb23 	bl	80012cc <HAL_Init>

	Init_ePaper_GPIOs();
 8000c86:	f7ff ff67 	bl	8000b58 <Init_ePaper_GPIOs>

	/* Configure the system clock */
	SystemClock_Config();
 8000c8a:	f000 f851 	bl	8000d30 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c8e:	f000 f8a3 	bl	8000dd8 <MX_GPIO_Init>

	/* Initialize the EPD */
	BSP_EPD_Init();
 8000c92:	f000 f8ef 	bl	8000e74 <BSP_EPD_Init>

	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000c96:	20ff      	movs	r0, #255	; 0xff
 8000c98:	f000 f930 	bl	8000efc <BSP_EPD_Clear>

	while(1)
	{
		BSP_EPD_DisplayStringAt(0,0,"HELLO WORLD!", CENTER_MODE);
 8000c9c:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <main+0xa4>)
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f986 	bl	8000fb4 <BSP_EPD_DisplayStringAt>
		BSP_EPD_RefreshDisplay();
 8000ca8:	f000 fa36 	bl	8001118 <BSP_EPD_RefreshDisplay>
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000cac:	20ff      	movs	r0, #255	; 0xff
 8000cae:	f000 f925 	bl	8000efc <BSP_EPD_Clear>

		HAL_Delay(2000);
 8000cb2:	23fa      	movs	r3, #250	; 0xfa
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fb78 	bl	80013ac <HAL_Delay>
		BSP_EPD_DisplayStringAt(0,0,"I LOVE STM32", CENTER_MODE);
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <main+0xa8>)
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f976 	bl	8000fb4 <BSP_EPD_DisplayStringAt>
		BSP_EPD_RefreshDisplay();
 8000cc8:	f000 fa26 	bl	8001118 <BSP_EPD_RefreshDisplay>
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	f000 f915 	bl	8000efc <BSP_EPD_Clear>

		HAL_Delay(2000);
 8000cd2:	23fa      	movs	r3, #250	; 0xfa
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fb68 	bl	80013ac <HAL_Delay>
		BSP_EPD_DisplayStringAt(0,0,"I LOVE C++", CENTER_MODE);
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <main+0xac>)
 8000cde:	2301      	movs	r3, #1
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f966 	bl	8000fb4 <BSP_EPD_DisplayStringAt>
		BSP_EPD_RefreshDisplay();
 8000ce8:	f000 fa16 	bl	8001118 <BSP_EPD_RefreshDisplay>
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	f000 f905 	bl	8000efc <BSP_EPD_Clear>

		HAL_Delay(2000);
 8000cf2:	23fa      	movs	r3, #250	; 0xfa
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fb58 	bl	80013ac <HAL_Delay>
		BSP_EPD_DisplayStringAt(0,0,"45 Celsius", CENTER_MODE);
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <main+0xb0>)
 8000cfe:	2301      	movs	r3, #1
 8000d00:	2100      	movs	r1, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f956 	bl	8000fb4 <BSP_EPD_DisplayStringAt>
		BSP_EPD_RefreshDisplay();
 8000d08:	f000 fa06 	bl	8001118 <BSP_EPD_RefreshDisplay>
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	f000 f8f5 	bl	8000efc <BSP_EPD_Clear>

		HAL_Delay(2000);
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fb48 	bl	80013ac <HAL_Delay>
		BSP_EPD_DisplayStringAt(0,0,"HELLO WORLD!", CENTER_MODE);
 8000d1c:	e7be      	b.n	8000c9c <main+0x20>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	08002490 	.word	0x08002490
 8000d24:	080024a0 	.word	0x080024a0
 8000d28:	080024b0 	.word	0x080024b0
 8000d2c:	080024bc 	.word	0x080024bc

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b095      	sub	sp, #84	; 0x54
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	2418      	movs	r4, #24
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2338      	movs	r3, #56	; 0x38
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f001 fb91 	bl	8002468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f001 fb8a 	bl	8002468 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <SystemClock_Config+0xa0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <SystemClock_Config+0xa4>)
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <SystemClock_Config+0xa0>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0109      	lsls	r1, r1, #4
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d66:	0021      	movs	r1, r4
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2201      	movs	r2, #1
 8000d72:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	22a0      	movs	r2, #160	; 0xa0
 8000d7e:	0212      	lsls	r2, r2, #8
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fd96 	bl	80018bc <HAL_RCC_OscConfig>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d94:	f000 f868 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2100      	movs	r1, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 f942 	bl	8002044 <HAL_RCC_ClockConfig>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dc4:	f000 f850 	bl	8000e68 <Error_Handler>
  }
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b015      	add	sp, #84	; 0x54
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	40007000 	.word	0x40007000
 8000dd4:	ffffe7ff 	.word	0xffffe7ff

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f001 fb3e 	bl	8002468 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4013      	ands	r3, r2
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e04:	23a0      	movs	r3, #160	; 0xa0
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fd38 	bl	8001882 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2204      	movs	r2, #4
 8000e16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	605a      	str	r2, [r3, #4]
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	1d3a      	adds	r2, r7, #4
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fb95 	bl	800155c <HAL_GPIO_Init>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
  GPIO_HIGH(GPIOA, GPIO_PIN_2);
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	2204      	movs	r2, #4
 8000e38:	619a      	str	r2, [r3, #24]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	1d3a      	adds	r2, r7, #4
 8000e4e:	23a0      	movs	r3, #160	; 0xa0
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fb81 	bl	800155c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b006      	add	sp, #24
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40021000 	.word	0x40021000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  uint8_t ret = EPD_ERROR;
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]

  /* Default value for the Font */
  pFont = &Font16;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <BSP_EPD_Init+0x40>)
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <BSP_EPD_Init+0x44>)
 8000e84:	601a      	str	r2, [r3, #0]

  epd_drv = &gde021a1_drv;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <BSP_EPD_Init+0x48>)
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <BSP_EPD_Init+0x4c>)
 8000e8a:	601a      	str	r2, [r3, #0]

  /* EPD Init */
  epd_drv->Init();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <BSP_EPD_Init+0x48>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4798      	blx	r3

  /* Clear the EPD screen */
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000e94:	20ff      	movs	r0, #255	; 0xff
 8000e96:	f000 f831 	bl	8000efc <BSP_EPD_Clear>

  /* Initialize the font */
  BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <BSP_EPD_Init+0x50>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 f81f 	bl	8000ee0 <BSP_EPD_SetFont>

  ret = EPD_OK;
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

  return ret;
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000058 	.word	0x20000058
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000005c 	.word	0x2000005c
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <BSP_EPD_GetXSize>:
  * @brief  Gets the EPD X size.
  * @param  None
  * @retval EPD X size
  */
uint32_t BSP_EPD_GetXSize(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelWidth());
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <BSP_EPD_GetXSize+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4798      	blx	r3
 8000ed4:	0003      	movs	r3, r0
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000005c 	.word	0x2000005c

08000ee0 <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <BSP_EPD_SetFont+0x18>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	20000058 	.word	0x20000058

08000efc <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	0002      	movs	r2, r0
 8000f04:	1dbb      	adds	r3, r7, #6
 8000f06:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <BSP_EPD_Clear+0x50>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689c      	ldr	r4, [r3, #8]
 8000f12:	2311      	movs	r3, #17
 8000f14:	22ab      	movs	r2, #171	; 0xab
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e00a      	b.n	8000f38 <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <BSP_EPD_Clear+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	1dba      	adds	r2, r7, #6
 8000f2a:	8812      	ldrh	r2, [r2, #0]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	0010      	movs	r0, r2
 8000f30:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3301      	adds	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <BSP_EPD_Clear+0x54>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d9f0      	bls.n	8000f22 <BSP_EPD_Clear+0x26>
  }
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b005      	add	sp, #20
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	2000005c 	.word	0x2000005c
 8000f50:	00000c17 	.word	0x00000c17

08000f54 <BSP_EPD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void BSP_EPD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	0004      	movs	r4, r0
 8000f5c:	0008      	movs	r0, r1
 8000f5e:	0011      	movs	r1, r2
 8000f60:	1dbb      	adds	r3, r7, #6
 8000f62:	1c22      	adds	r2, r4, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	1c02      	adds	r2, r0, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
 8000f6c:	1cfb      	adds	r3, r7, #3
 8000f6e:	1c0a      	adds	r2, r1, #0
 8000f70:	701a      	strb	r2, [r3, #0]
  Ascii -= 32;
 8000f72:	1cfb      	adds	r3, r7, #3
 8000f74:	1cfa      	adds	r2, r7, #3
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	3a20      	subs	r2, #32
 8000f7a:	701a      	strb	r2, [r3, #0]
  
  DrawChar(Xpos, Ypos, &pFont->table[Ascii * ((pFont->Height) * (pFont->Width))]);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <BSP_EPD_DisplayChar+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	1cfb      	adds	r3, r7, #3
 8000f84:	7819      	ldrb	r1, [r3, #0]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <BSP_EPD_DisplayChar+0x5c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	88db      	ldrh	r3, [r3, #6]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <BSP_EPD_DisplayChar+0x5c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	4343      	muls	r3, r0
 8000f96:	434b      	muls	r3, r1
 8000f98:	18d2      	adds	r2, r2, r3
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	8819      	ldrh	r1, [r3, #0]
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 f8da 	bl	800115c <DrawChar>
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	20000058 	.word	0x20000058

08000fb4 <BSP_EPD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE  
  * @retval None
  */
void BSP_EPD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0004      	movs	r4, r0
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	230e      	movs	r3, #14
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	1c22      	adds	r2, r4, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
 8000fca:	230c      	movs	r3, #12
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	1c02      	adds	r2, r0, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	1c0a      	adds	r2, r1, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
  uint16_t refcolumn = 1, i = 0;
 8000fd8:	231e      	movs	r3, #30
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	801a      	strh	r2, [r3, #0]
 8000fe0:	231c      	movs	r3, #28
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0, xsize = 0; 
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000ff4:	e002      	b.n	8000ffc <BSP_EPD_DisplayStringAt+0x48>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	617a      	str	r2, [r7, #20]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f6      	bne.n	8000ff6 <BSP_EPD_DisplayStringAt+0x42>
  
  /* Characters number per line */
  xsize = (BSP_EPD_GetXSize()/pFont->Width);
 8001008:	f7ff ff5e 	bl	8000ec8 <BSP_EPD_GetXSize>
 800100c:	0002      	movs	r2, r0
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <BSP_EPD_DisplayStringAt+0x160>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	889b      	ldrh	r3, [r3, #4]
 8001014:	0019      	movs	r1, r3
 8001016:	0010      	movs	r0, r2
 8001018:	f7ff f876 	bl	8000108 <__udivsi3>
 800101c:	0003      	movs	r3, r0
 800101e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d016      	beq.n	8001056 <BSP_EPD_DisplayStringAt+0xa2>
 8001028:	dc2d      	bgt.n	8001086 <BSP_EPD_DisplayStringAt+0xd2>
 800102a:	2b01      	cmp	r3, #1
 800102c:	d002      	beq.n	8001034 <BSP_EPD_DisplayStringAt+0x80>
 800102e:	2b02      	cmp	r3, #2
 8001030:	d018      	beq.n	8001064 <BSP_EPD_DisplayStringAt+0xb0>
 8001032:	e028      	b.n	8001086 <BSP_EPD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* pFont->Width) / 2;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	1ad2      	subs	r2, r2, r3
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <BSP_EPD_DisplayStringAt+0x160>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	889b      	ldrh	r3, [r3, #4]
 8001040:	4353      	muls	r3, r2
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	b299      	uxth	r1, r3
 8001046:	231e      	movs	r3, #30
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	220e      	movs	r2, #14
 800104c:	18ba      	adds	r2, r7, r2
 800104e:	8812      	ldrh	r2, [r2, #0]
 8001050:	188a      	adds	r2, r1, r2
 8001052:	801a      	strh	r2, [r3, #0]
      break;
 8001054:	e01e      	b.n	8001094 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001056:	231e      	movs	r3, #30
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	220e      	movs	r2, #14
 800105c:	18ba      	adds	r2, r7, r2
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	801a      	strh	r2, [r3, #0]
      break;
 8001062:	e017      	b.n	8001094 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*pFont->Width);
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <BSP_EPD_DisplayStringAt+0x160>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	889b      	ldrh	r3, [r3, #4]
 8001072:	4353      	muls	r3, r2
 8001074:	b299      	uxth	r1, r3
 8001076:	231e      	movs	r3, #30
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	220e      	movs	r2, #14
 800107c:	18ba      	adds	r2, r7, r2
 800107e:	8812      	ldrh	r2, [r2, #0]
 8001080:	1a8a      	subs	r2, r1, r2
 8001082:	801a      	strh	r2, [r3, #0]
      break;
 8001084:	e006      	b.n	8001094 <BSP_EPD_DisplayStringAt+0xe0>
    }    
  default:
    {
      refcolumn = Xpos;
 8001086:	231e      	movs	r3, #30
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	220e      	movs	r2, #14
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	8812      	ldrh	r2, [r2, #0]
 8001090:	801a      	strh	r2, [r3, #0]
      break;
 8001092:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Send the string character by character on EPD */
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8001094:	e01b      	b.n	80010ce <BSP_EPD_DisplayStringAt+0x11a>
  {
    /* Display one character on EPD */
    BSP_EPD_DisplayChar(refcolumn, Ypos, *Text);
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	230c      	movs	r3, #12
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	8819      	ldrh	r1, [r3, #0]
 80010a0:	241e      	movs	r4, #30
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <BSP_EPD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += pFont->Width;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <BSP_EPD_DisplayStringAt+0x160>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	8899      	ldrh	r1, [r3, #4]
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	193a      	adds	r2, r7, r4
 80010b6:	8812      	ldrh	r2, [r2, #0]
 80010b8:	188a      	adds	r2, r1, r2
 80010ba:	801a      	strh	r2, [r3, #0]
    /* Point on the next character */
    Text++;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	3301      	adds	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
    i++;
 80010c2:	211c      	movs	r1, #28
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	3201      	adds	r2, #1
 80010cc:	801a      	strh	r2, [r3, #0]
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	4193      	sbcs	r3, r2
 80010d6:	b2dc      	uxtb	r4, r3
 80010d8:	f7ff fef6 	bl	8000ec8 <BSP_EPD_GetXSize>
 80010dc:	0001      	movs	r1, r0
 80010de:	231c      	movs	r3, #28
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	881a      	ldrh	r2, [r3, #0]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <BSP_EPD_DisplayStringAt+0x160>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	4353      	muls	r3, r2
 80010ec:	1acb      	subs	r3, r1, r3
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	0c1a      	lsrs	r2, r3, #16
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <BSP_EPD_DisplayStringAt+0x160>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	0019      	movs	r1, r3
 80010fa:	2300      	movs	r3, #0
 80010fc:	428a      	cmp	r2, r1
 80010fe:	415b      	adcs	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4023      	ands	r3, r4
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1c5      	bne.n	8001096 <BSP_EPD_DisplayStringAt+0xe2>
  }
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b009      	add	sp, #36	; 0x24
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	20000058 	.word	0x20000058

08001118 <BSP_EPD_RefreshDisplay>:
  * @brief  Updates the display from the data located into the RAM.
  * @param  None
  * @retval None
  */
void BSP_EPD_RefreshDisplay(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Refresh display sequence */
  epd_drv->RefreshDisplay();
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <BSP_EPD_RefreshDisplay+0x3c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4798      	blx	r3

  /* Poll on the BUSY signal and wait for the EPD to be ready */
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	005a      	lsls	r2, r3, #1
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f000 fb89 	bl	8001848 <HAL_GPIO_ReadPin>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d1f5      	bne.n	8001126 <BSP_EPD_RefreshDisplay+0xe>

  /*  EPD reset pin mamagement */
  EPD_RESET_HIGH();
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <BSP_EPD_RefreshDisplay+0x40>)
 800113c:	2201      	movs	r2, #1
 800113e:	2104      	movs	r1, #4
 8001140:	0018      	movs	r0, r3
 8001142:	f000 fb9e 	bl	8001882 <HAL_GPIO_WritePin>

  /* Add a 10 ms Delay after EPD pin Reset */
  EPD_Delay(10);
 8001146:	200a      	movs	r0, #10
 8001148:	f7ff fcf6 	bl	8000b38 <EPD_Delay>
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	2000005c 	.word	0x2000005c
 8001158:	50000400 	.word	0x50000400

0800115c <DrawChar>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 17
  * @param  c: pointer to the character data
  * @retval None
  */
static void  DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	603a      	str	r2, [r7, #0]
 8001164:	1dbb      	adds	r3, r7, #6
 8001166:	1c02      	adds	r2, r0, #0
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	1c0a      	adds	r2, r1, #0
 800116e:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  uint32_t data_length = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  uint16_t height = 0;
 8001178:	210e      	movs	r1, #14
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	801a      	strh	r2, [r3, #0]
  uint16_t width = 0;
 8001180:	200c      	movs	r0, #12
 8001182:	183b      	adds	r3, r7, r0
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]

  width  = pFont->Width;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <DrawChar+0xb4>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	183b      	adds	r3, r7, r0
 800118e:	8892      	ldrh	r2, [r2, #4]
 8001190:	801a      	strh	r2, [r3, #0]
  height = pFont->Height;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <DrawChar+0xb4>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	187b      	adds	r3, r7, r1
 8001198:	88d2      	ldrh	r2, [r2, #6]
 800119a:	801a      	strh	r2, [r3, #0]
  
  /* Set the Character display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos + width - 1), (Ypos + height - 1));
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <DrawChar+0xb8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689c      	ldr	r4, [r3, #8]
 80011a2:	1dba      	adds	r2, r7, #6
 80011a4:	183b      	adds	r3, r7, r0
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	18d3      	adds	r3, r2, r3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3b01      	subs	r3, #1
 80011b0:	b29d      	uxth	r5, r3
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	000e      	movs	r6, r1
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	8812      	ldrh	r2, [r2, #0]
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	8819      	ldrh	r1, [r3, #0]
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	8818      	ldrh	r0, [r3, #0]
 80011cc:	0013      	movs	r3, r2
 80011ce:	002a      	movs	r2, r5
 80011d0:	47a0      	blx	r4
  
  data_length = (height * width);
 80011d2:	19bb      	adds	r3, r7, r6
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	200c      	movs	r0, #12
 80011d8:	183a      	adds	r2, r7, r0
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	4353      	muls	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
    
  for(index = 0; index < data_length; index++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e00b      	b.n	80011fe <DrawChar+0xa2>
  {
    epd_drv->WritePixel(c[index]);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <DrawChar+0xb8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	188a      	adds	r2, r1, r2
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	0010      	movs	r0, r2
 80011f6:	4798      	blx	r3
  for(index = 0; index < data_length; index++)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3ef      	bcc.n	80011e6 <DrawChar+0x8a>
  }
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b007      	add	sp, #28
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001210:	20000058 	.word	0x20000058
 8001214:	2000005c 	.word	0x2000005c

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_MspInit+0x24>)
 800121e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x24>)
 8001222:	2101      	movs	r1, #1
 8001224:	430a      	orrs	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_MspInit+0x24>)
 800122a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_MspInit+0x24>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0549      	lsls	r1, r1, #21
 8001232:	430a      	orrs	r2, r1
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f886 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f7ff fff7 	bl	800126e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f001 f8bb 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fce7 	bl	8000c7c <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80012bc:	08003d70 	.word	0x08003d70
  ldr r2, =_sbss
 80012c0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80012c4:	20000064 	.word	0x20000064

080012c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_COMP_IRQHandler>
	...

080012cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x3c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Init+0x3c>)
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f811 	bl	800130c <HAL_InitTick>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e001      	b.n	80012fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f6:	f7ff ff8f 	bl	8001218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_InitTick+0x5c>)
 8001316:	681c      	ldr	r4, [r3, #0]
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_InitTick+0x60>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	0019      	movs	r1, r3
 800131e:	23fa      	movs	r3, #250	; 0xfa
 8001320:	0098      	lsls	r0, r3, #2
 8001322:	f7fe fef1 	bl	8000108 <__udivsi3>
 8001326:	0003      	movs	r3, r0
 8001328:	0019      	movs	r1, r3
 800132a:	0020      	movs	r0, r4
 800132c:	f7fe feec 	bl	8000108 <__udivsi3>
 8001330:	0003      	movs	r3, r0
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f905 	bl	8001542 <HAL_SYSTICK_Config>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e00f      	b.n	8001360 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d80b      	bhi.n	800135e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	2301      	movs	r3, #1
 800134a:	425b      	negs	r3, r3
 800134c:	2200      	movs	r2, #0
 800134e:	0018      	movs	r0, r3
 8001350:	f000 f8e2 	bl	8001518 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_InitTick+0x64>)
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b003      	add	sp, #12
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000030 	.word	0x20000030
 800136c:	20000038 	.word	0x20000038
 8001370:	20000034 	.word	0x20000034

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	001a      	movs	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	18d2      	adds	r2, r2, r3
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_IncTick+0x20>)
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	20000038 	.word	0x20000038
 8001394:	20000060 	.word	0x20000060

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	20000060 	.word	0x20000060

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fff0 	bl	8001398 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	001a      	movs	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	189b      	adds	r3, r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	f7ff ffe0 	bl	8001398 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000038 	.word	0x20000038

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0002      	movs	r2, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b7f      	cmp	r3, #127	; 0x7f
 8001408:	d828      	bhi.n	800145c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140a:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <__NVIC_SetPriority+0xd4>)
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	33c0      	adds	r3, #192	; 0xc0
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	589b      	ldr	r3, [r3, r2]
 800141a:	1dfa      	adds	r2, r7, #7
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	0011      	movs	r1, r2
 8001420:	2203      	movs	r2, #3
 8001422:	400a      	ands	r2, r1
 8001424:	00d2      	lsls	r2, r2, #3
 8001426:	21ff      	movs	r1, #255	; 0xff
 8001428:	4091      	lsls	r1, r2
 800142a:	000a      	movs	r2, r1
 800142c:	43d2      	mvns	r2, r2
 800142e:	401a      	ands	r2, r3
 8001430:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	019b      	lsls	r3, r3, #6
 8001436:	22ff      	movs	r2, #255	; 0xff
 8001438:	401a      	ands	r2, r3
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	0018      	movs	r0, r3
 8001440:	2303      	movs	r3, #3
 8001442:	4003      	ands	r3, r0
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001448:	481f      	ldr	r0, [pc, #124]	; (80014c8 <__NVIC_SetPriority+0xd4>)
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	430a      	orrs	r2, r1
 8001454:	33c0      	adds	r3, #192	; 0xc0
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800145a:	e031      	b.n	80014c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <__NVIC_SetPriority+0xd8>)
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	0019      	movs	r1, r3
 8001464:	230f      	movs	r3, #15
 8001466:	400b      	ands	r3, r1
 8001468:	3b08      	subs	r3, #8
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3306      	adds	r3, #6
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	18d3      	adds	r3, r2, r3
 8001472:	3304      	adds	r3, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1dfa      	adds	r2, r7, #7
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	0011      	movs	r1, r2
 800147c:	2203      	movs	r2, #3
 800147e:	400a      	ands	r2, r1
 8001480:	00d2      	lsls	r2, r2, #3
 8001482:	21ff      	movs	r1, #255	; 0xff
 8001484:	4091      	lsls	r1, r2
 8001486:	000a      	movs	r2, r1
 8001488:	43d2      	mvns	r2, r2
 800148a:	401a      	ands	r2, r3
 800148c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	401a      	ands	r2, r3
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	0018      	movs	r0, r3
 800149c:	2303      	movs	r3, #3
 800149e:	4003      	ands	r3, r0
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <__NVIC_SetPriority+0xd8>)
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	001c      	movs	r4, r3
 80014ac:	230f      	movs	r3, #15
 80014ae:	4023      	ands	r3, r4
 80014b0:	3b08      	subs	r3, #8
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	430a      	orrs	r2, r1
 80014b6:	3306      	adds	r3, #6
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	18c3      	adds	r3, r0, r3
 80014bc:	3304      	adds	r3, #4
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b003      	add	sp, #12
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	045b      	lsls	r3, r3, #17
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d301      	bcc.n	80014e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e4:	2301      	movs	r3, #1
 80014e6:	e010      	b.n	800150a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <SysTick_Config+0x44>)
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	3a01      	subs	r2, #1
 80014ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f0:	2301      	movs	r3, #1
 80014f2:	425b      	negs	r3, r3
 80014f4:	2103      	movs	r1, #3
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff ff7c 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x44>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x44>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	210f      	movs	r1, #15
 8001524:	187b      	adds	r3, r7, r1
 8001526:	1c02      	adds	r2, r0, #0
 8001528:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	187b      	adds	r3, r7, r1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25b      	sxtb	r3, r3
 8001532:	0011      	movs	r1, r2
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b004      	add	sp, #16
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ffbf 	bl	80014d0 <SysTick_Config>
 8001552:	0003      	movs	r3, r0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001572:	e14f      	b.n	8001814 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <HAL_GPIO_Init+0x30>
 800158a:	e140      	b.n	800180e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	4013      	ands	r3, r2
 8001594:	2b01      	cmp	r3, #1
 8001596:	d005      	beq.n	80015a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d130      	bne.n	8001606 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	2201      	movs	r2, #1
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	4013      	ands	r3, r2
 800160e:	2b03      	cmp	r3, #3
 8001610:	d017      	beq.n	8001642 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	4013      	ands	r3, r2
 800164a:	2b02      	cmp	r3, #2
 800164c:	d123      	bne.n	8001696 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	58d3      	ldr	r3, [r2, r3]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2207      	movs	r2, #7
 8001660:	4013      	ands	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	43da      	mvns	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2107      	movs	r1, #7
 800167a:	400b      	ands	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	6939      	ldr	r1, [r7, #16]
 8001694:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	401a      	ands	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	23c0      	movs	r3, #192	; 0xc0
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d100      	bne.n	80016d8 <HAL_GPIO_Init+0x17c>
 80016d6:	e09a      	b.n	800180e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	4b54      	ldr	r3, [pc, #336]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80016da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80016de:	2101      	movs	r1, #1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_GPIO_Init+0x2d4>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	589b      	ldr	r3, [r3, r2]
 80016f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	409a      	lsls	r2, r3
 80016fe:	0013      	movs	r3, r2
 8001700:	43da      	mvns	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	23a0      	movs	r3, #160	; 0xa0
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	429a      	cmp	r2, r3
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x1ea>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a47      	ldr	r2, [pc, #284]	; (8001834 <HAL_GPIO_Init+0x2d8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x1e6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a46      	ldr	r2, [pc, #280]	; (8001838 <HAL_GPIO_Init+0x2dc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x1e2>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a45      	ldr	r2, [pc, #276]	; (800183c <HAL_GPIO_Init+0x2e0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x1de>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a44      	ldr	r2, [pc, #272]	; (8001840 <HAL_GPIO_Init+0x2e4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x1da>
 8001732:	2305      	movs	r3, #5
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x1ec>
 8001736:	2306      	movs	r3, #6
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x1ec>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x1ec>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x1ec>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x1ec>
 8001746:	2300      	movs	r3, #0
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	2103      	movs	r1, #3
 800174c:	400a      	ands	r2, r1
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	; (8001830 <HAL_GPIO_Init+0x2d4>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43da      	mvns	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	035b      	lsls	r3, r3, #13
 800177e:	4013      	ands	r3, r2
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43da      	mvns	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	039b      	lsls	r3, r3, #14
 80017a8:	4013      	ands	r3, r2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	4013      	ands	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	40da      	lsrs	r2, r3
 800181c:	1e13      	subs	r3, r2, #0
 800181e:	d000      	beq.n	8001822 <HAL_GPIO_Init+0x2c6>
 8001820:	e6a8      	b.n	8001574 <HAL_GPIO_Init+0x18>
  }
}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b006      	add	sp, #24
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000
 8001834:	50000400 	.word	0x50000400
 8001838:	50000800 	.word	0x50000800
 800183c:	50000c00 	.word	0x50000c00
 8001840:	50001c00 	.word	0x50001c00
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	000a      	movs	r2, r1
 8001852:	1cbb      	adds	r3, r7, #2
 8001854:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	1cba      	adds	r2, r7, #2
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	4013      	ands	r3, r2
 8001860:	d004      	beq.n	800186c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001862:	230f      	movs	r3, #15
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e003      	b.n	8001874 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001874:	230f      	movs	r3, #15
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781b      	ldrb	r3, [r3, #0]
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b004      	add	sp, #16
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	0008      	movs	r0, r1
 800188c:	0011      	movs	r1, r2
 800188e:	1cbb      	adds	r3, r7, #2
 8001890:	1c02      	adds	r2, r0, #0
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	1c7b      	adds	r3, r7, #1
 8001896:	1c0a      	adds	r2, r1, #0
 8001898:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189a:	1c7b      	adds	r3, r7, #1
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	881a      	ldrh	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018aa:	e003      	b.n	80018b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018ac:	1cbb      	adds	r3, r7, #2
 80018ae:	881a      	ldrh	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f000 fbaf 	bl	800202e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d0:	4bcf      	ldr	r3, [pc, #828]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	220c      	movs	r2, #12
 80018d6:	4013      	ands	r3, r2
 80018d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018da:	4bcd      	ldr	r3, [pc, #820]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	025b      	lsls	r3, r3, #9
 80018e2:	4013      	ands	r3, r2
 80018e4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d100      	bne.n	80018f2 <HAL_RCC_OscConfig+0x36>
 80018f0:	e07e      	b.n	80019f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d007      	beq.n	8001908 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x68>
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	429a      	cmp	r2, r3
 8001906:	d10d      	bne.n	8001924 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	4bc1      	ldr	r3, [pc, #772]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	4013      	ands	r3, r2
 8001912:	d100      	bne.n	8001916 <HAL_RCC_OscConfig+0x5a>
 8001914:	e06b      	b.n	80019ee <HAL_RCC_OscConfig+0x132>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d167      	bne.n	80019ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 fb85 	bl	800202e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x84>
 8001930:	4bb7      	ldr	r3, [pc, #732]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4bb6      	ldr	r3, [pc, #728]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0249      	lsls	r1, r1, #9
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e027      	b.n	8001990 <HAL_RCC_OscConfig+0xd4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	23a0      	movs	r3, #160	; 0xa0
 8001946:	02db      	lsls	r3, r3, #11
 8001948:	429a      	cmp	r2, r3
 800194a:	d10e      	bne.n	800196a <HAL_RCC_OscConfig+0xae>
 800194c:	4bb0      	ldr	r3, [pc, #704]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4baf      	ldr	r3, [pc, #700]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	02c9      	lsls	r1, r1, #11
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	4bad      	ldr	r3, [pc, #692]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4bac      	ldr	r3, [pc, #688]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0249      	lsls	r1, r1, #9
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e012      	b.n	8001990 <HAL_RCC_OscConfig+0xd4>
 800196a:	4ba9      	ldr	r3, [pc, #676]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4ba8      	ldr	r3, [pc, #672]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001970:	49a8      	ldr	r1, [pc, #672]	; (8001c14 <HAL_RCC_OscConfig+0x358>)
 8001972:	400a      	ands	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	4ba6      	ldr	r3, [pc, #664]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4013      	ands	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4ba2      	ldr	r3, [pc, #648]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4ba1      	ldr	r3, [pc, #644]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 800198a:	49a3      	ldr	r1, [pc, #652]	; (8001c18 <HAL_RCC_OscConfig+0x35c>)
 800198c:	400a      	ands	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d015      	beq.n	80019c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fcfe 	bl	8001398 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a2:	f7ff fcf9 	bl	8001398 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d902      	bls.n	80019b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f000 fb3c 	bl	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b6:	4b96      	ldr	r3, [pc, #600]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	029b      	lsls	r3, r3, #10
 80019be:	4013      	ands	r3, r2
 80019c0:	d0ef      	beq.n	80019a2 <HAL_RCC_OscConfig+0xe6>
 80019c2:	e015      	b.n	80019f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fce8 	bl	8001398 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ce:	f7ff fce3 	bl	8001398 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e326      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e0:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	029b      	lsls	r3, r3, #10
 80019e8:	4013      	ands	r3, r2
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x112>
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d100      	bne.n	80019fc <HAL_RCC_OscConfig+0x140>
 80019fa:	e08b      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d13e      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1d0>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d13b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a14:	4b7e      	ldr	r3, [pc, #504]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_RCC_OscConfig+0x16c>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e302      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4a7b      	ldr	r2, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x360>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	021a      	lsls	r2, r3, #8
 8001a38:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a3e:	4b74      	ldr	r3, [pc, #464]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2209      	movs	r2, #9
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	4b71      	ldr	r3, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a50:	f000 fc40 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 8001a54:	0001      	movs	r1, r0
 8001a56:	4b6e      	ldr	r3, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a6f      	ldr	r2, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x364>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	000a      	movs	r2, r1
 8001a66:	40da      	lsrs	r2, r3
 8001a68:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x368>)
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a6c:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <HAL_RCC_OscConfig+0x36c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2513      	movs	r5, #19
 8001a72:	197c      	adds	r4, r7, r5
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff fc49 	bl	800130c <HAL_InitTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a7e:	197b      	adds	r3, r7, r5
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d046      	beq.n	8001b14 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	e2d0      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d027      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2209      	movs	r2, #9
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b5c      	ldr	r3, [pc, #368]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc78 	bl	8001398 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fc73 	bl	8001398 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e2b6      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0f1      	beq.n	8001aae <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a53      	ldr	r2, [pc, #332]	; (8001c1c <HAL_RCC_OscConfig+0x360>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	438a      	bics	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fc53 	bl	8001398 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc4e 	bl	8001398 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e291      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d1f1      	bne.n	8001af8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d100      	bne.n	8001b20 <HAL_RCC_OscConfig+0x264>
 8001b1e:	e0a1      	b.n	8001c64 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d140      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x282>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e277      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4a3a      	ldr	r2, [pc, #232]	; (8001c2c <HAL_RCC_OscConfig+0x370>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	0a19      	lsrs	r1, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	061a      	lsls	r2, r3, #24
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	0212      	lsls	r2, r2, #8
 8001b72:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	4928      	ldr	r1, [pc, #160]	; (8001c20 <HAL_RCC_OscConfig+0x364>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x368>)
 8001b86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x36c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2513      	movs	r5, #19
 8001b8e:	197c      	adds	r4, r7, r5
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff fbbb 	bl	800130c <HAL_InitTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b9a:	197b      	adds	r3, r7, r5
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d060      	beq.n	8001c64 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001ba2:	197b      	adds	r3, r7, r5
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	e242      	b.n	800202e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03f      	beq.n	8001c30 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	0049      	lsls	r1, r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fbeb 	bl	8001398 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fbe6 	bl	8001398 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e229      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_RCC_OscConfig+0x370>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	0a19      	lsrs	r1, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	061a      	lsls	r2, r3, #24
 8001c08:	4b01      	ldr	r3, [pc, #4]	; (8001c10 <HAL_RCC_OscConfig+0x354>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	e029      	b.n	8001c64 <HAL_RCC_OscConfig+0x3a8>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	fffeffff 	.word	0xfffeffff
 8001c18:	fffbffff 	.word	0xfffbffff
 8001c1c:	ffffe0ff 	.word	0xffffe0ff
 8001c20:	08003d44 	.word	0x08003d44
 8001c24:	20000030 	.word	0x20000030
 8001c28:	20000034 	.word	0x20000034
 8001c2c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c30:	4bbd      	ldr	r3, [pc, #756]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4bbc      	ldr	r3, [pc, #752]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001c36:	49bd      	ldr	r1, [pc, #756]	; (8001f2c <HAL_RCC_OscConfig+0x670>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fbac 	bl	8001398 <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c46:	f7ff fba7 	bl	8001398 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1ea      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c58:	4bb3      	ldr	r3, [pc, #716]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d036      	beq.n	8001cdc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4bac      	ldr	r3, [pc, #688]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c7a:	4bab      	ldr	r3, [pc, #684]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb89 	bl	8001398 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fb84 	bl	8001398 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1c7      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c9e:	4ba2      	ldr	r3, [pc, #648]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f1      	beq.n	8001c8c <HAL_RCC_OscConfig+0x3d0>
 8001ca8:	e018      	b.n	8001cdc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	4b9f      	ldr	r3, [pc, #636]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cae:	4b9e      	ldr	r3, [pc, #632]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fb6f 	bl	8001398 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fb6a 	bl	8001398 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1ad      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cd2:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d1f1      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x42c>
 8001ce6:	e0ae      	b.n	8001e46 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce8:	2027      	movs	r0, #39	; 0x27
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4b8d      	ldr	r3, [pc, #564]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	055b      	lsls	r3, r3, #21
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d109      	bne.n	8001d10 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b8a      	ldr	r3, [pc, #552]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d00:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	0549      	lsls	r1, r1, #21
 8001d06:	430a      	orrs	r2, r1
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d0a:	183b      	adds	r3, r7, r0
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d11a      	bne.n	8001d52 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1c:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d22:	2180      	movs	r1, #128	; 0x80
 8001d24:	0049      	lsls	r1, r1, #1
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb35 	bl	8001398 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d34:	f7ff fb30 	bl	8001398 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e173      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4b2>
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d62:	4b71      	ldr	r3, [pc, #452]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0049      	lsls	r1, r1, #1
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6c:	e031      	b.n	8001dd2 <HAL_RCC_OscConfig+0x516>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
 8001d76:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7a:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d7c:	496b      	ldr	r1, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x670>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	651a      	str	r2, [r3, #80]	; 0x50
 8001d82:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d86:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d88:	496a      	ldr	r1, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x678>)
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d8e:	e020      	b.n	8001dd2 <HAL_RCC_OscConfig+0x516>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	23a0      	movs	r3, #160	; 0xa0
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10e      	bne.n	8001dba <HAL_RCC_OscConfig+0x4fe>
 8001d9c:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	00c9      	lsls	r1, r1, #3
 8001da6:	430a      	orrs	r2, r1
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dae:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0049      	lsls	r1, r1, #1
 8001db4:	430a      	orrs	r2, r1
 8001db6:	651a      	str	r2, [r3, #80]	; 0x50
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x516>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dbe:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001dc0:	495a      	ldr	r1, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x670>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001dcc:	4959      	ldr	r1, [pc, #356]	; (8001f34 <HAL_RCC_OscConfig+0x678>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fadd 	bl	8001398 <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001de2:	e009      	b.n	8001df8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff fad8 	bl	8001398 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_OscConfig+0x67c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e11a      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001dfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCC_OscConfig+0x528>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fac7 	bl	8001398 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e0e:	e009      	b.n	8001e24 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7ff fac2 	bl	8001398 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e104      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d1ef      	bne.n	8001e10 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e30:	2327      	movs	r3, #39	; 0x27
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e40:	493e      	ldr	r1, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x680>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d049      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d026      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <HAL_RCC_OscConfig+0x684>)
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HAL_RCC_OscConfig+0x684>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0189      	lsls	r1, r1, #6
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fa8b 	bl	8001398 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e88:	f7ff fa86 	bl	8001398 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0c9      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0f1      	beq.n	8001e88 <HAL_RCC_OscConfig+0x5cc>
 8001ea4:	e01e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	438a      	bics	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_RCC_OscConfig+0x684>)
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_OscConfig+0x684>)
 8001eb8:	4922      	ldr	r1, [pc, #136]	; (8001f44 <HAL_RCC_OscConfig+0x688>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fa6b 	bl	8001398 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec8:	f7ff fa66 	bl	8001398 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0a9      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d1f1      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x632>
 8001eec:	e09e      	b.n	800202c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d100      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x63a>
 8001ef4:	e077      	b.n	8001fe6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d158      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_OscConfig+0x66c>)
 8001f04:	4910      	ldr	r1, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0x68c>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fa45 	bl	8001398 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f12:	e01b      	b.n	8001f4c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fa40 	bl	8001398 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d914      	bls.n	8001f4c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e083      	b.n	800202e <HAL_RCC_OscConfig+0x772>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	fffffeff 	.word	0xfffffeff
 8001f30:	40007000 	.word	0x40007000
 8001f34:	fffffbff 	.word	0xfffffbff
 8001f38:	00001388 	.word	0x00001388
 8001f3c:	efffffff 	.word	0xefffffff
 8001f40:	40010000 	.word	0x40010000
 8001f44:	ffffdfff 	.word	0xffffdfff
 8001f48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	049b      	lsls	r3, r3, #18
 8001f54:	4013      	ands	r3, r2
 8001f56:	d1dd      	bne.n	8001f14 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a37      	ldr	r2, [pc, #220]	; (800203c <HAL_RCC_OscConfig+0x780>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	431a      	orrs	r2, r3
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	0449      	lsls	r1, r1, #17
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fa07 	bl	8001398 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fa02 	bl	8001398 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e045      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	049b      	lsls	r3, r3, #18
 8001faa:	4013      	ands	r3, r2
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x6d4>
 8001fae:	e03d      	b.n	800202c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001fb6:	4922      	ldr	r1, [pc, #136]	; (8002040 <HAL_RCC_OscConfig+0x784>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f9ec 	bl	8001398 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff f9e7 	bl	8001398 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e02a      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	049b      	lsls	r3, r3, #18
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x70a>
 8001fe4:	e022      	b.n	800202c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01d      	b.n	800202e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_OscConfig+0x77c>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	025b      	lsls	r3, r3, #9
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	429a      	cmp	r2, r3
 8002006:	d10f      	bne.n	8002028 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	23f0      	movs	r3, #240	; 0xf0
 800200c:	039b      	lsls	r3, r3, #14
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	401a      	ands	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b00a      	add	sp, #40	; 0x28
 8002034:	bdb0      	pop	{r4, r5, r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	40021000 	.word	0x40021000
 800203c:	ff02ffff 	.word	0xff02ffff
 8002040:	feffffff 	.word	0xfeffffff

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b5b0      	push	{r4, r5, r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e128      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b96      	ldr	r3, [pc, #600]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d91e      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b93      	ldr	r3, [pc, #588]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4393      	bics	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	4b90      	ldr	r3, [pc, #576]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002078:	f7ff f98e 	bl	8001398 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002080:	e009      	b.n	8002096 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002082:	f7ff f989 	bl	8001398 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4a8a      	ldr	r2, [pc, #552]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e109      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b87      	ldr	r3, [pc, #540]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1ee      	bne.n	8002082 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ae:	4b83      	ldr	r3, [pc, #524]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	22f0      	movs	r2, #240	; 0xf0
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d100      	bne.n	80020ce <HAL_RCC_ClockConfig+0x8a>
 80020cc:	e089      	b.n	80021e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020d6:	4b79      	ldr	r3, [pc, #484]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	4013      	ands	r3, r2
 80020e0:	d120      	bne.n	8002124 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0e1      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ee:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	4013      	ands	r3, r2
 80020f8:	d114      	bne.n	8002124 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0d5      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d106      	bne.n	8002114 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002106:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d109      	bne.n	8002124 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0ca      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002114:	4b69      	ldr	r3, [pc, #420]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0c2      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002124:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2203      	movs	r2, #3
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff f92e 	bl	8001398 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d111      	bne.n	800216c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	e009      	b.n	800215e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7ff f925 	bl	8001398 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0a5      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	220c      	movs	r2, #12
 8002164:	4013      	ands	r3, r2
 8002166:	2b08      	cmp	r3, #8
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_ClockConfig+0x106>
 800216a:	e03a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d111      	bne.n	8002198 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	e009      	b.n	800218a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002176:	f7ff f90f 	bl	8001398 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e08f      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	220c      	movs	r2, #12
 8002190:	4013      	ands	r3, r2
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_ClockConfig+0x132>
 8002196:	e024      	b.n	80021e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d11b      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7ff f8f9 	bl	8001398 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a42      	ldr	r2, [pc, #264]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e079      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	220c      	movs	r2, #12
 80021bc:	4013      	ands	r3, r2
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x15e>
 80021c2:	e00e      	b.n	80021e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7ff f8e8 	bl	8001398 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a3a      	ldr	r2, [pc, #232]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e068      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	220c      	movs	r2, #12
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e2:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d21e      	bcs.n	800222e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4393      	bics	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002202:	f7ff f8c9 	bl	8001398 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	e009      	b.n	8002220 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff f8c4 	bl	8001398 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e044      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d1ee      	bne.n	800220c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2204      	movs	r2, #4
 8002234:	4013      	ands	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_RCC_ClockConfig+0x27c>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2208      	movs	r2, #8
 8002252:	4013      	ands	r3, r2
 8002254:	d00a      	beq.n	800226c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_RCC_ClockConfig+0x280>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	00da      	lsls	r2, r3, #3
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800226c:	f000 f832 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 8002270:	0001      	movs	r1, r0
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_ClockConfig+0x278>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	220f      	movs	r2, #15
 800227a:	4013      	ands	r3, r2
 800227c:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x284>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	000a      	movs	r2, r1
 8002282:	40da      	lsrs	r2, r3
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_ClockConfig+0x288>)
 8002286:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_ClockConfig+0x28c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	250b      	movs	r5, #11
 800228e:	197c      	adds	r4, r7, r5
 8002290:	0018      	movs	r0, r3
 8002292:	f7ff f83b 	bl	800130c <HAL_InitTick>
 8002296:	0003      	movs	r3, r0
 8002298:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800229a:	197b      	adds	r3, r7, r5
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022a2:	197b      	adds	r3, r7, r5
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	e000      	b.n	80022aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40022000 	.word	0x40022000
 80022b8:	00001388 	.word	0x00001388
 80022bc:	40021000 	.word	0x40021000
 80022c0:	fffff8ff 	.word	0xfffff8ff
 80022c4:	ffffc7ff 	.word	0xffffc7ff
 80022c8:	08003d44 	.word	0x08003d44
 80022cc:	20000030 	.word	0x20000030
 80022d0:	20000034 	.word	0x20000034

080022d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022da:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_RCC_GetSysClockFreq+0x138>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e2:	230c      	movs	r3, #12
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d014      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x40>
 80022ea:	d900      	bls.n	80022ee <HAL_RCC_GetSysClockFreq+0x1a>
 80022ec:	e07b      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x112>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x24>
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e076      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <HAL_RCC_GetSysClockFreq+0x138>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2210      	movs	r2, #16
 80022fe:	4013      	ands	r3, r2
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002306:	e07c      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002308:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_RCC_GetSysClockFreq+0x140>)
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800230c:	e079      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <HAL_RCC_GetSysClockFreq+0x144>)
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002312:	e076      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	0c9a      	lsrs	r2, r3, #18
 8002318:	230f      	movs	r3, #15
 800231a:	401a      	ands	r2, r3
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_RCC_GetSysClockFreq+0x148>)
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	0d9a      	lsrs	r2, r3, #22
 8002326:	2303      	movs	r3, #3
 8002328:	4013      	ands	r3, r2
 800232a:	3301      	adds	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <HAL_RCC_GetSysClockFreq+0x138>)
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	025b      	lsls	r3, r3, #9
 8002336:	4013      	ands	r3, r2
 8002338:	d01a      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	4a35      	ldr	r2, [pc, #212]	; (8002418 <HAL_RCC_GetSysClockFreq+0x144>)
 8002344:	2300      	movs	r3, #0
 8002346:	69b8      	ldr	r0, [r7, #24]
 8002348:	69f9      	ldr	r1, [r7, #28]
 800234a:	f7fd ff89 	bl	8000260 <__aeabi_lmul>
 800234e:	0002      	movs	r2, r0
 8002350:	000b      	movs	r3, r1
 8002352:	0010      	movs	r0, r2
 8002354:	0019      	movs	r1, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f7fd ff5d 	bl	8000220 <__aeabi_uldivmod>
 8002366:	0002      	movs	r2, r0
 8002368:	000b      	movs	r3, r1
 800236a:	0013      	movs	r3, r2
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	e037      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_GetSysClockFreq+0x138>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2210      	movs	r2, #16
 8002376:	4013      	ands	r3, r2
 8002378:	d01a      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4a23      	ldr	r2, [pc, #140]	; (8002410 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002384:	2300      	movs	r3, #0
 8002386:	68b8      	ldr	r0, [r7, #8]
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	f7fd ff69 	bl	8000260 <__aeabi_lmul>
 800238e:	0002      	movs	r2, r0
 8002390:	000b      	movs	r3, r1
 8002392:	0010      	movs	r0, r2
 8002394:	0019      	movs	r1, r3
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f7fd ff3d 	bl	8000220 <__aeabi_uldivmod>
 80023a6:	0002      	movs	r2, r0
 80023a8:	000b      	movs	r3, r1
 80023aa:	0013      	movs	r3, r2
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
 80023ae:	e017      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	0018      	movs	r0, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	0019      	movs	r1, r3
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_RCC_GetSysClockFreq+0x140>)
 80023ba:	2300      	movs	r3, #0
 80023bc:	f7fd ff50 	bl	8000260 <__aeabi_lmul>
 80023c0:	0002      	movs	r2, r0
 80023c2:	000b      	movs	r3, r1
 80023c4:	0010      	movs	r0, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	001c      	movs	r4, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	001d      	movs	r5, r3
 80023d0:	0022      	movs	r2, r4
 80023d2:	002b      	movs	r3, r5
 80023d4:	f7fd ff24 	bl	8000220 <__aeabi_uldivmod>
 80023d8:	0002      	movs	r2, r0
 80023da:	000b      	movs	r3, r1
 80023dc:	0013      	movs	r3, r2
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023e4:	e00d      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_GetSysClockFreq+0x138>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0b5b      	lsrs	r3, r3, #13
 80023ec:	2207      	movs	r2, #7
 80023ee:	4013      	ands	r3, r2
 80023f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	3301      	adds	r3, #1
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	0212      	lsls	r2, r2, #8
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002400:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b00e      	add	sp, #56	; 0x38
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	003d0900 	.word	0x003d0900
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200
 800241c:	08003d54 	.word	0x08003d54

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	2600      	movs	r6, #0
 8002424:	4d0c      	ldr	r5, [pc, #48]	; (8002458 <__libc_init_array+0x38>)
 8002426:	4c0d      	ldr	r4, [pc, #52]	; (800245c <__libc_init_array+0x3c>)
 8002428:	1b64      	subs	r4, r4, r5
 800242a:	10a4      	asrs	r4, r4, #2
 800242c:	42a6      	cmp	r6, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	2600      	movs	r6, #0
 8002432:	f000 f821 	bl	8002478 <_init>
 8002436:	4d0a      	ldr	r5, [pc, #40]	; (8002460 <__libc_init_array+0x40>)
 8002438:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <__libc_init_array+0x44>)
 800243a:	1b64      	subs	r4, r4, r5
 800243c:	10a4      	asrs	r4, r4, #2
 800243e:	42a6      	cmp	r6, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	00b3      	lsls	r3, r6, #2
 8002446:	58eb      	ldr	r3, [r5, r3]
 8002448:	4798      	blx	r3
 800244a:	3601      	adds	r6, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	00b3      	lsls	r3, r6, #2
 8002450:	58eb      	ldr	r3, [r5, r3]
 8002452:	4798      	blx	r3
 8002454:	3601      	adds	r6, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	08003d68 	.word	0x08003d68
 800245c:	08003d68 	.word	0x08003d68
 8002460:	08003d68 	.word	0x08003d68
 8002464:	08003d6c 	.word	0x08003d6c

08002468 <memset>:
 8002468:	0003      	movs	r3, r0
 800246a:	1882      	adds	r2, r0, r2
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <memset+0xa>
 8002470:	4770      	bx	lr
 8002472:	7019      	strb	r1, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	e7f9      	b.n	800246c <memset+0x4>

08002478 <_init>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr

08002484 <_fini>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr
