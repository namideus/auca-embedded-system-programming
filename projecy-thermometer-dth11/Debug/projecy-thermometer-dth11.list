
projecy-thermometer-dth11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f38  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005074  08005074  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  200000a0  0800511c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800511c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049f1  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a6  00000000  00000000  00024ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  00026160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001408b  00000000  00000000  000266d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007021  00000000  00000000  0003a763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0007a1ef  00000000  00000000  00041784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000bb973  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000490  00000000  00000000  000bb9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001514  00000000  00000000  000bbe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800311c 	.word	0x0800311c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	0800311c 	.word	0x0800311c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 80004c8:	f000 fae0 	bl	8000a8c <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 80004cc:	2010      	movs	r0, #16
 80004ce:	f000 fb1d 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fafa 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 80004d8:	2011      	movs	r0, #17
 80004da:	f000 fb17 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 faf4 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 80004e4:	2044      	movs	r0, #68	; 0x44
 80004e6:	f000 fb11 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 faee 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 80004f0:	2011      	movs	r0, #17
 80004f2:	f000 faeb 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 80004f6:	2045      	movs	r0, #69	; 0x45
 80004f8:	f000 fb08 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fae5 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8000502:	20ab      	movs	r0, #171	; 0xab
 8000504:	f000 fae2 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 8000508:	204e      	movs	r0, #78	; 0x4e
 800050a:	f000 faff 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fadc 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8000514:	204f      	movs	r0, #79	; 0x4f
 8000516:	f000 faf9 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fad6 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8000520:	20f0      	movs	r0, #240	; 0xf0
 8000522:	f000 faf3 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8000526:	201f      	movs	r0, #31
 8000528:	f000 fad0 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 800052c:	2021      	movs	r0, #33	; 0x21
 800052e:	f000 faed 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 faca 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8000538:	202c      	movs	r0, #44	; 0x2c
 800053a:	f000 fae7 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 800053e:	20a0      	movs	r0, #160	; 0xa0
 8000540:	f000 fac4 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8000544:	203c      	movs	r0, #60	; 0x3c
 8000546:	f000 fae1 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fabe 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 8000550:	2032      	movs	r0, #50	; 0x32
 8000552:	f000 fadb 	bl	8000b0c <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e00c      	b.n	8000578 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <gde021a1_Init+0xd0>)
 8000564:	5cd3      	ldrb	r3, [r2, r3]
 8000566:	b29b      	uxth	r3, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f000 faaf 	bl	8000acc <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	3201      	adds	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b59      	cmp	r3, #89	; 0x59
 800057e:	d9ee      	bls.n	800055e <gde021a1_Init+0xa2>
  }
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	080049b8 	.word	0x080049b8

08000590 <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 800059c:	2024      	movs	r0, #36	; 0x24
 800059e:	f000 fab5 	bl	8000b0c <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa8f 	bl	8000acc <EPD_IO_WriteData>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80005b6:	b5b0      	push	{r4, r5, r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	0005      	movs	r5, r0
 80005be:	000c      	movs	r4, r1
 80005c0:	0010      	movs	r0, r2
 80005c2:	0019      	movs	r1, r3
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	1c2a      	adds	r2, r5, #0
 80005c8:	801a      	strh	r2, [r3, #0]
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	1c22      	adds	r2, r4, #0
 80005ce:	801a      	strh	r2, [r3, #0]
 80005d0:	1cbb      	adds	r3, r7, #2
 80005d2:	1c02      	adds	r2, r0, #0
 80005d4:	801a      	strh	r2, [r3, #0]
 80005d6:	003b      	movs	r3, r7
 80005d8:	1c0a      	adds	r2, r1, #0
 80005da:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 80005dc:	2044      	movs	r0, #68	; 0x44
 80005de:	f000 fa95 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fa70 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 80005ec:	003b      	movs	r3, r7
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fa6b 	bl	8000acc <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 80005f6:	2045      	movs	r0, #69	; 0x45
 80005f8:	f000 fa88 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fa63 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 8000606:	1cbb      	adds	r3, r7, #2
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fa5e 	bl	8000acc <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 8000610:	204e      	movs	r0, #78	; 0x4e
 8000612:	f000 fa7b 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fa56 	bl	8000acc <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 8000620:	204f      	movs	r0, #79	; 0x4f
 8000622:	f000 fa73 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fa4e 	bl	8000acc <EPD_IO_WriteData>
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bdb0      	pop	{r4, r5, r7, pc}

08000638 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 800063c:	23ac      	movs	r3, #172	; 0xac
}
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 8000648:	2312      	movs	r3, #18
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8000654:	2022      	movs	r0, #34	; 0x22
 8000656:	f000 fa59 	bl	8000b0c <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 800065a:	20c4      	movs	r0, #196	; 0xc4
 800065c:	f000 fa36 	bl	8000acc <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 8000660:	2020      	movs	r0, #32
 8000662:	f000 fa53 	bl	8000b0c <EPD_IO_WriteReg>
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8000670:	2022      	movs	r0, #34	; 0x22
 8000672:	f000 fa4b 	bl	8000b0c <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 8000676:	2003      	movs	r0, #3
 8000678:	f000 fa28 	bl	8000acc <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800067c:	2020      	movs	r0, #32
 800067e:	f000 fa45 	bl	8000b0c <EPD_IO_WriteReg>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	0005      	movs	r5, r0
 8000690:	000c      	movs	r4, r1
 8000692:	0010      	movs	r0, r2
 8000694:	0019      	movs	r1, r3
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	1c2a      	adds	r2, r5, #0
 800069a:	801a      	strh	r2, [r3, #0]
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	1c22      	adds	r2, r4, #0
 80006a0:	801a      	strh	r2, [r3, #0]
 80006a2:	1cbb      	adds	r3, r7, #2
 80006a4:	1c02      	adds	r2, r0, #0
 80006a6:	801a      	strh	r2, [r3, #0]
 80006a8:	003b      	movs	r3, r7
 80006aa:	1c0a      	adds	r2, r1, #0
 80006ac:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 80006b2:	230f      	movs	r3, #15
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 80006ba:	2308      	movs	r3, #8
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 80006c2:	230d      	movs	r3, #13
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80006ca:	2024      	movs	r0, #36	; 0x24
 80006cc:	f000 fa1e 	bl	8000b0c <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 80006d0:	1cbb      	adds	r3, r7, #2
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	2207      	movs	r2, #7
 80006d6:	4013      	ands	r3, r2
 80006d8:	b29b      	uxth	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d000      	beq.n	80006e0 <gde021a1_DrawImage+0x58>
 80006de:	e087      	b.n	80007f0 <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e073      	b.n	80007ce <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 80006e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	18d2      	adds	r2, r2, r3
 80006ec:	210f      	movs	r1, #15
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d05f      	beq.n	80007bc <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80006fc:	230e      	movs	r3, #14
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e054      	b.n	80007b0 <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	e029      	b.n	8000760 <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2201      	movs	r2, #1
 8000714:	4013      	ands	r3, r2
 8000716:	d00d      	beq.n	8000734 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 8000718:	2008      	movs	r0, #8
 800071a:	183a      	adds	r2, r7, r0
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	18d3      	adds	r3, r2, r3
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2203      	movs	r2, #3
 8000724:	4393      	bics	r3, r2
 8000726:	b2d9      	uxtb	r1, r3
 8000728:	183a      	adds	r2, r7, r0
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	1c0a      	adds	r2, r1, #0
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e00c      	b.n	800074e <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8000734:	2008      	movs	r0, #8
 8000736:	183a      	adds	r2, r7, r0
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2203      	movs	r2, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	b2d9      	uxtb	r1, r3
 8000744:	183a      	adds	r2, r7, r0
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	1c0a      	adds	r2, r1, #0
 800074c:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 800074e:	220f      	movs	r2, #15
 8000750:	18bb      	adds	r3, r7, r2
 8000752:	18ba      	adds	r2, r7, r2
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	0852      	lsrs	r2, r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	3301      	adds	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d9d2      	bls.n	800070c <gde021a1_DrawImage+0x84>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000766:	2108      	movs	r1, #8
 8000768:	187b      	adds	r3, r7, r1
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	019b      	lsls	r3, r3, #6
 800076e:	b25a      	sxtb	r2, r3
 8000770:	187b      	adds	r3, r7, r1
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b25a      	sxtb	r2, r3
 800077c:	187b      	adds	r3, r7, r1
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	b25b      	sxtb	r3, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	b25a      	sxtb	r2, r3
 8000788:	187b      	adds	r3, r7, r1
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b25a      	sxtb	r2, r3
 8000792:	210d      	movs	r1, #13
 8000794:	187b      	adds	r3, r7, r1
 8000796:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 8000798:	187b      	adds	r3, r7, r1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f994 	bl	8000acc <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80007a4:	210e      	movs	r1, #14
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	3201      	adds	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	230e      	movs	r3, #14
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d9a5      	bls.n	8000706 <gde021a1_DrawImage+0x7e>
 80007ba:	e005      	b.n	80007c8 <gde021a1_DrawImage+0x140>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 80007bc:	20ff      	movs	r0, #255	; 0xff
 80007be:	f000 f985 	bl	8000acc <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 80007c2:	20ff      	movs	r0, #255	; 0xff
 80007c4:	f000 f982 	bl	8000acc <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	003b      	movs	r3, r7
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	1cba      	adds	r2, r7, #2
 80007d4:	8812      	ldrh	r2, [r2, #0]
 80007d6:	0892      	lsrs	r2, r2, #2
 80007d8:	b292      	uxth	r2, r2
 80007da:	4353      	muls	r3, r2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da00      	bge.n	80007e2 <gde021a1_DrawImage+0x15a>
 80007e0:	3301      	adds	r3, #1
 80007e2:	105b      	asrs	r3, r3, #1
 80007e4:	001a      	movs	r2, r3
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d200      	bcs.n	80007ee <gde021a1_DrawImage+0x166>
 80007ec:	e77b      	b.n	80006e6 <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 80007ee:	e10f      	b.n	8000a10 <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e0fb      	b.n	80009ee <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 80007f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	18d2      	adds	r2, r2, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	1cbb      	adds	r3, r7, #2
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	b29b      	uxth	r3, r3
 8000810:	3301      	adds	r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	da00      	bge.n	8000818 <gde021a1_DrawImage+0x190>
 8000816:	3301      	adds	r3, #1
 8000818:	105b      	asrs	r3, r3, #1
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f7ff fd03 	bl	8000228 <__aeabi_uidivmod>
 8000822:	1e0b      	subs	r3, r1, #0
 8000824:	d100      	bne.n	8000828 <gde021a1_DrawImage+0x1a0>
 8000826:	e071      	b.n	800090c <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 8000828:	230f      	movs	r3, #15
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d05f      	beq.n	80008f2 <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000832:	230e      	movs	r3, #14
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e054      	b.n	80008e6 <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	e029      	b.n	8000896 <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 8000842:	230f      	movs	r3, #15
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2201      	movs	r2, #1
 800084a:	4013      	ands	r3, r2
 800084c:	d00d      	beq.n	800086a <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 800084e:	2008      	movs	r0, #8
 8000850:	183a      	adds	r2, r7, r0
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2203      	movs	r2, #3
 800085a:	4393      	bics	r3, r2
 800085c:	b2d9      	uxtb	r1, r3
 800085e:	183a      	adds	r2, r7, r0
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	18d3      	adds	r3, r2, r3
 8000864:	1c0a      	adds	r2, r1, #0
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e00c      	b.n	8000884 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 800086a:	2008      	movs	r0, #8
 800086c:	183a      	adds	r2, r7, r0
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2203      	movs	r2, #3
 8000876:	4313      	orrs	r3, r2
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	183a      	adds	r2, r7, r0
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	18d3      	adds	r3, r2, r3
 8000880:	1c0a      	adds	r2, r1, #0
 8000882:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8000884:	220f      	movs	r2, #15
 8000886:	18bb      	adds	r3, r7, r2
 8000888:	18ba      	adds	r2, r7, r2
 800088a:	7812      	ldrb	r2, [r2, #0]
 800088c:	0852      	lsrs	r2, r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	3301      	adds	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d9d2      	bls.n	8000842 <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 800089c:	2108      	movs	r1, #8
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	78db      	ldrb	r3, [r3, #3]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	210d      	movs	r1, #13
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 f8f9 	bl	8000acc <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80008da:	210e      	movs	r1, #14
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	3201      	adds	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	230e      	movs	r3, #14
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d9a5      	bls.n	800083c <gde021a1_DrawImage+0x1b4>
 80008f0:	e07a      	b.n	80009e8 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 80008f2:	230f      	movs	r3, #15
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d000      	beq.n	80008fe <gde021a1_DrawImage+0x276>
 80008fc:	e074      	b.n	80009e8 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	f000 f8e4 	bl	8000acc <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 8000904:	20ff      	movs	r0, #255	; 0xff
 8000906:	f000 f8e1 	bl	8000acc <EPD_IO_WriteData>
 800090a:	e06d      	b.n	80009e8 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	1cbb      	adds	r3, r7, #2
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	da00      	bge.n	8000920 <gde021a1_DrawImage+0x298>
 800091e:	3301      	adds	r3, #1
 8000920:	105b      	asrs	r3, r3, #1
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f7ff fc7f 	bl	8000228 <__aeabi_uidivmod>
 800092a:	1e0b      	subs	r3, r1, #0
 800092c:	d15c      	bne.n	80009e8 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2bf0      	cmp	r3, #240	; 0xf0
 8000936:	d04f      	beq.n	80009d8 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	e029      	b.n	8000992 <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 800093e:	230f      	movs	r3, #15
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	4013      	ands	r3, r2
 8000948:	d00d      	beq.n	8000966 <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 800094a:	2008      	movs	r0, #8
 800094c:	183a      	adds	r2, r7, r0
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2203      	movs	r2, #3
 8000956:	4393      	bics	r3, r2
 8000958:	b2d9      	uxtb	r1, r3
 800095a:	183a      	adds	r2, r7, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	1c0a      	adds	r2, r1, #0
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e00c      	b.n	8000980 <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 8000966:	2008      	movs	r0, #8
 8000968:	183a      	adds	r2, r7, r0
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2203      	movs	r2, #3
 8000972:	4313      	orrs	r3, r2
 8000974:	b2d9      	uxtb	r1, r3
 8000976:	183a      	adds	r2, r7, r0
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	1c0a      	adds	r2, r1, #0
 800097e:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 8000980:	220f      	movs	r2, #15
 8000982:	18bb      	adds	r3, r7, r2
 8000984:	18ba      	adds	r2, r7, r2
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	0852      	lsrs	r2, r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	3301      	adds	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d9d2      	bls.n	800093e <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000998:	2108      	movs	r1, #8
 800099a:	187b      	adds	r3, r7, r1
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	019b      	lsls	r3, r3, #6
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	78db      	ldrb	r3, [r3, #3]
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	210d      	movs	r1, #13
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 f87b 	bl	8000acc <EPD_IO_WriteData>
 80009d6:	e007      	b.n	80009e8 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2bf0      	cmp	r3, #240	; 0xf0
 80009e0:	d102      	bne.n	80009e8 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	f000 f872 	bl	8000acc <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	003b      	movs	r3, r7
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	1cba      	adds	r2, r7, #2
 80009f4:	8812      	ldrh	r2, [r2, #0]
 80009f6:	0892      	lsrs	r2, r2, #2
 80009f8:	b292      	uxth	r2, r2
 80009fa:	3201      	adds	r2, #1
 80009fc:	4353      	muls	r3, r2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da00      	bge.n	8000a04 <gde021a1_DrawImage+0x37c>
 8000a02:	3301      	adds	r3, #1
 8000a04:	105b      	asrs	r3, r3, #1
 8000a06:	001a      	movs	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d200      	bcs.n	8000a10 <gde021a1_DrawImage+0x388>
 8000a0e:	e6f2      	b.n	80007f6 <gde021a1_DrawImage+0x16e>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b006      	add	sp, #24
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}

08000a18 <LoopDelay>:
#define GLUE(a, b) a##b
#define PIN_SET(a) do {GLUE(a, _GPIO_PORT)->BSRR = (1 << GLUE(a, _PIN));} while(0)
#define PIN_CLR(a) do {GLUE(a, _GPIO_PORT)->BSRR = (1 << (GLUE(a, _PIN) + 16));} while(0)
#define PIN_GET(a) (!!(GLUE(a, _GPIO_PORT)->IDR & (1 << GLUE(a, _PIN))))

void LoopDelay(volatile uint32_t n) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 8000a20:	e002      	b.n	8000a28 <LoopDelay+0x10>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f9      	bne.n	8000a22 <LoopDelay+0xa>
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SPIx_Init>:
#define DISCOVERY_SPIx_MOSI_GPIO_PORT           GPIOB
#define DISCOVERY_SPIx_MOSI_PIN                 5
// no - there's no MISO connected, and PB4 is used for LED on the DISCO
// #define DISCOVERY_SPIx_MISO_PIN                 GPIO_PIN_4                 /* PB.04 */

static void SPIx_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
  DISCOVERY_SPIx->CR1 = 0
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <SPIx_Init+0x10>)
 8000a3e:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <SPIx_Init+0x14>)
 8000a40:	601a      	str	r2, [r3, #0]
    | ( 0 * SPI_CR1_CRCNEXT  )         // Transmit CRC next
    | ( 0 * SPI_CR1_CRCEN    )         // Hardware CRC calculation enable
    | ( 0 * SPI_CR1_BIDIOE   )         // Output enable in bidirectional mode
    | ( 0 * SPI_CR1_BIDIMODE )         // Bidirectional data mode enable
  ;
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	00000357 	.word	0x00000357

08000a50 <SPIx_Write>:
static uint32_t SPIx_Read(void) {
  return 0;
}


static void SPIx_Write(uint8_t n) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
  DISCOVERY_SPIx->DR = n;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SPIx_Write+0x38>)
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	60da      	str	r2, [r3, #12]
  while (!(DISCOVERY_SPIx->SR & SPI_SR_TXE)) {
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SPIx_Write+0x38>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d0fa      	beq.n	8000a66 <SPIx_Write+0x16>
    // wait until empty
  }
  while ((DISCOVERY_SPIx->SR & SPI_SR_BSY)) {
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SPIx_Write+0x38>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d1fa      	bne.n	8000a72 <SPIx_Write+0x22>
    // wait until not busy
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40013000 	.word	0x40013000

08000a8c <EPD_IO_Init>:

#define EPD_PWR_GPIO_PORT                       GPIOB
#define EPD_PWR_PIN                             10


void EPD_IO_Init(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  // pins pinit - see gpio-clock init and gpio pins init in main()

  /* Enable Display */
  PIN_CLR(EPD_PWR);
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <EPD_IO_Init+0x3c>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	04d2      	lsls	r2, r2, #19
 8000a96:	619a      	str	r2, [r3, #24]

  /* Set or Reset the control line */
  PIN_CLR(EPD_CS);
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0612      	lsls	r2, r2, #24
 8000aa0:	619a      	str	r2, [r3, #24]
  PIN_SET(EPD_CS);
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	0212      	lsls	r2, r2, #8
 8000aaa:	619a      	str	r2, [r3, #24]

  /* EPD reset pin mamagement */
  PIN_SET(EPD_RESET);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <EPD_IO_Init+0x3c>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	619a      	str	r2, [r3, #24]
  EPD_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f000 f84a 	bl	8000b4c <EPD_Delay>

  PIN_SET(DISCOVERY_SPIx_SCK);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <EPD_IO_Init+0x3c>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	619a      	str	r2, [r3, #24]
  /* SPI Configuration */
  SPIx_Init();
 8000abe:	f7ff ffbb 	bl	8000a38 <SPIx_Init>
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	50000400 	.word	0x50000400

08000acc <EPD_IO_WriteData>:

void EPD_IO_WriteData(uint16_t n) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0612      	lsls	r2, r2, #24
 8000ae0:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to High */
  PIN_SET(EPD_DC);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <EPD_IO_WriteData+0x3c>)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	619a      	str	r2, [r3, #24]
  /* Send Data */
  SPIx_Write(n);
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ffad 	bl	8000a50 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0212      	lsls	r2, r2, #8
 8000afe:	619a      	str	r2, [r3, #24]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	50000400 	.word	0x50000400

08000b0c <EPD_IO_WriteReg>:
/**
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t n) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0612      	lsls	r2, r2, #24
 8000b20:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to Low */
  PIN_CLR(EPD_DC);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <EPD_IO_WriteReg+0x3c>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	0512      	lsls	r2, r2, #20
 8000b28:	619a      	str	r2, [r3, #24]
  /* Send Command */
  SPIx_Write(n);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff8e 	bl	8000a50 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0212      	lsls	r2, r2, #8
 8000b3c:	619a      	str	r2, [r3, #24]
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	50000400 	.word	0x50000400

08000b4c <EPD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t n) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  LoopDelay(n * 3000);  // some fancy factor to get it roughly in ms
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EPD_Delay+0x1c>)
 8000b58:	4353      	muls	r3, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff5c 	bl	8000a18 <LoopDelay>
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	00000bb8 	.word	0x00000bb8

08000b6c <read_cycle>:

// ---------------------- M A I N -----------------------------------
uint16_t read_cycle(uint16_t cur_tics, uint8_t neg_tic){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	1d7b      	adds	r3, r7, #5
 8000b7a:	1c0a      	adds	r2, r1, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
	uint16_t cnt_tics;
 	if (cur_tics < MAX_TICS) cnt_tics = 0;
 8000b7e:	1dbb      	adds	r3, r7, #6
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <read_cycle+0x90>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d803      	bhi.n	8000b90 <read_cycle+0x24>
 8000b88:	230e      	movs	r3, #14
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
	if (neg_tic){
 8000b90:	1d7b      	adds	r3, r7, #5
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d01b      	beq.n	8000bd0 <read_cycle+0x64>
		//while (!GPIO_ReadInputDataBit(GPIOA,GPIO_PIN_3)&&(cnt_tics<MAX_TICS)){
		while (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)&&(cnt_tics<MAX_TICS)){
 8000b98:	e005      	b.n	8000ba6 <read_cycle+0x3a>
			cnt_tics++;
 8000b9a:	210e      	movs	r1, #14
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	3201      	adds	r2, #1
 8000ba4:	801a      	strh	r2, [r3, #0]
		while (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)&&(cnt_tics<MAX_TICS)){
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2108      	movs	r1, #8
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 f82d 	bl	8001c0c <HAL_GPIO_ReadPin>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d11a      	bne.n	8000bec <read_cycle+0x80>
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <read_cycle+0x90>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d9eb      	bls.n	8000b9a <read_cycle+0x2e>
 8000bc2:	e013      	b.n	8000bec <read_cycle+0x80>
		}
	}
	else {
		//while (GPIO_ReadInputDataBit(GPIOA,GPIO_PIN_3)&&(cnt_tics<MAX_TICS)){
		while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)&&(cnt_tics<MAX_TICS)){
			cnt_tics++;
 8000bc4:	210e      	movs	r1, #14
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	3201      	adds	r2, #1
 8000bce:	801a      	strh	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)&&(cnt_tics<MAX_TICS)){
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 f818 	bl	8001c0c <HAL_GPIO_ReadPin>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d005      	beq.n	8000bec <read_cycle+0x80>
 8000be0:	230e      	movs	r3, #14
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <read_cycle+0x90>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d9eb      	bls.n	8000bc4 <read_cycle+0x58>
		}
	}
 	return cnt_tics;
 8000bec:	230e      	movs	r3, #14
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	881b      	ldrh	r3, [r3, #0]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	0000270f 	.word	0x0000270f

08000c00 <read_DHT11>:

uint8_t read_DHT11(uint8_t *buf){
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b098      	sub	sp, #96	; 0x60
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint16_t cnt;
	uint8_t i, check_sum;

	//reset DHT11
	//Delay(500);
	HAL_Delay(500);
 8000c08:	23fa      	movs	r3, #250	; 0xfa
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fdaf 	bl	8001770 <HAL_Delay>
 	GPIO_LOW(GPIOA,GPIO_PIN_3);
 8000c12:	23a0      	movs	r3, #160	; 0xa0
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	2208      	movs	r2, #8
 8000c18:	619a      	str	r2, [r3, #24]
	//Delay(20);
	HAL_Delay(20);
 8000c1a:	2014      	movs	r0, #20
 8000c1c:	f000 fda8 	bl	8001770 <HAL_Delay>
 	GPIO_HIGH(GPIOA,GPIO_PIN_3);
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2208      	movs	r2, #8
 8000c26:	619a      	str	r2, [r3, #24]

  //start reading
 	cnt = 0;
 8000c28:	235e      	movs	r3, #94	; 0x5e
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	801a      	strh	r2, [r3, #0]
	for(i=0;i<83 && cnt<MAX_TICS;i++){
 8000c30:	235d      	movs	r3, #93	; 0x5d
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e02c      	b.n	8000c94 <read_DHT11+0x94>
		if (i & 1){
 8000c3a:	235d      	movs	r3, #93	; 0x5d
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2201      	movs	r2, #1
 8000c42:	4013      	ands	r3, r2
 8000c44:	d00a      	beq.n	8000c5c <read_DHT11+0x5c>
			cnt = read_cycle(cnt, 1);
 8000c46:	235e      	movs	r3, #94	; 0x5e
 8000c48:	18fc      	adds	r4, r7, r3
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2101      	movs	r1, #1
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ff8b 	bl	8000b6c <read_cycle>
 8000c56:	0003      	movs	r3, r0
 8000c58:	8023      	strh	r3, [r4, #0]
 8000c5a:	e015      	b.n	8000c88 <read_DHT11+0x88>
		}
		else {
			cnt = read_cycle(cnt, 0);
 8000c5c:	255e      	movs	r5, #94	; 0x5e
 8000c5e:	197c      	adds	r4, r7, r5
 8000c60:	197b      	adds	r3, r7, r5
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	2100      	movs	r1, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff ff80 	bl	8000b6c <read_cycle>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	8023      	strh	r3, [r4, #0]
			dt[i/2]= cnt;
 8000c70:	235d      	movs	r3, #93	; 0x5d
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	1979      	adds	r1, r7, r5
 8000c84:	8809      	ldrh	r1, [r1, #0]
 8000c86:	52d1      	strh	r1, [r2, r3]
	for(i=0;i<83 && cnt<MAX_TICS;i++){
 8000c88:	215d      	movs	r1, #93	; 0x5d
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	3201      	adds	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	235d      	movs	r3, #93	; 0x5d
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b52      	cmp	r3, #82	; 0x52
 8000c9c:	d805      	bhi.n	8000caa <read_DHT11+0xaa>
 8000c9e:	235e      	movs	r3, #94	; 0x5e
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <read_DHT11+0x188>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d9c7      	bls.n	8000c3a <read_DHT11+0x3a>
		}
	}

 	//release line
	GPIO_HIGH(GPIOA,GPIO_PIN_3);
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	2208      	movs	r2, #8
 8000cb0:	619a      	str	r2, [r3, #24]

	if (cnt>=MAX_TICS) return DHT11_NO_CONN;
 8000cb2:	235e      	movs	r3, #94	; 0x5e
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <read_DHT11+0x188>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d901      	bls.n	8000cc2 <read_DHT11+0xc2>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e05e      	b.n	8000d80 <read_DHT11+0x180>

	//convert data
 	for(i=2;i<42;i++){
 8000cc2:	235d      	movs	r3, #93	; 0x5d
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e029      	b.n	8000d20 <read_DHT11+0x120>
		(*buf) <<= 1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	18db      	adds	r3, r3, r3
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	701a      	strb	r2, [r3, #0]
  	if (dt[i]>20) {
 8000cd8:	235d      	movs	r3, #93	; 0x5d
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2308      	movs	r3, #8
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0052      	lsls	r2, r2, #1
 8000ce4:	5ad3      	ldrh	r3, [r2, r3]
 8000ce6:	2b14      	cmp	r3, #20
 8000ce8:	d905      	bls.n	8000cf6 <read_DHT11+0xf6>
			(*buf)++;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	701a      	strb	r2, [r3, #0]
 		}
		if (!((i-1)%8) && (i>2)) {
 8000cf6:	215d      	movs	r1, #93	; 0x5d
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2307      	movs	r3, #7
 8000d02:	4013      	ands	r3, r2
 8000d04:	d106      	bne.n	8000d14 <read_DHT11+0x114>
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d902      	bls.n	8000d14 <read_DHT11+0x114>
			buf++;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3301      	adds	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 	for(i=2;i<42;i++){
 8000d14:	215d      	movs	r1, #93	; 0x5d
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	3201      	adds	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	215d      	movs	r1, #93	; 0x5d
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b29      	cmp	r3, #41	; 0x29
 8000d28:	d9d0      	bls.n	8000ccc <read_DHT11+0xcc>
		}
 	}

	//calculate checksum
	buf -= 5;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3b05      	subs	r3, #5
 8000d2e:	607b      	str	r3, [r7, #4]
	check_sum = 0;
 8000d30:	235c      	movs	r3, #92	; 0x5c
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 	for(i=0;i<4;i++){
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e010      	b.n	8000d62 <read_DHT11+0x162>
		check_sum += *buf;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	225c      	movs	r2, #92	; 0x5c
 8000d46:	18bb      	adds	r3, r7, r2
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	188a      	adds	r2, r1, r2
 8000d4e:	701a      	strb	r2, [r3, #0]
		buf++;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3301      	adds	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
 	for(i=0;i<4;i++){
 8000d56:	215d      	movs	r1, #93	; 0x5d
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	3201      	adds	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	235d      	movs	r3, #93	; 0x5d
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d9e9      	bls.n	8000d40 <read_DHT11+0x140>
	}

	if (*buf != check_sum) return DHT11_CS_ERROR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	225c      	movs	r2, #92	; 0x5c
 8000d72:	18ba      	adds	r2, r7, r2
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d001      	beq.n	8000d7e <read_DHT11+0x17e>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e000      	b.n	8000d80 <read_DHT11+0x180>

	return DHT11_OK;
 8000d7e:	2300      	movs	r3, #0
	//return check_sum;
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b018      	add	sp, #96	; 0x60
 8000d86:	bdb0      	pop	{r4, r5, r7, pc}
 8000d88:	0000270f 	.word	0x0000270f

08000d8c <Init_ePaper_GPIOs>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);

void Init_ePaper_GPIOs(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	/*!< Set MSION bit */
	RCC->CR |= (uint32_t)0x00000100;
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	0049      	lsls	r1, r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]

	/*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
	RCC->CFGR &= (uint32_t) 0x88FF400C;
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000da4:	4935      	ldr	r1, [pc, #212]	; (8000e7c <Init_ePaper_GPIOs+0xf0>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	60da      	str	r2, [r3, #12]

	/*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFF6;
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000db0:	4933      	ldr	r1, [pc, #204]	; (8000e80 <Init_ePaper_GPIOs+0xf4>)
 8000db2:	400a      	ands	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

	/*!< Reset HSI48ON  bit */
	RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	609a      	str	r2, [r3, #8]

	/*!< Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dc8:	492e      	ldr	r1, [pc, #184]	; (8000e84 <Init_ePaper_GPIOs+0xf8>)
 8000dca:	400a      	ands	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]

	/*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
	RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dd4:	492c      	ldr	r1, [pc, #176]	; (8000e88 <Init_ePaper_GPIOs+0xfc>)
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	60da      	str	r2, [r3, #12]

	/*!< Disable all interrupts */
	RCC->CIER = 0x00000000;
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]

	RCC->IOPENR |= 0
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000de6:	2103      	movs	r1, #3
 8000de8:	430a      	orrs	r2, r1
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
			| RCC_IOPENR_GPIOAEN
			| RCC_IOPENR_GPIOBEN
	  ;
	RCC->APB2ENR |= 0
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <Init_ePaper_GPIOs+0xec>)
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	0149      	lsls	r1, r1, #5
 8000df6:	430a      	orrs	r2, r1
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
			| RCC_APB2ENR_SPI1EN
	  ;

	GPIOA->MODER = (GPIOA->MODER
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE5)      // RED LED
			& (~GPIO_MODER_MODE8)      // EPD_BUSY
			& (~GPIO_MODER_MODE15)     // EPD_CS
 8000e00:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <Init_ePaper_GPIOs+0x100>)
 8000e02:	401a      	ands	r2, r3
	GPIOA->MODER = (GPIOA->MODER
 8000e04:	23a0      	movs	r3, #160	; 0xa0
 8000e06:	05db      	lsls	r3, r3, #23
	) | (0
 8000e08:	4921      	ldr	r1, [pc, #132]	; (8000e90 <Init_ePaper_GPIOs+0x104>)
 8000e0a:	430a      	orrs	r2, r1
	GPIOA->MODER = (GPIOA->MODER
 8000e0c:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE5_0)   // RED LED
			| (GPIO_Mode_In  * GPIO_MODER_MODE8_0)   // EPD_BUSY
			| (GPIO_Mode_Out * GPIO_MODER_MODE15_0)  // EPD_CS
	);

	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
			& (~GPIO_OSPEEDER_OSPEED15)    // EPD_CS
	) | (0
 8000e18:	21c0      	movs	r1, #192	; 0xc0
 8000e1a:	0609      	lsls	r1, r1, #24
 8000e1c:	430a      	orrs	r2, r1
	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8000e1e:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED15_0)  // EPD_CS
	);
	GPIOA->PUPDR = (GPIOA->PUPDR
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD8)    // EPD_BUSY
 8000e26:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <Init_ePaper_GPIOs+0x108>)
 8000e28:	401a      	ands	r2, r3
	GPIOA->PUPDR = (GPIOA->PUPDR
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
	) | (0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	0289      	lsls	r1, r1, #10
 8000e32:	430a      	orrs	r2, r1
	GPIOA->PUPDR = (GPIOA->PUPDR
 8000e34:	60da      	str	r2, [r3, #12]
			| (GPIO_PullDown * GPIO_PUPDR_PUPD8_0)  // EPD_BUSY
	);

	GPIOB->MODER = (GPIOB->MODER
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE4)      // GREEN LED
			& (~GPIO_MODER_MODE2)      // EPD_RESET
			& (~GPIO_MODER_MODE10)     // EPD_PWR
			& (~GPIO_MODER_MODE11)     // EPD_DC
			& (~GPIO_MODER_MODE3)      // SPIx_SCK
			& (~GPIO_MODER_MODE5)      // SPIx_MOSI
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <Init_ePaper_GPIOs+0x110>)
 8000e3c:	401a      	ands	r2, r3
	GPIOB->MODER = (GPIOB->MODER
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
	) | (0
 8000e40:	4917      	ldr	r1, [pc, #92]	; (8000ea0 <Init_ePaper_GPIOs+0x114>)
 8000e42:	430a      	orrs	r2, r1
	GPIOB->MODER = (GPIOB->MODER
 8000e44:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE10_0)  // EPD_PWR
			| (GPIO_Mode_Out * GPIO_MODER_MODE11_0)  // EPD_DC
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE3_0)  // SPIx_SCK
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE5_0)  // SPIx_MOSI
	);
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
			& (~GPIO_OSPEEDER_OSPEED2)     // EPD_RESET
			& (~GPIO_OSPEEDER_OSPEED10)    // EPD_PWR
			& (~GPIO_OSPEEDER_OSPEED11)    // EPD_DC
			& (~GPIO_OSPEEDER_OSPEED3)     // SPIx_SCK
			& (~GPIO_OSPEEDER_OSPEED5)     // SPIx_MOSI
	) | (0
 8000e4c:	4915      	ldr	r1, [pc, #84]	; (8000ea4 <Init_ePaper_GPIOs+0x118>)
 8000e4e:	430a      	orrs	r2, r1
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8000e50:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED10_0)  // EPD_PWR
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED11_0)  // EPD_DC
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED3_0)   // SPIx_SCK
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED5_0)   // SPIx_MOSI
	);
	GPIOB->PUPDR = (GPIOB->PUPDR
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
 8000e54:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD3)    // SPIx_SCK
			& (~GPIO_PUPDR_PUPD5)    // SPIx_MOSI
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <Init_ePaper_GPIOs+0x11c>)
 8000e58:	401a      	ands	r2, r3
	GPIOB->PUPDR = (GPIOB->PUPDR
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
	) | (0
 8000e5c:	2184      	movs	r1, #132	; 0x84
 8000e5e:	0109      	lsls	r1, r1, #4
 8000e60:	430a      	orrs	r2, r1
	GPIOB->PUPDR = (GPIOB->PUPDR
 8000e62:	60da      	str	r2, [r3, #12]
			| (GPIO_PullUp   * GPIO_PUPDR_PUPD3_0)  // SPIx_SCK
			| (GPIO_PullDown * GPIO_PUPDR_PUPD5_0)  // SPIx_MOSI
	);
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
 8000e66:	6a1a      	ldr	r2, [r3, #32]
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <Init_ePaper_GPIOs+0x10c>)
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL3_0))    // SPIx_SCK
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL5_0))    // SPIx_MOSI
	) | (0
 8000e6a:	4910      	ldr	r1, [pc, #64]	; (8000eac <Init_ePaper_GPIOs+0x120>)
 8000e6c:	400a      	ands	r2, r1
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8000e6e:	621a      	str	r2, [r3, #32]
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL3_0)  // SPIx_SCK
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL5_0)  // SPIx_MOSI
	);
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	88ff400c 	.word	0x88ff400c
 8000e80:	fef6fff6 	.word	0xfef6fff6
 8000e84:	fffbffff 	.word	0xfffbffff
 8000e88:	ff02ffff 	.word	0xff02ffff
 8000e8c:	3ffcf3ff 	.word	0x3ffcf3ff
 8000e90:	40000400 	.word	0x40000400
 8000e94:	fffcffff 	.word	0xfffcffff
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	ff0ff00f 	.word	0xff0ff00f
 8000ea0:	00500990 	.word	0x00500990
 8000ea4:	00f00cf0 	.word	0x00f00cf0
 8000ea8:	fffff33f 	.word	0xfffff33f
 8000eac:	ff0f0fff 	.word	0xff0f0fff

08000eb0 <main>:

int main(void) {
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	b08f      	sub	sp, #60	; 0x3c
 8000eb4:	af04      	add	r7, sp, #16
	uint8_t buf[5], res;

	char strDisp[25];

	HAL_Init();
 8000eb6:	f000 fbeb 	bl	8001690 <HAL_Init>

	Init_ePaper_GPIOs();
 8000eba:	f7ff ff67 	bl	8000d8c <Init_ePaper_GPIOs>

	/* Configure the system clock */
	SystemClock_Config();
 8000ebe:	f000 f88d 	bl	8000fdc <SystemClock_Config>

	/* Initialize the EPD */
	BSP_EPD_Init();
 8000ec2:	f000 f91d 	bl	8001100 <BSP_EPD_Init>
	//BSP_EPD_RefreshDisplay();
	//BSP_EPD_Clear(EPD_COLOR_WHITE);

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec6:	f000 f8dd 	bl	8001084 <MX_GPIO_Init>
	//MX_RTC_Init();

	/* Showcasing */
	BSP_EPD_DrawImage(0, 0, 72, 172, (uint8_t*) picture_1);
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <main+0x10c>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	23ac      	movs	r3, #172	; 0xac
 8000ed0:	2248      	movs	r2, #72	; 0x48
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 fa71 	bl	80013bc <BSP_EPD_DrawImage>
	BSP_EPD_RefreshDisplay();
 8000eda:	f000 fac7 	bl	800146c <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000ede:	20ff      	movs	r0, #255	; 0xff
 8000ee0:	f000 f95e 	bl	80011a0 <BSP_EPD_Clear>
	HAL_Delay(1000);
 8000ee4:	23fa      	movs	r3, #250	; 0xfa
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fc41 	bl	8001770 <HAL_Delay>

	sprintf(strDisp, "%02d/%02d/%02d %02d:%02d:%02d", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <main+0x110>)
 8000ef0:	78db      	ldrb	r3, [r3, #3]
 8000ef2:	001e      	movs	r6, r3
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <main+0x110>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	469c      	mov	ip, r3
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <main+0x110>)
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	001a      	movs	r2, r3
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <main+0x114>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	001c      	movs	r4, r3
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <main+0x114>)
 8000f08:	785b      	ldrb	r3, [r3, #1]
 8000f0a:	001d      	movs	r5, r3
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <main+0x114>)
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	492d      	ldr	r1, [pc, #180]	; (8000fc8 <main+0x118>)
 8000f12:	1d38      	adds	r0, r7, #4
 8000f14:	9303      	str	r3, [sp, #12]
 8000f16:	9502      	str	r5, [sp, #8]
 8000f18:	9401      	str	r4, [sp, #4]
 8000f1a:	9200      	str	r2, [sp, #0]
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	0032      	movs	r2, r6
 8000f20:	f001 fc92 	bl	8002848 <siprintf>

	BSP_EPD_DisplayStringAt(0, 40, (unsigned char *)strDisp, CENTER_MODE);
 8000f24:	1d3a      	adds	r2, r7, #4
 8000f26:	2301      	movs	r3, #1
 8000f28:	2128      	movs	r1, #40	; 0x28
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f994 	bl	8001258 <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 8000f30:	f000 fa9c 	bl	800146c <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000f34:	20ff      	movs	r0, #255	; 0xff
 8000f36:	f000 f933 	bl	80011a0 <BSP_EPD_Clear>
	HAL_Delay(5000);
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <main+0x11c>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fc17 	bl	8001770 <HAL_Delay>

	while(1)
	{
		res = read_DHT11(buf);
 8000f42:	2627      	movs	r6, #39	; 0x27
 8000f44:	19bc      	adds	r4, r7, r6
 8000f46:	2520      	movs	r5, #32
 8000f48:	197b      	adds	r3, r7, r5
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff fe58 	bl	8000c00 <read_DHT11>
 8000f50:	0003      	movs	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]

		if (res==DHT11_OK)
 8000f54:	19bb      	adds	r3, r7, r6
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <main+0xc0>
			sprintf(strDisp, "RH=%02d%% t=%dC", buf[0], buf[2]);
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	001a      	movs	r2, r3
 8000f62:	197b      	adds	r3, r7, r5
 8000f64:	789b      	ldrb	r3, [r3, #2]
 8000f66:	491a      	ldr	r1, [pc, #104]	; (8000fd0 <main+0x120>)
 8000f68:	1d38      	adds	r0, r7, #4
 8000f6a:	f001 fc6d 	bl	8002848 <siprintf>
 8000f6e:	e016      	b.n	8000f9e <main+0xee>
		else if (res==DHT11_CS_ERROR)
 8000f70:	2327      	movs	r3, #39	; 0x27
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d106      	bne.n	8000f88 <main+0xd8>
			sprintf(strDisp,"CHECKSUM ERROR");
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <main+0x124>)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 fc61 	bl	8002848 <siprintf>
 8000f86:	e00a      	b.n	8000f9e <main+0xee>
		else if (res==DHT11_NO_CONN)
 8000f88:	2327      	movs	r3, #39	; 0x27
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <main+0xee>
			sprintf(strDisp,"NO CONNECTED");
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <main+0x128>)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fc55 	bl	8002848 <siprintf>

		BSP_EPD_DisplayStringAt(0, 40, (unsigned char *)strDisp, CENTER_MODE);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2128      	movs	r1, #40	; 0x28
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f957 	bl	8001258 <BSP_EPD_DisplayStringAt>
		BSP_EPD_RefreshDisplay();
 8000faa:	f000 fa5f 	bl	800146c <BSP_EPD_RefreshDisplay>
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000fae:	20ff      	movs	r0, #255	; 0xff
 8000fb0:	f000 f8f6 	bl	80011a0 <BSP_EPD_Clear>
//		HAL_Delay(2000);
//		BSP_EPD_DisplayStringAt(0,0,"45 Celsius", CENTER_MODE);
//		BSP_EPD_RefreshDisplay();
//		BSP_EPD_Clear(EPD_COLOR_WHITE);

		HAL_Delay(100);
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f000 fbdb 	bl	8001770 <HAL_Delay>
		res = read_DHT11(buf);
 8000fba:	e7c2      	b.n	8000f42 <main+0x92>
 8000fbc:	08004a14 	.word	0x08004a14
 8000fc0:	200000d0 	.word	0x200000d0
 8000fc4:	200000bc 	.word	0x200000bc
 8000fc8:	08003134 	.word	0x08003134
 8000fcc:	00001388 	.word	0x00001388
 8000fd0:	08003154 	.word	0x08003154
 8000fd4:	08003164 	.word	0x08003164
 8000fd8:	08003174 	.word	0x08003174

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b095      	sub	sp, #84	; 0x54
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	2418      	movs	r4, #24
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2338      	movs	r3, #56	; 0x38
 8000fea:	001a      	movs	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f001 fc23 	bl	8002838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f001 fc1c 	bl	8002838 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <SystemClock_Config+0xa0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <SystemClock_Config+0xa4>)
 8001006:	401a      	ands	r2, r3
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <SystemClock_Config+0xa0>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0109      	lsls	r1, r1, #4
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001012:	0021      	movs	r1, r4
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2210      	movs	r2, #16
 8001018:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2201      	movs	r2, #1
 800101e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	22a0      	movs	r2, #160	; 0xa0
 800102a:	0212      	lsls	r2, r2, #8
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	187b      	adds	r3, r7, r1
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fe22 	bl	8001c80 <HAL_RCC_OscConfig>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001040:	f000 f84c 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	220f      	movs	r2, #15
 8001048:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2100      	movs	r1, #0
 8001066:	0018      	movs	r0, r3
 8001068:	f001 f9ce 	bl	8002408 <HAL_RCC_ClockConfig>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001070:	f000 f834 	bl	80010dc <Error_Handler>
  }
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b015      	add	sp, #84	; 0x54
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	40007000 	.word	0x40007000
 8001080:	ffffe7ff 	.word	0xffffe7ff

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	0018      	movs	r0, r3
 800108e:	2314      	movs	r3, #20
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f001 fbd0 	bl	8002838 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_GPIO_Init+0x54>)
 800109a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_GPIO_Init+0x54>)
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_GPIO_Init+0x54>)
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2201      	movs	r2, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
//  GPIO_HIGH(GPIOA, GPIO_PIN_2);

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2208      	movs	r2, #8
 80010b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	1d3a      	adds	r2, r7, #4
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fc28 	bl	8001920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b006      	add	sp, #24
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_EPD_DisplayStringAt(0, 40, (unsigned char*)"RTC ERROR OCCURRED", CENTER_MODE);
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <Error_Handler+0x20>)
 80010e6:	2301      	movs	r3, #1
 80010e8:	2128      	movs	r1, #40	; 0x28
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f8b4 	bl	8001258 <BSP_EPD_DisplayStringAt>
	  BSP_EPD_RefreshDisplay();
 80010f0:	f000 f9bc 	bl	800146c <BSP_EPD_RefreshDisplay>
	  BSP_EPD_Clear(EPD_COLOR_WHITE);
 80010f4:	20ff      	movs	r0, #255	; 0xff
 80010f6:	f000 f853 	bl	80011a0 <BSP_EPD_Clear>
	  BSP_EPD_DisplayStringAt(0, 40, (unsigned char*)"RTC ERROR OCCURRED", CENTER_MODE);
 80010fa:	e7f3      	b.n	80010e4 <Error_Handler+0x8>
 80010fc:	08003184 	.word	0x08003184

08001100 <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  uint8_t ret = EPD_ERROR;
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]

  /* Default value for the Font */
  pFont = &Font16;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <BSP_EPD_Init+0x40>)
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <BSP_EPD_Init+0x44>)
 8001110:	601a      	str	r2, [r3, #0]

  epd_drv = &gde021a1_drv;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <BSP_EPD_Init+0x48>)
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <BSP_EPD_Init+0x4c>)
 8001116:	601a      	str	r2, [r3, #0]

  /* EPD Init */
  epd_drv->Init();
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <BSP_EPD_Init+0x48>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4798      	blx	r3

  /* Clear the EPD screen */
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001120:	20ff      	movs	r0, #255	; 0xff
 8001122:	f000 f83d 	bl	80011a0 <BSP_EPD_Clear>

  /* Initialize the font */
  BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <BSP_EPD_Init+0x50>)
 8001128:	0018      	movs	r0, r3
 800112a:	f000 f82b 	bl	8001184 <BSP_EPD_SetFont>

  ret = EPD_OK;
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

  return ret;
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000d4 	.word	0x200000d4
 8001144:	20000008 	.word	0x20000008
 8001148:	200000d8 	.word	0x200000d8
 800114c:	20000010 	.word	0x20000010
 8001150:	20000000 	.word	0x20000000

08001154 <BSP_EPD_GetXSize>:
  * @brief  Gets the EPD X size.
  * @param  None
  * @retval EPD X size
  */
uint32_t BSP_EPD_GetXSize(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelWidth());
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <BSP_EPD_GetXSize+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4798      	blx	r3
 8001160:	0003      	movs	r3, r0
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000d8 	.word	0x200000d8

0800116c <BSP_EPD_GetYSize>:
  * @brief  Gets the EPD Y size.
  * @param  None   
  * @retval EPD Y size
  */
uint32_t BSP_EPD_GetYSize(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelHeight());
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <BSP_EPD_GetYSize+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4798      	blx	r3
 8001178:	0003      	movs	r3, r0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000d8 	.word	0x200000d8

08001184 <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <BSP_EPD_SetFont+0x18>)
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	200000d4 	.word	0x200000d4

080011a0 <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	0002      	movs	r2, r0
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <BSP_EPD_Clear+0x50>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689c      	ldr	r4, [r3, #8]
 80011b6:	2311      	movs	r3, #17
 80011b8:	22ab      	movs	r2, #171	; 0xab
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e00a      	b.n	80011dc <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <BSP_EPD_Clear+0x50>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	1dba      	adds	r2, r7, #6
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	0010      	movs	r0, r2
 80011d4:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <BSP_EPD_Clear+0x54>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d9f0      	bls.n	80011c6 <BSP_EPD_Clear+0x26>
  }
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b005      	add	sp, #20
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	200000d8 	.word	0x200000d8
 80011f4:	00000c17 	.word	0x00000c17

080011f8 <BSP_EPD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void BSP_EPD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0004      	movs	r4, r0
 8001200:	0008      	movs	r0, r1
 8001202:	0011      	movs	r1, r2
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	1c22      	adds	r2, r4, #0
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	1c02      	adds	r2, r0, #0
 800120e:	801a      	strh	r2, [r3, #0]
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	1c0a      	adds	r2, r1, #0
 8001214:	701a      	strb	r2, [r3, #0]
  Ascii -= 32;
 8001216:	1cfb      	adds	r3, r7, #3
 8001218:	1cfa      	adds	r2, r7, #3
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	3a20      	subs	r2, #32
 800121e:	701a      	strb	r2, [r3, #0]
  
  DrawChar(Xpos, Ypos, &pFont->table[Ascii * ((pFont->Height) * (pFont->Width))]);
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <BSP_EPD_DisplayChar+0x5c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	1cfb      	adds	r3, r7, #3
 8001228:	7819      	ldrb	r1, [r3, #0]
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <BSP_EPD_DisplayChar+0x5c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	88db      	ldrh	r3, [r3, #6]
 8001230:	0018      	movs	r0, r3
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <BSP_EPD_DisplayChar+0x5c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	4343      	muls	r3, r0
 800123a:	434b      	muls	r3, r1
 800123c:	18d2      	adds	r2, r2, r3
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	8819      	ldrh	r1, [r3, #0]
 8001242:	1dbb      	adds	r3, r7, #6
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	f000 f932 	bl	80014b0 <DrawChar>
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b003      	add	sp, #12
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	200000d4 	.word	0x200000d4

08001258 <BSP_EPD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE  
  * @retval None
  */
void BSP_EPD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	0004      	movs	r4, r0
 8001260:	0008      	movs	r0, r1
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	0019      	movs	r1, r3
 8001266:	230e      	movs	r3, #14
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	1c22      	adds	r2, r4, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	230c      	movs	r3, #12
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	1c02      	adds	r2, r0, #0
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	1c0a      	adds	r2, r1, #0
 800127a:	701a      	strb	r2, [r3, #0]
  uint16_t refcolumn = 1, i = 0;
 800127c:	231e      	movs	r3, #30
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2201      	movs	r2, #1
 8001282:	801a      	strh	r2, [r3, #0]
 8001284:	231c      	movs	r3, #28
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0, xsize = 0; 
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001298:	e002      	b.n	80012a0 <BSP_EPD_DisplayStringAt+0x48>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	617a      	str	r2, [r7, #20]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f6      	bne.n	800129a <BSP_EPD_DisplayStringAt+0x42>
  
  /* Characters number per line */
  xsize = (BSP_EPD_GetXSize()/pFont->Width);
 80012ac:	f7ff ff52 	bl	8001154 <BSP_EPD_GetXSize>
 80012b0:	0002      	movs	r2, r0
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <BSP_EPD_DisplayStringAt+0x160>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	889b      	ldrh	r3, [r3, #4]
 80012b8:	0019      	movs	r1, r3
 80012ba:	0010      	movs	r0, r2
 80012bc:	f7fe ff2e 	bl	800011c <__udivsi3>
 80012c0:	0003      	movs	r3, r0
 80012c2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d016      	beq.n	80012fa <BSP_EPD_DisplayStringAt+0xa2>
 80012cc:	dc2d      	bgt.n	800132a <BSP_EPD_DisplayStringAt+0xd2>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d002      	beq.n	80012d8 <BSP_EPD_DisplayStringAt+0x80>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d018      	beq.n	8001308 <BSP_EPD_DisplayStringAt+0xb0>
 80012d6:	e028      	b.n	800132a <BSP_EPD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* pFont->Width) / 2;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad2      	subs	r2, r2, r3
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <BSP_EPD_DisplayStringAt+0x160>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	4353      	muls	r3, r2
 80012e6:	085b      	lsrs	r3, r3, #1
 80012e8:	b299      	uxth	r1, r3
 80012ea:	231e      	movs	r3, #30
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	220e      	movs	r2, #14
 80012f0:	18ba      	adds	r2, r7, r2
 80012f2:	8812      	ldrh	r2, [r2, #0]
 80012f4:	188a      	adds	r2, r1, r2
 80012f6:	801a      	strh	r2, [r3, #0]
      break;
 80012f8:	e01e      	b.n	8001338 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80012fa:	231e      	movs	r3, #30
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	220e      	movs	r2, #14
 8001300:	18ba      	adds	r2, r7, r2
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	801a      	strh	r2, [r3, #0]
      break;
 8001306:	e017      	b.n	8001338 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*pFont->Width);
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <BSP_EPD_DisplayStringAt+0x160>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	4353      	muls	r3, r2
 8001318:	b299      	uxth	r1, r3
 800131a:	231e      	movs	r3, #30
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	220e      	movs	r2, #14
 8001320:	18ba      	adds	r2, r7, r2
 8001322:	8812      	ldrh	r2, [r2, #0]
 8001324:	1a8a      	subs	r2, r1, r2
 8001326:	801a      	strh	r2, [r3, #0]
      break;
 8001328:	e006      	b.n	8001338 <BSP_EPD_DisplayStringAt+0xe0>
    }    
  default:
    {
      refcolumn = Xpos;
 800132a:	231e      	movs	r3, #30
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	220e      	movs	r2, #14
 8001330:	18ba      	adds	r2, r7, r2
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	801a      	strh	r2, [r3, #0]
      break;
 8001336:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Send the string character by character on EPD */
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8001338:	e01b      	b.n	8001372 <BSP_EPD_DisplayStringAt+0x11a>
  {
    /* Display one character on EPD */
    BSP_EPD_DisplayChar(refcolumn, Ypos, *Text);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	230c      	movs	r3, #12
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	8819      	ldrh	r1, [r3, #0]
 8001344:	241e      	movs	r4, #30
 8001346:	193b      	adds	r3, r7, r4
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff ff54 	bl	80011f8 <BSP_EPD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += pFont->Width;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <BSP_EPD_DisplayStringAt+0x160>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	8899      	ldrh	r1, [r3, #4]
 8001356:	193b      	adds	r3, r7, r4
 8001358:	193a      	adds	r2, r7, r4
 800135a:	8812      	ldrh	r2, [r2, #0]
 800135c:	188a      	adds	r2, r1, r2
 800135e:	801a      	strh	r2, [r3, #0]
    /* Point on the next character */
    Text++;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3301      	adds	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
    i++;
 8001366:	211c      	movs	r1, #28
 8001368:	187b      	adds	r3, r7, r1
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	187b      	adds	r3, r7, r1
 800136e:	3201      	adds	r2, #1
 8001370:	801a      	strh	r2, [r3, #0]
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	4193      	sbcs	r3, r2
 800137a:	b2dc      	uxtb	r4, r3
 800137c:	f7ff feea 	bl	8001154 <BSP_EPD_GetXSize>
 8001380:	0001      	movs	r1, r0
 8001382:	231c      	movs	r3, #28
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	881a      	ldrh	r2, [r3, #0]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <BSP_EPD_DisplayStringAt+0x160>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	4353      	muls	r3, r2
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	0c1a      	lsrs	r2, r3, #16
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <BSP_EPD_DisplayStringAt+0x160>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	889b      	ldrh	r3, [r3, #4]
 800139c:	0019      	movs	r1, r3
 800139e:	2300      	movs	r3, #0
 80013a0:	428a      	cmp	r2, r1
 80013a2:	415b      	adcs	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4023      	ands	r3, r4
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1c5      	bne.n	800133a <BSP_EPD_DisplayStringAt+0xe2>
  }
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b009      	add	sp, #36	; 0x24
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	200000d4 	.word	0x200000d4

080013bc <BSP_EPD_DrawImage>:
  * @param  Ysize: Y size in the EPD
  * @param  pdata: Pointer to the Image address
  * @retval None
  */
void BSP_EPD_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	0005      	movs	r5, r0
 80013c4:	000c      	movs	r4, r1
 80013c6:	0010      	movs	r0, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	1dbb      	adds	r3, r7, #6
 80013cc:	1c2a      	adds	r2, r5, #0
 80013ce:	801a      	strh	r2, [r3, #0]
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	1c22      	adds	r2, r4, #0
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	1cbb      	adds	r3, r7, #2
 80013d8:	1c02      	adds	r2, r0, #0
 80013da:	801a      	strh	r2, [r3, #0]
 80013dc:	003b      	movs	r3, r7
 80013de:	1c0a      	adds	r2, r1, #0
 80013e0:	801a      	strh	r2, [r3, #0]
  /* Set display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos+Ysize-1), (Ypos+(Xsize/4)-1));
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <BSP_EPD_DrawImage+0xac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689c      	ldr	r4, [r3, #8]
 80013e8:	1dba      	adds	r2, r7, #6
 80013ea:	003b      	movs	r3, r7
 80013ec:	8812      	ldrh	r2, [r2, #0]
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29d      	uxth	r5, r3
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	b29a      	uxth	r2, r3
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	18d3      	adds	r3, r2, r3
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	8819      	ldrh	r1, [r3, #0]
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	8818      	ldrh	r0, [r3, #0]
 8001414:	0013      	movs	r3, r2
 8001416:	002a      	movs	r2, r5
 8001418:	47a0      	blx	r4
  
  if(epd_drv->DrawImage != NULL)
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <BSP_EPD_DrawImage+0xac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00e      	beq.n	8001442 <BSP_EPD_DrawImage+0x86>
  {
    epd_drv->DrawImage(Xpos, Ypos, Xsize, Ysize, pdata);
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <BSP_EPD_DrawImage+0xac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69dc      	ldr	r4, [r3, #28]
 800142a:	003b      	movs	r3, r7
 800142c:	881d      	ldrh	r5, [r3, #0]
 800142e:	1cbb      	adds	r3, r7, #2
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	8819      	ldrh	r1, [r3, #0]
 8001436:	1dbb      	adds	r3, r7, #6
 8001438:	8818      	ldrh	r0, [r3, #0]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	002b      	movs	r3, r5
 8001440:	47a0      	blx	r4
  }
  epd_drv->SetDisplayWindow(0, 0, BSP_EPD_GetXSize(), BSP_EPD_GetYSize());
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <BSP_EPD_DrawImage+0xac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689c      	ldr	r4, [r3, #8]
 8001448:	f7ff fe84 	bl	8001154 <BSP_EPD_GetXSize>
 800144c:	0003      	movs	r3, r0
 800144e:	b29d      	uxth	r5, r3
 8001450:	f7ff fe8c 	bl	800116c <BSP_EPD_GetYSize>
 8001454:	0003      	movs	r3, r0
 8001456:	b29b      	uxth	r3, r3
 8001458:	002a      	movs	r2, r5
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	47a0      	blx	r4
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	200000d8 	.word	0x200000d8

0800146c <BSP_EPD_RefreshDisplay>:
  * @brief  Updates the display from the data located into the RAM.
  * @param  None
  * @retval None
  */
void BSP_EPD_RefreshDisplay(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Refresh display sequence */
  epd_drv->RefreshDisplay();
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <BSP_EPD_RefreshDisplay+0x3c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4798      	blx	r3

  /* Poll on the BUSY signal and wait for the EPD to be ready */
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	005a      	lsls	r2, r3, #1
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fbc1 	bl	8001c0c <HAL_GPIO_ReadPin>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d1f5      	bne.n	800147a <BSP_EPD_RefreshDisplay+0xe>

  /*  EPD reset pin mamagement */
  EPD_RESET_HIGH();
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <BSP_EPD_RefreshDisplay+0x40>)
 8001490:	2201      	movs	r2, #1
 8001492:	2104      	movs	r1, #4
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fbd6 	bl	8001c46 <HAL_GPIO_WritePin>

  /* Add a 10 ms Delay after EPD pin Reset */
  EPD_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f7ff fb56 	bl	8000b4c <EPD_Delay>
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	200000d8 	.word	0x200000d8
 80014ac:	50000400 	.word	0x50000400

080014b0 <DrawChar>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 17
  * @param  c: pointer to the character data
  * @retval None
  */
static void  DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	603a      	str	r2, [r7, #0]
 80014b8:	1dbb      	adds	r3, r7, #6
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	1c0a      	adds	r2, r1, #0
 80014c2:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  uint32_t data_length = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  uint16_t height = 0;
 80014cc:	210e      	movs	r1, #14
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	801a      	strh	r2, [r3, #0]
  uint16_t width = 0;
 80014d4:	200c      	movs	r0, #12
 80014d6:	183b      	adds	r3, r7, r0
 80014d8:	2200      	movs	r2, #0
 80014da:	801a      	strh	r2, [r3, #0]

  width  = pFont->Width;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <DrawChar+0xb4>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	183b      	adds	r3, r7, r0
 80014e2:	8892      	ldrh	r2, [r2, #4]
 80014e4:	801a      	strh	r2, [r3, #0]
  height = pFont->Height;
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <DrawChar+0xb4>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	88d2      	ldrh	r2, [r2, #6]
 80014ee:	801a      	strh	r2, [r3, #0]
  
  /* Set the Character display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos + width - 1), (Ypos + height - 1));
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <DrawChar+0xb8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689c      	ldr	r4, [r3, #8]
 80014f6:	1dba      	adds	r2, r7, #6
 80014f8:	183b      	adds	r3, r7, r0
 80014fa:	8812      	ldrh	r2, [r2, #0]
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	18d3      	adds	r3, r2, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29d      	uxth	r5, r3
 8001506:	1d3a      	adds	r2, r7, #4
 8001508:	000e      	movs	r6, r1
 800150a:	187b      	adds	r3, r7, r1
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	18d3      	adds	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	8819      	ldrh	r1, [r3, #0]
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	8818      	ldrh	r0, [r3, #0]
 8001520:	0013      	movs	r3, r2
 8001522:	002a      	movs	r2, r5
 8001524:	47a0      	blx	r4
  
  data_length = (height * width);
 8001526:	19bb      	adds	r3, r7, r6
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	200c      	movs	r0, #12
 800152c:	183a      	adds	r2, r7, r0
 800152e:	8812      	ldrh	r2, [r2, #0]
 8001530:	4353      	muls	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
    
  for(index = 0; index < data_length; index++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00b      	b.n	8001552 <DrawChar+0xa2>
  {
    epd_drv->WritePixel(c[index]);
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <DrawChar+0xb8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	188a      	adds	r2, r1, r2
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	0010      	movs	r0, r2
 800154a:	4798      	blx	r3
  for(index = 0; index < data_length; index++)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	429a      	cmp	r2, r3
 8001558:	d3ef      	bcc.n	800153a <DrawChar+0x8a>
  }
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b007      	add	sp, #28
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	200000d4 	.word	0x200000d4
 8001568:	200000d8 	.word	0x200000d8

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_MspInit+0x24>)
 8001572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x24>)
 8001576:	2101      	movs	r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_MspInit+0x24>)
 800157e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_MspInit+0x24>)
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	0549      	lsls	r1, r1, #21
 8001586:	430a      	orrs	r2, r1
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 f8be 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f001 f8f6 	bl	80027e4 <__errno>
 80015f8:	0003      	movs	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	2301      	movs	r3, #1
 8001600:	425b      	negs	r3, r3
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	18d2      	adds	r2, r2, r3
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20002000 	.word	0x20002000
 8001624:	00000400 	.word	0x00000400
 8001628:	200000dc 	.word	0x200000dc
 800162c:	200000f8 	.word	0x200000f8

08001630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800163e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001640:	f7ff fff6 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopForever+0x6>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopForever+0xe>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopForever+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f001 f8c1 	bl	80027f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fc1f 	bl	8000eb0 <main>

08001672 <LoopForever>:

LoopForever:
    b LoopForever
 8001672:	e7fe      	b.n	8001672 <LoopForever>
  ldr   r0, =_estack
 8001674:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001680:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8001684:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001688:	200000f4 	.word	0x200000f4

0800168c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC1_COMP_IRQHandler>
	...

08001690 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_Init+0x3c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Init+0x3c>)
 80016a2:	2140      	movs	r1, #64	; 0x40
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f811 	bl	80016d0 <HAL_InitTick>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d003      	beq.n	80016ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e001      	b.n	80016be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ba:	f7ff ff57 	bl	800156c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_InitTick+0x5c>)
 80016da:	681c      	ldr	r4, [r3, #0]
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	0019      	movs	r1, r3
 80016e2:	23fa      	movs	r3, #250	; 0xfa
 80016e4:	0098      	lsls	r0, r3, #2
 80016e6:	f7fe fd19 	bl	800011c <__udivsi3>
 80016ea:	0003      	movs	r3, r0
 80016ec:	0019      	movs	r1, r3
 80016ee:	0020      	movs	r0, r4
 80016f0:	f7fe fd14 	bl	800011c <__udivsi3>
 80016f4:	0003      	movs	r3, r0
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 f905 	bl	8001906 <HAL_SYSTICK_Config>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d001      	beq.n	8001704 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e00f      	b.n	8001724 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d80b      	bhi.n	8001722 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	2301      	movs	r3, #1
 800170e:	425b      	negs	r3, r3
 8001710:	2200      	movs	r2, #0
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f8e2 	bl	80018dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_InitTick+0x64>)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b003      	add	sp, #12
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	20000030 	.word	0x20000030
 8001730:	20000038 	.word	0x20000038
 8001734:	20000034 	.word	0x20000034

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	18d2      	adds	r2, r2, r3
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	20000038 	.word	0x20000038
 8001758:	200000e0 	.word	0x200000e0

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	200000e0 	.word	0x200000e0

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	001a      	movs	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	189b      	adds	r3, r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b004      	add	sp, #16
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000038 	.word	0x20000038

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b7f      	cmp	r3, #127	; 0x7f
 80017cc:	d828      	bhi.n	8001820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ce:	4a2f      	ldr	r2, [pc, #188]	; (800188c <__NVIC_SetPriority+0xd4>)
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	33c0      	adds	r3, #192	; 0xc0
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	589b      	ldr	r3, [r3, r2]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <__NVIC_SetPriority+0xd4>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	430a      	orrs	r2, r1
 8001818:	33c0      	adds	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800181e:	e031      	b.n	8001884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0019      	movs	r1, r3
 8001828:	230f      	movs	r3, #15
 800182a:	400b      	ands	r3, r1
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	0011      	movs	r1, r2
 8001840:	2203      	movs	r2, #3
 8001842:	400a      	ands	r2, r1
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	43d2      	mvns	r2, r2
 800184e:	401a      	ands	r2, r3
 8001850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	401a      	ands	r2, r3
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0018      	movs	r0, r3
 8001860:	2303      	movs	r3, #3
 8001862:	4003      	ands	r3, r0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <__NVIC_SetPriority+0xd8>)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	001c      	movs	r4, r3
 8001870:	230f      	movs	r3, #15
 8001872:	4023      	ands	r3, r4
 8001874:	3b08      	subs	r3, #8
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	430a      	orrs	r2, r1
 800187a:	3306      	adds	r3, #6
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18c3      	adds	r3, r0, r3
 8001880:	3304      	adds	r3, #4
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b003      	add	sp, #12
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	045b      	lsls	r3, r3, #17
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d301      	bcc.n	80018ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a8:	2301      	movs	r3, #1
 80018aa:	e010      	b.n	80018ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <SysTick_Config+0x44>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3a01      	subs	r2, #1
 80018b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b4:	2301      	movs	r3, #1
 80018b6:	425b      	negs	r3, r3
 80018b8:	2103      	movs	r1, #3
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff7c 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x44>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x44>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	210f      	movs	r1, #15
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ffbf 	bl	8001894 <SysTick_Config>
 8001916:	0003      	movs	r3, r0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001936:	e14f      	b.n	8001bd8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4091      	lsls	r1, r2
 8001942:	000a      	movs	r2, r1
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <HAL_GPIO_Init+0x30>
 800194e:	e140      	b.n	8001bd2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	4013      	ands	r3, r2
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	409a      	lsls	r2, r3
 8001976:	0013      	movs	r3, r2
 8001978:	43da      	mvns	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	0013      	movs	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	2201      	movs	r2, #1
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2203      	movs	r2, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2207      	movs	r2, #7
 8001a24:	4013      	ands	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	400b      	ands	r3, r1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	6939      	ldr	r1, [r7, #16]
 8001a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2203      	movs	r2, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	4013      	ands	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_GPIO_Init+0x17c>
 8001a9a:	e09a      	b.n	8001bd2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_GPIO_Init+0x2d4>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	589b      	ldr	r3, [r3, r2]
 8001ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4013      	ands	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	23a0      	movs	r3, #160	; 0xa0
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x1ea>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_GPIO_Init+0x2d8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1e6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	; (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1de>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a44      	ldr	r2, [pc, #272]	; (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1da>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	2103      	movs	r1, #3
 8001b10:	400a      	ands	r2, r1
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x2d4>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	035b      	lsls	r3, r3, #13
 8001b42:	4013      	ands	r3, r2
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	039b      	lsls	r3, r3, #14
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43da      	mvns	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	1e13      	subs	r3, r2, #0
 8001be2:	d000      	beq.n	8001be6 <HAL_GPIO_Init+0x2c6>
 8001be4:	e6a8      	b.n	8001938 <HAL_GPIO_Init+0x18>
  }
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b006      	add	sp, #24
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	50000800 	.word	0x50000800
 8001c00:	50000c00 	.word	0x50000c00
 8001c04:	50001c00 	.word	0x50001c00
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	000a      	movs	r2, r1
 8001c16:	1cbb      	adds	r3, r7, #2
 8001c18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	1cba      	adds	r2, r7, #2
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	4013      	ands	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c26:	230f      	movs	r3, #15
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c30:	230f      	movs	r3, #15
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b004      	add	sp, #16
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	0008      	movs	r0, r1
 8001c50:	0011      	movs	r1, r2
 8001c52:	1cbb      	adds	r3, r7, #2
 8001c54:	1c02      	adds	r2, r0, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	1c7b      	adds	r3, r7, #1
 8001c5a:	1c0a      	adds	r2, r1, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5e:	1c7b      	adds	r3, r7, #1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	1cbb      	adds	r3, r7, #2
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c6e:	e003      	b.n	8001c78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f000 fbaf 	bl	80023f2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c94:	4bcf      	ldr	r3, [pc, #828]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9e:	4bcd      	ldr	r3, [pc, #820]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d100      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x36>
 8001cb4:	e07e      	b.n	8001db4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d007      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d112      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x68>
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4bc1      	ldr	r3, [pc, #772]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCC_OscConfig+0x5a>
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_OscConfig+0x132>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d167      	bne.n	8001db2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f000 fb85 	bl	80023f2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x84>
 8001cf4:	4bb7      	ldr	r3, [pc, #732]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4bb6      	ldr	r3, [pc, #728]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	0249      	lsls	r1, r1, #9
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e027      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	23a0      	movs	r3, #160	; 0xa0
 8001d0a:	02db      	lsls	r3, r3, #11
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d10e      	bne.n	8001d2e <HAL_RCC_OscConfig+0xae>
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4baf      	ldr	r3, [pc, #700]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	02c9      	lsls	r1, r1, #11
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4bad      	ldr	r3, [pc, #692]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4bac      	ldr	r3, [pc, #688]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0249      	lsls	r1, r1, #9
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e012      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d2e:	4ba9      	ldr	r3, [pc, #676]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4ba8      	ldr	r3, [pc, #672]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d34:	49a8      	ldr	r1, [pc, #672]	; (8001fd8 <HAL_RCC_OscConfig+0x358>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	4ba6      	ldr	r3, [pc, #664]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4ba2      	ldr	r3, [pc, #648]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4ba1      	ldr	r3, [pc, #644]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d4e:	49a3      	ldr	r1, [pc, #652]	; (8001fdc <HAL_RCC_OscConfig+0x35c>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d015      	beq.n	8001d88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fcfe 	bl	800175c <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d66:	f7ff fcf9 	bl	800175c <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	; 0x64
 8001d72:	d902      	bls.n	8001d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f000 fb3c 	bl	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7a:	4b96      	ldr	r3, [pc, #600]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	4013      	ands	r3, r2
 8001d84:	d0ef      	beq.n	8001d66 <HAL_RCC_OscConfig+0xe6>
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fce8 	bl	800175c <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d92:	f7ff fce3 	bl	800175c <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	; 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e326      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da4:	4b8b      	ldr	r3, [pc, #556]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x112>
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x140>
 8001dbe:	e08b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d13e      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1d0>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d13b      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	4013      	ands	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_RCC_OscConfig+0x16c>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e302      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a7b      	ldr	r2, [pc, #492]	; (8001fe0 <HAL_RCC_OscConfig+0x360>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	021a      	lsls	r2, r3, #8
 8001dfc:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e02:	4b74      	ldr	r3, [pc, #464]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2209      	movs	r2, #9
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e14:	f000 fc40 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8001e18:	0001      	movs	r1, r0
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	220f      	movs	r2, #15
 8001e22:	4013      	ands	r3, r2
 8001e24:	4a6f      	ldr	r2, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x364>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	000a      	movs	r2, r1
 8001e2a:	40da      	lsrs	r2, r3
 8001e2c:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x368>)
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e30:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <HAL_RCC_OscConfig+0x36c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2513      	movs	r5, #19
 8001e36:	197c      	adds	r4, r7, r5
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fc49 	bl	80016d0 <HAL_InitTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e42:	197b      	adds	r3, r7, r5
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d046      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001e4a:	197b      	adds	r3, r7, r5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	e2d0      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d027      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e56:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2209      	movs	r2, #9
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc78 	bl	800175c <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff fc73 	bl	800175c <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e2b6      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0f1      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a53      	ldr	r2, [pc, #332]	; (8001fe0 <HAL_RCC_OscConfig+0x360>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	021a      	lsls	r2, r3, #8
 8001e9e:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	e018      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	438a      	bics	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fc53 	bl	800175c <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fc4e 	bl	800175c <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e291      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d1f1      	bne.n	8001ebc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x264>
 8001ee2:	e0a1      	b.n	8002028 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d140      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x282>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e277      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <HAL_RCC_OscConfig+0x370>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	0a19      	lsrs	r1, r3, #8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	061a      	lsls	r2, r3, #24
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	0b5b      	lsrs	r3, r3, #13
 8001f30:	3301      	adds	r3, #1
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	0212      	lsls	r2, r2, #8
 8001f36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f38:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	210f      	movs	r1, #15
 8001f40:	400b      	ands	r3, r1
 8001f42:	4928      	ldr	r1, [pc, #160]	; (8001fe4 <HAL_RCC_OscConfig+0x364>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x368>)
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x36c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2513      	movs	r5, #19
 8001f52:	197c      	adds	r4, r7, r5
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fbbb 	bl	80016d0 <HAL_InitTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f5e:	197b      	adds	r3, r7, r5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d060      	beq.n	8002028 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	e242      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03f      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0049      	lsls	r1, r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff fbeb 	bl	800175c <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fbe6 	bl	800175c <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e229      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_RCC_OscConfig+0x370>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	0a19      	lsrs	r1, r3, #8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	061a      	lsls	r2, r3, #24
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e029      	b.n	8002028 <HAL_RCC_OscConfig+0x3a8>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	fffeffff 	.word	0xfffeffff
 8001fdc:	fffbffff 	.word	0xfffbffff
 8001fe0:	ffffe0ff 	.word	0xffffe0ff
 8001fe4:	08005020 	.word	0x08005020
 8001fe8:	20000030 	.word	0x20000030
 8001fec:	20000034 	.word	0x20000034
 8001ff0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff4:	4bbd      	ldr	r3, [pc, #756]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4bbc      	ldr	r3, [pc, #752]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8001ffa:	49bd      	ldr	r1, [pc, #756]	; (80022f0 <HAL_RCC_OscConfig+0x670>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fbac 	bl	800175c <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200a:	f7ff fba7 	bl	800175c <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1ea      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800201c:	4bb3      	ldr	r3, [pc, #716]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	4013      	ands	r3, r2
 8002030:	d036      	beq.n	80020a0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d019      	beq.n	800206e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4bac      	ldr	r3, [pc, #688]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800203c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203e:	4bab      	ldr	r3, [pc, #684]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002040:	2101      	movs	r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff fb89 	bl	800175c <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fb84 	bl	800175c <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1c7      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002062:	4ba2      	ldr	r3, [pc, #648]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d0f1      	beq.n	8002050 <HAL_RCC_OscConfig+0x3d0>
 800206c:	e018      	b.n	80020a0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b9f      	ldr	r3, [pc, #636]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002072:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002074:	2101      	movs	r1, #1
 8002076:	438a      	bics	r2, r1
 8002078:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff fb6f 	bl	800175c <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fb6a 	bl	800175c <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1ad      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002096:	4b95      	ldr	r3, [pc, #596]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d1f1      	bne.n	8002084 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2204      	movs	r2, #4
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_RCC_OscConfig+0x42c>
 80020aa:	e0ae      	b.n	800220a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ac:	2027      	movs	r0, #39	; 0x27
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b4:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80020b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	055b      	lsls	r3, r3, #21
 80020bc:	4013      	ands	r3, r2
 80020be:	d109      	bne.n	80020d4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b8a      	ldr	r3, [pc, #552]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80020c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c4:	4b89      	ldr	r3, [pc, #548]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0549      	lsls	r1, r1, #21
 80020ca:	430a      	orrs	r2, r1
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020ce:	183b      	adds	r3, r7, r0
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b87      	ldr	r3, [pc, #540]	; (80022f4 <HAL_RCC_OscConfig+0x674>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	d11a      	bne.n	8002116 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e0:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <HAL_RCC_OscConfig+0x674>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_RCC_OscConfig+0x674>)
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0049      	lsls	r1, r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fb35 	bl	800175c <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f8:	f7ff fb30 	bl	800175c <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e173      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x674>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4013      	ands	r3, r2
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	429a      	cmp	r2, r3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_OscConfig+0x4b2>
 8002122:	4b72      	ldr	r3, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002126:	4b71      	ldr	r3, [pc, #452]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	0049      	lsls	r1, r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	651a      	str	r2, [r3, #80]	; 0x50
 8002130:	e031      	b.n	8002196 <HAL_RCC_OscConfig+0x516>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x4d4>
 800213a:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800213c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213e:	4b6b      	ldr	r3, [pc, #428]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002140:	496b      	ldr	r1, [pc, #428]	; (80022f0 <HAL_RCC_OscConfig+0x670>)
 8002142:	400a      	ands	r2, r1
 8002144:	651a      	str	r2, [r3, #80]	; 0x50
 8002146:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214a:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800214c:	496a      	ldr	r1, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x678>)
 800214e:	400a      	ands	r2, r1
 8002150:	651a      	str	r2, [r3, #80]	; 0x50
 8002152:	e020      	b.n	8002196 <HAL_RCC_OscConfig+0x516>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	23a0      	movs	r3, #160	; 0xa0
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	429a      	cmp	r2, r3
 800215e:	d10e      	bne.n	800217e <HAL_RCC_OscConfig+0x4fe>
 8002160:	4b62      	ldr	r3, [pc, #392]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	00c9      	lsls	r1, r1, #3
 800216a:	430a      	orrs	r2, r1
 800216c:	651a      	str	r2, [r3, #80]	; 0x50
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002172:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0049      	lsls	r1, r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	651a      	str	r2, [r3, #80]	; 0x50
 800217c:	e00b      	b.n	8002196 <HAL_RCC_OscConfig+0x516>
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002182:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002184:	495a      	ldr	r1, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x670>)
 8002186:	400a      	ands	r2, r1
 8002188:	651a      	str	r2, [r3, #80]	; 0x50
 800218a:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800218c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002190:	4959      	ldr	r1, [pc, #356]	; (80022f8 <HAL_RCC_OscConfig+0x678>)
 8002192:	400a      	ands	r2, r1
 8002194:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d015      	beq.n	80021ca <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff fadd 	bl	800175c <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a6:	e009      	b.n	80021bc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7ff fad8 	bl	800175c <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_RCC_OscConfig+0x67c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e11a      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80021be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x528>
 80021c8:	e014      	b.n	80021f4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fac7 	bl	800175c <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021d2:	e009      	b.n	80021e8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff fac2 	bl	800175c <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	4a47      	ldr	r2, [pc, #284]	; (80022fc <HAL_RCC_OscConfig+0x67c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e104      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80021ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d1ef      	bne.n	80021d4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f4:	2327      	movs	r3, #39	; 0x27
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002204:	493e      	ldr	r1, [pc, #248]	; (8002300 <HAL_RCC_OscConfig+0x680>)
 8002206:	400a      	ands	r2, r1
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2220      	movs	r2, #32
 8002210:	4013      	ands	r3, r2
 8002212:	d049      	beq.n	80022a8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d026      	beq.n	800226a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002222:	2101      	movs	r1, #1
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800222a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800222e:	2101      	movs	r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
 8002234:	4b33      	ldr	r3, [pc, #204]	; (8002304 <HAL_RCC_OscConfig+0x684>)
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_RCC_OscConfig+0x684>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	0189      	lsls	r1, r1, #6
 800223e:	430a      	orrs	r2, r1
 8002240:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fa8b 	bl	800175c <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224c:	f7ff fa86 	bl	800175c <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0c9      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d0f1      	beq.n	800224c <HAL_RCC_OscConfig+0x5cc>
 8002268:	e01e      	b.n	80022a8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002270:	2101      	movs	r1, #1
 8002272:	438a      	bics	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_OscConfig+0x684>)
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0x684>)
 800227c:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_OscConfig+0x688>)
 800227e:	400a      	ands	r2, r1
 8002280:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fa6b 	bl	800175c <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800228c:	f7ff fa66 	bl	800175c <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0a9      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d1f1      	bne.n	800228c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d100      	bne.n	80022b2 <HAL_RCC_OscConfig+0x632>
 80022b0:	e09e      	b.n	80023f0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d100      	bne.n	80022ba <HAL_RCC_OscConfig+0x63a>
 80022b8:	e077      	b.n	80023aa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d158      	bne.n	8002374 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_OscConfig+0x66c>)
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_RCC_OscConfig+0x68c>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fa45 	bl	800175c <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022d6:	e01b      	b.n	8002310 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff fa40 	bl	800175c <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d914      	bls.n	8002310 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e083      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40021000 	.word	0x40021000
 80022f0:	fffffeff 	.word	0xfffffeff
 80022f4:	40007000 	.word	0x40007000
 80022f8:	fffffbff 	.word	0xfffffbff
 80022fc:	00001388 	.word	0x00001388
 8002300:	efffffff 	.word	0xefffffff
 8002304:	40010000 	.word	0x40010000
 8002308:	ffffdfff 	.word	0xffffdfff
 800230c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	049b      	lsls	r3, r3, #18
 8002318:	4013      	ands	r3, r2
 800231a:	d1dd      	bne.n	80022d8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a37      	ldr	r2, [pc, #220]	; (8002400 <HAL_RCC_OscConfig+0x780>)
 8002322:	4013      	ands	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	431a      	orrs	r2, r3
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0449      	lsls	r1, r1, #17
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff fa07 	bl	800175c <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fa02 	bl	800175c <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e045      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	049b      	lsls	r3, r3, #18
 800236e:	4013      	ands	r3, r2
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x6d4>
 8002372:	e03d      	b.n	80023f0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 800237a:	4922      	ldr	r1, [pc, #136]	; (8002404 <HAL_RCC_OscConfig+0x784>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff f9ec 	bl	800175c <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7ff f9e7 	bl	800175c <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e02a      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	049b      	lsls	r3, r3, #18
 80023a4:	4013      	ands	r3, r2
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x70a>
 80023a8:	e022      	b.n	80023f0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01d      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_RCC_OscConfig+0x77c>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	025b      	lsls	r3, r3, #9
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10f      	bne.n	80023ec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	23f0      	movs	r3, #240	; 0xf0
 80023d0:	039b      	lsls	r3, r3, #14
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	23c0      	movs	r3, #192	; 0xc0
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b00a      	add	sp, #40	; 0x28
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	40021000 	.word	0x40021000
 8002400:	ff02ffff 	.word	0xff02ffff
 8002404:	feffffff 	.word	0xfeffffff

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e128      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b96      	ldr	r3, [pc, #600]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d91e      	bls.n	8002468 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b93      	ldr	r3, [pc, #588]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	4b90      	ldr	r3, [pc, #576]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800243c:	f7ff f98e 	bl	800175c <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002444:	e009      	b.n	800245a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7ff f989 	bl	800175c <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a8a      	ldr	r2, [pc, #552]	; (800267c <HAL_RCC_ClockConfig+0x274>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e109      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b87      	ldr	r3, [pc, #540]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	4013      	ands	r3, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d1ee      	bne.n	8002446 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002472:	4b83      	ldr	r3, [pc, #524]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	22f0      	movs	r2, #240	; 0xf0
 8002478:	4393      	bics	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d100      	bne.n	8002492 <HAL_RCC_ClockConfig+0x8a>
 8002490:	e089      	b.n	80025a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249a:	4b79      	ldr	r3, [pc, #484]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	029b      	lsls	r3, r3, #10
 80024a2:	4013      	ands	r3, r2
 80024a4:	d120      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0e1      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	049b      	lsls	r3, r3, #18
 80024ba:	4013      	ands	r3, r2
 80024bc:	d114      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0d5      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2204      	movs	r2, #4
 80024d0:	4013      	ands	r3, r2
 80024d2:	d109      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0ca      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0c2      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e8:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2203      	movs	r2, #3
 80024ee:	4393      	bics	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7ff f92e 	bl	800175c <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d111      	bne.n	8002530 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	e009      	b.n	8002522 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250e:	f7ff f925 	bl	800175c <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_RCC_ClockConfig+0x274>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0a5      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	220c      	movs	r2, #12
 8002528:	4013      	ands	r3, r2
 800252a:	2b08      	cmp	r3, #8
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
 800252e:	e03a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d111      	bne.n	800255c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002538:	e009      	b.n	800254e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7ff f90f 	bl	800175c <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	4a4d      	ldr	r2, [pc, #308]	; (800267c <HAL_RCC_ClockConfig+0x274>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e08f      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	220c      	movs	r2, #12
 8002554:	4013      	ands	r3, r2
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_ClockConfig+0x132>
 800255a:	e024      	b.n	80025a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d11b      	bne.n	800259c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002564:	e009      	b.n	800257a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7ff f8f9 	bl	800175c <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_RCC_ClockConfig+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e079      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	220c      	movs	r2, #12
 8002580:	4013      	ands	r3, r2
 8002582:	2b04      	cmp	r3, #4
 8002584:	d1ef      	bne.n	8002566 <HAL_RCC_ClockConfig+0x15e>
 8002586:	e00e      	b.n	80025a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7ff f8e8 	bl	800175c <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	4a3a      	ldr	r2, [pc, #232]	; (800267c <HAL_RCC_ClockConfig+0x274>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e068      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	220c      	movs	r2, #12
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2201      	movs	r2, #1
 80025ac:	4013      	ands	r3, r2
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d21e      	bcs.n	80025f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025c6:	f7ff f8c9 	bl	800175c <HAL_GetTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7ff f8c4 	bl	800175c <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_RCC_ClockConfig+0x274>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e044      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_ClockConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4013      	ands	r3, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d1ee      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2204      	movs	r2, #4
 80025f8:	4013      	ands	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a20      	ldr	r2, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x27c>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	4013      	ands	r3, r2
 8002618:	d00a      	beq.n	8002630 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_RCC_ClockConfig+0x280>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00da      	lsls	r2, r3, #3
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002630:	f000 f832 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002634:	0001      	movs	r1, r0
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x278>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	220f      	movs	r2, #15
 800263e:	4013      	ands	r3, r2
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x284>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	000a      	movs	r2, r1
 8002646:	40da      	lsrs	r2, r3
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_ClockConfig+0x288>)
 800264a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_RCC_ClockConfig+0x28c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	250b      	movs	r5, #11
 8002652:	197c      	adds	r4, r7, r5
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff f83b 	bl	80016d0 <HAL_InitTick>
 800265a:	0003      	movs	r3, r0
 800265c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800265e:	197b      	adds	r3, r7, r5
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002666:	197b      	adds	r3, r7, r5
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	e000      	b.n	800266e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bdb0      	pop	{r4, r5, r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40022000 	.word	0x40022000
 800267c:	00001388 	.word	0x00001388
 8002680:	40021000 	.word	0x40021000
 8002684:	fffff8ff 	.word	0xfffff8ff
 8002688:	ffffc7ff 	.word	0xffffc7ff
 800268c:	08005020 	.word	0x08005020
 8002690:	20000030 	.word	0x20000030
 8002694:	20000034 	.word	0x20000034

08002698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b08e      	sub	sp, #56	; 0x38
 800269c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800269e:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	230c      	movs	r3, #12
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d014      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x40>
 80026ae:	d900      	bls.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80026b0:	e07b      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x112>
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x24>
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ba:	e076      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026bc:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	4013      	ands	r3, r2
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80026ca:	e07c      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026d0:	e079      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d2:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_RCC_GetSysClockFreq+0x144>)
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026d6:	e076      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	0c9a      	lsrs	r2, r3, #18
 80026dc:	230f      	movs	r3, #15
 80026de:	401a      	ands	r2, r3
 80026e0:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	0d9a      	lsrs	r2, r3, #22
 80026ea:	2303      	movs	r3, #3
 80026ec:	4013      	ands	r3, r2
 80026ee:	3301      	adds	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f2:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	4013      	ands	r3, r2
 80026fc:	d01a      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	4a35      	ldr	r2, [pc, #212]	; (80027dc <HAL_RCC_GetSysClockFreq+0x144>)
 8002708:	2300      	movs	r3, #0
 800270a:	69b8      	ldr	r0, [r7, #24]
 800270c:	69f9      	ldr	r1, [r7, #28]
 800270e:	f7fd fdb1 	bl	8000274 <__aeabi_lmul>
 8002712:	0002      	movs	r2, r0
 8002714:	000b      	movs	r3, r1
 8002716:	0010      	movs	r0, r2
 8002718:	0019      	movs	r1, r3
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f7fd fd85 	bl	8000234 <__aeabi_uldivmod>
 800272a:	0002      	movs	r2, r0
 800272c:	000b      	movs	r3, r1
 800272e:	0013      	movs	r3, r2
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
 8002732:	e037      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002734:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2210      	movs	r2, #16
 800273a:	4013      	ands	r3, r2
 800273c:	d01a      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002748:	2300      	movs	r3, #0
 800274a:	68b8      	ldr	r0, [r7, #8]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	f7fd fd91 	bl	8000274 <__aeabi_lmul>
 8002752:	0002      	movs	r2, r0
 8002754:	000b      	movs	r3, r1
 8002756:	0010      	movs	r0, r2
 8002758:	0019      	movs	r1, r3
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f7fd fd65 	bl	8000234 <__aeabi_uldivmod>
 800276a:	0002      	movs	r2, r0
 800276c:	000b      	movs	r3, r1
 800276e:	0013      	movs	r3, r2
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
 8002772:	e017      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	0018      	movs	r0, r3
 8002778:	2300      	movs	r3, #0
 800277a:	0019      	movs	r1, r3
 800277c:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800277e:	2300      	movs	r3, #0
 8002780:	f7fd fd78 	bl	8000274 <__aeabi_lmul>
 8002784:	0002      	movs	r2, r0
 8002786:	000b      	movs	r3, r1
 8002788:	0010      	movs	r0, r2
 800278a:	0019      	movs	r1, r3
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	001c      	movs	r4, r3
 8002790:	2300      	movs	r3, #0
 8002792:	001d      	movs	r5, r3
 8002794:	0022      	movs	r2, r4
 8002796:	002b      	movs	r3, r5
 8002798:	f7fd fd4c 	bl	8000234 <__aeabi_uldivmod>
 800279c:	0002      	movs	r2, r0
 800279e:	000b      	movs	r3, r1
 80027a0:	0013      	movs	r3, r2
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027a8:	e00d      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0b5b      	lsrs	r3, r3, #13
 80027b0:	2207      	movs	r2, #7
 80027b2:	4013      	ands	r3, r2
 80027b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	3301      	adds	r3, #1
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0212      	lsls	r2, r2, #8
 80027be:	409a      	lsls	r2, r3
 80027c0:	0013      	movs	r3, r2
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b00e      	add	sp, #56	; 0x38
 80027ce:	bdb0      	pop	{r4, r5, r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	003d0900 	.word	0x003d0900
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200
 80027e0:	08005030 	.word	0x08005030

080027e4 <__errno>:
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <__errno+0x8>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	4770      	bx	lr
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	2000003c 	.word	0x2000003c

080027f0 <__libc_init_array>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	2600      	movs	r6, #0
 80027f4:	4d0c      	ldr	r5, [pc, #48]	; (8002828 <__libc_init_array+0x38>)
 80027f6:	4c0d      	ldr	r4, [pc, #52]	; (800282c <__libc_init_array+0x3c>)
 80027f8:	1b64      	subs	r4, r4, r5
 80027fa:	10a4      	asrs	r4, r4, #2
 80027fc:	42a6      	cmp	r6, r4
 80027fe:	d109      	bne.n	8002814 <__libc_init_array+0x24>
 8002800:	2600      	movs	r6, #0
 8002802:	f000 fc8b 	bl	800311c <_init>
 8002806:	4d0a      	ldr	r5, [pc, #40]	; (8002830 <__libc_init_array+0x40>)
 8002808:	4c0a      	ldr	r4, [pc, #40]	; (8002834 <__libc_init_array+0x44>)
 800280a:	1b64      	subs	r4, r4, r5
 800280c:	10a4      	asrs	r4, r4, #2
 800280e:	42a6      	cmp	r6, r4
 8002810:	d105      	bne.n	800281e <__libc_init_array+0x2e>
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	00b3      	lsls	r3, r6, #2
 8002816:	58eb      	ldr	r3, [r5, r3]
 8002818:	4798      	blx	r3
 800281a:	3601      	adds	r6, #1
 800281c:	e7ee      	b.n	80027fc <__libc_init_array+0xc>
 800281e:	00b3      	lsls	r3, r6, #2
 8002820:	58eb      	ldr	r3, [r5, r3]
 8002822:	4798      	blx	r3
 8002824:	3601      	adds	r6, #1
 8002826:	e7f2      	b.n	800280e <__libc_init_array+0x1e>
 8002828:	08005074 	.word	0x08005074
 800282c:	08005074 	.word	0x08005074
 8002830:	08005074 	.word	0x08005074
 8002834:	08005078 	.word	0x08005078

08002838 <memset>:
 8002838:	0003      	movs	r3, r0
 800283a:	1882      	adds	r2, r0, r2
 800283c:	4293      	cmp	r3, r2
 800283e:	d100      	bne.n	8002842 <memset+0xa>
 8002840:	4770      	bx	lr
 8002842:	7019      	strb	r1, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	e7f9      	b.n	800283c <memset+0x4>

08002848 <siprintf>:
 8002848:	b40e      	push	{r1, r2, r3}
 800284a:	b500      	push	{lr}
 800284c:	490b      	ldr	r1, [pc, #44]	; (800287c <siprintf+0x34>)
 800284e:	b09c      	sub	sp, #112	; 0x70
 8002850:	ab1d      	add	r3, sp, #116	; 0x74
 8002852:	9002      	str	r0, [sp, #8]
 8002854:	9006      	str	r0, [sp, #24]
 8002856:	9107      	str	r1, [sp, #28]
 8002858:	9104      	str	r1, [sp, #16]
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <siprintf+0x38>)
 800285c:	4909      	ldr	r1, [pc, #36]	; (8002884 <siprintf+0x3c>)
 800285e:	cb04      	ldmia	r3!, {r2}
 8002860:	9105      	str	r1, [sp, #20]
 8002862:	6800      	ldr	r0, [r0, #0]
 8002864:	a902      	add	r1, sp, #8
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	f000 f870 	bl	800294c <_svfiprintf_r>
 800286c:	2300      	movs	r3, #0
 800286e:	9a02      	ldr	r2, [sp, #8]
 8002870:	7013      	strb	r3, [r2, #0]
 8002872:	b01c      	add	sp, #112	; 0x70
 8002874:	bc08      	pop	{r3}
 8002876:	b003      	add	sp, #12
 8002878:	4718      	bx	r3
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	7fffffff 	.word	0x7fffffff
 8002880:	2000003c 	.word	0x2000003c
 8002884:	ffff0208 	.word	0xffff0208

08002888 <__ssputs_r>:
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	688e      	ldr	r6, [r1, #8]
 800288c:	b085      	sub	sp, #20
 800288e:	0007      	movs	r7, r0
 8002890:	000c      	movs	r4, r1
 8002892:	9203      	str	r2, [sp, #12]
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	429e      	cmp	r6, r3
 8002898:	d83c      	bhi.n	8002914 <__ssputs_r+0x8c>
 800289a:	2390      	movs	r3, #144	; 0x90
 800289c:	898a      	ldrh	r2, [r1, #12]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	421a      	tst	r2, r3
 80028a2:	d034      	beq.n	800290e <__ssputs_r+0x86>
 80028a4:	6909      	ldr	r1, [r1, #16]
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	6960      	ldr	r0, [r4, #20]
 80028aa:	1a5b      	subs	r3, r3, r1
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	2303      	movs	r3, #3
 80028b0:	4343      	muls	r3, r0
 80028b2:	0fdd      	lsrs	r5, r3, #31
 80028b4:	18ed      	adds	r5, r5, r3
 80028b6:	9b01      	ldr	r3, [sp, #4]
 80028b8:	9802      	ldr	r0, [sp, #8]
 80028ba:	3301      	adds	r3, #1
 80028bc:	181b      	adds	r3, r3, r0
 80028be:	106d      	asrs	r5, r5, #1
 80028c0:	42ab      	cmp	r3, r5
 80028c2:	d900      	bls.n	80028c6 <__ssputs_r+0x3e>
 80028c4:	001d      	movs	r5, r3
 80028c6:	0553      	lsls	r3, r2, #21
 80028c8:	d532      	bpl.n	8002930 <__ssputs_r+0xa8>
 80028ca:	0029      	movs	r1, r5
 80028cc:	0038      	movs	r0, r7
 80028ce:	f000 fb53 	bl	8002f78 <_malloc_r>
 80028d2:	1e06      	subs	r6, r0, #0
 80028d4:	d109      	bne.n	80028ea <__ssputs_r+0x62>
 80028d6:	230c      	movs	r3, #12
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	2001      	movs	r0, #1
 80028de:	89a2      	ldrh	r2, [r4, #12]
 80028e0:	4240      	negs	r0, r0
 80028e2:	4313      	orrs	r3, r2
 80028e4:	81a3      	strh	r3, [r4, #12]
 80028e6:	b005      	add	sp, #20
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ea:	9a02      	ldr	r2, [sp, #8]
 80028ec:	6921      	ldr	r1, [r4, #16]
 80028ee:	f000 faba 	bl	8002e66 <memcpy>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <__ssputs_r+0xc0>)
 80028f6:	401a      	ands	r2, r3
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	4313      	orrs	r3, r2
 80028fc:	81a3      	strh	r3, [r4, #12]
 80028fe:	9b02      	ldr	r3, [sp, #8]
 8002900:	6126      	str	r6, [r4, #16]
 8002902:	18f6      	adds	r6, r6, r3
 8002904:	6026      	str	r6, [r4, #0]
 8002906:	6165      	str	r5, [r4, #20]
 8002908:	9e01      	ldr	r6, [sp, #4]
 800290a:	1aed      	subs	r5, r5, r3
 800290c:	60a5      	str	r5, [r4, #8]
 800290e:	9b01      	ldr	r3, [sp, #4]
 8002910:	429e      	cmp	r6, r3
 8002912:	d900      	bls.n	8002916 <__ssputs_r+0x8e>
 8002914:	9e01      	ldr	r6, [sp, #4]
 8002916:	0032      	movs	r2, r6
 8002918:	9903      	ldr	r1, [sp, #12]
 800291a:	6820      	ldr	r0, [r4, #0]
 800291c:	f000 faac 	bl	8002e78 <memmove>
 8002920:	68a3      	ldr	r3, [r4, #8]
 8002922:	2000      	movs	r0, #0
 8002924:	1b9b      	subs	r3, r3, r6
 8002926:	60a3      	str	r3, [r4, #8]
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	199e      	adds	r6, r3, r6
 800292c:	6026      	str	r6, [r4, #0]
 800292e:	e7da      	b.n	80028e6 <__ssputs_r+0x5e>
 8002930:	002a      	movs	r2, r5
 8002932:	0038      	movs	r0, r7
 8002934:	f000 fb96 	bl	8003064 <_realloc_r>
 8002938:	1e06      	subs	r6, r0, #0
 800293a:	d1e0      	bne.n	80028fe <__ssputs_r+0x76>
 800293c:	0038      	movs	r0, r7
 800293e:	6921      	ldr	r1, [r4, #16]
 8002940:	f000 faae 	bl	8002ea0 <_free_r>
 8002944:	e7c7      	b.n	80028d6 <__ssputs_r+0x4e>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	fffffb7f 	.word	0xfffffb7f

0800294c <_svfiprintf_r>:
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b0a1      	sub	sp, #132	; 0x84
 8002950:	9003      	str	r0, [sp, #12]
 8002952:	001d      	movs	r5, r3
 8002954:	898b      	ldrh	r3, [r1, #12]
 8002956:	000f      	movs	r7, r1
 8002958:	0016      	movs	r6, r2
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	d511      	bpl.n	8002982 <_svfiprintf_r+0x36>
 800295e:	690b      	ldr	r3, [r1, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <_svfiprintf_r+0x36>
 8002964:	2140      	movs	r1, #64	; 0x40
 8002966:	f000 fb07 	bl	8002f78 <_malloc_r>
 800296a:	6038      	str	r0, [r7, #0]
 800296c:	6138      	str	r0, [r7, #16]
 800296e:	2800      	cmp	r0, #0
 8002970:	d105      	bne.n	800297e <_svfiprintf_r+0x32>
 8002972:	230c      	movs	r3, #12
 8002974:	9a03      	ldr	r2, [sp, #12]
 8002976:	3801      	subs	r0, #1
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	b021      	add	sp, #132	; 0x84
 800297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	2300      	movs	r3, #0
 8002984:	ac08      	add	r4, sp, #32
 8002986:	6163      	str	r3, [r4, #20]
 8002988:	3320      	adds	r3, #32
 800298a:	7663      	strb	r3, [r4, #25]
 800298c:	3310      	adds	r3, #16
 800298e:	76a3      	strb	r3, [r4, #26]
 8002990:	9507      	str	r5, [sp, #28]
 8002992:	0035      	movs	r5, r6
 8002994:	782b      	ldrb	r3, [r5, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <_svfiprintf_r+0x52>
 800299a:	2b25      	cmp	r3, #37	; 0x25
 800299c:	d147      	bne.n	8002a2e <_svfiprintf_r+0xe2>
 800299e:	1bab      	subs	r3, r5, r6
 80029a0:	9305      	str	r3, [sp, #20]
 80029a2:	42b5      	cmp	r5, r6
 80029a4:	d00c      	beq.n	80029c0 <_svfiprintf_r+0x74>
 80029a6:	0032      	movs	r2, r6
 80029a8:	0039      	movs	r1, r7
 80029aa:	9803      	ldr	r0, [sp, #12]
 80029ac:	f7ff ff6c 	bl	8002888 <__ssputs_r>
 80029b0:	1c43      	adds	r3, r0, #1
 80029b2:	d100      	bne.n	80029b6 <_svfiprintf_r+0x6a>
 80029b4:	e0ae      	b.n	8002b14 <_svfiprintf_r+0x1c8>
 80029b6:	6962      	ldr	r2, [r4, #20]
 80029b8:	9b05      	ldr	r3, [sp, #20]
 80029ba:	4694      	mov	ip, r2
 80029bc:	4463      	add	r3, ip
 80029be:	6163      	str	r3, [r4, #20]
 80029c0:	782b      	ldrb	r3, [r5, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d100      	bne.n	80029c8 <_svfiprintf_r+0x7c>
 80029c6:	e0a5      	b.n	8002b14 <_svfiprintf_r+0x1c8>
 80029c8:	2201      	movs	r2, #1
 80029ca:	2300      	movs	r3, #0
 80029cc:	4252      	negs	r2, r2
 80029ce:	6062      	str	r2, [r4, #4]
 80029d0:	a904      	add	r1, sp, #16
 80029d2:	3254      	adds	r2, #84	; 0x54
 80029d4:	1852      	adds	r2, r2, r1
 80029d6:	1c6e      	adds	r6, r5, #1
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	60e3      	str	r3, [r4, #12]
 80029dc:	60a3      	str	r3, [r4, #8]
 80029de:	7013      	strb	r3, [r2, #0]
 80029e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80029e2:	2205      	movs	r2, #5
 80029e4:	7831      	ldrb	r1, [r6, #0]
 80029e6:	4854      	ldr	r0, [pc, #336]	; (8002b38 <_svfiprintf_r+0x1ec>)
 80029e8:	f000 fa32 	bl	8002e50 <memchr>
 80029ec:	1c75      	adds	r5, r6, #1
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d11f      	bne.n	8002a32 <_svfiprintf_r+0xe6>
 80029f2:	6822      	ldr	r2, [r4, #0]
 80029f4:	06d3      	lsls	r3, r2, #27
 80029f6:	d504      	bpl.n	8002a02 <_svfiprintf_r+0xb6>
 80029f8:	2353      	movs	r3, #83	; 0x53
 80029fa:	a904      	add	r1, sp, #16
 80029fc:	185b      	adds	r3, r3, r1
 80029fe:	2120      	movs	r1, #32
 8002a00:	7019      	strb	r1, [r3, #0]
 8002a02:	0713      	lsls	r3, r2, #28
 8002a04:	d504      	bpl.n	8002a10 <_svfiprintf_r+0xc4>
 8002a06:	2353      	movs	r3, #83	; 0x53
 8002a08:	a904      	add	r1, sp, #16
 8002a0a:	185b      	adds	r3, r3, r1
 8002a0c:	212b      	movs	r1, #43	; 0x2b
 8002a0e:	7019      	strb	r1, [r3, #0]
 8002a10:	7833      	ldrb	r3, [r6, #0]
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d016      	beq.n	8002a44 <_svfiprintf_r+0xf8>
 8002a16:	0035      	movs	r5, r6
 8002a18:	2100      	movs	r1, #0
 8002a1a:	200a      	movs	r0, #10
 8002a1c:	68e3      	ldr	r3, [r4, #12]
 8002a1e:	782a      	ldrb	r2, [r5, #0]
 8002a20:	1c6e      	adds	r6, r5, #1
 8002a22:	3a30      	subs	r2, #48	; 0x30
 8002a24:	2a09      	cmp	r2, #9
 8002a26:	d94e      	bls.n	8002ac6 <_svfiprintf_r+0x17a>
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d111      	bne.n	8002a50 <_svfiprintf_r+0x104>
 8002a2c:	e017      	b.n	8002a5e <_svfiprintf_r+0x112>
 8002a2e:	3501      	adds	r5, #1
 8002a30:	e7b0      	b.n	8002994 <_svfiprintf_r+0x48>
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <_svfiprintf_r+0x1ec>)
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	1ac0      	subs	r0, r0, r3
 8002a38:	2301      	movs	r3, #1
 8002a3a:	4083      	lsls	r3, r0
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	002e      	movs	r6, r5
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	e7ce      	b.n	80029e2 <_svfiprintf_r+0x96>
 8002a44:	9b07      	ldr	r3, [sp, #28]
 8002a46:	1d19      	adds	r1, r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	9107      	str	r1, [sp, #28]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db01      	blt.n	8002a54 <_svfiprintf_r+0x108>
 8002a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a52:	e004      	b.n	8002a5e <_svfiprintf_r+0x112>
 8002a54:	425b      	negs	r3, r3
 8002a56:	60e3      	str	r3, [r4, #12]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	782b      	ldrb	r3, [r5, #0]
 8002a60:	2b2e      	cmp	r3, #46	; 0x2e
 8002a62:	d10a      	bne.n	8002a7a <_svfiprintf_r+0x12e>
 8002a64:	786b      	ldrb	r3, [r5, #1]
 8002a66:	2b2a      	cmp	r3, #42	; 0x2a
 8002a68:	d135      	bne.n	8002ad6 <_svfiprintf_r+0x18a>
 8002a6a:	9b07      	ldr	r3, [sp, #28]
 8002a6c:	3502      	adds	r5, #2
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	9207      	str	r2, [sp, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db2b      	blt.n	8002ad0 <_svfiprintf_r+0x184>
 8002a78:	9309      	str	r3, [sp, #36]	; 0x24
 8002a7a:	4e30      	ldr	r6, [pc, #192]	; (8002b3c <_svfiprintf_r+0x1f0>)
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	0030      	movs	r0, r6
 8002a80:	7829      	ldrb	r1, [r5, #0]
 8002a82:	f000 f9e5 	bl	8002e50 <memchr>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d006      	beq.n	8002a98 <_svfiprintf_r+0x14c>
 8002a8a:	2340      	movs	r3, #64	; 0x40
 8002a8c:	1b80      	subs	r0, r0, r6
 8002a8e:	4083      	lsls	r3, r0
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	3501      	adds	r5, #1
 8002a94:	4313      	orrs	r3, r2
 8002a96:	6023      	str	r3, [r4, #0]
 8002a98:	7829      	ldrb	r1, [r5, #0]
 8002a9a:	2206      	movs	r2, #6
 8002a9c:	4828      	ldr	r0, [pc, #160]	; (8002b40 <_svfiprintf_r+0x1f4>)
 8002a9e:	1c6e      	adds	r6, r5, #1
 8002aa0:	7621      	strb	r1, [r4, #24]
 8002aa2:	f000 f9d5 	bl	8002e50 <memchr>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d03c      	beq.n	8002b24 <_svfiprintf_r+0x1d8>
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <_svfiprintf_r+0x1f8>)
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d125      	bne.n	8002afc <_svfiprintf_r+0x1b0>
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	9b07      	ldr	r3, [sp, #28]
 8002ab4:	3307      	adds	r3, #7
 8002ab6:	4393      	bics	r3, r2
 8002ab8:	3308      	adds	r3, #8
 8002aba:	9307      	str	r3, [sp, #28]
 8002abc:	6963      	ldr	r3, [r4, #20]
 8002abe:	9a04      	ldr	r2, [sp, #16]
 8002ac0:	189b      	adds	r3, r3, r2
 8002ac2:	6163      	str	r3, [r4, #20]
 8002ac4:	e765      	b.n	8002992 <_svfiprintf_r+0x46>
 8002ac6:	4343      	muls	r3, r0
 8002ac8:	0035      	movs	r5, r6
 8002aca:	2101      	movs	r1, #1
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	e7a6      	b.n	8002a1e <_svfiprintf_r+0xd2>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	e7d0      	b.n	8002a78 <_svfiprintf_r+0x12c>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	200a      	movs	r0, #10
 8002ada:	001a      	movs	r2, r3
 8002adc:	3501      	adds	r5, #1
 8002ade:	6063      	str	r3, [r4, #4]
 8002ae0:	7829      	ldrb	r1, [r5, #0]
 8002ae2:	1c6e      	adds	r6, r5, #1
 8002ae4:	3930      	subs	r1, #48	; 0x30
 8002ae6:	2909      	cmp	r1, #9
 8002ae8:	d903      	bls.n	8002af2 <_svfiprintf_r+0x1a6>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0c5      	beq.n	8002a7a <_svfiprintf_r+0x12e>
 8002aee:	9209      	str	r2, [sp, #36]	; 0x24
 8002af0:	e7c3      	b.n	8002a7a <_svfiprintf_r+0x12e>
 8002af2:	4342      	muls	r2, r0
 8002af4:	0035      	movs	r5, r6
 8002af6:	2301      	movs	r3, #1
 8002af8:	1852      	adds	r2, r2, r1
 8002afa:	e7f1      	b.n	8002ae0 <_svfiprintf_r+0x194>
 8002afc:	ab07      	add	r3, sp, #28
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	003a      	movs	r2, r7
 8002b02:	0021      	movs	r1, r4
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <_svfiprintf_r+0x1fc>)
 8002b06:	9803      	ldr	r0, [sp, #12]
 8002b08:	e000      	b.n	8002b0c <_svfiprintf_r+0x1c0>
 8002b0a:	bf00      	nop
 8002b0c:	9004      	str	r0, [sp, #16]
 8002b0e:	9b04      	ldr	r3, [sp, #16]
 8002b10:	3301      	adds	r3, #1
 8002b12:	d1d3      	bne.n	8002abc <_svfiprintf_r+0x170>
 8002b14:	89bb      	ldrh	r3, [r7, #12]
 8002b16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002b18:	065b      	lsls	r3, r3, #25
 8002b1a:	d400      	bmi.n	8002b1e <_svfiprintf_r+0x1d2>
 8002b1c:	e72d      	b.n	800297a <_svfiprintf_r+0x2e>
 8002b1e:	2001      	movs	r0, #1
 8002b20:	4240      	negs	r0, r0
 8002b22:	e72a      	b.n	800297a <_svfiprintf_r+0x2e>
 8002b24:	ab07      	add	r3, sp, #28
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	003a      	movs	r2, r7
 8002b2a:	0021      	movs	r1, r4
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <_svfiprintf_r+0x1fc>)
 8002b2e:	9803      	ldr	r0, [sp, #12]
 8002b30:	f000 f87c 	bl	8002c2c <_printf_i>
 8002b34:	e7ea      	b.n	8002b0c <_svfiprintf_r+0x1c0>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	08005039 	.word	0x08005039
 8002b3c:	0800503f 	.word	0x0800503f
 8002b40:	08005043 	.word	0x08005043
 8002b44:	00000000 	.word	0x00000000
 8002b48:	08002889 	.word	0x08002889

08002b4c <_printf_common>:
 8002b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b4e:	0015      	movs	r5, r2
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	688a      	ldr	r2, [r1, #8]
 8002b54:	690b      	ldr	r3, [r1, #16]
 8002b56:	000c      	movs	r4, r1
 8002b58:	9000      	str	r0, [sp, #0]
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	da00      	bge.n	8002b60 <_printf_common+0x14>
 8002b5e:	0013      	movs	r3, r2
 8002b60:	0022      	movs	r2, r4
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	3243      	adds	r2, #67	; 0x43
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d001      	beq.n	8002b70 <_printf_common+0x24>
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	d502      	bpl.n	8002b7c <_printf_common+0x30>
 8002b76:	682b      	ldr	r3, [r5, #0]
 8002b78:	3302      	adds	r3, #2
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	6822      	ldr	r2, [r4, #0]
 8002b7e:	2306      	movs	r3, #6
 8002b80:	0017      	movs	r7, r2
 8002b82:	401f      	ands	r7, r3
 8002b84:	421a      	tst	r2, r3
 8002b86:	d027      	beq.n	8002bd8 <_printf_common+0x8c>
 8002b88:	0023      	movs	r3, r4
 8002b8a:	3343      	adds	r3, #67	; 0x43
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	4193      	sbcs	r3, r2
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	0692      	lsls	r2, r2, #26
 8002b96:	d430      	bmi.n	8002bfa <_printf_common+0xae>
 8002b98:	0022      	movs	r2, r4
 8002b9a:	9901      	ldr	r1, [sp, #4]
 8002b9c:	9800      	ldr	r0, [sp, #0]
 8002b9e:	9e08      	ldr	r6, [sp, #32]
 8002ba0:	3243      	adds	r2, #67	; 0x43
 8002ba2:	47b0      	blx	r6
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d025      	beq.n	8002bf4 <_printf_common+0xa8>
 8002ba8:	2306      	movs	r3, #6
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	682a      	ldr	r2, [r5, #0]
 8002bae:	68e1      	ldr	r1, [r4, #12]
 8002bb0:	2500      	movs	r5, #0
 8002bb2:	4003      	ands	r3, r0
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d103      	bne.n	8002bc0 <_printf_common+0x74>
 8002bb8:	1a8d      	subs	r5, r1, r2
 8002bba:	43eb      	mvns	r3, r5
 8002bbc:	17db      	asrs	r3, r3, #31
 8002bbe:	401d      	ands	r5, r3
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	6922      	ldr	r2, [r4, #16]
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	dd01      	ble.n	8002bcc <_printf_common+0x80>
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	18ed      	adds	r5, r5, r3
 8002bcc:	2700      	movs	r7, #0
 8002bce:	42bd      	cmp	r5, r7
 8002bd0:	d120      	bne.n	8002c14 <_printf_common+0xc8>
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	e010      	b.n	8002bf8 <_printf_common+0xac>
 8002bd6:	3701      	adds	r7, #1
 8002bd8:	68e3      	ldr	r3, [r4, #12]
 8002bda:	682a      	ldr	r2, [r5, #0]
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	42bb      	cmp	r3, r7
 8002be0:	ddd2      	ble.n	8002b88 <_printf_common+0x3c>
 8002be2:	0022      	movs	r2, r4
 8002be4:	2301      	movs	r3, #1
 8002be6:	9901      	ldr	r1, [sp, #4]
 8002be8:	9800      	ldr	r0, [sp, #0]
 8002bea:	9e08      	ldr	r6, [sp, #32]
 8002bec:	3219      	adds	r2, #25
 8002bee:	47b0      	blx	r6
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d1f0      	bne.n	8002bd6 <_printf_common+0x8a>
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	4240      	negs	r0, r0
 8002bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bfa:	2030      	movs	r0, #48	; 0x30
 8002bfc:	18e1      	adds	r1, r4, r3
 8002bfe:	3143      	adds	r1, #67	; 0x43
 8002c00:	7008      	strb	r0, [r1, #0]
 8002c02:	0021      	movs	r1, r4
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	3145      	adds	r1, #69	; 0x45
 8002c08:	7809      	ldrb	r1, [r1, #0]
 8002c0a:	18a2      	adds	r2, r4, r2
 8002c0c:	3243      	adds	r2, #67	; 0x43
 8002c0e:	3302      	adds	r3, #2
 8002c10:	7011      	strb	r1, [r2, #0]
 8002c12:	e7c1      	b.n	8002b98 <_printf_common+0x4c>
 8002c14:	0022      	movs	r2, r4
 8002c16:	2301      	movs	r3, #1
 8002c18:	9901      	ldr	r1, [sp, #4]
 8002c1a:	9800      	ldr	r0, [sp, #0]
 8002c1c:	9e08      	ldr	r6, [sp, #32]
 8002c1e:	321a      	adds	r2, #26
 8002c20:	47b0      	blx	r6
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	d0e6      	beq.n	8002bf4 <_printf_common+0xa8>
 8002c26:	3701      	adds	r7, #1
 8002c28:	e7d1      	b.n	8002bce <_printf_common+0x82>
	...

08002c2c <_printf_i>:
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b08b      	sub	sp, #44	; 0x2c
 8002c30:	9206      	str	r2, [sp, #24]
 8002c32:	000a      	movs	r2, r1
 8002c34:	3243      	adds	r2, #67	; 0x43
 8002c36:	9307      	str	r3, [sp, #28]
 8002c38:	9005      	str	r0, [sp, #20]
 8002c3a:	9204      	str	r2, [sp, #16]
 8002c3c:	7e0a      	ldrb	r2, [r1, #24]
 8002c3e:	000c      	movs	r4, r1
 8002c40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c42:	2a78      	cmp	r2, #120	; 0x78
 8002c44:	d807      	bhi.n	8002c56 <_printf_i+0x2a>
 8002c46:	2a62      	cmp	r2, #98	; 0x62
 8002c48:	d809      	bhi.n	8002c5e <_printf_i+0x32>
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	d100      	bne.n	8002c50 <_printf_i+0x24>
 8002c4e:	e0c1      	b.n	8002dd4 <_printf_i+0x1a8>
 8002c50:	2a58      	cmp	r2, #88	; 0x58
 8002c52:	d100      	bne.n	8002c56 <_printf_i+0x2a>
 8002c54:	e08c      	b.n	8002d70 <_printf_i+0x144>
 8002c56:	0026      	movs	r6, r4
 8002c58:	3642      	adds	r6, #66	; 0x42
 8002c5a:	7032      	strb	r2, [r6, #0]
 8002c5c:	e022      	b.n	8002ca4 <_printf_i+0x78>
 8002c5e:	0010      	movs	r0, r2
 8002c60:	3863      	subs	r0, #99	; 0x63
 8002c62:	2815      	cmp	r0, #21
 8002c64:	d8f7      	bhi.n	8002c56 <_printf_i+0x2a>
 8002c66:	f7fd fa4f 	bl	8000108 <__gnu_thumb1_case_shi>
 8002c6a:	0016      	.short	0x0016
 8002c6c:	fff6001f 	.word	0xfff6001f
 8002c70:	fff6fff6 	.word	0xfff6fff6
 8002c74:	001ffff6 	.word	0x001ffff6
 8002c78:	fff6fff6 	.word	0xfff6fff6
 8002c7c:	fff6fff6 	.word	0xfff6fff6
 8002c80:	003600a8 	.word	0x003600a8
 8002c84:	fff6009a 	.word	0xfff6009a
 8002c88:	00b9fff6 	.word	0x00b9fff6
 8002c8c:	0036fff6 	.word	0x0036fff6
 8002c90:	fff6fff6 	.word	0xfff6fff6
 8002c94:	009e      	.short	0x009e
 8002c96:	0026      	movs	r6, r4
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	3642      	adds	r6, #66	; 0x42
 8002c9c:	1d11      	adds	r1, r2, #4
 8002c9e:	6019      	str	r1, [r3, #0]
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	7033      	strb	r3, [r6, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0a7      	b.n	8002df8 <_printf_i+0x1cc>
 8002ca8:	6808      	ldr	r0, [r1, #0]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	1d0a      	adds	r2, r1, #4
 8002cae:	0605      	lsls	r5, r0, #24
 8002cb0:	d50b      	bpl.n	8002cca <_printf_i+0x9e>
 8002cb2:	680d      	ldr	r5, [r1, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	da03      	bge.n	8002cc2 <_printf_i+0x96>
 8002cba:	232d      	movs	r3, #45	; 0x2d
 8002cbc:	9a04      	ldr	r2, [sp, #16]
 8002cbe:	426d      	negs	r5, r5
 8002cc0:	7013      	strb	r3, [r2, #0]
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <_printf_i+0x21c>)
 8002cc4:	270a      	movs	r7, #10
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	e01b      	b.n	8002d02 <_printf_i+0xd6>
 8002cca:	680d      	ldr	r5, [r1, #0]
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	0641      	lsls	r1, r0, #25
 8002cd0:	d5f1      	bpl.n	8002cb6 <_printf_i+0x8a>
 8002cd2:	b22d      	sxth	r5, r5
 8002cd4:	e7ef      	b.n	8002cb6 <_printf_i+0x8a>
 8002cd6:	680d      	ldr	r5, [r1, #0]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	1d08      	adds	r0, r1, #4
 8002cdc:	6018      	str	r0, [r3, #0]
 8002cde:	062e      	lsls	r6, r5, #24
 8002ce0:	d501      	bpl.n	8002ce6 <_printf_i+0xba>
 8002ce2:	680d      	ldr	r5, [r1, #0]
 8002ce4:	e003      	b.n	8002cee <_printf_i+0xc2>
 8002ce6:	066d      	lsls	r5, r5, #25
 8002ce8:	d5fb      	bpl.n	8002ce2 <_printf_i+0xb6>
 8002cea:	680d      	ldr	r5, [r1, #0]
 8002cec:	b2ad      	uxth	r5, r5
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <_printf_i+0x21c>)
 8002cf0:	2708      	movs	r7, #8
 8002cf2:	9303      	str	r3, [sp, #12]
 8002cf4:	2a6f      	cmp	r2, #111	; 0x6f
 8002cf6:	d000      	beq.n	8002cfa <_printf_i+0xce>
 8002cf8:	3702      	adds	r7, #2
 8002cfa:	0023      	movs	r3, r4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	3343      	adds	r3, #67	; 0x43
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	6863      	ldr	r3, [r4, #4]
 8002d04:	60a3      	str	r3, [r4, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db03      	blt.n	8002d12 <_printf_i+0xe6>
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	6821      	ldr	r1, [r4, #0]
 8002d0e:	4391      	bics	r1, r2
 8002d10:	6021      	str	r1, [r4, #0]
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	d102      	bne.n	8002d1c <_printf_i+0xf0>
 8002d16:	9e04      	ldr	r6, [sp, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00c      	beq.n	8002d36 <_printf_i+0x10a>
 8002d1c:	9e04      	ldr	r6, [sp, #16]
 8002d1e:	0028      	movs	r0, r5
 8002d20:	0039      	movs	r1, r7
 8002d22:	f7fd fa81 	bl	8000228 <__aeabi_uidivmod>
 8002d26:	9b03      	ldr	r3, [sp, #12]
 8002d28:	3e01      	subs	r6, #1
 8002d2a:	5c5b      	ldrb	r3, [r3, r1]
 8002d2c:	7033      	strb	r3, [r6, #0]
 8002d2e:	002b      	movs	r3, r5
 8002d30:	0005      	movs	r5, r0
 8002d32:	429f      	cmp	r7, r3
 8002d34:	d9f3      	bls.n	8002d1e <_printf_i+0xf2>
 8002d36:	2f08      	cmp	r7, #8
 8002d38:	d109      	bne.n	8002d4e <_printf_i+0x122>
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	07db      	lsls	r3, r3, #31
 8002d3e:	d506      	bpl.n	8002d4e <_printf_i+0x122>
 8002d40:	6863      	ldr	r3, [r4, #4]
 8002d42:	6922      	ldr	r2, [r4, #16]
 8002d44:	4293      	cmp	r3, r2
 8002d46:	dc02      	bgt.n	8002d4e <_printf_i+0x122>
 8002d48:	2330      	movs	r3, #48	; 0x30
 8002d4a:	3e01      	subs	r6, #1
 8002d4c:	7033      	strb	r3, [r6, #0]
 8002d4e:	9b04      	ldr	r3, [sp, #16]
 8002d50:	1b9b      	subs	r3, r3, r6
 8002d52:	6123      	str	r3, [r4, #16]
 8002d54:	9b07      	ldr	r3, [sp, #28]
 8002d56:	0021      	movs	r1, r4
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	9805      	ldr	r0, [sp, #20]
 8002d5c:	9b06      	ldr	r3, [sp, #24]
 8002d5e:	aa09      	add	r2, sp, #36	; 0x24
 8002d60:	f7ff fef4 	bl	8002b4c <_printf_common>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d14c      	bne.n	8002e02 <_printf_i+0x1d6>
 8002d68:	2001      	movs	r0, #1
 8002d6a:	4240      	negs	r0, r0
 8002d6c:	b00b      	add	sp, #44	; 0x2c
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d70:	3145      	adds	r1, #69	; 0x45
 8002d72:	700a      	strb	r2, [r1, #0]
 8002d74:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <_printf_i+0x21c>)
 8002d76:	9203      	str	r2, [sp, #12]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	6821      	ldr	r1, [r4, #0]
 8002d7c:	ca20      	ldmia	r2!, {r5}
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	0608      	lsls	r0, r1, #24
 8002d82:	d516      	bpl.n	8002db2 <_printf_i+0x186>
 8002d84:	07cb      	lsls	r3, r1, #31
 8002d86:	d502      	bpl.n	8002d8e <_printf_i+0x162>
 8002d88:	2320      	movs	r3, #32
 8002d8a:	4319      	orrs	r1, r3
 8002d8c:	6021      	str	r1, [r4, #0]
 8002d8e:	2710      	movs	r7, #16
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	d1b2      	bne.n	8002cfa <_printf_i+0xce>
 8002d94:	2320      	movs	r3, #32
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	439a      	bics	r2, r3
 8002d9a:	6022      	str	r2, [r4, #0]
 8002d9c:	e7ad      	b.n	8002cfa <_printf_i+0xce>
 8002d9e:	2220      	movs	r2, #32
 8002da0:	6809      	ldr	r1, [r1, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	6022      	str	r2, [r4, #0]
 8002da6:	0022      	movs	r2, r4
 8002da8:	2178      	movs	r1, #120	; 0x78
 8002daa:	3245      	adds	r2, #69	; 0x45
 8002dac:	7011      	strb	r1, [r2, #0]
 8002dae:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <_printf_i+0x220>)
 8002db0:	e7e1      	b.n	8002d76 <_printf_i+0x14a>
 8002db2:	0648      	lsls	r0, r1, #25
 8002db4:	d5e6      	bpl.n	8002d84 <_printf_i+0x158>
 8002db6:	b2ad      	uxth	r5, r5
 8002db8:	e7e4      	b.n	8002d84 <_printf_i+0x158>
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	680d      	ldr	r5, [r1, #0]
 8002dbe:	1d10      	adds	r0, r2, #4
 8002dc0:	6949      	ldr	r1, [r1, #20]
 8002dc2:	6018      	str	r0, [r3, #0]
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	062e      	lsls	r6, r5, #24
 8002dc8:	d501      	bpl.n	8002dce <_printf_i+0x1a2>
 8002dca:	6019      	str	r1, [r3, #0]
 8002dcc:	e002      	b.n	8002dd4 <_printf_i+0x1a8>
 8002dce:	066d      	lsls	r5, r5, #25
 8002dd0:	d5fb      	bpl.n	8002dca <_printf_i+0x19e>
 8002dd2:	8019      	strh	r1, [r3, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9e04      	ldr	r6, [sp, #16]
 8002dd8:	6123      	str	r3, [r4, #16]
 8002dda:	e7bb      	b.n	8002d54 <_printf_i+0x128>
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	1d11      	adds	r1, r2, #4
 8002de0:	6019      	str	r1, [r3, #0]
 8002de2:	6816      	ldr	r6, [r2, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	0030      	movs	r0, r6
 8002de8:	6862      	ldr	r2, [r4, #4]
 8002dea:	f000 f831 	bl	8002e50 <memchr>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d001      	beq.n	8002df6 <_printf_i+0x1ca>
 8002df2:	1b80      	subs	r0, r0, r6
 8002df4:	6060      	str	r0, [r4, #4]
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9a04      	ldr	r2, [sp, #16]
 8002dfe:	7013      	strb	r3, [r2, #0]
 8002e00:	e7a8      	b.n	8002d54 <_printf_i+0x128>
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	0032      	movs	r2, r6
 8002e06:	9906      	ldr	r1, [sp, #24]
 8002e08:	9805      	ldr	r0, [sp, #20]
 8002e0a:	9d07      	ldr	r5, [sp, #28]
 8002e0c:	47a8      	blx	r5
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	d0aa      	beq.n	8002d68 <_printf_i+0x13c>
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	079b      	lsls	r3, r3, #30
 8002e16:	d415      	bmi.n	8002e44 <_printf_i+0x218>
 8002e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e1a:	68e0      	ldr	r0, [r4, #12]
 8002e1c:	4298      	cmp	r0, r3
 8002e1e:	daa5      	bge.n	8002d6c <_printf_i+0x140>
 8002e20:	0018      	movs	r0, r3
 8002e22:	e7a3      	b.n	8002d6c <_printf_i+0x140>
 8002e24:	0022      	movs	r2, r4
 8002e26:	2301      	movs	r3, #1
 8002e28:	9906      	ldr	r1, [sp, #24]
 8002e2a:	9805      	ldr	r0, [sp, #20]
 8002e2c:	9e07      	ldr	r6, [sp, #28]
 8002e2e:	3219      	adds	r2, #25
 8002e30:	47b0      	blx	r6
 8002e32:	1c43      	adds	r3, r0, #1
 8002e34:	d098      	beq.n	8002d68 <_printf_i+0x13c>
 8002e36:	3501      	adds	r5, #1
 8002e38:	68e3      	ldr	r3, [r4, #12]
 8002e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	42ab      	cmp	r3, r5
 8002e40:	dcf0      	bgt.n	8002e24 <_printf_i+0x1f8>
 8002e42:	e7e9      	b.n	8002e18 <_printf_i+0x1ec>
 8002e44:	2500      	movs	r5, #0
 8002e46:	e7f7      	b.n	8002e38 <_printf_i+0x20c>
 8002e48:	0800504a 	.word	0x0800504a
 8002e4c:	0800505b 	.word	0x0800505b

08002e50 <memchr>:
 8002e50:	b2c9      	uxtb	r1, r1
 8002e52:	1882      	adds	r2, r0, r2
 8002e54:	4290      	cmp	r0, r2
 8002e56:	d101      	bne.n	8002e5c <memchr+0xc>
 8002e58:	2000      	movs	r0, #0
 8002e5a:	4770      	bx	lr
 8002e5c:	7803      	ldrb	r3, [r0, #0]
 8002e5e:	428b      	cmp	r3, r1
 8002e60:	d0fb      	beq.n	8002e5a <memchr+0xa>
 8002e62:	3001      	adds	r0, #1
 8002e64:	e7f6      	b.n	8002e54 <memchr+0x4>

08002e66 <memcpy>:
 8002e66:	2300      	movs	r3, #0
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d100      	bne.n	8002e70 <memcpy+0xa>
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	5ccc      	ldrb	r4, [r1, r3]
 8002e72:	54c4      	strb	r4, [r0, r3]
 8002e74:	3301      	adds	r3, #1
 8002e76:	e7f8      	b.n	8002e6a <memcpy+0x4>

08002e78 <memmove>:
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4288      	cmp	r0, r1
 8002e7c:	d902      	bls.n	8002e84 <memmove+0xc>
 8002e7e:	188b      	adds	r3, r1, r2
 8002e80:	4298      	cmp	r0, r3
 8002e82:	d303      	bcc.n	8002e8c <memmove+0x14>
 8002e84:	2300      	movs	r3, #0
 8002e86:	e007      	b.n	8002e98 <memmove+0x20>
 8002e88:	5c8b      	ldrb	r3, [r1, r2]
 8002e8a:	5483      	strb	r3, [r0, r2]
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	d2fb      	bcs.n	8002e88 <memmove+0x10>
 8002e90:	bd10      	pop	{r4, pc}
 8002e92:	5ccc      	ldrb	r4, [r1, r3]
 8002e94:	54c4      	strb	r4, [r0, r3]
 8002e96:	3301      	adds	r3, #1
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1fa      	bne.n	8002e92 <memmove+0x1a>
 8002e9c:	e7f8      	b.n	8002e90 <memmove+0x18>
	...

08002ea0 <_free_r>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	0005      	movs	r5, r0
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	d010      	beq.n	8002eca <_free_r+0x2a>
 8002ea8:	1f0c      	subs	r4, r1, #4
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	da00      	bge.n	8002eb2 <_free_r+0x12>
 8002eb0:	18e4      	adds	r4, r4, r3
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f918 	bl	80030e8 <__malloc_lock>
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <_free_r+0x90>)
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <_free_r+0x2c>
 8002ec0:	6063      	str	r3, [r4, #4]
 8002ec2:	6014      	str	r4, [r2, #0]
 8002ec4:	0028      	movs	r0, r5
 8002ec6:	f000 f917 	bl	80030f8 <__malloc_unlock>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	d908      	bls.n	8002ee2 <_free_r+0x42>
 8002ed0:	6821      	ldr	r1, [r4, #0]
 8002ed2:	1860      	adds	r0, r4, r1
 8002ed4:	4283      	cmp	r3, r0
 8002ed6:	d1f3      	bne.n	8002ec0 <_free_r+0x20>
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	1841      	adds	r1, r0, r1
 8002ede:	6021      	str	r1, [r4, #0]
 8002ee0:	e7ee      	b.n	8002ec0 <_free_r+0x20>
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <_free_r+0x4e>
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	d9f9      	bls.n	8002ee2 <_free_r+0x42>
 8002eee:	6811      	ldr	r1, [r2, #0]
 8002ef0:	1850      	adds	r0, r2, r1
 8002ef2:	42a0      	cmp	r0, r4
 8002ef4:	d10b      	bne.n	8002f0e <_free_r+0x6e>
 8002ef6:	6820      	ldr	r0, [r4, #0]
 8002ef8:	1809      	adds	r1, r1, r0
 8002efa:	1850      	adds	r0, r2, r1
 8002efc:	6011      	str	r1, [r2, #0]
 8002efe:	4283      	cmp	r3, r0
 8002f00:	d1e0      	bne.n	8002ec4 <_free_r+0x24>
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	1841      	adds	r1, r0, r1
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	6053      	str	r3, [r2, #4]
 8002f0c:	e7da      	b.n	8002ec4 <_free_r+0x24>
 8002f0e:	42a0      	cmp	r0, r4
 8002f10:	d902      	bls.n	8002f18 <_free_r+0x78>
 8002f12:	230c      	movs	r3, #12
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	e7d5      	b.n	8002ec4 <_free_r+0x24>
 8002f18:	6821      	ldr	r1, [r4, #0]
 8002f1a:	1860      	adds	r0, r4, r1
 8002f1c:	4283      	cmp	r3, r0
 8002f1e:	d103      	bne.n	8002f28 <_free_r+0x88>
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	1841      	adds	r1, r0, r1
 8002f26:	6021      	str	r1, [r4, #0]
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6054      	str	r4, [r2, #4]
 8002f2c:	e7ca      	b.n	8002ec4 <_free_r+0x24>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	200000e4 	.word	0x200000e4

08002f34 <sbrk_aligned>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4e0f      	ldr	r6, [pc, #60]	; (8002f74 <sbrk_aligned+0x40>)
 8002f38:	000d      	movs	r5, r1
 8002f3a:	6831      	ldr	r1, [r6, #0]
 8002f3c:	0004      	movs	r4, r0
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d102      	bne.n	8002f48 <sbrk_aligned+0x14>
 8002f42:	f000 f8bf 	bl	80030c4 <_sbrk_r>
 8002f46:	6030      	str	r0, [r6, #0]
 8002f48:	0029      	movs	r1, r5
 8002f4a:	0020      	movs	r0, r4
 8002f4c:	f000 f8ba 	bl	80030c4 <_sbrk_r>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d00a      	beq.n	8002f6a <sbrk_aligned+0x36>
 8002f54:	2303      	movs	r3, #3
 8002f56:	1cc5      	adds	r5, r0, #3
 8002f58:	439d      	bics	r5, r3
 8002f5a:	42a8      	cmp	r0, r5
 8002f5c:	d007      	beq.n	8002f6e <sbrk_aligned+0x3a>
 8002f5e:	1a29      	subs	r1, r5, r0
 8002f60:	0020      	movs	r0, r4
 8002f62:	f000 f8af 	bl	80030c4 <_sbrk_r>
 8002f66:	1c43      	adds	r3, r0, #1
 8002f68:	d101      	bne.n	8002f6e <sbrk_aligned+0x3a>
 8002f6a:	2501      	movs	r5, #1
 8002f6c:	426d      	negs	r5, r5
 8002f6e:	0028      	movs	r0, r5
 8002f70:	bd70      	pop	{r4, r5, r6, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	200000e8 	.word	0x200000e8

08002f78 <_malloc_r>:
 8002f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	1ccb      	adds	r3, r1, #3
 8002f7e:	4393      	bics	r3, r2
 8002f80:	3308      	adds	r3, #8
 8002f82:	0006      	movs	r6, r0
 8002f84:	001f      	movs	r7, r3
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d232      	bcs.n	8002ff0 <_malloc_r+0x78>
 8002f8a:	270c      	movs	r7, #12
 8002f8c:	42b9      	cmp	r1, r7
 8002f8e:	d831      	bhi.n	8002ff4 <_malloc_r+0x7c>
 8002f90:	0030      	movs	r0, r6
 8002f92:	f000 f8a9 	bl	80030e8 <__malloc_lock>
 8002f96:	4d32      	ldr	r5, [pc, #200]	; (8003060 <_malloc_r+0xe8>)
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	001c      	movs	r4, r3
 8002f9c:	2c00      	cmp	r4, #0
 8002f9e:	d12e      	bne.n	8002ffe <_malloc_r+0x86>
 8002fa0:	0039      	movs	r1, r7
 8002fa2:	0030      	movs	r0, r6
 8002fa4:	f7ff ffc6 	bl	8002f34 <sbrk_aligned>
 8002fa8:	0004      	movs	r4, r0
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	d11e      	bne.n	8002fec <_malloc_r+0x74>
 8002fae:	682c      	ldr	r4, [r5, #0]
 8002fb0:	0025      	movs	r5, r4
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	d14a      	bne.n	800304c <_malloc_r+0xd4>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	0029      	movs	r1, r5
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	0030      	movs	r0, r6
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	f000 f880 	bl	80030c4 <_sbrk_r>
 8002fc4:	9b01      	ldr	r3, [sp, #4]
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	d143      	bne.n	8003052 <_malloc_r+0xda>
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	3703      	adds	r7, #3
 8002fce:	1aff      	subs	r7, r7, r3
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	439f      	bics	r7, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	2f0c      	cmp	r7, #12
 8002fd8:	d200      	bcs.n	8002fdc <_malloc_r+0x64>
 8002fda:	270c      	movs	r7, #12
 8002fdc:	0039      	movs	r1, r7
 8002fde:	0030      	movs	r0, r6
 8002fe0:	f7ff ffa8 	bl	8002f34 <sbrk_aligned>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d034      	beq.n	8003052 <_malloc_r+0xda>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	19df      	adds	r7, r3, r7
 8002fec:	6027      	str	r7, [r4, #0]
 8002fee:	e013      	b.n	8003018 <_malloc_r+0xa0>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	dacb      	bge.n	8002f8c <_malloc_r+0x14>
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	6033      	str	r3, [r6, #0]
 8002ffa:	0028      	movs	r0, r5
 8002ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	1bd1      	subs	r1, r2, r7
 8003002:	d420      	bmi.n	8003046 <_malloc_r+0xce>
 8003004:	290b      	cmp	r1, #11
 8003006:	d917      	bls.n	8003038 <_malloc_r+0xc0>
 8003008:	19e2      	adds	r2, r4, r7
 800300a:	6027      	str	r7, [r4, #0]
 800300c:	42a3      	cmp	r3, r4
 800300e:	d111      	bne.n	8003034 <_malloc_r+0xbc>
 8003010:	602a      	str	r2, [r5, #0]
 8003012:	6863      	ldr	r3, [r4, #4]
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	6053      	str	r3, [r2, #4]
 8003018:	0030      	movs	r0, r6
 800301a:	0025      	movs	r5, r4
 800301c:	f000 f86c 	bl	80030f8 <__malloc_unlock>
 8003020:	2207      	movs	r2, #7
 8003022:	350b      	adds	r5, #11
 8003024:	1d23      	adds	r3, r4, #4
 8003026:	4395      	bics	r5, r2
 8003028:	1aea      	subs	r2, r5, r3
 800302a:	429d      	cmp	r5, r3
 800302c:	d0e5      	beq.n	8002ffa <_malloc_r+0x82>
 800302e:	1b5b      	subs	r3, r3, r5
 8003030:	50a3      	str	r3, [r4, r2]
 8003032:	e7e2      	b.n	8002ffa <_malloc_r+0x82>
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e7ec      	b.n	8003012 <_malloc_r+0x9a>
 8003038:	6862      	ldr	r2, [r4, #4]
 800303a:	42a3      	cmp	r3, r4
 800303c:	d101      	bne.n	8003042 <_malloc_r+0xca>
 800303e:	602a      	str	r2, [r5, #0]
 8003040:	e7ea      	b.n	8003018 <_malloc_r+0xa0>
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	e7e8      	b.n	8003018 <_malloc_r+0xa0>
 8003046:	0023      	movs	r3, r4
 8003048:	6864      	ldr	r4, [r4, #4]
 800304a:	e7a7      	b.n	8002f9c <_malloc_r+0x24>
 800304c:	002c      	movs	r4, r5
 800304e:	686d      	ldr	r5, [r5, #4]
 8003050:	e7af      	b.n	8002fb2 <_malloc_r+0x3a>
 8003052:	230c      	movs	r3, #12
 8003054:	0030      	movs	r0, r6
 8003056:	6033      	str	r3, [r6, #0]
 8003058:	f000 f84e 	bl	80030f8 <__malloc_unlock>
 800305c:	e7cd      	b.n	8002ffa <_malloc_r+0x82>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	200000e4 	.word	0x200000e4

08003064 <_realloc_r>:
 8003064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003066:	0007      	movs	r7, r0
 8003068:	000e      	movs	r6, r1
 800306a:	0014      	movs	r4, r2
 800306c:	2900      	cmp	r1, #0
 800306e:	d105      	bne.n	800307c <_realloc_r+0x18>
 8003070:	0011      	movs	r1, r2
 8003072:	f7ff ff81 	bl	8002f78 <_malloc_r>
 8003076:	0005      	movs	r5, r0
 8003078:	0028      	movs	r0, r5
 800307a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800307c:	2a00      	cmp	r2, #0
 800307e:	d103      	bne.n	8003088 <_realloc_r+0x24>
 8003080:	f7ff ff0e 	bl	8002ea0 <_free_r>
 8003084:	0025      	movs	r5, r4
 8003086:	e7f7      	b.n	8003078 <_realloc_r+0x14>
 8003088:	f000 f83e 	bl	8003108 <_malloc_usable_size_r>
 800308c:	9001      	str	r0, [sp, #4]
 800308e:	4284      	cmp	r4, r0
 8003090:	d803      	bhi.n	800309a <_realloc_r+0x36>
 8003092:	0035      	movs	r5, r6
 8003094:	0843      	lsrs	r3, r0, #1
 8003096:	42a3      	cmp	r3, r4
 8003098:	d3ee      	bcc.n	8003078 <_realloc_r+0x14>
 800309a:	0021      	movs	r1, r4
 800309c:	0038      	movs	r0, r7
 800309e:	f7ff ff6b 	bl	8002f78 <_malloc_r>
 80030a2:	1e05      	subs	r5, r0, #0
 80030a4:	d0e8      	beq.n	8003078 <_realloc_r+0x14>
 80030a6:	9b01      	ldr	r3, [sp, #4]
 80030a8:	0022      	movs	r2, r4
 80030aa:	429c      	cmp	r4, r3
 80030ac:	d900      	bls.n	80030b0 <_realloc_r+0x4c>
 80030ae:	001a      	movs	r2, r3
 80030b0:	0031      	movs	r1, r6
 80030b2:	0028      	movs	r0, r5
 80030b4:	f7ff fed7 	bl	8002e66 <memcpy>
 80030b8:	0031      	movs	r1, r6
 80030ba:	0038      	movs	r0, r7
 80030bc:	f7ff fef0 	bl	8002ea0 <_free_r>
 80030c0:	e7da      	b.n	8003078 <_realloc_r+0x14>
	...

080030c4 <_sbrk_r>:
 80030c4:	2300      	movs	r3, #0
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	4d06      	ldr	r5, [pc, #24]	; (80030e4 <_sbrk_r+0x20>)
 80030ca:	0004      	movs	r4, r0
 80030cc:	0008      	movs	r0, r1
 80030ce:	602b      	str	r3, [r5, #0]
 80030d0:	f7fe fa78 	bl	80015c4 <_sbrk>
 80030d4:	1c43      	adds	r3, r0, #1
 80030d6:	d103      	bne.n	80030e0 <_sbrk_r+0x1c>
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d000      	beq.n	80030e0 <_sbrk_r+0x1c>
 80030de:	6023      	str	r3, [r4, #0]
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	200000ec 	.word	0x200000ec

080030e8 <__malloc_lock>:
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4802      	ldr	r0, [pc, #8]	; (80030f4 <__malloc_lock+0xc>)
 80030ec:	f000 f814 	bl	8003118 <__retarget_lock_acquire_recursive>
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	200000f0 	.word	0x200000f0

080030f8 <__malloc_unlock>:
 80030f8:	b510      	push	{r4, lr}
 80030fa:	4802      	ldr	r0, [pc, #8]	; (8003104 <__malloc_unlock+0xc>)
 80030fc:	f000 f80d 	bl	800311a <__retarget_lock_release_recursive>
 8003100:	bd10      	pop	{r4, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	200000f0 	.word	0x200000f0

08003108 <_malloc_usable_size_r>:
 8003108:	1f0b      	subs	r3, r1, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1f18      	subs	r0, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	da01      	bge.n	8003116 <_malloc_usable_size_r+0xe>
 8003112:	580b      	ldr	r3, [r1, r0]
 8003114:	18c0      	adds	r0, r0, r3
 8003116:	4770      	bx	lr

08003118 <__retarget_lock_acquire_recursive>:
 8003118:	4770      	bx	lr

0800311a <__retarget_lock_release_recursive>:
 800311a:	4770      	bx	lr

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
