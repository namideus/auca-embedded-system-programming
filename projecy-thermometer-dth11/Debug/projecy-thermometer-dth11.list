
projecy-thermometer-dth11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001188  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b4  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000003c  08002b40  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08002b40  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003278  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  000232dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  00024460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000125ed  00000000  00000000  000248f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000569e  00000000  00000000  00036edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0006fd50  00000000  00000000  0003c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ac2cb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000003c8  00000000  00000000  000ac320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000db8  00000000  00000000  000ac6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001230 	.word	0x08001230

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08001230 	.word	0x08001230

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 800022c:	f000 fae0 	bl	80007f0 <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 8000230:	2010      	movs	r0, #16
 8000232:	f000 fb1d 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8000236:	2000      	movs	r0, #0
 8000238:	f000 fafa 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 800023c:	2011      	movs	r0, #17
 800023e:	f000 fb17 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000242:	2003      	movs	r0, #3
 8000244:	f000 faf4 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 8000248:	2044      	movs	r0, #68	; 0x44
 800024a:	f000 fb11 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 800024e:	2000      	movs	r0, #0
 8000250:	f000 faee 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 8000254:	2011      	movs	r0, #17
 8000256:	f000 faeb 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 800025a:	2045      	movs	r0, #69	; 0x45
 800025c:	f000 fb08 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fae5 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8000266:	20ab      	movs	r0, #171	; 0xab
 8000268:	f000 fae2 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 800026c:	204e      	movs	r0, #78	; 0x4e
 800026e:	f000 faff 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fadc 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8000278:	204f      	movs	r0, #79	; 0x4f
 800027a:	f000 faf9 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800027e:	2000      	movs	r0, #0
 8000280:	f000 fad6 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8000284:	20f0      	movs	r0, #240	; 0xf0
 8000286:	f000 faf3 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 800028a:	201f      	movs	r0, #31
 800028c:	f000 fad0 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 8000290:	2021      	movs	r0, #33	; 0x21
 8000292:	f000 faed 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000296:	2003      	movs	r0, #3
 8000298:	f000 faca 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 800029c:	202c      	movs	r0, #44	; 0x2c
 800029e:	f000 fae7 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 80002a2:	20a0      	movs	r0, #160	; 0xa0
 80002a4:	f000 fac4 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 80002a8:	203c      	movs	r0, #60	; 0x3c
 80002aa:	f000 fae1 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 80002ae:	2064      	movs	r0, #100	; 0x64
 80002b0:	f000 fabe 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 80002b4:	2032      	movs	r0, #50	; 0x32
 80002b6:	f000 fadb 	bl	8000870 <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e00c      	b.n	80002dc <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <gde021a1_Init+0xd0>)
 80002c8:	5cd3      	ldrb	r3, [r2, r3]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 faaf 	bl	8000830 <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	3201      	adds	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b59      	cmp	r3, #89	; 0x59
 80002e2:	d9ee      	bls.n	80002c2 <gde021a1_Init+0xa2>
  }
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b002      	add	sp, #8
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	08002aa0 	.word	0x08002aa0

080002f4 <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	0002      	movs	r2, r0
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 8000300:	2024      	movs	r0, #36	; 0x24
 8000302:	f000 fab5 	bl	8000870 <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	b29b      	uxth	r3, r3
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fa8f 	bl	8000830 <EPD_IO_WriteData>
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b002      	add	sp, #8
 8000318:	bd80      	pop	{r7, pc}

0800031a <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800031a:	b5b0      	push	{r4, r5, r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	0005      	movs	r5, r0
 8000322:	000c      	movs	r4, r1
 8000324:	0010      	movs	r0, r2
 8000326:	0019      	movs	r1, r3
 8000328:	1dbb      	adds	r3, r7, #6
 800032a:	1c2a      	adds	r2, r5, #0
 800032c:	801a      	strh	r2, [r3, #0]
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	1c22      	adds	r2, r4, #0
 8000332:	801a      	strh	r2, [r3, #0]
 8000334:	1cbb      	adds	r3, r7, #2
 8000336:	1c02      	adds	r2, r0, #0
 8000338:	801a      	strh	r2, [r3, #0]
 800033a:	003b      	movs	r3, r7
 800033c:	1c0a      	adds	r2, r1, #0
 800033e:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 8000340:	2044      	movs	r0, #68	; 0x44
 8000342:	f000 fa95 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fa70 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 8000350:	003b      	movs	r3, r7
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fa6b 	bl	8000830 <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 800035a:	2045      	movs	r0, #69	; 0x45
 800035c:	f000 fa88 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fa63 	bl	8000830 <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 800036a:	1cbb      	adds	r3, r7, #2
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fa5e 	bl	8000830 <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 8000374:	204e      	movs	r0, #78	; 0x4e
 8000376:	f000 fa7b 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fa56 	bl	8000830 <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 8000384:	204f      	movs	r0, #79	; 0x4f
 8000386:	f000 fa73 	bl	8000870 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 800038a:	1dbb      	adds	r3, r7, #6
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fa4e 	bl	8000830 <EPD_IO_WriteData>
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b002      	add	sp, #8
 800039a:	bdb0      	pop	{r4, r5, r7, pc}

0800039c <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 80003a0:	23ac      	movs	r3, #172	; 0xac
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 80003ac:	2312      	movs	r3, #18
}
 80003ae:	0018      	movs	r0, r3
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 80003b8:	2022      	movs	r0, #34	; 0x22
 80003ba:	f000 fa59 	bl	8000870 <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 80003be:	20c4      	movs	r0, #196	; 0xc4
 80003c0:	f000 fa36 	bl	8000830 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 80003c4:	2020      	movs	r0, #32
 80003c6:	f000 fa53 	bl	8000870 <EPD_IO_WriteReg>
}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 80003d4:	2022      	movs	r0, #34	; 0x22
 80003d6:	f000 fa4b 	bl	8000870 <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 80003da:	2003      	movs	r0, #3
 80003dc:	f000 fa28 	bl	8000830 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 80003e0:	2020      	movs	r0, #32
 80003e2:	f000 fa45 	bl	8000870 <EPD_IO_WriteReg>
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0005      	movs	r5, r0
 80003f4:	000c      	movs	r4, r1
 80003f6:	0010      	movs	r0, r2
 80003f8:	0019      	movs	r1, r3
 80003fa:	1dbb      	adds	r3, r7, #6
 80003fc:	1c2a      	adds	r2, r5, #0
 80003fe:	801a      	strh	r2, [r3, #0]
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	1c22      	adds	r2, r4, #0
 8000404:	801a      	strh	r2, [r3, #0]
 8000406:	1cbb      	adds	r3, r7, #2
 8000408:	1c02      	adds	r2, r0, #0
 800040a:	801a      	strh	r2, [r3, #0]
 800040c:	003b      	movs	r3, r7
 800040e:	1c0a      	adds	r2, r1, #0
 8000410:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 8000416:	230f      	movs	r3, #15
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 800041e:	2308      	movs	r3, #8
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 8000426:	230d      	movs	r3, #13
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 800042e:	2024      	movs	r0, #36	; 0x24
 8000430:	f000 fa1e 	bl	8000870 <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	2207      	movs	r2, #7
 800043a:	4013      	ands	r3, r2
 800043c:	b29b      	uxth	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d000      	beq.n	8000444 <gde021a1_DrawImage+0x58>
 8000442:	e087      	b.n	8000554 <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	e073      	b.n	8000532 <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 800044a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	18d2      	adds	r2, r2, r3
 8000450:	210f      	movs	r1, #15
 8000452:	187b      	adds	r3, r7, r1
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 8000458:	187b      	adds	r3, r7, r1
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d05f      	beq.n	8000520 <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000460:	230e      	movs	r3, #14
 8000462:	18fb      	adds	r3, r7, r3
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
 8000468:	e054      	b.n	8000514 <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	e029      	b.n	80004c4 <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	d00d      	beq.n	8000498 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 800047c:	2008      	movs	r0, #8
 800047e:	183a      	adds	r2, r7, r0
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	18d3      	adds	r3, r2, r3
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2203      	movs	r2, #3
 8000488:	4393      	bics	r3, r2
 800048a:	b2d9      	uxtb	r1, r3
 800048c:	183a      	adds	r2, r7, r0
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	18d3      	adds	r3, r2, r3
 8000492:	1c0a      	adds	r2, r1, #0
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e00c      	b.n	80004b2 <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8000498:	2008      	movs	r0, #8
 800049a:	183a      	adds	r2, r7, r0
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	18d3      	adds	r3, r2, r3
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2203      	movs	r2, #3
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b2d9      	uxtb	r1, r3
 80004a8:	183a      	adds	r2, r7, r0
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	18d3      	adds	r3, r2, r3
 80004ae:	1c0a      	adds	r2, r1, #0
 80004b0:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 80004b2:	220f      	movs	r2, #15
 80004b4:	18bb      	adds	r3, r7, r2
 80004b6:	18ba      	adds	r2, r7, r2
 80004b8:	7812      	ldrb	r2, [r2, #0]
 80004ba:	0852      	lsrs	r2, r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	3301      	adds	r3, #1
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	d9d2      	bls.n	8000470 <gde021a1_DrawImage+0x84>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 80004ca:	2108      	movs	r1, #8
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	019b      	lsls	r3, r3, #6
 80004d2:	b25a      	sxtb	r2, r3
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	789b      	ldrb	r3, [r3, #2]
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b25a      	sxtb	r2, r3
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	78db      	ldrb	r3, [r3, #3]
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	4313      	orrs	r3, r2
 80004f4:	b25a      	sxtb	r2, r3
 80004f6:	210d      	movs	r1, #13
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b29b      	uxth	r3, r3
 8000502:	0018      	movs	r0, r3
 8000504:	f000 f994 	bl	8000830 <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000508:	210e      	movs	r1, #14
 800050a:	187b      	adds	r3, r7, r1
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	187b      	adds	r3, r7, r1
 8000510:	3201      	adds	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	230e      	movs	r3, #14
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d9a5      	bls.n	800046a <gde021a1_DrawImage+0x7e>
 800051e:	e005      	b.n	800052c <gde021a1_DrawImage+0x140>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 8000520:	20ff      	movs	r0, #255	; 0xff
 8000522:	f000 f985 	bl	8000830 <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 8000526:	20ff      	movs	r0, #255	; 0xff
 8000528:	f000 f982 	bl	8000830 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3301      	adds	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	003b      	movs	r3, r7
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	1cba      	adds	r2, r7, #2
 8000538:	8812      	ldrh	r2, [r2, #0]
 800053a:	0892      	lsrs	r2, r2, #2
 800053c:	b292      	uxth	r2, r2
 800053e:	4353      	muls	r3, r2
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <gde021a1_DrawImage+0x15a>
 8000544:	3301      	adds	r3, #1
 8000546:	105b      	asrs	r3, r3, #1
 8000548:	001a      	movs	r2, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	4293      	cmp	r3, r2
 800054e:	d200      	bcs.n	8000552 <gde021a1_DrawImage+0x166>
 8000550:	e77b      	b.n	800044a <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 8000552:	e10f      	b.n	8000774 <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e0fb      	b.n	8000752 <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 800055a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	18d2      	adds	r2, r2, r3
 8000560:	230f      	movs	r3, #15
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	7812      	ldrb	r2, [r2, #0]
 8000566:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	1cbb      	adds	r3, r7, #2
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	089b      	lsrs	r3, r3, #2
 8000572:	b29b      	uxth	r3, r3
 8000574:	3301      	adds	r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	da00      	bge.n	800057c <gde021a1_DrawImage+0x190>
 800057a:	3301      	adds	r3, #1
 800057c:	105b      	asrs	r3, r3, #1
 800057e:	0019      	movs	r1, r3
 8000580:	0010      	movs	r0, r2
 8000582:	f7ff fe47 	bl	8000214 <__aeabi_uidivmod>
 8000586:	1e0b      	subs	r3, r1, #0
 8000588:	d100      	bne.n	800058c <gde021a1_DrawImage+0x1a0>
 800058a:	e071      	b.n	8000670 <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 800058c:	230f      	movs	r3, #15
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d05f      	beq.n	8000656 <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000596:	230e      	movs	r3, #14
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	e054      	b.n	800064a <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	e029      	b.n	80005fa <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 80005a6:	230f      	movs	r3, #15
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2201      	movs	r2, #1
 80005ae:	4013      	ands	r3, r2
 80005b0:	d00d      	beq.n	80005ce <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 80005b2:	2008      	movs	r0, #8
 80005b4:	183a      	adds	r2, r7, r0
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	18d3      	adds	r3, r2, r3
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2203      	movs	r2, #3
 80005be:	4393      	bics	r3, r2
 80005c0:	b2d9      	uxtb	r1, r3
 80005c2:	183a      	adds	r2, r7, r0
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	18d3      	adds	r3, r2, r3
 80005c8:	1c0a      	adds	r2, r1, #0
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e00c      	b.n	80005e8 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 80005ce:	2008      	movs	r0, #8
 80005d0:	183a      	adds	r2, r7, r0
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	18d3      	adds	r3, r2, r3
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2203      	movs	r2, #3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	183a      	adds	r2, r7, r0
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	18d3      	adds	r3, r2, r3
 80005e4:	1c0a      	adds	r2, r1, #0
 80005e6:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 80005e8:	220f      	movs	r2, #15
 80005ea:	18bb      	adds	r3, r7, r2
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0852      	lsrs	r2, r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	3301      	adds	r3, #1
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d9d2      	bls.n	80005a6 <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000600:	2108      	movs	r1, #8
 8000602:	187b      	adds	r3, r7, r1
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	b25a      	sxtb	r2, r3
 800060a:	187b      	adds	r3, r7, r1
 800060c:	785b      	ldrb	r3, [r3, #1]
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b25a      	sxtb	r2, r3
 8000616:	187b      	adds	r3, r7, r1
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	b25b      	sxtb	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b25a      	sxtb	r2, r3
 8000622:	187b      	adds	r3, r7, r1
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	b25a      	sxtb	r2, r3
 800062c:	210d      	movs	r1, #13
 800062e:	187b      	adds	r3, r7, r1
 8000630:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	0018      	movs	r0, r3
 800063a:	f000 f8f9 	bl	8000830 <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 800063e:	210e      	movs	r1, #14
 8000640:	187b      	adds	r3, r7, r1
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	187b      	adds	r3, r7, r1
 8000646:	3201      	adds	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	230e      	movs	r3, #14
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d9a5      	bls.n	80005a0 <gde021a1_DrawImage+0x1b4>
 8000654:	e07a      	b.n	800074c <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 8000656:	230f      	movs	r3, #15
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d000      	beq.n	8000662 <gde021a1_DrawImage+0x276>
 8000660:	e074      	b.n	800074c <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	f000 f8e4 	bl	8000830 <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 8000668:	20ff      	movs	r0, #255	; 0xff
 800066a:	f000 f8e1 	bl	8000830 <EPD_IO_WriteData>
 800066e:	e06d      	b.n	800074c <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	1cbb      	adds	r3, r7, #2
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	089b      	lsrs	r3, r3, #2
 800067a:	b29b      	uxth	r3, r3
 800067c:	3301      	adds	r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	da00      	bge.n	8000684 <gde021a1_DrawImage+0x298>
 8000682:	3301      	adds	r3, #1
 8000684:	105b      	asrs	r3, r3, #1
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f7ff fdc3 	bl	8000214 <__aeabi_uidivmod>
 800068e:	1e0b      	subs	r3, r1, #0
 8000690:	d15c      	bne.n	800074c <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 8000692:	230f      	movs	r3, #15
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2bf0      	cmp	r3, #240	; 0xf0
 800069a:	d04f      	beq.n	800073c <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	e029      	b.n	80006f6 <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 80006a2:	230f      	movs	r3, #15
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4013      	ands	r3, r2
 80006ac:	d00d      	beq.n	80006ca <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 80006ae:	2008      	movs	r0, #8
 80006b0:	183a      	adds	r2, r7, r0
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	18d3      	adds	r3, r2, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2203      	movs	r2, #3
 80006ba:	4393      	bics	r3, r2
 80006bc:	b2d9      	uxtb	r1, r3
 80006be:	183a      	adds	r2, r7, r0
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	18d3      	adds	r3, r2, r3
 80006c4:	1c0a      	adds	r2, r1, #0
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e00c      	b.n	80006e4 <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 80006ca:	2008      	movs	r0, #8
 80006cc:	183a      	adds	r2, r7, r0
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2203      	movs	r2, #3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2d9      	uxtb	r1, r3
 80006da:	183a      	adds	r2, r7, r0
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	18d3      	adds	r3, r2, r3
 80006e0:	1c0a      	adds	r2, r1, #0
 80006e2:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 80006e4:	220f      	movs	r2, #15
 80006e6:	18bb      	adds	r3, r7, r2
 80006e8:	18ba      	adds	r2, r7, r2
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	0852      	lsrs	r2, r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3301      	adds	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d9d2      	bls.n	80006a2 <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 80006fc:	2108      	movs	r1, #8
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	019b      	lsls	r3, r3, #6
 8000704:	b25a      	sxtb	r2, r3
 8000706:	187b      	adds	r3, r7, r1
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b25a      	sxtb	r2, r3
 8000712:	187b      	adds	r3, r7, r1
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	4313      	orrs	r3, r2
 800071c:	b25a      	sxtb	r2, r3
 800071e:	187b      	adds	r3, r7, r1
 8000720:	78db      	ldrb	r3, [r3, #3]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b25a      	sxtb	r2, r3
 8000728:	210d      	movs	r1, #13
 800072a:	187b      	adds	r3, r7, r1
 800072c:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 800072e:	187b      	adds	r3, r7, r1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	0018      	movs	r0, r3
 8000736:	f000 f87b 	bl	8000830 <EPD_IO_WriteData>
 800073a:	e007      	b.n	800074c <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2bf0      	cmp	r3, #240	; 0xf0
 8000744:	d102      	bne.n	800074c <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 8000746:	20ff      	movs	r0, #255	; 0xff
 8000748:	f000 f872 	bl	8000830 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	003b      	movs	r3, r7
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	1cba      	adds	r2, r7, #2
 8000758:	8812      	ldrh	r2, [r2, #0]
 800075a:	0892      	lsrs	r2, r2, #2
 800075c:	b292      	uxth	r2, r2
 800075e:	3201      	adds	r2, #1
 8000760:	4353      	muls	r3, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	da00      	bge.n	8000768 <gde021a1_DrawImage+0x37c>
 8000766:	3301      	adds	r3, #1
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	001a      	movs	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4293      	cmp	r3, r2
 8000770:	d200      	bcs.n	8000774 <gde021a1_DrawImage+0x388>
 8000772:	e6f2      	b.n	800055a <gde021a1_DrawImage+0x16e>
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b006      	add	sp, #24
 800077a:	bdb0      	pop	{r4, r5, r7, pc}

0800077c <LoopDelay>:
#define GLUE(a, b) a##b
#define PIN_SET(a) do {GLUE(a, _GPIO_PORT)->BSRR = (1 << GLUE(a, _PIN));} while(0)
#define PIN_CLR(a) do {GLUE(a, _GPIO_PORT)->BSRR = (1 << (GLUE(a, _PIN) + 16));} while(0)
#define PIN_GET(a) (!!(GLUE(a, _GPIO_PORT)->IDR & (1 << GLUE(a, _PIN))))

void LoopDelay(volatile uint32_t n) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 8000784:	e002      	b.n	800078c <LoopDelay+0x10>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3b01      	subs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <LoopDelay+0xa>
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}

0800079c <SPIx_Init>:
#define DISCOVERY_SPIx_MOSI_GPIO_PORT           GPIOB
#define DISCOVERY_SPIx_MOSI_PIN                 5
// no - there's no MISO connected, and PB4 is used for LED on the DISCO
// #define DISCOVERY_SPIx_MISO_PIN                 GPIO_PIN_4                 /* PB.04 */

static void SPIx_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
  DISCOVERY_SPIx->CR1 = 0
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <SPIx_Init+0x10>)
 80007a2:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <SPIx_Init+0x14>)
 80007a4:	601a      	str	r2, [r3, #0]
    | ( 0 * SPI_CR1_CRCNEXT  )         // Transmit CRC next
    | ( 0 * SPI_CR1_CRCEN    )         // Hardware CRC calculation enable
    | ( 0 * SPI_CR1_BIDIOE   )         // Output enable in bidirectional mode
    | ( 0 * SPI_CR1_BIDIMODE )         // Bidirectional data mode enable
  ;
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40013000 	.word	0x40013000
 80007b0:	00000357 	.word	0x00000357

080007b4 <SPIx_Write>:
static uint32_t SPIx_Read(void) {
  return 0;
}


static void SPIx_Write(uint8_t n) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	701a      	strb	r2, [r3, #0]
  DISCOVERY_SPIx->DR = n;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <SPIx_Write+0x38>)
 80007c2:	1dfa      	adds	r2, r7, #7
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	60da      	str	r2, [r3, #12]
  while (!(DISCOVERY_SPIx->SR & SPI_SR_TXE)) {
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <SPIx_Write+0x38>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	d0fa      	beq.n	80007ca <SPIx_Write+0x16>
    // wait until empty
  }
  while ((DISCOVERY_SPIx->SR & SPI_SR_BSY)) {
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SPIx_Write+0x38>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	4013      	ands	r3, r2
 80007de:	d1fa      	bne.n	80007d6 <SPIx_Write+0x22>
    // wait until not busy
  }
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40013000 	.word	0x40013000

080007f0 <EPD_IO_Init>:

#define EPD_PWR_GPIO_PORT                       GPIOB
#define EPD_PWR_PIN                             10


void EPD_IO_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  // pins pinit - see gpio-clock init and gpio pins init in main()

  /* Enable Display */
  PIN_CLR(EPD_PWR);
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <EPD_IO_Init+0x3c>)
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	04d2      	lsls	r2, r2, #19
 80007fa:	619a      	str	r2, [r3, #24]

  /* Set or Reset the control line */
  PIN_CLR(EPD_CS);
 80007fc:	23a0      	movs	r3, #160	; 0xa0
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0612      	lsls	r2, r2, #24
 8000804:	619a      	str	r2, [r3, #24]
  PIN_SET(EPD_CS);
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	0212      	lsls	r2, r2, #8
 800080e:	619a      	str	r2, [r3, #24]

  /* EPD reset pin mamagement */
  PIN_SET(EPD_RESET);
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <EPD_IO_Init+0x3c>)
 8000812:	2204      	movs	r2, #4
 8000814:	619a      	str	r2, [r3, #24]
  EPD_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f000 f84a 	bl	80008b0 <EPD_Delay>

  PIN_SET(DISCOVERY_SPIx_SCK);
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <EPD_IO_Init+0x3c>)
 800081e:	2208      	movs	r2, #8
 8000820:	619a      	str	r2, [r3, #24]
  /* SPI Configuration */
  SPIx_Init();
 8000822:	f7ff ffbb 	bl	800079c <SPIx_Init>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	50000400 	.word	0x50000400

08000830 <EPD_IO_WriteData>:



void EPD_IO_WriteData(uint16_t n) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	0002      	movs	r2, r0
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 800083c:	23a0      	movs	r3, #160	; 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0612      	lsls	r2, r2, #24
 8000844:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to High */
  PIN_SET(EPD_DC);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <EPD_IO_WriteData+0x3c>)
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	619a      	str	r2, [r3, #24]
  /* Send Data */
  SPIx_Write(n);
 800084e:	1dbb      	adds	r3, r7, #6
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ffad 	bl	80007b4 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	0212      	lsls	r2, r2, #8
 8000862:	619a      	str	r2, [r3, #24]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	50000400 	.word	0x50000400

08000870 <EPD_IO_WriteReg>:
/**
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t n) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0612      	lsls	r2, r2, #24
 8000884:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to Low */
  PIN_CLR(EPD_DC);
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <EPD_IO_WriteReg+0x3c>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	619a      	str	r2, [r3, #24]
  /* Send Command */
  SPIx_Write(n);
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff ff8e 	bl	80007b4 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0212      	lsls	r2, r2, #8
 80008a0:	619a      	str	r2, [r3, #24]
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	50000400 	.word	0x50000400

080008b0 <EPD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t n) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  LoopDelay(n * 3000);  // some fancy factor to get it roughly in ms
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <EPD_Delay+0x1c>)
 80008bc:	4353      	muls	r3, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ff5c 	bl	800077c <LoopDelay>
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	00000bb8 	.word	0x00000bb8

080008d0 <main>:



// ---------------------- M A I N -----------------------------------

int main(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
 /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80008d4:	4b5b      	ldr	r3, [pc, #364]	; (8000a44 <main+0x174>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <main+0x174>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0049      	lsls	r1, r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 80008e2:	4b58      	ldr	r3, [pc, #352]	; (8000a44 <main+0x174>)
 80008e4:	68da      	ldr	r2, [r3, #12]
 80008e6:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <main+0x174>)
 80008e8:	4957      	ldr	r1, [pc, #348]	; (8000a48 <main+0x178>)
 80008ea:	400a      	ands	r2, r1
 80008ec:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 80008ee:	4b55      	ldr	r3, [pc, #340]	; (8000a44 <main+0x174>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <main+0x174>)
 80008f4:	4955      	ldr	r1, [pc, #340]	; (8000a4c <main+0x17c>)
 80008f6:	400a      	ands	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 80008fa:	4b52      	ldr	r3, [pc, #328]	; (8000a44 <main+0x174>)
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <main+0x174>)
 8000900:	2101      	movs	r1, #1
 8000902:	438a      	bics	r2, r1
 8000904:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000906:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <main+0x174>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <main+0x174>)
 800090c:	4950      	ldr	r1, [pc, #320]	; (8000a50 <main+0x180>)
 800090e:	400a      	ands	r2, r1
 8000910:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000912:	4b4c      	ldr	r3, [pc, #304]	; (8000a44 <main+0x174>)
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <main+0x174>)
 8000918:	494e      	ldr	r1, [pc, #312]	; (8000a54 <main+0x184>)
 800091a:	400a      	ands	r2, r1
 800091c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <main+0x174>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]


  RCC->IOPENR |= 0
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <main+0x174>)
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <main+0x174>)
 800092a:	2103      	movs	r1, #3
 800092c:	430a      	orrs	r2, r1
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
    | RCC_IOPENR_GPIOAEN
    | RCC_IOPENR_GPIOBEN
  ;
  RCC->APB2ENR |= 0
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <main+0x174>)
 8000932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000934:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <main+0x174>)
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	0149      	lsls	r1, r1, #5
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
    | RCC_APB2ENR_SPI1EN
  ;


  GPIOA->MODER = (GPIOA->MODER
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	681b      	ldr	r3, [r3, #0]
    & (~GPIO_MODER_MODE5)      // RED LED
    & (~GPIO_MODER_MODE8)      // EPD_BUSY
    & (~GPIO_MODER_MODE15)     // EPD_CS
 8000944:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <main+0x188>)
 8000946:	401a      	ands	r2, r3
  GPIOA->MODER = (GPIOA->MODER
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
  ) | (0
 800094c:	4943      	ldr	r1, [pc, #268]	; (8000a5c <main+0x18c>)
 800094e:	430a      	orrs	r2, r1
  GPIOA->MODER = (GPIOA->MODER
 8000950:	601a      	str	r2, [r3, #0]
    | (GPIO_Mode_Out * GPIO_MODER_MODE5_0)   // RED LED
    | (GPIO_Mode_In  * GPIO_MODER_MODE8_0)   // EPD_BUSY
    | (GPIO_Mode_Out * GPIO_MODER_MODE15_0)  // EPD_CS
  );

  GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8000952:	23a0      	movs	r3, #160	; 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
    & (~GPIO_OSPEEDER_OSPEED15)    // EPD_CS
  ) | (0
 800095c:	21c0      	movs	r1, #192	; 0xc0
 800095e:	0609      	lsls	r1, r1, #24
 8000960:	430a      	orrs	r2, r1
  GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8000962:	609a      	str	r2, [r3, #8]
    | (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED15_0)  // EPD_CS
  );
  GPIOA->PUPDR = (GPIOA->PUPDR
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	68db      	ldr	r3, [r3, #12]
    & (~GPIO_PUPDR_PUPD8)    // EPD_BUSY
 800096a:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <main+0x190>)
 800096c:	401a      	ands	r2, r3
  GPIOA->PUPDR = (GPIOA->PUPDR
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
  ) | (0
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	0289      	lsls	r1, r1, #10
 8000976:	430a      	orrs	r2, r1
  GPIOA->PUPDR = (GPIOA->PUPDR
 8000978:	60da      	str	r2, [r3, #12]
  );




  GPIOB->MODER = (GPIOB->MODER
 800097a:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <main+0x194>)
 800097c:	681b      	ldr	r3, [r3, #0]
    & (~GPIO_MODER_MODE4)      // GREEN LED
    & (~GPIO_MODER_MODE2)      // EPD_RESET
    & (~GPIO_MODER_MODE10)     // EPD_PWR
    & (~GPIO_MODER_MODE11)     // EPD_DC
    & (~GPIO_MODER_MODE3)      // SPIx_SCK
    & (~GPIO_MODER_MODE5)      // SPIx_MOSI
 800097e:	4a3a      	ldr	r2, [pc, #232]	; (8000a68 <main+0x198>)
 8000980:	401a      	ands	r2, r3
  GPIOB->MODER = (GPIOB->MODER
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <main+0x194>)
  ) | (0
 8000984:	4939      	ldr	r1, [pc, #228]	; (8000a6c <main+0x19c>)
 8000986:	430a      	orrs	r2, r1
  GPIOB->MODER = (GPIOB->MODER
 8000988:	601a      	str	r2, [r3, #0]
    | (GPIO_Mode_Out * GPIO_MODER_MODE10_0)  // EPD_PWR
    | (GPIO_Mode_Out * GPIO_MODER_MODE11_0)  // EPD_DC
    | (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE3_0)  // SPIx_SCK
    | (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE5_0)  // SPIx_MOSI
  );
  GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <main+0x194>)
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <main+0x194>)
    & (~GPIO_OSPEEDER_OSPEED2)     // EPD_RESET
    & (~GPIO_OSPEEDER_OSPEED10)    // EPD_PWR
    & (~GPIO_OSPEEDER_OSPEED11)    // EPD_DC
    & (~GPIO_OSPEEDER_OSPEED3)     // SPIx_SCK
    & (~GPIO_OSPEEDER_OSPEED5)     // SPIx_MOSI
  ) | (0
 8000990:	4937      	ldr	r1, [pc, #220]	; (8000a70 <main+0x1a0>)
 8000992:	430a      	orrs	r2, r1
  GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8000994:	609a      	str	r2, [r3, #8]
    | (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED10_0)  // EPD_PWR
    | (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED11_0)  // EPD_DC
    | (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED3_0)   // SPIx_SCK
    | (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED5_0)   // SPIx_MOSI
  );
  GPIOB->PUPDR = (GPIOB->PUPDR
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <main+0x194>)
 8000998:	68db      	ldr	r3, [r3, #12]
    & (~GPIO_PUPDR_PUPD3)    // SPIx_SCK
    & (~GPIO_PUPDR_PUPD5)    // SPIx_MOSI
 800099a:	4a36      	ldr	r2, [pc, #216]	; (8000a74 <main+0x1a4>)
 800099c:	401a      	ands	r2, r3
  GPIOB->PUPDR = (GPIOB->PUPDR
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <main+0x194>)
  ) | (0
 80009a0:	2184      	movs	r1, #132	; 0x84
 80009a2:	0109      	lsls	r1, r1, #4
 80009a4:	430a      	orrs	r2, r1
  GPIOB->PUPDR = (GPIOB->PUPDR
 80009a6:	60da      	str	r2, [r3, #12]
    | (GPIO_PullUp   * GPIO_PUPDR_PUPD3_0)  // SPIx_SCK
    | (GPIO_PullDown * GPIO_PUPDR_PUPD5_0)  // SPIx_MOSI
  );
  GPIOB->AFR[0] = (GPIOB->AFR[0]
 80009a8:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <main+0x194>)
 80009aa:	6a1a      	ldr	r2, [r3, #32]
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <main+0x194>)
    & (~ (GPIO_AFRx * GPIO_AFRL_AFRL3_0))    // SPIx_SCK
    & (~ (GPIO_AFRx * GPIO_AFRL_AFRL5_0))    // SPIx_MOSI
  ) | (0
 80009ae:	4932      	ldr	r1, [pc, #200]	; (8000a78 <main+0x1a8>)
 80009b0:	400a      	ands	r2, r1
  GPIOB->AFR[0] = (GPIOB->AFR[0]
 80009b2:	621a      	str	r2, [r3, #32]
    | (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL3_0)  // SPIx_SCK
    | (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL5_0)  // SPIx_MOSI
  );


  HAL_Init();
 80009b4:	f000 fa96 	bl	8000ee4 <HAL_Init>

  /* Initialize the EPD */
  BSP_EPD_Init();
 80009b8:	f000 f868 	bl	8000a8c <BSP_EPD_Init>

  BSP_EPD_Clear(EPD_COLOR_WHITE);
 80009bc:	20ff      	movs	r0, #255	; 0xff
 80009be:	f000 f8a9 	bl	8000b14 <BSP_EPD_Clear>

  while(1)
  {
	BSP_EPD_DisplayStringAt(0,0,"HELLO WORLD!!!", CENTER_MODE);
 80009c2:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <main+0x1ac>)
 80009c4:	2301      	movs	r3, #1
 80009c6:	2100      	movs	r1, #0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 f8ff 	bl	8000bcc <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 80009ce:	f000 f9af 	bl	8000d30 <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	f000 f89e 	bl	8000b14 <BSP_EPD_Clear>

	HAL_Delay(2000);
 80009d8:	23fa      	movs	r3, #250	; 0xfa
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 faf1 	bl	8000fc4 <HAL_Delay>
	BSP_EPD_DisplayStringAt(0,0,"I LOVE STM32", CENTER_MODE);
 80009e2:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <main+0x1b0>)
 80009e4:	2301      	movs	r3, #1
 80009e6:	2100      	movs	r1, #0
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 f8ef 	bl	8000bcc <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 80009ee:	f000 f99f 	bl	8000d30 <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 80009f2:	20ff      	movs	r0, #255	; 0xff
 80009f4:	f000 f88e 	bl	8000b14 <BSP_EPD_Clear>

	HAL_Delay(2000);
 80009f8:	23fa      	movs	r3, #250	; 0xfa
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fae1 	bl	8000fc4 <HAL_Delay>
	BSP_EPD_DisplayStringAt(0,0,"I LOVE C++", CENTER_MODE);
 8000a02:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <main+0x1b4>)
 8000a04:	2301      	movs	r3, #1
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f8df 	bl	8000bcc <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 8000a0e:	f000 f98f 	bl	8000d30 <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000a12:	20ff      	movs	r0, #255	; 0xff
 8000a14:	f000 f87e 	bl	8000b14 <BSP_EPD_Clear>

	HAL_Delay(2000);
 8000a18:	23fa      	movs	r3, #250	; 0xfa
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fad1 	bl	8000fc4 <HAL_Delay>
	BSP_EPD_DisplayStringAt(0,0,"45 Celsius", CENTER_MODE);
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <main+0x1b8>)
 8000a24:	2301      	movs	r3, #1
 8000a26:	2100      	movs	r1, #0
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f8cf 	bl	8000bcc <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 8000a2e:	f000 f97f 	bl	8000d30 <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	f000 f86e 	bl	8000b14 <BSP_EPD_Clear>

	HAL_Delay(2000);
 8000a38:	23fa      	movs	r3, #250	; 0xfa
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fac1 	bl	8000fc4 <HAL_Delay>
	BSP_EPD_DisplayStringAt(0,0,"HELLO WORLD!!!", CENTER_MODE);
 8000a42:	e7be      	b.n	80009c2 <main+0xf2>
 8000a44:	40021000 	.word	0x40021000
 8000a48:	88ff400c 	.word	0x88ff400c
 8000a4c:	fef6fff6 	.word	0xfef6fff6
 8000a50:	fffbffff 	.word	0xfffbffff
 8000a54:	ff02ffff 	.word	0xff02ffff
 8000a58:	3ffcf3ff 	.word	0x3ffcf3ff
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	fffcffff 	.word	0xfffcffff
 8000a64:	50000400 	.word	0x50000400
 8000a68:	ff0ff00f 	.word	0xff0ff00f
 8000a6c:	00500990 	.word	0x00500990
 8000a70:	00f00cf0 	.word	0x00f00cf0
 8000a74:	fffff33f 	.word	0xfffff33f
 8000a78:	ff0f0fff 	.word	0xff0f0fff
 8000a7c:	08001248 	.word	0x08001248
 8000a80:	08001258 	.word	0x08001258
 8000a84:	08001268 	.word	0x08001268
 8000a88:	08001274 	.word	0x08001274

08000a8c <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  uint8_t ret = EPD_ERROR;
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]

  /* Default value for the Font */
  pFont = &Font16;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <BSP_EPD_Init+0x40>)
 8000a9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <BSP_EPD_Init+0x44>)
 8000a9c:	601a      	str	r2, [r3, #0]

  epd_drv = &gde021a1_drv;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <BSP_EPD_Init+0x48>)
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <BSP_EPD_Init+0x4c>)
 8000aa2:	601a      	str	r2, [r3, #0]

  /* EPD Init */
  epd_drv->Init();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <BSP_EPD_Init+0x48>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4798      	blx	r3

  /* Clear the EPD screen */
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000aac:	20ff      	movs	r0, #255	; 0xff
 8000aae:	f000 f831 	bl	8000b14 <BSP_EPD_Clear>

  /* Initialize the font */
  BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <BSP_EPD_Init+0x50>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 f81f 	bl	8000af8 <BSP_EPD_SetFont>

  ret = EPD_OK;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]

  return ret;
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000058 	.word	0x20000058
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	2000005c 	.word	0x2000005c
 8000ad8:	20000010 	.word	0x20000010
 8000adc:	20000000 	.word	0x20000000

08000ae0 <BSP_EPD_GetXSize>:
  * @brief  Gets the EPD X size.
  * @param  None
  * @retval EPD X size
  */
uint32_t BSP_EPD_GetXSize(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelWidth());
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <BSP_EPD_GetXSize+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4798      	blx	r3
 8000aec:	0003      	movs	r3, r0
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000005c 	.word	0x2000005c

08000af8 <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <BSP_EPD_SetFont+0x18>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000058 	.word	0x20000058

08000b14 <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <BSP_EPD_Clear+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689c      	ldr	r4, [r3, #8]
 8000b2a:	2311      	movs	r3, #17
 8000b2c:	22ab      	movs	r2, #171	; 0xab
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2000      	movs	r0, #0
 8000b32:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e00a      	b.n	8000b50 <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <BSP_EPD_Clear+0x50>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	1dba      	adds	r2, r7, #6
 8000b42:	8812      	ldrh	r2, [r2, #0]
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	0010      	movs	r0, r2
 8000b48:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <BSP_EPD_Clear+0x54>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d9f0      	bls.n	8000b3a <BSP_EPD_Clear+0x26>
  }
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b005      	add	sp, #20
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	2000005c 	.word	0x2000005c
 8000b68:	00000c17 	.word	0x00000c17

08000b6c <BSP_EPD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void BSP_EPD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0004      	movs	r4, r0
 8000b74:	0008      	movs	r0, r1
 8000b76:	0011      	movs	r1, r2
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	1c22      	adds	r2, r4, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	1c02      	adds	r2, r0, #0
 8000b82:	801a      	strh	r2, [r3, #0]
 8000b84:	1cfb      	adds	r3, r7, #3
 8000b86:	1c0a      	adds	r2, r1, #0
 8000b88:	701a      	strb	r2, [r3, #0]
  Ascii -= 32;
 8000b8a:	1cfb      	adds	r3, r7, #3
 8000b8c:	1cfa      	adds	r2, r7, #3
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	3a20      	subs	r2, #32
 8000b92:	701a      	strb	r2, [r3, #0]
  
  DrawChar(Xpos, Ypos, &pFont->table[Ascii * ((pFont->Height) * (pFont->Width))]);
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <BSP_EPD_DisplayChar+0x5c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	1cfb      	adds	r3, r7, #3
 8000b9c:	7819      	ldrb	r1, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <BSP_EPD_DisplayChar+0x5c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	88db      	ldrh	r3, [r3, #6]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <BSP_EPD_DisplayChar+0x5c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	889b      	ldrh	r3, [r3, #4]
 8000bac:	4343      	muls	r3, r0
 8000bae:	434b      	muls	r3, r1
 8000bb0:	18d2      	adds	r2, r2, r3
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	8819      	ldrh	r1, [r3, #0]
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f8da 	bl	8000d74 <DrawChar>
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	20000058 	.word	0x20000058

08000bcc <BSP_EPD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE  
  * @retval None
  */
void BSP_EPD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	0004      	movs	r4, r0
 8000bd4:	0008      	movs	r0, r1
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	230e      	movs	r3, #14
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	1c22      	adds	r2, r4, #0
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	230c      	movs	r3, #12
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	1c02      	adds	r2, r0, #0
 8000be8:	801a      	strh	r2, [r3, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	1c0a      	adds	r2, r1, #0
 8000bee:	701a      	strb	r2, [r3, #0]
  uint16_t refcolumn = 1, i = 0;
 8000bf0:	231e      	movs	r3, #30
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	801a      	strh	r2, [r3, #0]
 8000bf8:	231c      	movs	r3, #28
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0, xsize = 0; 
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000c0c:	e002      	b.n	8000c14 <BSP_EPD_DisplayStringAt+0x48>
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	617a      	str	r2, [r7, #20]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f6      	bne.n	8000c0e <BSP_EPD_DisplayStringAt+0x42>
  
  /* Characters number per line */
  xsize = (BSP_EPD_GetXSize()/pFont->Width);
 8000c20:	f7ff ff5e 	bl	8000ae0 <BSP_EPD_GetXSize>
 8000c24:	0002      	movs	r2, r0
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <BSP_EPD_DisplayStringAt+0x160>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	889b      	ldrh	r3, [r3, #4]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	0010      	movs	r0, r2
 8000c30:	f7ff fa6a 	bl	8000108 <__udivsi3>
 8000c34:	0003      	movs	r3, r0
 8000c36:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d016      	beq.n	8000c6e <BSP_EPD_DisplayStringAt+0xa2>
 8000c40:	dc2d      	bgt.n	8000c9e <BSP_EPD_DisplayStringAt+0xd2>
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d002      	beq.n	8000c4c <BSP_EPD_DisplayStringAt+0x80>
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d018      	beq.n	8000c7c <BSP_EPD_DisplayStringAt+0xb0>
 8000c4a:	e028      	b.n	8000c9e <BSP_EPD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* pFont->Width) / 2;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <BSP_EPD_DisplayStringAt+0x160>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	889b      	ldrh	r3, [r3, #4]
 8000c58:	4353      	muls	r3, r2
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	b299      	uxth	r1, r3
 8000c5e:	231e      	movs	r3, #30
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	220e      	movs	r2, #14
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	8812      	ldrh	r2, [r2, #0]
 8000c68:	188a      	adds	r2, r1, r2
 8000c6a:	801a      	strh	r2, [r3, #0]
      break;
 8000c6c:	e01e      	b.n	8000cac <BSP_EPD_DisplayStringAt+0xe0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000c6e:	231e      	movs	r3, #30
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	220e      	movs	r2, #14
 8000c74:	18ba      	adds	r2, r7, r2
 8000c76:	8812      	ldrh	r2, [r2, #0]
 8000c78:	801a      	strh	r2, [r3, #0]
      break;
 8000c7a:	e017      	b.n	8000cac <BSP_EPD_DisplayStringAt+0xe0>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*pFont->Width);
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <BSP_EPD_DisplayStringAt+0x160>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	889b      	ldrh	r3, [r3, #4]
 8000c8a:	4353      	muls	r3, r2
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	231e      	movs	r3, #30
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	220e      	movs	r2, #14
 8000c94:	18ba      	adds	r2, r7, r2
 8000c96:	8812      	ldrh	r2, [r2, #0]
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	801a      	strh	r2, [r3, #0]
      break;
 8000c9c:	e006      	b.n	8000cac <BSP_EPD_DisplayStringAt+0xe0>
    }    
  default:
    {
      refcolumn = Xpos;
 8000c9e:	231e      	movs	r3, #30
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	220e      	movs	r2, #14
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	8812      	ldrh	r2, [r2, #0]
 8000ca8:	801a      	strh	r2, [r3, #0]
      break;
 8000caa:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Send the string character by character on EPD */
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8000cac:	e01b      	b.n	8000ce6 <BSP_EPD_DisplayStringAt+0x11a>
  {
    /* Display one character on EPD */
    BSP_EPD_DisplayChar(refcolumn, Ypos, *Text);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	8819      	ldrh	r1, [r3, #0]
 8000cb8:	241e      	movs	r4, #30
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff54 	bl	8000b6c <BSP_EPD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += pFont->Width;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <BSP_EPD_DisplayStringAt+0x160>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	8899      	ldrh	r1, [r3, #4]
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	8812      	ldrh	r2, [r2, #0]
 8000cd0:	188a      	adds	r2, r1, r2
 8000cd2:	801a      	strh	r2, [r3, #0]
    /* Point on the next character */
    Text++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
    i++;
 8000cda:	211c      	movs	r1, #28
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	801a      	strh	r2, [r3, #0]
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	4193      	sbcs	r3, r2
 8000cee:	b2dc      	uxtb	r4, r3
 8000cf0:	f7ff fef6 	bl	8000ae0 <BSP_EPD_GetXSize>
 8000cf4:	0001      	movs	r1, r0
 8000cf6:	231c      	movs	r3, #28
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <BSP_EPD_DisplayStringAt+0x160>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	889b      	ldrh	r3, [r3, #4]
 8000d02:	4353      	muls	r3, r2
 8000d04:	1acb      	subs	r3, r1, r3
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	0c1a      	lsrs	r2, r3, #16
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <BSP_EPD_DisplayStringAt+0x160>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	0019      	movs	r1, r3
 8000d12:	2300      	movs	r3, #0
 8000d14:	428a      	cmp	r2, r1
 8000d16:	415b      	adcs	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4023      	ands	r3, r4
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1c5      	bne.n	8000cae <BSP_EPD_DisplayStringAt+0xe2>
  }
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b009      	add	sp, #36	; 0x24
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	20000058 	.word	0x20000058

08000d30 <BSP_EPD_RefreshDisplay>:
  * @brief  Updates the display from the data located into the RAM.
  * @param  None
  * @retval None
  */
void BSP_EPD_RefreshDisplay(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Refresh display sequence */
  epd_drv->RefreshDisplay();
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <BSP_EPD_RefreshDisplay+0x3c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	4798      	blx	r3

  /* Poll on the BUSY signal and wait for the EPD to be ready */
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	005a      	lsls	r2, r3, #1
 8000d42:	23a0      	movs	r3, #160	; 0xa0
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 fa13 	bl	8001174 <HAL_GPIO_ReadPin>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d1f5      	bne.n	8000d3e <BSP_EPD_RefreshDisplay+0xe>

  /*  EPD reset pin mamagement */
  EPD_RESET_HIGH();
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <BSP_EPD_RefreshDisplay+0x40>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	2104      	movs	r1, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 fa28 	bl	80011ae <HAL_GPIO_WritePin>

  /* Add a 10 ms Delay after EPD pin Reset */
  EPD_Delay(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f7ff fda6 	bl	80008b0 <EPD_Delay>
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	2000005c 	.word	0x2000005c
 8000d70:	50000400 	.word	0x50000400

08000d74 <DrawChar>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 17
  * @param  c: pointer to the character data
  * @retval None
  */
static void  DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	603a      	str	r2, [r7, #0]
 8000d7c:	1dbb      	adds	r3, r7, #6
 8000d7e:	1c02      	adds	r2, r0, #0
 8000d80:	801a      	strh	r2, [r3, #0]
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	1c0a      	adds	r2, r1, #0
 8000d86:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  uint32_t data_length = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  uint16_t height = 0;
 8000d90:	210e      	movs	r1, #14
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	801a      	strh	r2, [r3, #0]
  uint16_t width = 0;
 8000d98:	200c      	movs	r0, #12
 8000d9a:	183b      	adds	r3, r7, r0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	801a      	strh	r2, [r3, #0]

  width  = pFont->Width;
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <DrawChar+0xb4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	183b      	adds	r3, r7, r0
 8000da6:	8892      	ldrh	r2, [r2, #4]
 8000da8:	801a      	strh	r2, [r3, #0]
  height = pFont->Height;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <DrawChar+0xb4>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	88d2      	ldrh	r2, [r2, #6]
 8000db2:	801a      	strh	r2, [r3, #0]
  
  /* Set the Character display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos + width - 1), (Ypos + height - 1));
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <DrawChar+0xb8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689c      	ldr	r4, [r3, #8]
 8000dba:	1dba      	adds	r2, r7, #6
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	18d3      	adds	r3, r2, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b29d      	uxth	r5, r3
 8000dca:	1d3a      	adds	r2, r7, #4
 8000dcc:	000e      	movs	r6, r1
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	8819      	ldrh	r1, [r3, #0]
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	8818      	ldrh	r0, [r3, #0]
 8000de4:	0013      	movs	r3, r2
 8000de6:	002a      	movs	r2, r5
 8000de8:	47a0      	blx	r4
  
  data_length = (height * width);
 8000dea:	19bb      	adds	r3, r7, r6
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	200c      	movs	r0, #12
 8000df0:	183a      	adds	r2, r7, r0
 8000df2:	8812      	ldrh	r2, [r2, #0]
 8000df4:	4353      	muls	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
    
  for(index = 0; index < data_length; index++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e00b      	b.n	8000e16 <DrawChar+0xa2>
  {
    epd_drv->WritePixel(c[index]);
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <DrawChar+0xb8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	188a      	adds	r2, r1, r2
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	4798      	blx	r3
  for(index = 0; index < data_length; index++)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3ef      	bcc.n	8000dfe <DrawChar+0x8a>
  }
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b007      	add	sp, #28
 8000e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e28:	20000058 	.word	0x20000058
 8000e2c:	2000005c 	.word	0x2000005c

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_MspInit+0x24>)
 8000e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x24>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_MspInit+0x24>)
 8000e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_MspInit+0x24>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0549      	lsls	r1, r1, #21
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f886 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f7ff fff7 	bl	8000e86 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f000 f993 	bl	80011e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fd05 	bl	80008d0 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   r0, =_estack
 8000ec8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000ed4:	08002b04 	.word	0x08002b04
  ldr r2, =_sbss
 8000ed8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000edc:	20000064 	.word	0x20000064

08000ee0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_COMP_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x3c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Init+0x3c>)
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f811 	bl	8000f24 <HAL_InitTick>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e001      	b.n	8000f12 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0e:	f7ff ff8f 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f2e:	681c      	ldr	r4, [r3, #0]
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_InitTick+0x60>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	0019      	movs	r1, r3
 8000f36:	23fa      	movs	r3, #250	; 0xfa
 8000f38:	0098      	lsls	r0, r3, #2
 8000f3a:	f7ff f8e5 	bl	8000108 <__udivsi3>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	0019      	movs	r1, r3
 8000f42:	0020      	movs	r0, r4
 8000f44:	f7ff f8e0 	bl	8000108 <__udivsi3>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f905 	bl	800115a <HAL_SYSTICK_Config>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e00f      	b.n	8000f78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d80b      	bhi.n	8000f76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f8e2 	bl	8001130 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_InitTick+0x64>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b003      	add	sp, #12
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	20000030 	.word	0x20000030
 8000f84:	20000038 	.word	0x20000038
 8000f88:	20000034 	.word	0x20000034

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	001a      	movs	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	18d2      	adds	r2, r2, r3
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_IncTick+0x20>)
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	20000038 	.word	0x20000038
 8000fac:	20000060 	.word	0x20000060

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <HAL_GetTick+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000060 	.word	0x20000060

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	189b      	adds	r3, r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	f7ff ffe0 	bl	8000fb0 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20000038 	.word	0x20000038

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	0002      	movs	r2, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b7f      	cmp	r3, #127	; 0x7f
 8001020:	d828      	bhi.n	8001074 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001022:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <__NVIC_SetPriority+0xd4>)
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	33c0      	adds	r3, #192	; 0xc0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	589b      	ldr	r3, [r3, r2]
 8001032:	1dfa      	adds	r2, r7, #7
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	0011      	movs	r1, r2
 8001038:	2203      	movs	r2, #3
 800103a:	400a      	ands	r2, r1
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	21ff      	movs	r1, #255	; 0xff
 8001040:	4091      	lsls	r1, r2
 8001042:	000a      	movs	r2, r1
 8001044:	43d2      	mvns	r2, r2
 8001046:	401a      	ands	r2, r3
 8001048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	401a      	ands	r2, r3
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	2303      	movs	r3, #3
 800105a:	4003      	ands	r3, r0
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001060:	481f      	ldr	r0, [pc, #124]	; (80010e0 <__NVIC_SetPriority+0xd4>)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	430a      	orrs	r2, r1
 800106c:	33c0      	adds	r3, #192	; 0xc0
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001072:	e031      	b.n	80010d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <__NVIC_SetPriority+0xd8>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0019      	movs	r1, r3
 800107c:	230f      	movs	r3, #15
 800107e:	400b      	ands	r3, r1
 8001080:	3b08      	subs	r3, #8
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3306      	adds	r3, #6
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	; 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <__NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	001c      	movs	r4, r3
 80010c4:	230f      	movs	r3, #15
 80010c6:	4023      	ands	r3, r4
 80010c8:	3b08      	subs	r3, #8
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	430a      	orrs	r2, r1
 80010ce:	3306      	adds	r3, #6
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	18c3      	adds	r3, r0, r3
 80010d4:	3304      	adds	r3, #4
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b003      	add	sp, #12
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	045b      	lsls	r3, r3, #17
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d301      	bcc.n	8001100 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fc:	2301      	movs	r3, #1
 80010fe:	e010      	b.n	8001122 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <SysTick_Config+0x44>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	3a01      	subs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001108:	2301      	movs	r3, #1
 800110a:	425b      	negs	r3, r3
 800110c:	2103      	movs	r1, #3
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff7c 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x44>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	210f      	movs	r1, #15
 800113c:	187b      	adds	r3, r7, r1
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	187b      	adds	r3, r7, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ffbf 	bl	80010e8 <SysTick_Config>
 800116a:	0003      	movs	r3, r0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	000a      	movs	r2, r1
 800117e:	1cbb      	adds	r3, r7, #2
 8001180:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	1cba      	adds	r2, r7, #2
 8001188:	8812      	ldrh	r2, [r2, #0]
 800118a:	4013      	ands	r3, r2
 800118c:	d004      	beq.n	8001198 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800118e:	230f      	movs	r3, #15
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	0008      	movs	r0, r1
 80011b8:	0011      	movs	r1, r2
 80011ba:	1cbb      	adds	r3, r7, #2
 80011bc:	1c02      	adds	r2, r0, #0
 80011be:	801a      	strh	r2, [r3, #0]
 80011c0:	1c7b      	adds	r3, r7, #1
 80011c2:	1c0a      	adds	r2, r1, #0
 80011c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c6:	1c7b      	adds	r3, r7, #1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ce:	1cbb      	adds	r3, r7, #2
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011d6:	e003      	b.n	80011e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011d8:	1cbb      	adds	r3, r7, #2
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <__libc_init_array>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	2600      	movs	r6, #0
 80011ec:	4d0c      	ldr	r5, [pc, #48]	; (8001220 <__libc_init_array+0x38>)
 80011ee:	4c0d      	ldr	r4, [pc, #52]	; (8001224 <__libc_init_array+0x3c>)
 80011f0:	1b64      	subs	r4, r4, r5
 80011f2:	10a4      	asrs	r4, r4, #2
 80011f4:	42a6      	cmp	r6, r4
 80011f6:	d109      	bne.n	800120c <__libc_init_array+0x24>
 80011f8:	2600      	movs	r6, #0
 80011fa:	f000 f819 	bl	8001230 <_init>
 80011fe:	4d0a      	ldr	r5, [pc, #40]	; (8001228 <__libc_init_array+0x40>)
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <__libc_init_array+0x44>)
 8001202:	1b64      	subs	r4, r4, r5
 8001204:	10a4      	asrs	r4, r4, #2
 8001206:	42a6      	cmp	r6, r4
 8001208:	d105      	bne.n	8001216 <__libc_init_array+0x2e>
 800120a:	bd70      	pop	{r4, r5, r6, pc}
 800120c:	00b3      	lsls	r3, r6, #2
 800120e:	58eb      	ldr	r3, [r5, r3]
 8001210:	4798      	blx	r3
 8001212:	3601      	adds	r6, #1
 8001214:	e7ee      	b.n	80011f4 <__libc_init_array+0xc>
 8001216:	00b3      	lsls	r3, r6, #2
 8001218:	58eb      	ldr	r3, [r5, r3]
 800121a:	4798      	blx	r3
 800121c:	3601      	adds	r6, #1
 800121e:	e7f2      	b.n	8001206 <__libc_init_array+0x1e>
 8001220:	08002afc 	.word	0x08002afc
 8001224:	08002afc 	.word	0x08002afc
 8001228:	08002afc 	.word	0x08002afc
 800122c:	08002b00 	.word	0x08002b00

08001230 <_init>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001236:	bc08      	pop	{r3}
 8001238:	469e      	mov	lr, r3
 800123a:	4770      	bx	lr

0800123c <_fini>:
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001242:	bc08      	pop	{r3}
 8001244:	469e      	mov	lr, r3
 8001246:	4770      	bx	lr
