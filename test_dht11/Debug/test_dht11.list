
test_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f94  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dcc  08006dcc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd4  08006dd4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200000a0  08006e7c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08006e7c  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013664  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c20  00000000  00000000  0003372c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00036350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015d08  00000000  00000000  000373a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000147fc  00000000  00000000  0004d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082ce1  00000000  00000000  000618ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e458d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000f10  00000000  00000000  000e45e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dd4  00000000  00000000  000e54f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e20 	.word	0x08004e20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08004e20 	.word	0x08004e20

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 80004c8:	f000 fae0 	bl	8000a8c <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 80004cc:	2010      	movs	r0, #16
 80004ce:	f000 fb1d 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fafa 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 80004d8:	2011      	movs	r0, #17
 80004da:	f000 fb17 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 faf4 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 80004e4:	2044      	movs	r0, #68	; 0x44
 80004e6:	f000 fb11 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 faee 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 80004f0:	2011      	movs	r0, #17
 80004f2:	f000 faeb 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 80004f6:	2045      	movs	r0, #69	; 0x45
 80004f8:	f000 fb08 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fae5 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8000502:	20ab      	movs	r0, #171	; 0xab
 8000504:	f000 fae2 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 8000508:	204e      	movs	r0, #78	; 0x4e
 800050a:	f000 faff 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fadc 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8000514:	204f      	movs	r0, #79	; 0x4f
 8000516:	f000 faf9 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fad6 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8000520:	20f0      	movs	r0, #240	; 0xf0
 8000522:	f000 faf3 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8000526:	201f      	movs	r0, #31
 8000528:	f000 fad0 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 800052c:	2021      	movs	r0, #33	; 0x21
 800052e:	f000 faed 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 faca 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8000538:	202c      	movs	r0, #44	; 0x2c
 800053a:	f000 fae7 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 800053e:	20a0      	movs	r0, #160	; 0xa0
 8000540:	f000 fac4 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8000544:	203c      	movs	r0, #60	; 0x3c
 8000546:	f000 fae1 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fabe 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 8000550:	2032      	movs	r0, #50	; 0x32
 8000552:	f000 fadb 	bl	8000b0c <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e00c      	b.n	8000578 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <gde021a1_Init+0xd0>)
 8000564:	5cd3      	ldrb	r3, [r2, r3]
 8000566:	b29b      	uxth	r3, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f000 faaf 	bl	8000acc <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	3201      	adds	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b59      	cmp	r3, #89	; 0x59
 800057e:	d9ee      	bls.n	800055e <gde021a1_Init+0xa2>
  }
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	080066c4 	.word	0x080066c4

08000590 <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 800059c:	2024      	movs	r0, #36	; 0x24
 800059e:	f000 fab5 	bl	8000b0c <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa8f 	bl	8000acc <EPD_IO_WriteData>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80005b6:	b5b0      	push	{r4, r5, r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	0005      	movs	r5, r0
 80005be:	000c      	movs	r4, r1
 80005c0:	0010      	movs	r0, r2
 80005c2:	0019      	movs	r1, r3
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	1c2a      	adds	r2, r5, #0
 80005c8:	801a      	strh	r2, [r3, #0]
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	1c22      	adds	r2, r4, #0
 80005ce:	801a      	strh	r2, [r3, #0]
 80005d0:	1cbb      	adds	r3, r7, #2
 80005d2:	1c02      	adds	r2, r0, #0
 80005d4:	801a      	strh	r2, [r3, #0]
 80005d6:	003b      	movs	r3, r7
 80005d8:	1c0a      	adds	r2, r1, #0
 80005da:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 80005dc:	2044      	movs	r0, #68	; 0x44
 80005de:	f000 fa95 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fa70 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 80005ec:	003b      	movs	r3, r7
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fa6b 	bl	8000acc <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 80005f6:	2045      	movs	r0, #69	; 0x45
 80005f8:	f000 fa88 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fa63 	bl	8000acc <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 8000606:	1cbb      	adds	r3, r7, #2
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fa5e 	bl	8000acc <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 8000610:	204e      	movs	r0, #78	; 0x4e
 8000612:	f000 fa7b 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fa56 	bl	8000acc <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 8000620:	204f      	movs	r0, #79	; 0x4f
 8000622:	f000 fa73 	bl	8000b0c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fa4e 	bl	8000acc <EPD_IO_WriteData>
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bdb0      	pop	{r4, r5, r7, pc}

08000638 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 800063c:	23ac      	movs	r3, #172	; 0xac
}
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 8000648:	2312      	movs	r3, #18
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8000654:	2022      	movs	r0, #34	; 0x22
 8000656:	f000 fa59 	bl	8000b0c <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 800065a:	20c4      	movs	r0, #196	; 0xc4
 800065c:	f000 fa36 	bl	8000acc <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 8000660:	2020      	movs	r0, #32
 8000662:	f000 fa53 	bl	8000b0c <EPD_IO_WriteReg>
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8000670:	2022      	movs	r0, #34	; 0x22
 8000672:	f000 fa4b 	bl	8000b0c <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 8000676:	2003      	movs	r0, #3
 8000678:	f000 fa28 	bl	8000acc <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800067c:	2020      	movs	r0, #32
 800067e:	f000 fa45 	bl	8000b0c <EPD_IO_WriteReg>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	0005      	movs	r5, r0
 8000690:	000c      	movs	r4, r1
 8000692:	0010      	movs	r0, r2
 8000694:	0019      	movs	r1, r3
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	1c2a      	adds	r2, r5, #0
 800069a:	801a      	strh	r2, [r3, #0]
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	1c22      	adds	r2, r4, #0
 80006a0:	801a      	strh	r2, [r3, #0]
 80006a2:	1cbb      	adds	r3, r7, #2
 80006a4:	1c02      	adds	r2, r0, #0
 80006a6:	801a      	strh	r2, [r3, #0]
 80006a8:	003b      	movs	r3, r7
 80006aa:	1c0a      	adds	r2, r1, #0
 80006ac:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 80006b2:	230f      	movs	r3, #15
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 80006ba:	2308      	movs	r3, #8
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 80006c2:	230d      	movs	r3, #13
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80006ca:	2024      	movs	r0, #36	; 0x24
 80006cc:	f000 fa1e 	bl	8000b0c <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 80006d0:	1cbb      	adds	r3, r7, #2
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	2207      	movs	r2, #7
 80006d6:	4013      	ands	r3, r2
 80006d8:	b29b      	uxth	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d000      	beq.n	80006e0 <gde021a1_DrawImage+0x58>
 80006de:	e087      	b.n	80007f0 <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e073      	b.n	80007ce <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 80006e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	18d2      	adds	r2, r2, r3
 80006ec:	210f      	movs	r1, #15
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d05f      	beq.n	80007bc <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80006fc:	230e      	movs	r3, #14
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e054      	b.n	80007b0 <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	e029      	b.n	8000760 <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2201      	movs	r2, #1
 8000714:	4013      	ands	r3, r2
 8000716:	d00d      	beq.n	8000734 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 8000718:	2008      	movs	r0, #8
 800071a:	183a      	adds	r2, r7, r0
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	18d3      	adds	r3, r2, r3
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2203      	movs	r2, #3
 8000724:	4393      	bics	r3, r2
 8000726:	b2d9      	uxtb	r1, r3
 8000728:	183a      	adds	r2, r7, r0
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	1c0a      	adds	r2, r1, #0
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e00c      	b.n	800074e <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8000734:	2008      	movs	r0, #8
 8000736:	183a      	adds	r2, r7, r0
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2203      	movs	r2, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	b2d9      	uxtb	r1, r3
 8000744:	183a      	adds	r2, r7, r0
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	1c0a      	adds	r2, r1, #0
 800074c:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 800074e:	220f      	movs	r2, #15
 8000750:	18bb      	adds	r3, r7, r2
 8000752:	18ba      	adds	r2, r7, r2
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	0852      	lsrs	r2, r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	3301      	adds	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d9d2      	bls.n	800070c <gde021a1_DrawImage+0x84>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000766:	2108      	movs	r1, #8
 8000768:	187b      	adds	r3, r7, r1
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	019b      	lsls	r3, r3, #6
 800076e:	b25a      	sxtb	r2, r3
 8000770:	187b      	adds	r3, r7, r1
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b25a      	sxtb	r2, r3
 800077c:	187b      	adds	r3, r7, r1
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	b25b      	sxtb	r3, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	b25a      	sxtb	r2, r3
 8000788:	187b      	adds	r3, r7, r1
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b25a      	sxtb	r2, r3
 8000792:	210d      	movs	r1, #13
 8000794:	187b      	adds	r3, r7, r1
 8000796:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 8000798:	187b      	adds	r3, r7, r1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f994 	bl	8000acc <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80007a4:	210e      	movs	r1, #14
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	3201      	adds	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	230e      	movs	r3, #14
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d9a5      	bls.n	8000706 <gde021a1_DrawImage+0x7e>
 80007ba:	e005      	b.n	80007c8 <gde021a1_DrawImage+0x140>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 80007bc:	20ff      	movs	r0, #255	; 0xff
 80007be:	f000 f985 	bl	8000acc <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 80007c2:	20ff      	movs	r0, #255	; 0xff
 80007c4:	f000 f982 	bl	8000acc <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	003b      	movs	r3, r7
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	1cba      	adds	r2, r7, #2
 80007d4:	8812      	ldrh	r2, [r2, #0]
 80007d6:	0892      	lsrs	r2, r2, #2
 80007d8:	b292      	uxth	r2, r2
 80007da:	4353      	muls	r3, r2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da00      	bge.n	80007e2 <gde021a1_DrawImage+0x15a>
 80007e0:	3301      	adds	r3, #1
 80007e2:	105b      	asrs	r3, r3, #1
 80007e4:	001a      	movs	r2, r3
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d200      	bcs.n	80007ee <gde021a1_DrawImage+0x166>
 80007ec:	e77b      	b.n	80006e6 <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 80007ee:	e10f      	b.n	8000a10 <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e0fb      	b.n	80009ee <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 80007f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	18d2      	adds	r2, r2, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	1cbb      	adds	r3, r7, #2
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	b29b      	uxth	r3, r3
 8000810:	3301      	adds	r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	da00      	bge.n	8000818 <gde021a1_DrawImage+0x190>
 8000816:	3301      	adds	r3, #1
 8000818:	105b      	asrs	r3, r3, #1
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f7ff fd03 	bl	8000228 <__aeabi_uidivmod>
 8000822:	1e0b      	subs	r3, r1, #0
 8000824:	d100      	bne.n	8000828 <gde021a1_DrawImage+0x1a0>
 8000826:	e071      	b.n	800090c <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 8000828:	230f      	movs	r3, #15
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d05f      	beq.n	80008f2 <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000832:	230e      	movs	r3, #14
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e054      	b.n	80008e6 <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	e029      	b.n	8000896 <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 8000842:	230f      	movs	r3, #15
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2201      	movs	r2, #1
 800084a:	4013      	ands	r3, r2
 800084c:	d00d      	beq.n	800086a <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 800084e:	2008      	movs	r0, #8
 8000850:	183a      	adds	r2, r7, r0
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2203      	movs	r2, #3
 800085a:	4393      	bics	r3, r2
 800085c:	b2d9      	uxtb	r1, r3
 800085e:	183a      	adds	r2, r7, r0
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	18d3      	adds	r3, r2, r3
 8000864:	1c0a      	adds	r2, r1, #0
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e00c      	b.n	8000884 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 800086a:	2008      	movs	r0, #8
 800086c:	183a      	adds	r2, r7, r0
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2203      	movs	r2, #3
 8000876:	4313      	orrs	r3, r2
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	183a      	adds	r2, r7, r0
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	18d3      	adds	r3, r2, r3
 8000880:	1c0a      	adds	r2, r1, #0
 8000882:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8000884:	220f      	movs	r2, #15
 8000886:	18bb      	adds	r3, r7, r2
 8000888:	18ba      	adds	r2, r7, r2
 800088a:	7812      	ldrb	r2, [r2, #0]
 800088c:	0852      	lsrs	r2, r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	3301      	adds	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d9d2      	bls.n	8000842 <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 800089c:	2108      	movs	r1, #8
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	78db      	ldrb	r3, [r3, #3]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	210d      	movs	r1, #13
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 f8f9 	bl	8000acc <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80008da:	210e      	movs	r1, #14
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	3201      	adds	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	230e      	movs	r3, #14
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d9a5      	bls.n	800083c <gde021a1_DrawImage+0x1b4>
 80008f0:	e07a      	b.n	80009e8 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 80008f2:	230f      	movs	r3, #15
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d000      	beq.n	80008fe <gde021a1_DrawImage+0x276>
 80008fc:	e074      	b.n	80009e8 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	f000 f8e4 	bl	8000acc <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 8000904:	20ff      	movs	r0, #255	; 0xff
 8000906:	f000 f8e1 	bl	8000acc <EPD_IO_WriteData>
 800090a:	e06d      	b.n	80009e8 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	1cbb      	adds	r3, r7, #2
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	da00      	bge.n	8000920 <gde021a1_DrawImage+0x298>
 800091e:	3301      	adds	r3, #1
 8000920:	105b      	asrs	r3, r3, #1
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f7ff fc7f 	bl	8000228 <__aeabi_uidivmod>
 800092a:	1e0b      	subs	r3, r1, #0
 800092c:	d15c      	bne.n	80009e8 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2bf0      	cmp	r3, #240	; 0xf0
 8000936:	d04f      	beq.n	80009d8 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	e029      	b.n	8000992 <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 800093e:	230f      	movs	r3, #15
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	4013      	ands	r3, r2
 8000948:	d00d      	beq.n	8000966 <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 800094a:	2008      	movs	r0, #8
 800094c:	183a      	adds	r2, r7, r0
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2203      	movs	r2, #3
 8000956:	4393      	bics	r3, r2
 8000958:	b2d9      	uxtb	r1, r3
 800095a:	183a      	adds	r2, r7, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	1c0a      	adds	r2, r1, #0
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e00c      	b.n	8000980 <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 8000966:	2008      	movs	r0, #8
 8000968:	183a      	adds	r2, r7, r0
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2203      	movs	r2, #3
 8000972:	4313      	orrs	r3, r2
 8000974:	b2d9      	uxtb	r1, r3
 8000976:	183a      	adds	r2, r7, r0
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	1c0a      	adds	r2, r1, #0
 800097e:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 8000980:	220f      	movs	r2, #15
 8000982:	18bb      	adds	r3, r7, r2
 8000984:	18ba      	adds	r2, r7, r2
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	0852      	lsrs	r2, r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	3301      	adds	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d9d2      	bls.n	800093e <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000998:	2108      	movs	r1, #8
 800099a:	187b      	adds	r3, r7, r1
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	019b      	lsls	r3, r3, #6
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	78db      	ldrb	r3, [r3, #3]
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	210d      	movs	r1, #13
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 f87b 	bl	8000acc <EPD_IO_WriteData>
 80009d6:	e007      	b.n	80009e8 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2bf0      	cmp	r3, #240	; 0xf0
 80009e0:	d102      	bne.n	80009e8 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	f000 f872 	bl	8000acc <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	003b      	movs	r3, r7
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	1cba      	adds	r2, r7, #2
 80009f4:	8812      	ldrh	r2, [r2, #0]
 80009f6:	0892      	lsrs	r2, r2, #2
 80009f8:	b292      	uxth	r2, r2
 80009fa:	3201      	adds	r2, #1
 80009fc:	4353      	muls	r3, r2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da00      	bge.n	8000a04 <gde021a1_DrawImage+0x37c>
 8000a02:	3301      	adds	r3, #1
 8000a04:	105b      	asrs	r3, r3, #1
 8000a06:	001a      	movs	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d200      	bcs.n	8000a10 <gde021a1_DrawImage+0x388>
 8000a0e:	e6f2      	b.n	80007f6 <gde021a1_DrawImage+0x16e>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b006      	add	sp, #24
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}

08000a18 <LoopDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LoopDelay(volatile uint32_t n) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 8000a20:	e002      	b.n	8000a28 <LoopDelay+0x10>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f9      	bne.n	8000a22 <LoopDelay+0xa>
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SPIx_Init>:

static void SPIx_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
  DISCOVERY_SPIx->CR1 = 0
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <SPIx_Init+0x10>)
 8000a3e:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <SPIx_Init+0x14>)
 8000a40:	601a      	str	r2, [r3, #0]
    | ( 0 * SPI_CR1_CRCNEXT  )         // Transmit CRC next
    | ( 0 * SPI_CR1_CRCEN    )         // Hardware CRC calculation enable
    | ( 0 * SPI_CR1_BIDIOE   )         // Output enable in bidirectional mode
    | ( 0 * SPI_CR1_BIDIMODE )         // Bidirectional data mode enable
  ;
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	00000357 	.word	0x00000357

08000a50 <SPIx_Write>:
// won't be used anyway, as there is no MISO from the display
static uint32_t SPIx_Read(void) {
  return 0;
}

static void SPIx_Write(uint8_t n) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
  DISCOVERY_SPIx->DR = n;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SPIx_Write+0x38>)
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	60da      	str	r2, [r3, #12]
  while (!(DISCOVERY_SPIx->SR & SPI_SR_TXE)) {
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SPIx_Write+0x38>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d0fa      	beq.n	8000a66 <SPIx_Write+0x16>
    // wait until empty
  }
  while ((DISCOVERY_SPIx->SR & SPI_SR_BSY)) {
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SPIx_Write+0x38>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d1fa      	bne.n	8000a72 <SPIx_Write+0x22>
    // wait until not busy
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40013000 	.word	0x40013000

08000a8c <EPD_IO_Init>:

void EPD_IO_Init(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  // pins pinit - see gpio-clock init and gpio pins init in main()

  /* Enable Display */
  PIN_CLR(EPD_PWR);
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <EPD_IO_Init+0x3c>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	04d2      	lsls	r2, r2, #19
 8000a96:	619a      	str	r2, [r3, #24]

  /* Set or Reset the control line */
  PIN_CLR(EPD_CS);
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0612      	lsls	r2, r2, #24
 8000aa0:	619a      	str	r2, [r3, #24]
  PIN_SET(EPD_CS);
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	0212      	lsls	r2, r2, #8
 8000aaa:	619a      	str	r2, [r3, #24]

  /* EPD reset pin mamagement */
  PIN_SET(EPD_RESET);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <EPD_IO_Init+0x3c>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	619a      	str	r2, [r3, #24]
  EPD_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f000 f84a 	bl	8000b4c <EPD_Delay>

  PIN_SET(DISCOVERY_SPIx_SCK);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <EPD_IO_Init+0x3c>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	619a      	str	r2, [r3, #24]
  /* SPI Configuration */
  SPIx_Init();
 8000abe:	f7ff ffbb 	bl	8000a38 <SPIx_Init>
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	50000400 	.word	0x50000400

08000acc <EPD_IO_WriteData>:

void EPD_IO_WriteData(uint16_t n) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0612      	lsls	r2, r2, #24
 8000ae0:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to High */
  PIN_SET(EPD_DC);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <EPD_IO_WriteData+0x3c>)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	619a      	str	r2, [r3, #24]
  /* Send Data */
  SPIx_Write(n);
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ffad 	bl	8000a50 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0212      	lsls	r2, r2, #8
 8000afe:	619a      	str	r2, [r3, #24]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	50000400 	.word	0x50000400

08000b0c <EPD_IO_WriteReg>:
/**
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t n) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0612      	lsls	r2, r2, #24
 8000b20:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to Low */
  PIN_CLR(EPD_DC);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <EPD_IO_WriteReg+0x3c>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	0512      	lsls	r2, r2, #20
 8000b28:	619a      	str	r2, [r3, #24]
  /* Send Command */
  SPIx_Write(n);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff8e 	bl	8000a50 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0212      	lsls	r2, r2, #8
 8000b3c:	619a      	str	r2, [r3, #24]
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	50000400 	.word	0x50000400

08000b4c <EPD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t n) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  LoopDelay(n * 3000);  // some fancy factor to get it roughly in ms
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EPD_Delay+0x1c>)
 8000b58:	4353      	muls	r3, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff5c 	bl	8000a18 <LoopDelay>
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	00000bb8 	.word	0x00000bb8

08000b6c <read_cycle>:

// ---------------------- M A I N -----------------------------------
uint16_t read_cycle(uint16_t cur_tics, uint8_t neg_tic){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	1d7b      	adds	r3, r7, #5
 8000b7a:	1c0a      	adds	r2, r1, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
	uint16_t cnt_tics;
 	if (cur_tics < MAX_TICS) cnt_tics = 0;
 8000b7e:	1dbb      	adds	r3, r7, #6
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <read_cycle+0x90>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d803      	bhi.n	8000b90 <read_cycle+0x24>
 8000b88:	230e      	movs	r3, #14
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
	if (neg_tic){
 8000b90:	1d7b      	adds	r3, r7, #5
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d01b      	beq.n	8000bd0 <read_cycle+0x64>
		//while (!GPIO_ReadInputDataBit(GPIOA,GPIO_PIN_4)&&(cnt_tics<MAX_TICS)){
		while (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) && (cnt_tics<MAX_TICS)){
 8000b98:	e005      	b.n	8000ba6 <read_cycle+0x3a>
			cnt_tics++;
 8000b9a:	210e      	movs	r1, #14
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	3201      	adds	r2, #1
 8000ba4:	801a      	strh	r2, [r3, #0]
		while (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) && (cnt_tics<MAX_TICS)){
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2110      	movs	r1, #16
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 fc15 	bl	80023dc <HAL_GPIO_ReadPin>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d11a      	bne.n	8000bec <read_cycle+0x80>
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <read_cycle+0x90>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d9eb      	bls.n	8000b9a <read_cycle+0x2e>
 8000bc2:	e013      	b.n	8000bec <read_cycle+0x80>
		}
	}
	else {
		//while (GPIO_ReadInputDataBit(GPIOA,GPIO_PIN_4)&&(cnt_tics<MAX_TICS)){
		while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) && (cnt_tics<MAX_TICS)){
			cnt_tics++;
 8000bc4:	210e      	movs	r1, #14
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	3201      	adds	r2, #1
 8000bce:	801a      	strh	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) && (cnt_tics<MAX_TICS)){
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fc00 	bl	80023dc <HAL_GPIO_ReadPin>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d005      	beq.n	8000bec <read_cycle+0x80>
 8000be0:	230e      	movs	r3, #14
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <read_cycle+0x90>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d9eb      	bls.n	8000bc4 <read_cycle+0x58>
		}
	}
 	return cnt_tics;
 8000bec:	230e      	movs	r3, #14
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	881b      	ldrh	r3, [r3, #0]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	0000270f 	.word	0x0000270f

08000c00 <read_DHT11>:

uint8_t read_DHT11(uint8_t *buf){
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b098      	sub	sp, #96	; 0x60
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint16_t dt[42];
	uint16_t cnt;
	uint8_t i, check_sum;

	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c08:	4b77      	ldr	r3, [pc, #476]	; (8000de8 <read_DHT11+0x1e8>)
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	4b76      	ldr	r3, [pc, #472]	; (8000de8 <read_DHT11+0x1e8>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	4b74      	ldr	r3, [pc, #464]	; (8000de8 <read_DHT11+0x1e8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	4b73      	ldr	r3, [pc, #460]	; (8000de8 <read_DHT11+0x1e8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	4a71      	ldr	r2, [pc, #452]	; (8000de8 <read_DHT11+0x1e8>)
 8000c22:	23a0      	movs	r3, #160	; 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 fa61 	bl	80020f0 <HAL_GPIO_Init>

	//reset DHT11
	//Delay(500);
	HAL_Delay(500);
 8000c2e:	23fa      	movs	r3, #250	; 0xfa
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 f984 	bl	8001f40 <HAL_Delay>
 	//GPIO_LOW(GPIOA, GPIO_PIN_3);
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2110      	movs	r1, #16
 8000c40:	0018      	movs	r0, r3
 8000c42:	f001 fbe8 	bl	8002416 <HAL_GPIO_WritePin>
	//Delay(20);
	HAL_Delay(20);
 8000c46:	2014      	movs	r0, #20
 8000c48:	f001 f97a 	bl	8001f40 <HAL_Delay>
 	//GPIO_HIGH(GPIOA, GPIO_PIN_3);
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	2201      	movs	r2, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 fbde 	bl	8002416 <HAL_GPIO_WritePin>

 	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c5a:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <read_DHT11+0x1e8>)
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	601a      	str	r2, [r3, #0]
 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <read_DHT11+0x1e8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	4b60      	ldr	r3, [pc, #384]	; (8000de8 <read_DHT11+0x1e8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	4b5e      	ldr	r3, [pc, #376]	; (8000de8 <read_DHT11+0x1e8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
 	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	4a5d      	ldr	r2, [pc, #372]	; (8000de8 <read_DHT11+0x1e8>)
 8000c74:	23a0      	movs	r3, #160	; 0xa0
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fa38 	bl	80020f0 <HAL_GPIO_Init>

  //start reading
 	cnt = 0;
 8000c80:	235e      	movs	r3, #94	; 0x5e
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	801a      	strh	r2, [r3, #0]
	for(i=0;i<83 && cnt<MAX_TICS;i++){
 8000c88:	235d      	movs	r3, #93	; 0x5d
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e02c      	b.n	8000cec <read_DHT11+0xec>
		if (i & 1){
 8000c92:	235d      	movs	r3, #93	; 0x5d
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d00a      	beq.n	8000cb4 <read_DHT11+0xb4>
			cnt = read_cycle(cnt, 1);
 8000c9e:	235e      	movs	r3, #94	; 0x5e
 8000ca0:	18fc      	adds	r4, r7, r3
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <read_cycle>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	8023      	strh	r3, [r4, #0]
 8000cb2:	e015      	b.n	8000ce0 <read_DHT11+0xe0>
		}
		else {
			cnt = read_cycle(cnt, 0);
 8000cb4:	255e      	movs	r5, #94	; 0x5e
 8000cb6:	197c      	adds	r4, r7, r5
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff54 	bl	8000b6c <read_cycle>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	8023      	strh	r3, [r4, #0]
			dt[i/2]= cnt;
 8000cc8:	235d      	movs	r3, #93	; 0x5d
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	0052      	lsls	r2, r2, #1
 8000cda:	1979      	adds	r1, r7, r5
 8000cdc:	8809      	ldrh	r1, [r1, #0]
 8000cde:	52d1      	strh	r1, [r2, r3]
	for(i=0;i<83 && cnt<MAX_TICS;i++){
 8000ce0:	215d      	movs	r1, #93	; 0x5d
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	3201      	adds	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	235d      	movs	r3, #93	; 0x5d
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b52      	cmp	r3, #82	; 0x52
 8000cf4:	d805      	bhi.n	8000d02 <read_DHT11+0x102>
 8000cf6:	235e      	movs	r3, #94	; 0x5e
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	4a3b      	ldr	r2, [pc, #236]	; (8000dec <read_DHT11+0x1ec>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d9c7      	bls.n	8000c92 <read_DHT11+0x92>
		}
	}

 	//release line
	//GPIO_HIGH(GPIOA, GPIO_PIN_4);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f001 fb83 	bl	8002416 <HAL_GPIO_WritePin>

	if (cnt>=MAX_TICS) return DHT11_NO_CONN;
 8000d10:	235e      	movs	r3, #94	; 0x5e
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	4a35      	ldr	r2, [pc, #212]	; (8000dec <read_DHT11+0x1ec>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d901      	bls.n	8000d20 <read_DHT11+0x120>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e05e      	b.n	8000dde <read_DHT11+0x1de>

	//convert data
 	for(i=2;i<42;i++){
 8000d20:	235d      	movs	r3, #93	; 0x5d
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2202      	movs	r2, #2
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e029      	b.n	8000d7e <read_DHT11+0x17e>
		(*buf) <<= 1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	18db      	adds	r3, r3, r3
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	701a      	strb	r2, [r3, #0]
  	if (dt[i]>20) {
 8000d36:	235d      	movs	r3, #93	; 0x5d
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	0052      	lsls	r2, r2, #1
 8000d42:	5ad3      	ldrh	r3, [r2, r3]
 8000d44:	2b14      	cmp	r3, #20
 8000d46:	d905      	bls.n	8000d54 <read_DHT11+0x154>
			(*buf)++;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	701a      	strb	r2, [r3, #0]
 		}
		if (!((i-1)%8) && (i>2)) {
 8000d54:	215d      	movs	r1, #93	; 0x5d
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2307      	movs	r3, #7
 8000d60:	4013      	ands	r3, r2
 8000d62:	d106      	bne.n	8000d72 <read_DHT11+0x172>
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d902      	bls.n	8000d72 <read_DHT11+0x172>
			buf++;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 	for(i=2;i<42;i++){
 8000d72:	215d      	movs	r1, #93	; 0x5d
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	3201      	adds	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	215d      	movs	r1, #93	; 0x5d
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b29      	cmp	r3, #41	; 0x29
 8000d86:	d9d0      	bls.n	8000d2a <read_DHT11+0x12a>
		}
 	}

	//calculate checksum
	buf -= 5;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b05      	subs	r3, #5
 8000d8c:	607b      	str	r3, [r7, #4]
	check_sum = 0;
 8000d8e:	235c      	movs	r3, #92	; 0x5c
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 	for(i=0;i<4;i++){
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e010      	b.n	8000dc0 <read_DHT11+0x1c0>
		check_sum += *buf;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7819      	ldrb	r1, [r3, #0]
 8000da2:	225c      	movs	r2, #92	; 0x5c
 8000da4:	18bb      	adds	r3, r7, r2
 8000da6:	18ba      	adds	r2, r7, r2
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	188a      	adds	r2, r1, r2
 8000dac:	701a      	strb	r2, [r3, #0]
		buf++;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3301      	adds	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 	for(i=0;i<4;i++){
 8000db4:	215d      	movs	r1, #93	; 0x5d
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	3201      	adds	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	235d      	movs	r3, #93	; 0x5d
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9e9      	bls.n	8000d9e <read_DHT11+0x19e>
	}

	if (*buf != check_sum) return DHT11_CS_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	225c      	movs	r2, #92	; 0x5c
 8000dd0:	18ba      	adds	r2, r7, r2
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d001      	beq.n	8000ddc <read_DHT11+0x1dc>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e000      	b.n	8000dde <read_DHT11+0x1de>

	return DHT11_OK;
 8000ddc:	2300      	movs	r3, #0
	//return check_sum;
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b018      	add	sp, #96	; 0x60
 8000de4:	bdb0      	pop	{r4, r5, r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000580 	.word	0x20000580
 8000dec:	0000270f 	.word	0x0000270f

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b08d      	sub	sp, #52	; 0x34
 8000df4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f001 f833 	bl	8001e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f891 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 fa53 	bl	80012a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e02:	f000 f909 	bl	8001018 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e06:	f000 f947 	bl	8001098 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e0a:	f000 f97d 	bl	8001108 <MX_SPI2_Init>
  MX_TSC_Init();
 8000e0e:	f000 f9b1 	bl	8001174 <MX_TSC_Init>
  MX_USART1_UART_Init();
 8000e12:	f000 f9f3 	bl	80011fc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e16:	f000 fa21 	bl	800125c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_EPD_Init();
 8000e1a:	f000 faf9 	bl	8001410 <BSP_EPD_Init>

  BSP_EPD_DrawImage(0, 0, 72, 172, (uint8_t*) picture_1);
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <main+0x110>)
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	23ac      	movs	r3, #172	; 0xac
 8000e24:	2248      	movs	r2, #72	; 0x48
 8000e26:	2100      	movs	r1, #0
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 fcdb 	bl	80017e4 <BSP_EPD_DrawImage>
  BSP_EPD_RefreshDisplay();
 8000e2e:	f000 fd31 	bl	8001894 <BSP_EPD_RefreshDisplay>
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	f000 fbc8 	bl	80015c8 <BSP_EPD_Clear>
  HAL_Delay(1000);
 8000e38:	23fa      	movs	r3, #250	; 0xfa
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 f87f 	bl	8001f40 <HAL_Delay>

  BSP_EPD_DisplayStringAt(0, 45, (unsigned char *)"Introduction to", CENTER_MODE);
 8000e42:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <main+0x114>)
 8000e44:	2301      	movs	r3, #1
 8000e46:	212d      	movs	r1, #45	; 0x2d
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 fc19 	bl	8001680 <BSP_EPD_DisplayStringAt>
  BSP_EPD_DisplayStringAt(0, 42, (unsigned char *)"embedded system", CENTER_MODE);
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <main+0x118>)
 8000e50:	2301      	movs	r3, #1
 8000e52:	212a      	movs	r1, #42	; 0x2a
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 fc13 	bl	8001680 <BSP_EPD_DisplayStringAt>
  BSP_EPD_DisplayStringAt(0, 39, (unsigned char *)"programming", CENTER_MODE);
 8000e5a:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <main+0x11c>)
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	2127      	movs	r1, #39	; 0x27
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 fc0d 	bl	8001680 <BSP_EPD_DisplayStringAt>
  BSP_EPD_DisplayStringAt(0, 36, (unsigned char *)"by Yiman A.u.", CENTER_MODE);
 8000e66:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <main+0x120>)
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2124      	movs	r1, #36	; 0x24
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 fc07 	bl	8001680 <BSP_EPD_DisplayStringAt>
  BSP_EPD_RefreshDisplay();
 8000e72:	f000 fd0f 	bl	8001894 <BSP_EPD_RefreshDisplay>
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000e76:	20ff      	movs	r0, #255	; 0xff
 8000e78:	f000 fba6 	bl	80015c8 <BSP_EPD_Clear>
  HAL_Delay(2000);
 8000e7c:	23fa      	movs	r3, #250	; 0xfa
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 f85d 	bl	8001f40 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	res = read_DHT11(buf);
 8000e86:	2627      	movs	r6, #39	; 0x27
 8000e88:	19bc      	adds	r4, r7, r6
 8000e8a:	2520      	movs	r5, #32
 8000e8c:	197b      	adds	r3, r7, r5
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff feb6 	bl	8000c00 <read_DHT11>
 8000e94:	0003      	movs	r3, r0
 8000e96:	7023      	strb	r3, [r4, #0]

	if (res==DHT11_OK)
 8000e98:	19bb      	adds	r3, r7, r6
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d108      	bne.n	8000eb2 <main+0xc2>
		sprintf(strDisp, "RH=%02d%% t=%dC", buf[0], buf[2]);
 8000ea0:	197b      	adds	r3, r7, r5
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	197b      	adds	r3, r7, r5
 8000ea8:	789b      	ldrb	r3, [r3, #2]
 8000eaa:	491a      	ldr	r1, [pc, #104]	; (8000f14 <main+0x124>)
 8000eac:	1d38      	adds	r0, r7, #4
 8000eae:	f003 fb4d 	bl	800454c <siprintf>

	if (res==DHT11_CS_ERROR)
 8000eb2:	2327      	movs	r3, #39	; 0x27
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d105      	bne.n	8000ec8 <main+0xd8>
		sprintf(strDisp,"CHECKSUM ERROR");
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <main+0x128>)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f003 fb42 	bl	800454c <siprintf>

	if (res==DHT11_NO_CONN)
 8000ec8:	2327      	movs	r3, #39	; 0x27
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d105      	bne.n	8000ede <main+0xee>
		sprintf(strDisp,"NOT CONNECTED");
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <main+0x12c>)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f003 fb37 	bl	800454c <siprintf>

	BSP_EPD_DisplayStringAt(0, 40, (unsigned char *)strDisp, CENTER_MODE);
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2128      	movs	r1, #40	; 0x28
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 fbcb 	bl	8001680 <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 8000eea:	f000 fcd3 	bl	8001894 <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	f000 fb6a 	bl	80015c8 <BSP_EPD_Clear>

	HAL_Delay(2000);
 8000ef4:	23fa      	movs	r3, #250	; 0xfa
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 f821 	bl	8001f40 <HAL_Delay>
	res = read_DHT11(buf);
 8000efe:	e7c2      	b.n	8000e86 <main+0x96>
 8000f00:	08006720 	.word	0x08006720
 8000f04:	08004e38 	.word	0x08004e38
 8000f08:	08004e48 	.word	0x08004e48
 8000f0c:	08004e58 	.word	0x08004e58
 8000f10:	08004e64 	.word	0x08004e64
 8000f14:	08004e74 	.word	0x08004e74
 8000f18:	08004e84 	.word	0x08004e84
 8000f1c:	08004e94 	.word	0x08004e94

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b09d      	sub	sp, #116	; 0x74
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	2438      	movs	r4, #56	; 0x38
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2338      	movs	r3, #56	; 0x38
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	f003 fb03 	bl	800453c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f36:	2324      	movs	r3, #36	; 0x24
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	2314      	movs	r3, #20
 8000f3e:	001a      	movs	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	f003 fafb 	bl	800453c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f46:	003b      	movs	r3, r7
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2324      	movs	r3, #36	; 0x24
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f003 faf4 	bl	800453c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <SystemClock_Config+0xf0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <SystemClock_Config+0xf4>)
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <SystemClock_Config+0xf0>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0109      	lsls	r1, r1, #4
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2221      	movs	r2, #33	; 0x21
 8000f6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	22a0      	movs	r2, #160	; 0xa0
 8000f70:	02d2      	lsls	r2, r2, #11
 8000f72:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f74:	0021      	movs	r1, r4
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2201      	movs	r2, #1
 8000f7a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2202      	movs	r2, #2
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	0252      	lsls	r2, r2, #9
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0352      	lsls	r2, r2, #13
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	0412      	lsls	r2, r2, #16
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 fcaf 	bl	8002900 <HAL_RCC_OscConfig>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fa6:	f000 fa2d 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	2124      	movs	r1, #36	; 0x24
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	220f      	movs	r2, #15
 8000fb0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2101      	movs	r1, #1
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f002 f85a 	bl	8003088 <HAL_RCC_ClockConfig>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000fd8:	f000 fa14 	bl	8001404 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2249      	movs	r2, #73	; 0x49
 8000fe0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fee:	003b      	movs	r3, r7
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	04d2      	lsls	r2, r2, #19
 8000ff4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f002 fa69 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001002:	f000 f9ff 	bl	8001404 <Error_Handler>
  }
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b01d      	add	sp, #116	; 0x74
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40007000 	.word	0x40007000
 8001014:	ffffe7ff 	.word	0xffffe7ff

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_I2C1_Init+0x78>)
 8001024:	22e1      	movs	r2, #225	; 0xe1
 8001026:	00d2      	lsls	r2, r2, #3
 8001028:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_I2C1_Init+0x78>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_I2C1_Init+0x78>)
 8001032:	2201      	movs	r2, #1
 8001034:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_I2C1_Init+0x78>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_I2C1_Init+0x78>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_I2C1_Init+0x78>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_I2C1_Init+0x78>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_I2C1_Init+0x78>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_I2C1_Init+0x78>)
 8001056:	0018      	movs	r0, r3
 8001058:	f001 f9fa 	bl	8002450 <HAL_I2C_Init>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001060:	f000 f9d0 	bl	8001404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_I2C1_Init+0x78>)
 8001066:	2100      	movs	r1, #0
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fa87 	bl	800257c <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001072:	f000 f9c7 	bl	8001404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2C1_Init+0x78>)
 8001078:	2100      	movs	r1, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f001 faca 	bl	8002614 <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 f9be 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	200000bc 	.word	0x200000bc
 8001094:	40005400 	.word	0x40005400

08001098 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_SPI1_Init+0x68>)
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <MX_SPI1_Init+0x6c>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_SPI1_Init+0x68>)
 80010a4:	2282      	movs	r2, #130	; 0x82
 80010a6:	0052      	lsls	r2, r2, #1
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_SPI1_Init+0x68>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	0212      	lsls	r2, r2, #8
 80010b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_SPI1_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_SPI1_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_SPI1_Init+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_SPI1_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_SPI1_Init+0x68>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_SPI1_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_SPI1_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_SPI1_Init+0x68>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_SPI1_Init+0x68>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <MX_SPI1_Init+0x68>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f002 fb7e 	bl	80037ec <HAL_SPI_Init>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f4:	f000 f986 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000110 	.word	0x20000110
 8001104:	40013000 	.word	0x40013000

08001108 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_SPI2_Init+0x64>)
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <MX_SPI2_Init+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_SPI2_Init+0x64>)
 8001114:	2282      	movs	r2, #130	; 0x82
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_SPI2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_SPI2_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_SPI2_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_SPI2_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_SPI2_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_SPI2_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_SPI2_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_SPI2_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_SPI2_Init+0x64>)
 8001152:	2207      	movs	r2, #7
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <MX_SPI2_Init+0x64>)
 8001158:	0018      	movs	r0, r3
 800115a:	f002 fb47 	bl	80037ec <HAL_SPI_Init>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d001      	beq.n	8001166 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8001162:	f000 f94f 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000168 	.word	0x20000168
 8001170:	40003800 	.word	0x40003800

08001174 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_TSC_Init+0x80>)
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <MX_TSC_Init+0x84>)
 800117c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TSC_Init+0x80>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0552      	lsls	r2, r2, #21
 8001184:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_TSC_Init+0x80>)
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	0452      	lsls	r2, r2, #17
 800118c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TSC_Init+0x80>)
 8001190:	2200      	movs	r2, #0
 8001192:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TSC_Init+0x80>)
 8001196:	2201      	movs	r2, #1
 8001198:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_TSC_Init+0x80>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_TSC_Init+0x80>)
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	0192      	lsls	r2, r2, #6
 80011a6:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_TSC_Init+0x80>)
 80011aa:	22a0      	movs	r2, #160	; 0xa0
 80011ac:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_TSC_Init+0x80>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_TSC_Init+0x80>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_TSC_Init+0x80>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_TSC_Init+0x80>)
 80011c2:	222c      	movs	r2, #44	; 0x2c
 80011c4:	2100      	movs	r1, #0
 80011c6:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_TSC_Init+0x80>)
 80011ca:	2291      	movs	r2, #145	; 0x91
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_TSC_Init+0x80>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_TSC_Init+0x80>)
 80011d8:	2291      	movs	r2, #145	; 0x91
 80011da:	00d2      	lsls	r2, r2, #3
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <MX_TSC_Init+0x80>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fb97 	bl	8003914 <HAL_TSC_Init>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80011ea:	f000 f90b 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001c0 	.word	0x200001c0
 80011f8:	40024000 	.word	0x40024000

080011fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_USART1_UART_Init+0x5c>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001208:	22e1      	movs	r2, #225	; 0xe1
 800120a:	0252      	lsls	r2, r2, #9
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART1_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001240:	0018      	movs	r0, r3
 8001242:	f002 fc0d 	bl	8003a60 <HAL_UART_Init>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 f8db 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000204 	.word	0x20000204
 8001258:	40013800 	.word	0x40013800

0800125c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <MX_USB_PCD_Init+0x48>)
 8001264:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 8001268:	2208      	movs	r2, #8
 800126a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 800126e:	2202      	movs	r2, #2
 8001270:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 8001274:	2202      	movs	r2, #2
 8001276:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <MX_USB_PCD_Init+0x44>)
 800128c:	0018      	movs	r0, r3
 800128e:	f001 fa0d 	bl	80026ac <HAL_PCD_Init>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001296:	f000 f8b5 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000028c 	.word	0x2000028c
 80012a4:	40005c00 	.word	0x40005c00

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08b      	sub	sp, #44	; 0x2c
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	2414      	movs	r4, #20
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	0018      	movs	r0, r3
 80012b4:	2314      	movs	r3, #20
 80012b6:	001a      	movs	r2, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	f003 f93f 	bl	800453c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012c4:	2104      	movs	r1, #4
 80012c6:	430a      	orrs	r2, r1
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	2204      	movs	r2, #4
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	430a      	orrs	r2, r1
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f2:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012fa:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <MX_GPIO_Init+0x14c>)
 8001308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <MX_GPIO_Init+0x14c>)
 800130c:	2102      	movs	r1, #2
 800130e:	430a      	orrs	r2, r1
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_GPIO_Init+0x14c>)
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD_R_Pin, GPIO_PIN_RESET);
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	2200      	movs	r2, #0
 8001324:	2130      	movs	r1, #48	; 0x30
 8001326:	0018      	movs	r0, r3
 8001328:	f001 f875 	bl	8002416 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 800132c:	4932      	ldr	r1, [pc, #200]	; (80013f8 <MX_GPIO_Init+0x150>)
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <MX_GPIO_Init+0x154>)
 8001330:	2200      	movs	r2, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f001 f86f 	bl	8002416 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001338:	193b      	adds	r3, r7, r4
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0192      	lsls	r2, r2, #6
 800133e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2288      	movs	r2, #136	; 0x88
 8001344:	0352      	lsls	r2, r2, #13
 8001346:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800134e:	193b      	adds	r3, r7, r4
 8001350:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <MX_GPIO_Init+0x158>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f000 fecb 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2290      	movs	r2, #144	; 0x90
 8001364:	0352      	lsls	r2, r2, #13
 8001366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	193b      	adds	r3, r7, r4
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136e:	193a      	adds	r2, r7, r4
 8001370:	23a0      	movs	r3, #160	; 0xa0
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	0011      	movs	r1, r2
 8001376:	0018      	movs	r0, r3
 8001378:	f000 feba 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 800137c:	193b      	adds	r3, r7, r4
 800137e:	2281      	movs	r2, #129	; 0x81
 8001380:	0052      	lsls	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	193b      	adds	r3, r7, r4
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	193b      	adds	r3, r7, r4
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	193a      	adds	r2, r7, r4
 8001392:	23a0      	movs	r3, #160	; 0xa0
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fea9 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD_R_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD_R_Pin;
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	2230      	movs	r2, #48	; 0x30
 80013a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	2201      	movs	r2, #1
 80013a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	193a      	adds	r2, r7, r4
 80013b8:	23a0      	movs	r3, #160	; 0xa0
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fe96 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 80013c4:	0021      	movs	r1, r4
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <MX_GPIO_Init+0x150>)
 80013ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2201      	movs	r2, #1
 80013d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <MX_GPIO_Init+0x154>)
 80013e2:	0019      	movs	r1, r3
 80013e4:	0010      	movs	r0, r2
 80013e6:	f000 fe83 	bl	80020f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b00b      	add	sp, #44	; 0x2c
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000
 80013f8:	00000c14 	.word	0x00000c14
 80013fc:	50000400 	.word	0x50000400
 8001400:	50000800 	.word	0x50000800

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	/*!< Set MSION bit */
	RCC->CR |= (uint32_t)0x00000100;
 8001416:	4b46      	ldr	r3, [pc, #280]	; (8001530 <BSP_EPD_Init+0x120>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <BSP_EPD_Init+0x120>)
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0049      	lsls	r1, r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

	/*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
	RCC->CFGR &= (uint32_t) 0x88FF400C;
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <BSP_EPD_Init+0x120>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4b41      	ldr	r3, [pc, #260]	; (8001530 <BSP_EPD_Init+0x120>)
 800142a:	4942      	ldr	r1, [pc, #264]	; (8001534 <BSP_EPD_Init+0x124>)
 800142c:	400a      	ands	r2, r1
 800142e:	60da      	str	r2, [r3, #12]

	/*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFF6;
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <BSP_EPD_Init+0x120>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <BSP_EPD_Init+0x120>)
 8001436:	4940      	ldr	r1, [pc, #256]	; (8001538 <BSP_EPD_Init+0x128>)
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

	/*!< Reset HSI48ON  bit */
	RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 800143c:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <BSP_EPD_Init+0x120>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <BSP_EPD_Init+0x120>)
 8001442:	2101      	movs	r1, #1
 8001444:	438a      	bics	r2, r1
 8001446:	609a      	str	r2, [r3, #8]

	/*!< Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <BSP_EPD_Init+0x120>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b38      	ldr	r3, [pc, #224]	; (8001530 <BSP_EPD_Init+0x120>)
 800144e:	493b      	ldr	r1, [pc, #236]	; (800153c <BSP_EPD_Init+0x12c>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

	/*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
	RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <BSP_EPD_Init+0x120>)
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <BSP_EPD_Init+0x120>)
 800145a:	4939      	ldr	r1, [pc, #228]	; (8001540 <BSP_EPD_Init+0x130>)
 800145c:	400a      	ands	r2, r1
 800145e:	60da      	str	r2, [r3, #12]

	/*!< Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <BSP_EPD_Init+0x120>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]

	RCC->IOPENR |= 0
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <BSP_EPD_Init+0x120>)
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <BSP_EPD_Init+0x120>)
 800146c:	2103      	movs	r1, #3
 800146e:	430a      	orrs	r2, r1
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
			| RCC_IOPENR_GPIOAEN
			| RCC_IOPENR_GPIOBEN
			;
	RCC->APB2ENR |= 0
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <BSP_EPD_Init+0x120>)
 8001474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <BSP_EPD_Init+0x120>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0149      	lsls	r1, r1, #5
 800147c:	430a      	orrs	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
			| RCC_APB2ENR_SPI1EN
			;

	GPIOA->MODER = (GPIOA->MODER
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE5)      // RED LED
			& (~GPIO_MODER_MODE8)      // EPD_BUSY
			& (~GPIO_MODER_MODE15)     // EPD_CS
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <BSP_EPD_Init+0x134>)
 8001488:	401a      	ands	r2, r3
	GPIOA->MODER = (GPIOA->MODER
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
	) | (0
 800148e:	492e      	ldr	r1, [pc, #184]	; (8001548 <BSP_EPD_Init+0x138>)
 8001490:	430a      	orrs	r2, r1
	GPIOA->MODER = (GPIOA->MODER
 8001492:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE5_0)   // RED LED
			| (GPIO_Mode_In  * GPIO_MODER_MODE8_0)   // EPD_BUSY
			| (GPIO_Mode_Out * GPIO_MODER_MODE15_0)  // EPD_CS
	);

	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
			& (~GPIO_OSPEEDER_OSPEED15)    // EPD_CS
	) | (0
 800149e:	21c0      	movs	r1, #192	; 0xc0
 80014a0:	0609      	lsls	r1, r1, #24
 80014a2:	430a      	orrs	r2, r1
	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 80014a4:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED15_0)  // EPD_CS
	);
	GPIOA->PUPDR = (GPIOA->PUPDR
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD8)    // EPD_BUSY
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <BSP_EPD_Init+0x13c>)
 80014ae:	401a      	ands	r2, r3
	GPIOA->PUPDR = (GPIOA->PUPDR
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
	) | (0
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	0289      	lsls	r1, r1, #10
 80014b8:	430a      	orrs	r2, r1
	GPIOA->PUPDR = (GPIOA->PUPDR
 80014ba:	60da      	str	r2, [r3, #12]
			| (GPIO_PullDown * GPIO_PUPDR_PUPD8_0)  // EPD_BUSY
	);

	GPIOB->MODER = (GPIOB->MODER
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <BSP_EPD_Init+0x140>)
 80014be:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE4)      // GREEN LED
			& (~GPIO_MODER_MODE2)      // EPD_RESET
			& (~GPIO_MODER_MODE10)     // EPD_PWR
			& (~GPIO_MODER_MODE11)     // EPD_DC
			& (~GPIO_MODER_MODE3)      // SPIx_SCK
			& (~GPIO_MODER_MODE5)      // SPIx_MOSI
 80014c0:	4a24      	ldr	r2, [pc, #144]	; (8001554 <BSP_EPD_Init+0x144>)
 80014c2:	401a      	ands	r2, r3
	GPIOB->MODER = (GPIOB->MODER
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <BSP_EPD_Init+0x140>)
	) | (0
 80014c6:	4924      	ldr	r1, [pc, #144]	; (8001558 <BSP_EPD_Init+0x148>)
 80014c8:	430a      	orrs	r2, r1
	GPIOB->MODER = (GPIOB->MODER
 80014ca:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE10_0)  // EPD_PWR
			| (GPIO_Mode_Out * GPIO_MODER_MODE11_0)  // EPD_DC
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE3_0)  // SPIx_SCK
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE5_0)  // SPIx_MOSI
	);
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <BSP_EPD_Init+0x140>)
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <BSP_EPD_Init+0x140>)
			& (~GPIO_OSPEEDER_OSPEED2)     // EPD_RESET
			& (~GPIO_OSPEEDER_OSPEED10)    // EPD_PWR
			& (~GPIO_OSPEEDER_OSPEED11)    // EPD_DC
			& (~GPIO_OSPEEDER_OSPEED3)     // SPIx_SCK
			& (~GPIO_OSPEEDER_OSPEED5)     // SPIx_MOSI
	) | (0
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <BSP_EPD_Init+0x14c>)
 80014d4:	430a      	orrs	r2, r1
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 80014d6:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED10_0)  // EPD_PWR
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED11_0)  // EPD_DC
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED3_0)   // SPIx_SCK
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED5_0)   // SPIx_MOSI
	);
	GPIOB->PUPDR = (GPIOB->PUPDR
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <BSP_EPD_Init+0x140>)
 80014da:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD3)    // SPIx_SCK
			& (~GPIO_PUPDR_PUPD5)    // SPIx_MOSI
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <BSP_EPD_Init+0x150>)
 80014de:	401a      	ands	r2, r3
	GPIOB->PUPDR = (GPIOB->PUPDR
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <BSP_EPD_Init+0x140>)
	) | (0
 80014e2:	2184      	movs	r1, #132	; 0x84
 80014e4:	0109      	lsls	r1, r1, #4
 80014e6:	430a      	orrs	r2, r1
	GPIOB->PUPDR = (GPIOB->PUPDR
 80014e8:	60da      	str	r2, [r3, #12]
			| (GPIO_PullUp   * GPIO_PUPDR_PUPD3_0)  // SPIx_SCK
			| (GPIO_PullDown * GPIO_PUPDR_PUPD5_0)  // SPIx_MOSI
	);
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <BSP_EPD_Init+0x140>)
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <BSP_EPD_Init+0x140>)
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL3_0))    // SPIx_SCK
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL5_0))    // SPIx_MOSI
	) | (0
 80014f0:	491c      	ldr	r1, [pc, #112]	; (8001564 <BSP_EPD_Init+0x154>)
 80014f2:	400a      	ands	r2, r1
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 80014f4:	621a      	str	r2, [r3, #32]
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL3_0)  // SPIx_SCK
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL5_0)  // SPIx_MOSI
	);

	uint8_t ret = EPD_ERROR;
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]

	/* Default value for the Font */
	pFont = &Font16;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <BSP_EPD_Init+0x158>)
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <BSP_EPD_Init+0x15c>)
 8001500:	601a      	str	r2, [r3, #0]

	epd_drv = &gde021a1_drv;
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <BSP_EPD_Init+0x160>)
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <BSP_EPD_Init+0x164>)
 8001506:	601a      	str	r2, [r3, #0]

	/* EPD Init */
	epd_drv->Init();
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <BSP_EPD_Init+0x160>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4798      	blx	r3

	/* Clear the EPD screen */
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001510:	20ff      	movs	r0, #255	; 0xff
 8001512:	f000 f859 	bl	80015c8 <BSP_EPD_Clear>

	/* Initialize the font */
	BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <BSP_EPD_Init+0x168>)
 8001518:	0018      	movs	r0, r3
 800151a:	f000 f847 	bl	80015ac <BSP_EPD_SetFont>

	ret = EPD_OK;
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]

	return ret;
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	88ff400c 	.word	0x88ff400c
 8001538:	fef6fff6 	.word	0xfef6fff6
 800153c:	fffbffff 	.word	0xfffbffff
 8001540:	ff02ffff 	.word	0xff02ffff
 8001544:	3ffcf3ff 	.word	0x3ffcf3ff
 8001548:	40000400 	.word	0x40000400
 800154c:	fffcffff 	.word	0xfffcffff
 8001550:	50000400 	.word	0x50000400
 8001554:	ff0ff00f 	.word	0xff0ff00f
 8001558:	00500990 	.word	0x00500990
 800155c:	00f00cf0 	.word	0x00f00cf0
 8001560:	fffff33f 	.word	0xfffff33f
 8001564:	ff0f0fff 	.word	0xff0f0fff
 8001568:	20000594 	.word	0x20000594
 800156c:	20000008 	.word	0x20000008
 8001570:	20000598 	.word	0x20000598
 8001574:	20000010 	.word	0x20000010
 8001578:	20000000 	.word	0x20000000

0800157c <BSP_EPD_GetXSize>:
  * @brief  Gets the EPD X size.
  * @param  None
  * @retval EPD X size
  */
uint32_t BSP_EPD_GetXSize(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelWidth());
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <BSP_EPD_GetXSize+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4798      	blx	r3
 8001588:	0003      	movs	r3, r0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000598 	.word	0x20000598

08001594 <BSP_EPD_GetYSize>:
  * @brief  Gets the EPD Y size.
  * @param  None   
  * @retval EPD Y size
  */
uint32_t BSP_EPD_GetYSize(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelHeight());
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <BSP_EPD_GetYSize+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4798      	blx	r3
 80015a0:	0003      	movs	r3, r0
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000598 	.word	0x20000598

080015ac <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <BSP_EPD_SetFont+0x18>)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000594 	.word	0x20000594

080015c8 <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <BSP_EPD_Clear+0x50>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689c      	ldr	r4, [r3, #8]
 80015de:	2311      	movs	r3, #17
 80015e0:	22ab      	movs	r2, #171	; 0xab
 80015e2:	2100      	movs	r1, #0
 80015e4:	2000      	movs	r0, #0
 80015e6:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e00a      	b.n	8001604 <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <BSP_EPD_Clear+0x50>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	1dba      	adds	r2, r7, #6
 80015f6:	8812      	ldrh	r2, [r2, #0]
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	0010      	movs	r0, r2
 80015fc:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <BSP_EPD_Clear+0x54>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d9f0      	bls.n	80015ee <BSP_EPD_Clear+0x26>
  }
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b005      	add	sp, #20
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000598 	.word	0x20000598
 800161c:	00000c17 	.word	0x00000c17

08001620 <BSP_EPD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void BSP_EPD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	0004      	movs	r4, r0
 8001628:	0008      	movs	r0, r1
 800162a:	0011      	movs	r1, r2
 800162c:	1dbb      	adds	r3, r7, #6
 800162e:	1c22      	adds	r2, r4, #0
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	1c02      	adds	r2, r0, #0
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	1cfb      	adds	r3, r7, #3
 800163a:	1c0a      	adds	r2, r1, #0
 800163c:	701a      	strb	r2, [r3, #0]
  Ascii -= 32;
 800163e:	1cfb      	adds	r3, r7, #3
 8001640:	1cfa      	adds	r2, r7, #3
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	3a20      	subs	r2, #32
 8001646:	701a      	strb	r2, [r3, #0]
  
  DrawChar(Xpos, Ypos, &pFont->table[Ascii * ((pFont->Height) * (pFont->Width))]);
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <BSP_EPD_DisplayChar+0x5c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	1cfb      	adds	r3, r7, #3
 8001650:	7819      	ldrb	r1, [r3, #0]
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <BSP_EPD_DisplayChar+0x5c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	88db      	ldrh	r3, [r3, #6]
 8001658:	0018      	movs	r0, r3
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <BSP_EPD_DisplayChar+0x5c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	4343      	muls	r3, r0
 8001662:	434b      	muls	r3, r1
 8001664:	18d2      	adds	r2, r2, r3
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	8819      	ldrh	r1, [r3, #0]
 800166a:	1dbb      	adds	r3, r7, #6
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	0018      	movs	r0, r3
 8001670:	f000 f932 	bl	80018d8 <DrawChar>
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b003      	add	sp, #12
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	20000594 	.word	0x20000594

08001680 <BSP_EPD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE  
  * @retval None
  */
void BSP_EPD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	0004      	movs	r4, r0
 8001688:	0008      	movs	r0, r1
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	0019      	movs	r1, r3
 800168e:	230e      	movs	r3, #14
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	1c22      	adds	r2, r4, #0
 8001694:	801a      	strh	r2, [r3, #0]
 8001696:	230c      	movs	r3, #12
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	1c02      	adds	r2, r0, #0
 800169c:	801a      	strh	r2, [r3, #0]
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	1c0a      	adds	r2, r1, #0
 80016a2:	701a      	strb	r2, [r3, #0]
  uint16_t refcolumn = 1, i = 0;
 80016a4:	231e      	movs	r3, #30
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	801a      	strh	r2, [r3, #0]
 80016ac:	231c      	movs	r3, #28
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0, xsize = 0; 
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80016c0:	e002      	b.n	80016c8 <BSP_EPD_DisplayStringAt+0x48>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	617a      	str	r2, [r7, #20]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f6      	bne.n	80016c2 <BSP_EPD_DisplayStringAt+0x42>
  
  /* Characters number per line */
  xsize = (BSP_EPD_GetXSize()/pFont->Width);
 80016d4:	f7ff ff52 	bl	800157c <BSP_EPD_GetXSize>
 80016d8:	0002      	movs	r2, r0
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <BSP_EPD_DisplayStringAt+0x160>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	0019      	movs	r1, r3
 80016e2:	0010      	movs	r0, r2
 80016e4:	f7fe fd1a 	bl	800011c <__udivsi3>
 80016e8:	0003      	movs	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d016      	beq.n	8001722 <BSP_EPD_DisplayStringAt+0xa2>
 80016f4:	dc2d      	bgt.n	8001752 <BSP_EPD_DisplayStringAt+0xd2>
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d002      	beq.n	8001700 <BSP_EPD_DisplayStringAt+0x80>
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d018      	beq.n	8001730 <BSP_EPD_DisplayStringAt+0xb0>
 80016fe:	e028      	b.n	8001752 <BSP_EPD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* pFont->Width) / 2;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad2      	subs	r2, r2, r3
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <BSP_EPD_DisplayStringAt+0x160>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	889b      	ldrh	r3, [r3, #4]
 800170c:	4353      	muls	r3, r2
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	b299      	uxth	r1, r3
 8001712:	231e      	movs	r3, #30
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	220e      	movs	r2, #14
 8001718:	18ba      	adds	r2, r7, r2
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	188a      	adds	r2, r1, r2
 800171e:	801a      	strh	r2, [r3, #0]
      break;
 8001720:	e01e      	b.n	8001760 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001722:	231e      	movs	r3, #30
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	220e      	movs	r2, #14
 8001728:	18ba      	adds	r2, r7, r2
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	801a      	strh	r2, [r3, #0]
      break;
 800172e:	e017      	b.n	8001760 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*pFont->Width);
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <BSP_EPD_DisplayStringAt+0x160>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	4353      	muls	r3, r2
 8001740:	b299      	uxth	r1, r3
 8001742:	231e      	movs	r3, #30
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	220e      	movs	r2, #14
 8001748:	18ba      	adds	r2, r7, r2
 800174a:	8812      	ldrh	r2, [r2, #0]
 800174c:	1a8a      	subs	r2, r1, r2
 800174e:	801a      	strh	r2, [r3, #0]
      break;
 8001750:	e006      	b.n	8001760 <BSP_EPD_DisplayStringAt+0xe0>
    }    
  default:
    {
      refcolumn = Xpos;
 8001752:	231e      	movs	r3, #30
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	220e      	movs	r2, #14
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	801a      	strh	r2, [r3, #0]
      break;
 800175e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Send the string character by character on EPD */
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8001760:	e01b      	b.n	800179a <BSP_EPD_DisplayStringAt+0x11a>
  {
    /* Display one character on EPD */
    BSP_EPD_DisplayChar(refcolumn, Ypos, *Text);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	230c      	movs	r3, #12
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	8819      	ldrh	r1, [r3, #0]
 800176c:	241e      	movs	r4, #30
 800176e:	193b      	adds	r3, r7, r4
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff ff54 	bl	8001620 <BSP_EPD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += pFont->Width;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <BSP_EPD_DisplayStringAt+0x160>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	8899      	ldrh	r1, [r3, #4]
 800177e:	193b      	adds	r3, r7, r4
 8001780:	193a      	adds	r2, r7, r4
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	188a      	adds	r2, r1, r2
 8001786:	801a      	strh	r2, [r3, #0]
    /* Point on the next character */
    Text++;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3301      	adds	r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
    i++;
 800178e:	211c      	movs	r1, #28
 8001790:	187b      	adds	r3, r7, r1
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	187b      	adds	r3, r7, r1
 8001796:	3201      	adds	r2, #1
 8001798:	801a      	strh	r2, [r3, #0]
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	4193      	sbcs	r3, r2
 80017a2:	b2dc      	uxtb	r4, r3
 80017a4:	f7ff feea 	bl	800157c <BSP_EPD_GetXSize>
 80017a8:	0001      	movs	r1, r0
 80017aa:	231c      	movs	r3, #28
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <BSP_EPD_DisplayStringAt+0x160>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	889b      	ldrh	r3, [r3, #4]
 80017b6:	4353      	muls	r3, r2
 80017b8:	1acb      	subs	r3, r1, r3
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	0c1a      	lsrs	r2, r3, #16
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <BSP_EPD_DisplayStringAt+0x160>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	0019      	movs	r1, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	428a      	cmp	r2, r1
 80017ca:	415b      	adcs	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4023      	ands	r3, r4
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1c5      	bne.n	8001762 <BSP_EPD_DisplayStringAt+0xe2>
  }
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b009      	add	sp, #36	; 0x24
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000594 	.word	0x20000594

080017e4 <BSP_EPD_DrawImage>:
  * @param  Ysize: Y size in the EPD
  * @param  pdata: Pointer to the Image address
  * @retval None
  */
void BSP_EPD_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	0005      	movs	r5, r0
 80017ec:	000c      	movs	r4, r1
 80017ee:	0010      	movs	r0, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	1dbb      	adds	r3, r7, #6
 80017f4:	1c2a      	adds	r2, r5, #0
 80017f6:	801a      	strh	r2, [r3, #0]
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	1c22      	adds	r2, r4, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1cbb      	adds	r3, r7, #2
 8001800:	1c02      	adds	r2, r0, #0
 8001802:	801a      	strh	r2, [r3, #0]
 8001804:	003b      	movs	r3, r7
 8001806:	1c0a      	adds	r2, r1, #0
 8001808:	801a      	strh	r2, [r3, #0]
  /* Set display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos+Ysize-1), (Ypos+(Xsize/4)-1));
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <BSP_EPD_DrawImage+0xac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689c      	ldr	r4, [r3, #8]
 8001810:	1dba      	adds	r2, r7, #6
 8001812:	003b      	movs	r3, r7
 8001814:	8812      	ldrh	r2, [r2, #0]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	18d3      	adds	r3, r2, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	b29d      	uxth	r5, r3
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	b29a      	uxth	r2, r3
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	18d3      	adds	r3, r2, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	8819      	ldrh	r1, [r3, #0]
 8001838:	1dbb      	adds	r3, r7, #6
 800183a:	8818      	ldrh	r0, [r3, #0]
 800183c:	0013      	movs	r3, r2
 800183e:	002a      	movs	r2, r5
 8001840:	47a0      	blx	r4
  
  if(epd_drv->DrawImage != NULL)
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <BSP_EPD_DrawImage+0xac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00e      	beq.n	800186a <BSP_EPD_DrawImage+0x86>
  {
    epd_drv->DrawImage(Xpos, Ypos, Xsize, Ysize, pdata);
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <BSP_EPD_DrawImage+0xac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	69dc      	ldr	r4, [r3, #28]
 8001852:	003b      	movs	r3, r7
 8001854:	881d      	ldrh	r5, [r3, #0]
 8001856:	1cbb      	adds	r3, r7, #2
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	8819      	ldrh	r1, [r3, #0]
 800185e:	1dbb      	adds	r3, r7, #6
 8001860:	8818      	ldrh	r0, [r3, #0]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	002b      	movs	r3, r5
 8001868:	47a0      	blx	r4
  }
  epd_drv->SetDisplayWindow(0, 0, BSP_EPD_GetXSize(), BSP_EPD_GetYSize());
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <BSP_EPD_DrawImage+0xac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689c      	ldr	r4, [r3, #8]
 8001870:	f7ff fe84 	bl	800157c <BSP_EPD_GetXSize>
 8001874:	0003      	movs	r3, r0
 8001876:	b29d      	uxth	r5, r3
 8001878:	f7ff fe8c 	bl	8001594 <BSP_EPD_GetYSize>
 800187c:	0003      	movs	r3, r0
 800187e:	b29b      	uxth	r3, r3
 8001880:	002a      	movs	r2, r5
 8001882:	2100      	movs	r1, #0
 8001884:	2000      	movs	r0, #0
 8001886:	47a0      	blx	r4
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	20000598 	.word	0x20000598

08001894 <BSP_EPD_RefreshDisplay>:
  * @brief  Updates the display from the data located into the RAM.
  * @param  None
  * @retval None
  */
void BSP_EPD_RefreshDisplay(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Refresh display sequence */
  epd_drv->RefreshDisplay();
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <BSP_EPD_RefreshDisplay+0x3c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4798      	blx	r3

  /* Poll on the BUSY signal and wait for the EPD to be ready */
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	005a      	lsls	r2, r3, #1
 80018a6:	23a0      	movs	r3, #160	; 0xa0
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 fd95 	bl	80023dc <HAL_GPIO_ReadPin>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d1f5      	bne.n	80018a2 <BSP_EPD_RefreshDisplay+0xe>

  /*  EPD reset pin mamagement */
  EPD_RESET_HIGH();
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <BSP_EPD_RefreshDisplay+0x40>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	2104      	movs	r1, #4
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 fdaa 	bl	8002416 <HAL_GPIO_WritePin>

  /* Add a 10 ms Delay after EPD pin Reset */
  EPD_Delay(10);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f7ff f942 	bl	8000b4c <EPD_Delay>
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000598 	.word	0x20000598
 80018d4:	50000400 	.word	0x50000400

080018d8 <DrawChar>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 17
  * @param  c: pointer to the character data
  * @retval None
  */
static void  DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	603a      	str	r2, [r7, #0]
 80018e0:	1dbb      	adds	r3, r7, #6
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	1c0a      	adds	r2, r1, #0
 80018ea:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  uint32_t data_length = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  uint16_t height = 0;
 80018f4:	210e      	movs	r1, #14
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2200      	movs	r2, #0
 80018fa:	801a      	strh	r2, [r3, #0]
  uint16_t width = 0;
 80018fc:	200c      	movs	r0, #12
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]

  width  = pFont->Width;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <DrawChar+0xb4>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	183b      	adds	r3, r7, r0
 800190a:	8892      	ldrh	r2, [r2, #4]
 800190c:	801a      	strh	r2, [r3, #0]
  height = pFont->Height;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <DrawChar+0xb4>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	187b      	adds	r3, r7, r1
 8001914:	88d2      	ldrh	r2, [r2, #6]
 8001916:	801a      	strh	r2, [r3, #0]
  
  /* Set the Character display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos + width - 1), (Ypos + height - 1));
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <DrawChar+0xb8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689c      	ldr	r4, [r3, #8]
 800191e:	1dba      	adds	r2, r7, #6
 8001920:	183b      	adds	r3, r7, r0
 8001922:	8812      	ldrh	r2, [r2, #0]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	18d3      	adds	r3, r2, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29d      	uxth	r5, r3
 800192e:	1d3a      	adds	r2, r7, #4
 8001930:	000e      	movs	r6, r1
 8001932:	187b      	adds	r3, r7, r1
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	8819      	ldrh	r1, [r3, #0]
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	8818      	ldrh	r0, [r3, #0]
 8001948:	0013      	movs	r3, r2
 800194a:	002a      	movs	r2, r5
 800194c:	47a0      	blx	r4
  
  data_length = (height * width);
 800194e:	19bb      	adds	r3, r7, r6
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	200c      	movs	r0, #12
 8001954:	183a      	adds	r2, r7, r0
 8001956:	8812      	ldrh	r2, [r2, #0]
 8001958:	4353      	muls	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
    
  for(index = 0; index < data_length; index++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00b      	b.n	800197a <DrawChar+0xa2>
  {
    epd_drv->WritePixel(c[index]);
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <DrawChar+0xb8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	188a      	adds	r2, r1, r2
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	0010      	movs	r0, r2
 8001972:	4798      	blx	r3
  for(index = 0; index < data_length; index++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3ef      	bcc.n	8001962 <DrawChar+0x8a>
  }
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b007      	add	sp, #28
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	20000594 	.word	0x20000594
 8001990:	20000598 	.word	0x20000598

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_MspInit+0x24>)
 800199a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_MspInit+0x24>)
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_MspInit+0x24>)
 80019a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_MspInit+0x24>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0549      	lsls	r1, r1, #21
 80019ae:	430a      	orrs	r2, r1
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	240c      	movs	r4, #12
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	0018      	movs	r0, r3
 80019ca:	2314      	movs	r3, #20
 80019cc:	001a      	movs	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	f002 fdb4 	bl	800453c <memset>
  if(hi2c->Instance==I2C1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_I2C_MspInit+0x80>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d129      	bne.n	8001a32 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_I2C_MspInit+0x84>)
 80019e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_I2C_MspInit+0x84>)
 80019e4:	2102      	movs	r1, #2
 80019e6:	430a      	orrs	r2, r1
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_I2C_MspInit+0x84>)
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	22c0      	movs	r2, #192	; 0xc0
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fe:	0021      	movs	r1, r4
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2212      	movs	r2, #18
 8001a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2201      	movs	r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2204      	movs	r2, #4
 8001a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_I2C_MspInit+0x88>)
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	0010      	movs	r0, r2
 8001a20:	f000 fb66 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_I2C_MspInit+0x84>)
 8001a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_I2C_MspInit+0x84>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0389      	lsls	r1, r1, #14
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b009      	add	sp, #36	; 0x24
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	50000400 	.word	0x50000400

08001a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	2414      	movs	r4, #20
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	0018      	movs	r0, r3
 8001a56:	2314      	movs	r3, #20
 8001a58:	001a      	movs	r2, r3
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f002 fd6e 	bl	800453c <memset>
  if(hspi->Instance==SPI1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <HAL_SPI_MspInit+0x124>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d14c      	bne.n	8001b04 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	0149      	lsls	r1, r1, #5
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a96:	2102      	movs	r1, #2
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	0212      	lsls	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	193a      	adds	r2, r7, r4
 8001aca:	23a0      	movs	r3, #160	; 0xa0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 fb0d 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8001ad6:	0021      	movs	r1, r4
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2228      	movs	r2, #40	; 0x28
 8001adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_SPI_MspInit+0x12c>)
 8001afa:	0019      	movs	r1, r3
 8001afc:	0010      	movs	r0, r2
 8001afe:	f000 faf7 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b02:	e02e      	b.n	8001b62 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_SPI_MspInit+0x130>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d129      	bne.n	8001b62 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	01c9      	lsls	r1, r1, #7
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001b22:	2102      	movs	r1, #2
 8001b24:	430a      	orrs	r2, r1
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_SPI_MspInit+0x128>)
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8001b34:	2114      	movs	r1, #20
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	22f0      	movs	r2, #240	; 0xf0
 8001b3a:	0212      	lsls	r2, r2, #8
 8001b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2202      	movs	r2, #2
 8001b42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_SPI_MspInit+0x12c>)
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	f000 fac7 	bl	80020f0 <HAL_GPIO_Init>
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b00b      	add	sp, #44	; 0x2c
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	40013000 	.word	0x40013000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	50000400 	.word	0x50000400
 8001b78:	40003800 	.word	0x40003800

08001b7c <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	2414      	movs	r4, #20
 8001b86:	193b      	adds	r3, r7, r4
 8001b88:	0018      	movs	r0, r3
 8001b8a:	2314      	movs	r3, #20
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f002 fcd4 	bl	800453c <memset>
  if(htsc->Instance==TSC)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a41      	ldr	r2, [pc, #260]	; (8001ca0 <HAL_TSC_MspInit+0x124>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d17c      	bne.n	8001c98 <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0249      	lsls	r1, r1, #9
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001bd8:	2102      	movs	r1, #2
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_TSC_MspInit+0x128>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2244      	movs	r2, #68	; 0x44
 8001bee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	2203      	movs	r2, #3
 8001c06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	193a      	adds	r2, r7, r4
 8001c0a:	23a0      	movs	r3, #160	; 0xa0
 8001c0c:	05db      	lsls	r3, r3, #23
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 fa6d 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2288      	movs	r2, #136	; 0x88
 8001c1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	2212      	movs	r2, #18
 8001c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	2203      	movs	r2, #3
 8001c32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	193a      	adds	r2, r7, r4
 8001c36:	23a0      	movs	r3, #160	; 0xa0
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fa57 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	193b      	adds	r3, r7, r4
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	193b      	adds	r3, r7, r4
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_TSC_MspInit+0x12c>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f000 fa42 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c6c:	0021      	movs	r1, r4
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2202      	movs	r2, #2
 8001c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2212      	movs	r2, #18
 8001c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_TSC_MspInit+0x12c>)
 8001c90:	0019      	movs	r1, r3
 8001c92:	0010      	movs	r0, r2
 8001c94:	f000 fa2c 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b00b      	add	sp, #44	; 0x2c
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	40024000 	.word	0x40024000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	50000400 	.word	0x50000400

08001cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	240c      	movs	r4, #12
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	0018      	movs	r0, r3
 8001cba:	2314      	movs	r3, #20
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f002 fc3c 	bl	800453c <memset>
  if(huart->Instance==USART1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x80>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12a      	bne.n	8001d24 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_UART_MspInit+0x84>)
 8001cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_UART_MspInit+0x84>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	01c9      	lsls	r1, r1, #7
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_UART_MspInit+0x84>)
 8001cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_UART_MspInit+0x84>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_UART_MspInit+0x84>)
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cf4:	193b      	adds	r3, r7, r4
 8001cf6:	22c0      	movs	r2, #192	; 0xc0
 8001cf8:	00d2      	lsls	r2, r2, #3
 8001cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	0021      	movs	r1, r4
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2202      	movs	r2, #2
 8001d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2204      	movs	r2, #4
 8001d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	187a      	adds	r2, r7, r1
 8001d18:	23a0      	movs	r3, #160	; 0xa0
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f9e6 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b009      	add	sp, #36	; 0x24
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_PCD_MspInit+0x28>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d106      	bne.n	8001d54 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_PCD_MspInit+0x2c>)
 8001d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_PCD_MspInit+0x2c>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0409      	lsls	r1, r1, #16
 8001d50:	430a      	orrs	r2, r1
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40005c00 	.word	0x40005c00
 8001d60:	40021000 	.word	0x40021000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f8be 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	18d3      	adds	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f002 fb90 	bl	80044e8 <__errno>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	18d2      	adds	r2, r2, r3
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b006      	add	sp, #24
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20002000 	.word	0x20002000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	2000059c 	.word	0x2000059c
 8001dfc:	200005b8 	.word	0x200005b8

08001e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e10:	f7ff fff6 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e16:	490d      	ldr	r1, [pc, #52]	; (8001e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <LoopForever+0xe>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	; (8001e58 <LoopForever+0x16>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f002 fb5b 	bl	80044f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3e:	f7fe ffd7 	bl	8000df0 <main>

08001e42 <LoopForever>:

LoopForever:
    b LoopForever
 8001e42:	e7fe      	b.n	8001e42 <LoopForever>
  ldr   r0, =_estack
 8001e44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001e50:	08006ddc 	.word	0x08006ddc
  ldr r2, =_sbss
 8001e54:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001e58:	200005b4 	.word	0x200005b4

08001e5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_COMP_IRQHandler>
	...

08001e60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x3c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Init+0x3c>)
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 f811 	bl	8001ea0 <HAL_InitTick>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e001      	b.n	8001e8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8a:	f7ff fd83 	bl	8001994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_InitTick+0x5c>)
 8001eaa:	681c      	ldr	r4, [r3, #0]
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_InitTick+0x60>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	23fa      	movs	r3, #250	; 0xfa
 8001eb4:	0098      	lsls	r0, r3, #2
 8001eb6:	f7fe f931 	bl	800011c <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	f7fe f92c 	bl	800011c <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 f905 	bl	80020d6 <HAL_SYSTICK_Config>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e00f      	b.n	8001ef4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d80b      	bhi.n	8001ef2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	2301      	movs	r3, #1
 8001ede:	425b      	negs	r3, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f8e2 	bl	80020ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_InitTick+0x64>)
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b003      	add	sp, #12
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	20000030 	.word	0x20000030
 8001f00:	20000038 	.word	0x20000038
 8001f04:	20000034 	.word	0x20000034

08001f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x1c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x20>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	18d2      	adds	r2, r2, r3
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_IncTick+0x20>)
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	20000038 	.word	0x20000038
 8001f28:	200005a0 	.word	0x200005a0

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b02      	ldr	r3, [pc, #8]	; (8001f3c <HAL_GetTick+0x10>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	200005a0 	.word	0x200005a0

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff fff0 	bl	8001f2c <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	001a      	movs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	f7ff ffe0 	bl	8001f2c <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	20000038 	.word	0x20000038

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	0002      	movs	r2, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9c:	d828      	bhi.n	8001ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	; (800205c <__NVIC_SetPriority+0xd4>)
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	33c0      	adds	r3, #192	; 0xc0
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	589b      	ldr	r3, [r3, r2]
 8001fae:	1dfa      	adds	r2, r7, #7
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	00d2      	lsls	r2, r2, #3
 8001fba:	21ff      	movs	r1, #255	; 0xff
 8001fbc:	4091      	lsls	r1, r2
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	43d2      	mvns	r2, r2
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	22ff      	movs	r2, #255	; 0xff
 8001fcc:	401a      	ands	r2, r3
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	4003      	ands	r3, r0
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fdc:	481f      	ldr	r0, [pc, #124]	; (800205c <__NVIC_SetPriority+0xd4>)
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	33c0      	adds	r3, #192	; 0xc0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fee:	e031      	b.n	8002054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <__NVIC_SetPriority+0xd8>)
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	3b08      	subs	r3, #8
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3306      	adds	r3, #6
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	18d3      	adds	r3, r2, r3
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1dfa      	adds	r2, r7, #7
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	0011      	movs	r1, r2
 8002010:	2203      	movs	r2, #3
 8002012:	400a      	ands	r2, r1
 8002014:	00d2      	lsls	r2, r2, #3
 8002016:	21ff      	movs	r1, #255	; 0xff
 8002018:	4091      	lsls	r1, r2
 800201a:	000a      	movs	r2, r1
 800201c:	43d2      	mvns	r2, r2
 800201e:	401a      	ands	r2, r3
 8002020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	019b      	lsls	r3, r3, #6
 8002026:	22ff      	movs	r2, #255	; 0xff
 8002028:	401a      	ands	r2, r3
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	0018      	movs	r0, r3
 8002030:	2303      	movs	r3, #3
 8002032:	4003      	ands	r3, r0
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <__NVIC_SetPriority+0xd8>)
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	001c      	movs	r4, r3
 8002040:	230f      	movs	r3, #15
 8002042:	4023      	ands	r3, r4
 8002044:	3b08      	subs	r3, #8
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	430a      	orrs	r2, r1
 800204a:	3306      	adds	r3, #6
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	18c3      	adds	r3, r0, r3
 8002050:	3304      	adds	r3, #4
 8002052:	601a      	str	r2, [r3, #0]
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b003      	add	sp, #12
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	045b      	lsls	r3, r3, #17
 8002074:	429a      	cmp	r2, r3
 8002076:	d301      	bcc.n	800207c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002078:	2301      	movs	r3, #1
 800207a:	e010      	b.n	800209e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <SysTick_Config+0x44>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	3a01      	subs	r2, #1
 8002082:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002084:	2301      	movs	r3, #1
 8002086:	425b      	negs	r3, r3
 8002088:	2103      	movs	r1, #3
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff ff7c 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x44>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x44>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	210f      	movs	r1, #15
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	1c02      	adds	r2, r0, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	0011      	movs	r1, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ffbf 	bl	8002064 <SysTick_Config>
 80020e6:	0003      	movs	r3, r0
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002106:	e14f      	b.n	80023a8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4091      	lsls	r1, r2
 8002112:	000a      	movs	r2, r1
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d100      	bne.n	8002120 <HAL_GPIO_Init+0x30>
 800211e:	e140      	b.n	80023a2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2203      	movs	r2, #3
 8002126:	4013      	ands	r3, r2
 8002128:	2b01      	cmp	r3, #1
 800212a:	d005      	beq.n	8002138 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002134:	2b02      	cmp	r3, #2
 8002136:	d130      	bne.n	800219a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	409a      	lsls	r2, r3
 8002146:	0013      	movs	r3, r2
 8002148:	43da      	mvns	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	409a      	lsls	r2, r3
 800215a:	0013      	movs	r3, r2
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216e:	2201      	movs	r2, #1
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	43da      	mvns	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	2201      	movs	r2, #1
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2203      	movs	r2, #3
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d017      	beq.n	80021d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	43da      	mvns	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	4013      	ands	r3, r2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d123      	bne.n	800222a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	58d3      	ldr	r3, [r2, r3]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2207      	movs	r2, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	409a      	lsls	r2, r3
 80021fc:	0013      	movs	r3, r2
 80021fe:	43da      	mvns	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2107      	movs	r1, #7
 800220e:	400b      	ands	r3, r1
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	409a      	lsls	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	6939      	ldr	r1, [r7, #16]
 8002228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	409a      	lsls	r2, r3
 8002238:	0013      	movs	r3, r2
 800223a:	43da      	mvns	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2203      	movs	r2, #3
 8002248:	401a      	ands	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	0013      	movs	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	23c0      	movs	r3, #192	; 0xc0
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d100      	bne.n	800226c <HAL_GPIO_Init+0x17c>
 800226a:	e09a      	b.n	80023a2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 800226e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_GPIO_Init+0x2d0>)
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002278:	4a52      	ldr	r2, [pc, #328]	; (80023c4 <HAL_GPIO_Init+0x2d4>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	589b      	ldr	r3, [r3, r2]
 8002284:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	409a      	lsls	r2, r3
 8002292:	0013      	movs	r3, r2
 8002294:	43da      	mvns	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	23a0      	movs	r3, #160	; 0xa0
 80022a0:	05db      	lsls	r3, r3, #23
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x1ea>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_GPIO_Init+0x2d8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x1e6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a46      	ldr	r2, [pc, #280]	; (80023cc <HAL_GPIO_Init+0x2dc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x1e2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a45      	ldr	r2, [pc, #276]	; (80023d0 <HAL_GPIO_Init+0x2e0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x1de>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a44      	ldr	r2, [pc, #272]	; (80023d4 <HAL_GPIO_Init+0x2e4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x1da>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022ca:	2306      	movs	r3, #6
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022da:	2300      	movs	r3, #0
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	2103      	movs	r1, #3
 80022e0:	400a      	ands	r2, r1
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	; (80023c4 <HAL_GPIO_Init+0x2d4>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43da      	mvns	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	035b      	lsls	r3, r3, #13
 8002312:	4013      	ands	r3, r2
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43da      	mvns	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	039b      	lsls	r3, r3, #14
 800233c:	4013      	ands	r3, r2
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	029b      	lsls	r3, r3, #10
 8002366:	4013      	ands	r3, r2
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43da      	mvns	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	025b      	lsls	r3, r3, #9
 8002390:	4013      	ands	r3, r2
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_GPIO_Init+0x2e8>)
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	40da      	lsrs	r2, r3
 80023b0:	1e13      	subs	r3, r2, #0
 80023b2:	d000      	beq.n	80023b6 <HAL_GPIO_Init+0x2c6>
 80023b4:	e6a8      	b.n	8002108 <HAL_GPIO_Init+0x18>
  }
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b006      	add	sp, #24
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000800 	.word	0x50000800
 80023d0:	50000c00 	.word	0x50000c00
 80023d4:	50001c00 	.word	0x50001c00
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	000a      	movs	r2, r1
 80023e6:	1cbb      	adds	r3, r7, #2
 80023e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	1cba      	adds	r2, r7, #2
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	4013      	ands	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023f6:	230f      	movs	r3, #15
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e003      	b.n	8002408 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002400:	230f      	movs	r3, #15
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002408:	230f      	movs	r3, #15
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	0008      	movs	r0, r1
 8002420:	0011      	movs	r1, r2
 8002422:	1cbb      	adds	r3, r7, #2
 8002424:	1c02      	adds	r2, r0, #0
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	1c7b      	adds	r3, r7, #1
 800242a:	1c0a      	adds	r2, r1, #0
 800242c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800242e:	1c7b      	adds	r3, r7, #1
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002436:	1cbb      	adds	r3, r7, #2
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800243e:	e003      	b.n	8002448 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002440:	1cbb      	adds	r3, r7, #2
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e082      	b.n	8002568 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff fa9f 	bl	80019bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2241      	movs	r2, #65	; 0x41
 8002482:	2124      	movs	r1, #36	; 0x24
 8002484:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	438a      	bics	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4934      	ldr	r1, [pc, #208]	; (8002570 <HAL_I2C_Init+0x120>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4931      	ldr	r1, [pc, #196]	; (8002574 <HAL_I2C_Init+0x124>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d108      	bne.n	80024ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0209      	lsls	r1, r1, #8
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e007      	b.n	80024de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2184      	movs	r1, #132	; 0x84
 80024d8:	0209      	lsls	r1, r1, #8
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d104      	bne.n	80024f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	491f      	ldr	r1, [pc, #124]	; (8002578 <HAL_I2C_Init+0x128>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	491a      	ldr	r1, [pc, #104]	; (8002574 <HAL_I2C_Init+0x124>)
 800250c:	400a      	ands	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	431a      	orrs	r2, r3
 800251a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69d9      	ldr	r1, [r3, #28]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2241      	movs	r2, #65	; 0x41
 8002554:	2120      	movs	r1, #32
 8002556:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2242      	movs	r2, #66	; 0x42
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	f0ffffff 	.word	0xf0ffffff
 8002574:	ffff7fff 	.word	0xffff7fff
 8002578:	02008000 	.word	0x02008000

0800257c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2241      	movs	r2, #65	; 0x41
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	d138      	bne.n	8002604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800259c:	2302      	movs	r3, #2
 800259e:	e032      	b.n	8002606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2241      	movs	r2, #65	; 0x41
 80025ac:	2124      	movs	r1, #36	; 0x24
 80025ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	438a      	bics	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4911      	ldr	r1, [pc, #68]	; (8002610 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2241      	movs	r2, #65	; 0x41
 80025f4:	2120      	movs	r1, #32
 80025f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b002      	add	sp, #8
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	ffffefff 	.word	0xffffefff

08002614 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2241      	movs	r2, #65	; 0x41
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	d139      	bne.n	800269e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002634:	2302      	movs	r3, #2
 8002636:	e033      	b.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2241      	movs	r2, #65	; 0x41
 8002644:	2124      	movs	r1, #36	; 0x24
 8002646:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2241      	movs	r2, #65	; 0x41
 800268e:	2120      	movs	r1, #32
 8002690:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b004      	add	sp, #16
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	fffff0ff 	.word	0xfffff0ff

080026ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af06      	add	r7, sp, #24
 80026b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0f0      	b.n	80028a0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a79      	ldr	r2, [pc, #484]	; (80028a8 <HAL_PCD_Init+0x1fc>)
 80026c2:	5c9b      	ldrb	r3, [r3, r2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	23aa      	movs	r3, #170	; 0xaa
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	2100      	movs	r1, #0
 80026d2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff fb2c 	bl	8001d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a72      	ldr	r2, [pc, #456]	; (80028a8 <HAL_PCD_Init+0x1fc>)
 80026e0:	2103      	movs	r1, #3
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f001 febb 	bl	8004464 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	230f      	movs	r3, #15
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e049      	b.n	800278c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f8:	200f      	movs	r0, #15
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	0013      	movs	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	189b      	adds	r3, r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	18cb      	adds	r3, r1, r3
 800270c:	3301      	adds	r3, #1
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	0013      	movs	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	189b      	adds	r3, r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	183a      	adds	r2, r7, r0
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002728:	183b      	adds	r3, r7, r0
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	0013      	movs	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	189b      	adds	r3, r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	18cb      	adds	r3, r1, r3
 800273a:	3303      	adds	r3, #3
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002740:	183b      	adds	r3, r7, r0
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	0013      	movs	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	189b      	adds	r3, r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	18cb      	adds	r3, r1, r3
 8002750:	3338      	adds	r3, #56	; 0x38
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002756:	183b      	adds	r3, r7, r0
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	0013      	movs	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	189b      	adds	r3, r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	18cb      	adds	r3, r1, r3
 8002766:	333c      	adds	r3, #60	; 0x3c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800276c:	183b      	adds	r3, r7, r0
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	0013      	movs	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	189b      	adds	r3, r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	18cb      	adds	r3, r1, r3
 800277c:	3340      	adds	r3, #64	; 0x40
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002782:	183b      	adds	r3, r7, r0
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	183b      	adds	r3, r7, r0
 8002788:	3201      	adds	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	210f      	movs	r1, #15
 800278e:	187b      	adds	r3, r7, r1
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3ae      	bcc.n	80026f8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e056      	b.n	8002850 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a2:	240f      	movs	r4, #15
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	236a      	movs	r3, #106	; 0x6a
 80027ac:	33ff      	adds	r3, #255	; 0xff
 80027ae:	0019      	movs	r1, r3
 80027b0:	0013      	movs	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	189b      	adds	r3, r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	18c3      	adds	r3, r0, r3
 80027ba:	185b      	adds	r3, r3, r1
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	23b4      	movs	r3, #180	; 0xb4
 80027c8:	0059      	lsls	r1, r3, #1
 80027ca:	0013      	movs	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	189b      	adds	r3, r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	18c3      	adds	r3, r0, r3
 80027d4:	185b      	adds	r3, r3, r1
 80027d6:	193a      	adds	r2, r7, r4
 80027d8:	7812      	ldrb	r2, [r2, #0]
 80027da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	236c      	movs	r3, #108	; 0x6c
 80027e4:	33ff      	adds	r3, #255	; 0xff
 80027e6:	0019      	movs	r1, r3
 80027e8:	0013      	movs	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	18c3      	adds	r3, r0, r3
 80027f2:	185b      	adds	r3, r3, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	23bc      	movs	r3, #188	; 0xbc
 8002800:	0059      	lsls	r1, r3, #1
 8002802:	0013      	movs	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	189b      	adds	r3, r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	18c3      	adds	r3, r0, r3
 800280c:	185b      	adds	r3, r3, r1
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002812:	193b      	adds	r3, r7, r4
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	23be      	movs	r3, #190	; 0xbe
 800281a:	0059      	lsls	r1, r3, #1
 800281c:	0013      	movs	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	189b      	adds	r3, r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	18c3      	adds	r3, r0, r3
 8002826:	185b      	adds	r3, r3, r1
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800282c:	193b      	adds	r3, r7, r4
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	0059      	lsls	r1, r3, #1
 8002836:	0013      	movs	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	189b      	adds	r3, r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	18c3      	adds	r3, r0, r3
 8002840:	185b      	adds	r3, r3, r1
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	193b      	adds	r3, r7, r4
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	193b      	adds	r3, r7, r4
 800284c:	3201      	adds	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	230f      	movs	r3, #15
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3a1      	bcc.n	80027a2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	466a      	mov	r2, sp
 8002866:	0011      	movs	r1, r2
 8002868:	001a      	movs	r2, r3
 800286a:	3210      	adds	r2, #16
 800286c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800286e:	c170      	stmia	r1!, {r4, r5, r6}
 8002870:	ca30      	ldmia	r2!, {r4, r5}
 8002872:	c130      	stmia	r1!, {r4, r5}
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f001 fe0d 	bl	8004498 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2224      	movs	r2, #36	; 0x24
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HAL_PCD_Init+0x1fc>)
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d103      	bne.n	800289e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f807 	bl	80028ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b005      	add	sp, #20
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	000002a9 	.word	0x000002a9

080028ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	23ba      	movs	r3, #186	; 0xba
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	2101      	movs	r1, #1
 80028c2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	23b8      	movs	r3, #184	; 0xb8
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	2100      	movs	r1, #0
 80028cc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2254      	movs	r2, #84	; 0x54
 80028d2:	5a9b      	ldrh	r3, [r3, r2]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2201      	movs	r2, #1
 80028d8:	4313      	orrs	r3, r2
 80028da:	b299      	uxth	r1, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2254      	movs	r2, #84	; 0x54
 80028e0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2254      	movs	r2, #84	; 0x54
 80028e6:	5a9b      	ldrh	r3, [r3, r2]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2202      	movs	r2, #2
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b299      	uxth	r1, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2254      	movs	r2, #84	; 0x54
 80028f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b004      	add	sp, #16
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f000 fbaf 	bl	8003072 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002914:	4bcf      	ldr	r3, [pc, #828]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	220c      	movs	r2, #12
 800291a:	4013      	ands	r3, r2
 800291c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291e:	4bcd      	ldr	r3, [pc, #820]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	4013      	ands	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x36>
 8002934:	e07e      	b.n	8002a34 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d007      	beq.n	800294c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d112      	bne.n	8002968 <HAL_RCC_OscConfig+0x68>
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	025b      	lsls	r3, r3, #9
 8002948:	429a      	cmp	r2, r3
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4bc1      	ldr	r3, [pc, #772]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	4013      	ands	r3, r2
 8002956:	d100      	bne.n	800295a <HAL_RCC_OscConfig+0x5a>
 8002958:	e06b      	b.n	8002a32 <HAL_RCC_OscConfig+0x132>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d167      	bne.n	8002a32 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f000 fb85 	bl	8003072 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x84>
 8002974:	4bb7      	ldr	r3, [pc, #732]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4bb6      	ldr	r3, [pc, #728]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	0249      	lsls	r1, r1, #9
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e027      	b.n	80029d4 <HAL_RCC_OscConfig+0xd4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	23a0      	movs	r3, #160	; 0xa0
 800298a:	02db      	lsls	r3, r3, #11
 800298c:	429a      	cmp	r2, r3
 800298e:	d10e      	bne.n	80029ae <HAL_RCC_OscConfig+0xae>
 8002990:	4bb0      	ldr	r3, [pc, #704]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4baf      	ldr	r3, [pc, #700]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	02c9      	lsls	r1, r1, #11
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	4bad      	ldr	r3, [pc, #692]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4bac      	ldr	r3, [pc, #688]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	0249      	lsls	r1, r1, #9
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e012      	b.n	80029d4 <HAL_RCC_OscConfig+0xd4>
 80029ae:	4ba9      	ldr	r3, [pc, #676]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4ba8      	ldr	r3, [pc, #672]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029b4:	49a8      	ldr	r1, [pc, #672]	; (8002c58 <HAL_RCC_OscConfig+0x358>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	4ba6      	ldr	r3, [pc, #664]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	025b      	lsls	r3, r3, #9
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4ba2      	ldr	r3, [pc, #648]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4ba1      	ldr	r3, [pc, #644]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029ce:	49a3      	ldr	r1, [pc, #652]	; (8002c5c <HAL_RCC_OscConfig+0x35c>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff faa6 	bl	8001f2c <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e6:	f7ff faa1 	bl	8001f2c <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d902      	bls.n	80029fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	f000 fb3c 	bl	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029fa:	4b96      	ldr	r3, [pc, #600]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	4013      	ands	r3, r2
 8002a04:	d0ef      	beq.n	80029e6 <HAL_RCC_OscConfig+0xe6>
 8002a06:	e015      	b.n	8002a34 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fa90 	bl	8001f2c <HAL_GetTick>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a12:	f7ff fa8b 	bl	8001f2c <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e326      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a24:	4b8b      	ldr	r3, [pc, #556]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	029b      	lsls	r3, r3, #10
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x112>
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d100      	bne.n	8002a40 <HAL_RCC_OscConfig+0x140>
 8002a3e:	e08b      	b.n	8002b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d13e      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1d0>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_RCC_OscConfig+0x16c>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e302      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b79      	ldr	r3, [pc, #484]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a7b      	ldr	r2, [pc, #492]	; (8002c60 <HAL_RCC_OscConfig+0x360>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	021a      	lsls	r2, r3, #8
 8002a7c:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a82:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2209      	movs	r2, #9
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	4b71      	ldr	r3, [pc, #452]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a94:	f000 fc40 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8002a98:	0001      	movs	r1, r0
 8002a9a:	4b6e      	ldr	r3, [pc, #440]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	4a6f      	ldr	r2, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x364>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	40da      	lsrs	r2, r3
 8002aac:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <HAL_RCC_OscConfig+0x368>)
 8002aae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002ab0:	4b6e      	ldr	r3, [pc, #440]	; (8002c6c <HAL_RCC_OscConfig+0x36c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2513      	movs	r5, #19
 8002ab6:	197c      	adds	r4, r7, r5
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff f9f1 	bl	8001ea0 <HAL_InitTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002ac2:	197b      	adds	r3, r7, r5
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d046      	beq.n	8002b58 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002aca:	197b      	adds	r3, r7, r5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	e2d0      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d027      	beq.n	8002b26 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2209      	movs	r2, #9
 8002adc:	4393      	bics	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fa20 	bl	8001f2c <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7ff fa1b 	bl	8001f2c <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e2b6      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0f1      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a53      	ldr	r2, [pc, #332]	; (8002c60 <HAL_RCC_OscConfig+0x360>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	e018      	b.n	8002b58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	438a      	bics	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7ff f9fb 	bl	8001f2c <HAL_GetTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f9f6 	bl	8001f2c <HAL_GetTick>
 8002b40:	0002      	movs	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e291      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4013      	ands	r3, r2
 8002b56:	d1f1      	bne.n	8002b3c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d100      	bne.n	8002b64 <HAL_RCC_OscConfig+0x264>
 8002b62:	e0a1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d140      	bne.n	8002bec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x282>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e277      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <HAL_RCC_OscConfig+0x370>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	0a19      	lsrs	r1, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	061a      	lsls	r2, r3, #24
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	0b5b      	lsrs	r3, r3, #13
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	4928      	ldr	r1, [pc, #160]	; (8002c64 <HAL_RCC_OscConfig+0x364>)
 8002bc4:	5ccb      	ldrb	r3, [r1, r3]
 8002bc6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x368>)
 8002bca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x36c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2513      	movs	r5, #19
 8002bd2:	197c      	adds	r4, r7, r5
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff f963 	bl	8001ea0 <HAL_InitTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002bde:	197b      	adds	r3, r7, r5
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d060      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002be6:	197b      	adds	r3, r7, r5
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	e242      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03f      	beq.n	8002c74 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	0049      	lsls	r1, r1, #1
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7ff f993 	bl	8001f2c <HAL_GetTick>
 8002c06:	0003      	movs	r3, r0
 8002c08:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0c:	f7ff f98e 	bl	8001f2c <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e229      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4013      	ands	r3, r2
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x370>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	0a19      	lsrs	r1, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	061a      	lsls	r2, r3, #24
 8002c4c:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <HAL_RCC_OscConfig+0x354>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	e029      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3a8>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	fffeffff 	.word	0xfffeffff
 8002c5c:	fffbffff 	.word	0xfffbffff
 8002c60:	ffffe0ff 	.word	0xffffe0ff
 8002c64:	08006d2c 	.word	0x08006d2c
 8002c68:	20000030 	.word	0x20000030
 8002c6c:	20000034 	.word	0x20000034
 8002c70:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c74:	4bbd      	ldr	r3, [pc, #756]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4bbc      	ldr	r3, [pc, #752]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002c7a:	49bd      	ldr	r1, [pc, #756]	; (8002f70 <HAL_RCC_OscConfig+0x670>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff f954 	bl	8001f2c <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c8a:	f7ff f94f 	bl	8001f2c <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1ea      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c9c:	4bb3      	ldr	r3, [pc, #716]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2208      	movs	r2, #8
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d036      	beq.n	8002d20 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d019      	beq.n	8002cee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4bac      	ldr	r3, [pc, #688]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cbe:	4bab      	ldr	r3, [pc, #684]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f931 	bl	8001f2c <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7ff f92c 	bl	8001f2c <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1c7      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ce2:	4ba2      	ldr	r3, [pc, #648]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d0f1      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x3d0>
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cee:	4b9f      	ldr	r3, [pc, #636]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf2:	4b9e      	ldr	r3, [pc, #632]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f917 	bl	8001f2c <HAL_GetTick>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d04:	f7ff f912 	bl	8001f2c <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1ad      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d16:	4b95      	ldr	r3, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d1f1      	bne.n	8002d04 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2204      	movs	r2, #4
 8002d26:	4013      	ands	r3, r2
 8002d28:	d100      	bne.n	8002d2c <HAL_RCC_OscConfig+0x42c>
 8002d2a:	e0ae      	b.n	8002e8a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2c:	2027      	movs	r0, #39	; 0x27
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d34:	4b8d      	ldr	r3, [pc, #564]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b8a      	ldr	r3, [pc, #552]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d44:	4b89      	ldr	r3, [pc, #548]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	0549      	lsls	r1, r1, #21
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_RCC_OscConfig+0x674>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d11a      	bne.n	8002d96 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d60:	4b84      	ldr	r3, [pc, #528]	; (8002f74 <HAL_RCC_OscConfig+0x674>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b83      	ldr	r3, [pc, #524]	; (8002f74 <HAL_RCC_OscConfig+0x674>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0049      	lsls	r1, r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7ff f8dd 	bl	8001f2c <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7ff f8d8 	bl	8001f2c <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e173      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <HAL_RCC_OscConfig+0x674>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
 8002da2:	4b72      	ldr	r3, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002da6:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0049      	lsls	r1, r1, #1
 8002dac:	430a      	orrs	r2, r1
 8002dae:	651a      	str	r2, [r3, #80]	; 0x50
 8002db0:	e031      	b.n	8002e16 <HAL_RCC_OscConfig+0x516>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4d4>
 8002dba:	4b6c      	ldr	r3, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dbe:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002dc0:	496b      	ldr	r1, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x670>)
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8002dc6:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dca:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002dcc:	496a      	ldr	r1, [pc, #424]	; (8002f78 <HAL_RCC_OscConfig+0x678>)
 8002dce:	400a      	ands	r2, r1
 8002dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8002dd2:	e020      	b.n	8002e16 <HAL_RCC_OscConfig+0x516>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	23a0      	movs	r3, #160	; 0xa0
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d10e      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4fe>
 8002de0:	4b62      	ldr	r3, [pc, #392]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	00c9      	lsls	r1, r1, #3
 8002dea:	430a      	orrs	r2, r1
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
 8002dee:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df2:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0049      	lsls	r1, r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8002dfc:	e00b      	b.n	8002e16 <HAL_RCC_OscConfig+0x516>
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e02:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e04:	495a      	ldr	r1, [pc, #360]	; (8002f70 <HAL_RCC_OscConfig+0x670>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	651a      	str	r2, [r3, #80]	; 0x50
 8002e0a:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e0e:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e10:	4959      	ldr	r1, [pc, #356]	; (8002f78 <HAL_RCC_OscConfig+0x678>)
 8002e12:	400a      	ands	r2, r1
 8002e14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d015      	beq.n	8002e4a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7ff f885 	bl	8001f2c <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7ff f880 	bl	8001f2c <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_RCC_OscConfig+0x67c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e11a      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCC_OscConfig+0x528>
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f86f 	bl	8001f2c <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e52:	e009      	b.n	8002e68 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7ff f86a 	bl	8001f2c <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	4a47      	ldr	r2, [pc, #284]	; (8002f7c <HAL_RCC_OscConfig+0x67c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e104      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d1ef      	bne.n	8002e54 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e74:	2327      	movs	r3, #39	; 0x27
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e84:	493e      	ldr	r1, [pc, #248]	; (8002f80 <HAL_RCC_OscConfig+0x680>)
 8002e86:	400a      	ands	r2, r1
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	4013      	ands	r3, r2
 8002e92:	d049      	beq.n	8002f28 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d026      	beq.n	8002eea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCC_OscConfig+0x684>)
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_RCC_OscConfig+0x684>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0189      	lsls	r1, r1, #6
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7ff f833 	bl	8001f2c <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ecc:	f7ff f82e 	bl	8001f2c <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0c9      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d0f1      	beq.n	8002ecc <HAL_RCC_OscConfig+0x5cc>
 8002ee8:	e01e      	b.n	8002f28 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_RCC_OscConfig+0x684>)
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_OscConfig+0x684>)
 8002efc:	4922      	ldr	r1, [pc, #136]	; (8002f88 <HAL_RCC_OscConfig+0x688>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7ff f813 	bl	8001f2c <HAL_GetTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f0c:	f7ff f80e 	bl	8001f2c <HAL_GetTick>
 8002f10:	0002      	movs	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0a9      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2202      	movs	r2, #2
 8002f24:	4013      	ands	r3, r2
 8002f26:	d1f1      	bne.n	8002f0c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d100      	bne.n	8002f32 <HAL_RCC_OscConfig+0x632>
 8002f30:	e09e      	b.n	8003070 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x63a>
 8002f38:	e077      	b.n	800302a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d158      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x66c>)
 8002f48:	4910      	ldr	r1, [pc, #64]	; (8002f8c <HAL_RCC_OscConfig+0x68c>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe ffed 	bl	8001f2c <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f56:	e01b      	b.n	8002f90 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe ffe8 	bl	8001f2c <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d914      	bls.n	8002f90 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e083      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	fffffeff 	.word	0xfffffeff
 8002f74:	40007000 	.word	0x40007000
 8002f78:	fffffbff 	.word	0xfffffbff
 8002f7c:	00001388 	.word	0x00001388
 8002f80:	efffffff 	.word	0xefffffff
 8002f84:	40010000 	.word	0x40010000
 8002f88:	ffffdfff 	.word	0xffffdfff
 8002f8c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	049b      	lsls	r3, r3, #18
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d1dd      	bne.n	8002f58 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a37      	ldr	r2, [pc, #220]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	0449      	lsls	r1, r1, #17
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe ffaf 	bl	8001f2c <HAL_GetTick>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe ffaa 	bl	8001f2c <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e045      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fe6:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	049b      	lsls	r3, r3, #18
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x6d4>
 8002ff2:	e03d      	b.n	8003070 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8002ffa:	4922      	ldr	r1, [pc, #136]	; (8003084 <HAL_RCC_OscConfig+0x784>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe ff94 	bl	8001f2c <HAL_GetTick>
 8003004:	0003      	movs	r3, r0
 8003006:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe ff8f 	bl	8001f2c <HAL_GetTick>
 800300e:	0002      	movs	r2, r0
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e02a      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	049b      	lsls	r3, r3, #18
 8003024:	4013      	ands	r3, r2
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x70a>
 8003028:	e022      	b.n	8003070 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e01d      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCC_OscConfig+0x77c>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	401a      	ands	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	429a      	cmp	r2, r3
 800304a:	d10f      	bne.n	800306c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	23f0      	movs	r3, #240	; 0xf0
 8003050:	039b      	lsls	r3, r3, #14
 8003052:	401a      	ands	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	401a      	ands	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b00a      	add	sp, #40	; 0x28
 8003078:	bdb0      	pop	{r4, r5, r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40021000 	.word	0x40021000
 8003080:	ff02ffff 	.word	0xff02ffff
 8003084:	feffffff 	.word	0xfeffffff

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e128      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b96      	ldr	r3, [pc, #600]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2201      	movs	r2, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d91e      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b93      	ldr	r3, [pc, #588]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	4393      	bics	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	4b90      	ldr	r3, [pc, #576]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030bc:	f7fe ff36 	bl	8001f2c <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c4:	e009      	b.n	80030da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c6:	f7fe ff31 	bl	8001f2c <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	4a8a      	ldr	r2, [pc, #552]	; (80032fc <HAL_RCC_ClockConfig+0x274>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e109      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b87      	ldr	r3, [pc, #540]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2201      	movs	r2, #1
 80030e0:	4013      	ands	r3, r2
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1ee      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f2:	4b83      	ldr	r3, [pc, #524]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	22f0      	movs	r2, #240	; 0xf0
 80030f8:	4393      	bics	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 8003102:	430a      	orrs	r2, r1
 8003104:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4013      	ands	r3, r2
 800310e:	d100      	bne.n	8003112 <HAL_RCC_ClockConfig+0x8a>
 8003110:	e089      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800311a:	4b79      	ldr	r3, [pc, #484]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	029b      	lsls	r3, r3, #10
 8003122:	4013      	ands	r3, r2
 8003124:	d120      	bne.n	8003168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0e1      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003132:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	049b      	lsls	r3, r3, #18
 800313a:	4013      	ands	r3, r2
 800313c:	d114      	bne.n	8003168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0d5      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d106      	bne.n	8003158 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800314a:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2204      	movs	r2, #4
 8003150:	4013      	ands	r3, r2
 8003152:	d109      	bne.n	8003168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0ca      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003158:	4b69      	ldr	r3, [pc, #420]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0c2      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003168:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2203      	movs	r2, #3
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 8003178:	430a      	orrs	r2, r1
 800317a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe fed6 	bl	8001f2c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d111      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800318c:	e009      	b.n	80031a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318e:	f7fe fecd 	bl	8001f2c <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0a5      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	220c      	movs	r2, #12
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_ClockConfig+0x106>
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d111      	bne.n	80031dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	e009      	b.n	80031ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ba:	f7fe feb7 	bl	8001f2c <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	4a4d      	ldr	r2, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e08f      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ce:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	220c      	movs	r2, #12
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d1ef      	bne.n	80031ba <HAL_RCC_ClockConfig+0x132>
 80031da:	e024      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d11b      	bne.n	800321c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e4:	e009      	b.n	80031fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7fe fea1 	bl	8001f2c <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_RCC_ClockConfig+0x274>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e079      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	220c      	movs	r2, #12
 8003200:	4013      	ands	r3, r2
 8003202:	2b04      	cmp	r3, #4
 8003204:	d1ef      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x15e>
 8003206:	e00e      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fe fe90 	bl	8001f2c <HAL_GetTick>
 800320c:	0002      	movs	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <HAL_RCC_ClockConfig+0x274>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e068      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800321c:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	220c      	movs	r2, #12
 8003222:	4013      	ands	r3, r2
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	4013      	ands	r3, r2
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d21e      	bcs.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	4393      	bics	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003246:	f7fe fe71 	bl	8001f2c <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	e009      	b.n	8003264 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe fe6c 	bl	8001f2c <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_RCC_ClockConfig+0x274>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e044      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_ClockConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d1ee      	bne.n	8003250 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2204      	movs	r2, #4
 8003278:	4013      	ands	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a20      	ldr	r2, [pc, #128]	; (8003304 <HAL_RCC_ClockConfig+0x27c>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800328c:	430a      	orrs	r2, r1
 800328e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2208      	movs	r2, #8
 8003296:	4013      	ands	r3, r2
 8003298:	d00a      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <HAL_RCC_ClockConfig+0x280>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	00da      	lsls	r2, r3, #3
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b0:	f000 f832 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032b4:	0001      	movs	r1, r0
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	220f      	movs	r2, #15
 80032be:	4013      	ands	r3, r2
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x284>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	000a      	movs	r2, r1
 80032c6:	40da      	lsrs	r2, r3
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_ClockConfig+0x288>)
 80032ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_RCC_ClockConfig+0x28c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	250b      	movs	r5, #11
 80032d2:	197c      	adds	r4, r7, r5
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7fe fde3 	bl	8001ea0 <HAL_InitTick>
 80032da:	0003      	movs	r3, r0
 80032dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032de:	197b      	adds	r3, r7, r5
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032e6:	197b      	adds	r3, r7, r5
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	e000      	b.n	80032ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b004      	add	sp, #16
 80032f4:	bdb0      	pop	{r4, r5, r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	40022000 	.word	0x40022000
 80032fc:	00001388 	.word	0x00001388
 8003300:	40021000 	.word	0x40021000
 8003304:	fffff8ff 	.word	0xfffff8ff
 8003308:	ffffc7ff 	.word	0xffffc7ff
 800330c:	08006d2c 	.word	0x08006d2c
 8003310:	20000030 	.word	0x20000030
 8003314:	20000034 	.word	0x20000034

08003318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b5b0      	push	{r4, r5, r7, lr}
 800331a:	b08e      	sub	sp, #56	; 0x38
 800331c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800331e:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_GetSysClockFreq+0x138>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003326:	230c      	movs	r3, #12
 8003328:	4013      	ands	r3, r2
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d014      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x40>
 800332e:	d900      	bls.n	8003332 <HAL_RCC_GetSysClockFreq+0x1a>
 8003330:	e07b      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x112>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d002      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x24>
 8003336:	2b08      	cmp	r3, #8
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x3a>
 800333a:	e076      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800333c:	4b44      	ldr	r3, [pc, #272]	; (8003450 <HAL_RCC_GetSysClockFreq+0x138>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2210      	movs	r2, #16
 8003342:	4013      	ands	r3, r2
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800334a:	e07c      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_RCC_GetSysClockFreq+0x140>)
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003350:	e079      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b42      	ldr	r3, [pc, #264]	; (800345c <HAL_RCC_GetSysClockFreq+0x144>)
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003356:	e076      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	0c9a      	lsrs	r2, r3, #18
 800335c:	230f      	movs	r3, #15
 800335e:	401a      	ands	r2, r3
 8003360:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_RCC_GetSysClockFreq+0x148>)
 8003362:	5c9b      	ldrb	r3, [r3, r2]
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	0d9a      	lsrs	r2, r3, #22
 800336a:	2303      	movs	r3, #3
 800336c:	4013      	ands	r3, r2
 800336e:	3301      	adds	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b37      	ldr	r3, [pc, #220]	; (8003450 <HAL_RCC_GetSysClockFreq+0x138>)
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	025b      	lsls	r3, r3, #9
 800337a:	4013      	ands	r3, r2
 800337c:	d01a      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	4a35      	ldr	r2, [pc, #212]	; (800345c <HAL_RCC_GetSysClockFreq+0x144>)
 8003388:	2300      	movs	r3, #0
 800338a:	69b8      	ldr	r0, [r7, #24]
 800338c:	69f9      	ldr	r1, [r7, #28]
 800338e:	f7fc ff71 	bl	8000274 <__aeabi_lmul>
 8003392:	0002      	movs	r2, r0
 8003394:	000b      	movs	r3, r1
 8003396:	0010      	movs	r0, r2
 8003398:	0019      	movs	r1, r3
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f7fc ff45 	bl	8000234 <__aeabi_uldivmod>
 80033aa:	0002      	movs	r2, r0
 80033ac:	000b      	movs	r3, r1
 80033ae:	0013      	movs	r3, r2
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
 80033b2:	e037      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033b4:	4b26      	ldr	r3, [pc, #152]	; (8003450 <HAL_RCC_GetSysClockFreq+0x138>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2210      	movs	r2, #16
 80033ba:	4013      	ands	r3, r2
 80033bc:	d01a      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4a23      	ldr	r2, [pc, #140]	; (8003454 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033c8:	2300      	movs	r3, #0
 80033ca:	68b8      	ldr	r0, [r7, #8]
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	f7fc ff51 	bl	8000274 <__aeabi_lmul>
 80033d2:	0002      	movs	r2, r0
 80033d4:	000b      	movs	r3, r1
 80033d6:	0010      	movs	r0, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f7fc ff25 	bl	8000234 <__aeabi_uldivmod>
 80033ea:	0002      	movs	r2, r0
 80033ec:	000b      	movs	r3, r1
 80033ee:	0013      	movs	r3, r2
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
 80033f2:	e017      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	0018      	movs	r0, r3
 80033f8:	2300      	movs	r3, #0
 80033fa:	0019      	movs	r1, r3
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_RCC_GetSysClockFreq+0x140>)
 80033fe:	2300      	movs	r3, #0
 8003400:	f7fc ff38 	bl	8000274 <__aeabi_lmul>
 8003404:	0002      	movs	r2, r0
 8003406:	000b      	movs	r3, r1
 8003408:	0010      	movs	r0, r2
 800340a:	0019      	movs	r1, r3
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	001c      	movs	r4, r3
 8003410:	2300      	movs	r3, #0
 8003412:	001d      	movs	r5, r3
 8003414:	0022      	movs	r2, r4
 8003416:	002b      	movs	r3, r5
 8003418:	f7fc ff0c 	bl	8000234 <__aeabi_uldivmod>
 800341c:	0002      	movs	r2, r0
 800341e:	000b      	movs	r3, r1
 8003420:	0013      	movs	r3, r2
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003428:	e00d      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_GetSysClockFreq+0x138>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0b5b      	lsrs	r3, r3, #13
 8003430:	2207      	movs	r2, #7
 8003432:	4013      	ands	r3, r2
 8003434:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	3301      	adds	r3, #1
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	409a      	lsls	r2, r3
 8003440:	0013      	movs	r3, r2
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003444:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b00e      	add	sp, #56	; 0x38
 800344e:	bdb0      	pop	{r4, r5, r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	003d0900 	.word	0x003d0900
 8003458:	00f42400 	.word	0x00f42400
 800345c:	007a1200 	.word	0x007a1200
 8003460:	08006d44 	.word	0x08006d44

08003464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b02      	ldr	r3, [pc, #8]	; (8003474 <HAL_RCC_GetHCLKFreq+0x10>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	20000030 	.word	0x20000030

08003478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800347c:	f7ff fff2 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003480:	0001      	movs	r1, r0
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	2207      	movs	r2, #7
 800348a:	4013      	ands	r3, r2
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	40d9      	lsrs	r1, r3
 8003492:	000b      	movs	r3, r1
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	40021000 	.word	0x40021000
 80034a0:	08006d3c 	.word	0x08006d3c

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a8:	f7ff ffdc 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 80034ac:	0001      	movs	r1, r0
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0adb      	lsrs	r3, r3, #11
 80034b4:	2207      	movs	r2, #7
 80034b6:	4013      	ands	r3, r2
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	40d9      	lsrs	r1, r3
 80034be:	000b      	movs	r3, r1
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08006d3c 	.word	0x08006d3c

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80034d8:	2317      	movs	r3, #23
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2220      	movs	r2, #32
 80034e6:	4013      	ands	r3, r2
 80034e8:	d106      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	d100      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80034f6:	e104      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f8:	4bb1      	ldr	r3, [pc, #708]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	055b      	lsls	r3, r3, #21
 8003500:	4013      	ands	r3, r2
 8003502:	d10a      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4bae      	ldr	r3, [pc, #696]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003508:	4bad      	ldr	r3, [pc, #692]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	0549      	lsls	r1, r1, #21
 800350e:	430a      	orrs	r2, r1
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003512:	2317      	movs	r3, #23
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4baa      	ldr	r3, [pc, #680]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d11a      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4ba7      	ldr	r3, [pc, #668]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4ba6      	ldr	r3, [pc, #664]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0049      	lsls	r1, r1, #1
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003534:	f7fe fcfa 	bl	8001f2c <HAL_GetTick>
 8003538:	0003      	movs	r3, r0
 800353a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7fe fcf5 	bl	8001f2c <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	; 0x64
 800354a:	d901      	bls.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e133      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	4b9c      	ldr	r3, [pc, #624]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4013      	ands	r3, r2
 800355a:	d0f0      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800355c:	4b98      	ldr	r3, [pc, #608]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	23c0      	movs	r3, #192	; 0xc0
 8003562:	039b      	lsls	r3, r3, #14
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	23c0      	movs	r3, #192	; 0xc0
 800356e:	039b      	lsls	r3, r3, #14
 8003570:	4013      	ands	r3, r2
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	23c0      	movs	r3, #192	; 0xc0
 800357e:	039b      	lsls	r3, r3, #14
 8003580:	4013      	ands	r3, r2
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d013      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	23c0      	movs	r3, #192	; 0xc0
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	401a      	ands	r2, r3
 8003592:	23c0      	movs	r3, #192	; 0xc0
 8003594:	029b      	lsls	r3, r3, #10
 8003596:	429a      	cmp	r2, r3
 8003598:	d10a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	401a      	ands	r2, r3
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d101      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e103      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035b0:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b4:	23c0      	movs	r3, #192	; 0xc0
 80035b6:	029b      	lsls	r3, r3, #10
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d049      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	23c0      	movs	r3, #192	; 0xc0
 80035c8:	029b      	lsls	r3, r3, #10
 80035ca:	4013      	ands	r3, r2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d004      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2220      	movs	r2, #32
 80035d8:	4013      	ands	r3, r2
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	23c0      	movs	r3, #192	; 0xc0
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	4013      	ands	r3, r2
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d034      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	4013      	ands	r3, r2
 80035f6:	d02e      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035f8:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	4a72      	ldr	r2, [pc, #456]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80035fe:	4013      	ands	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003602:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0309      	lsls	r1, r1, #12
 800360c:	430a      	orrs	r2, r1
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003610:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003614:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003616:	496d      	ldr	r1, [pc, #436]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003618:	400a      	ands	r2, r1
 800361a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4013      	ands	r3, r2
 800362a:	d014      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fc7e 	bl	8001f2c <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003634:	e009      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fc79 	bl	8001f2c <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	4a63      	ldr	r2, [pc, #396]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0b6      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800364a:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800364c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4013      	ands	r3, r2
 8003654:	d0ef      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4013      	ands	r3, r2
 8003660:	d01f      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	23c0      	movs	r3, #192	; 0xc0
 8003668:	029b      	lsls	r3, r3, #10
 800366a:	401a      	ands	r2, r3
 800366c:	23c0      	movs	r3, #192	; 0xc0
 800366e:	029b      	lsls	r3, r3, #10
 8003670:	429a      	cmp	r2, r3
 8003672:	d10c      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003674:	4b52      	ldr	r3, [pc, #328]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800367a:	4013      	ands	r3, r2
 800367c:	0019      	movs	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	23c0      	movs	r3, #192	; 0xc0
 8003684:	039b      	lsls	r3, r3, #14
 8003686:	401a      	ands	r2, r3
 8003688:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003690:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	029b      	lsls	r3, r3, #10
 800369a:	401a      	ands	r2, r3
 800369c:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800369e:	430a      	orrs	r2, r1
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2220      	movs	r2, #32
 80036a8:	4013      	ands	r3, r2
 80036aa:	d01f      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	23c0      	movs	r3, #192	; 0xc0
 80036b2:	029b      	lsls	r3, r3, #10
 80036b4:	401a      	ands	r2, r3
 80036b6:	23c0      	movs	r3, #192	; 0xc0
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80036be:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a44      	ldr	r2, [pc, #272]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	23c0      	movs	r3, #192	; 0xc0
 80036ce:	039b      	lsls	r3, r3, #14
 80036d0:	401a      	ands	r2, r3
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	23c0      	movs	r3, #192	; 0xc0
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	401a      	ands	r2, r3
 80036e6:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ec:	2317      	movs	r3, #23
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f6:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036fc:	4936      	ldr	r1, [pc, #216]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fe:	400a      	ands	r2, r1
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	4013      	ands	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003710:	2203      	movs	r2, #3
 8003712:	4393      	bics	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800371c:	430a      	orrs	r2, r1
 800371e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2202      	movs	r2, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800372a:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	220c      	movs	r2, #12
 8003730:	4393      	bics	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800373a:	430a      	orrs	r2, r1
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2204      	movs	r2, #4
 8003744:	4013      	ands	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003758:	430a      	orrs	r2, r1
 800375a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2208      	movs	r2, #8
 8003762:	4013      	ands	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800376c:	4013      	ands	r3, r2
 800376e:	0019      	movs	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003776:	430a      	orrs	r2, r1
 8003778:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2240      	movs	r2, #64	; 0x40
 8003780:	4013      	ands	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003788:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003794:	430a      	orrs	r2, r1
 8003796:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	4013      	ands	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b2:	430a      	orrs	r2, r1
 80037b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b006      	add	sp, #24
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
 80037c8:	fffcffff 	.word	0xfffcffff
 80037cc:	fff7ffff 	.word	0xfff7ffff
 80037d0:	00001388 	.word	0x00001388
 80037d4:	ffcfffff 	.word	0xffcfffff
 80037d8:	efffffff 	.word	0xefffffff
 80037dc:	fffff3ff 	.word	0xfffff3ff
 80037e0:	ffffcfff 	.word	0xffffcfff
 80037e4:	fbffffff 	.word	0xfbffffff
 80037e8:	fff3ffff 	.word	0xfff3ffff

080037ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e083      	b.n	8003906 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	2382      	movs	r3, #130	; 0x82
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	429a      	cmp	r2, r3
 8003810:	d009      	beq.n	8003826 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
 8003818:	e005      	b.n	8003826 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2251      	movs	r2, #81	; 0x51
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2250      	movs	r2, #80	; 0x50
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f7fe f900 	bl	8001a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2251      	movs	r2, #81	; 0x51
 800384c:	2102      	movs	r1, #2
 800384e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	2382      	movs	r3, #130	; 0x82
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	401a      	ands	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6899      	ldr	r1, [r3, #8]
 800386e:	2384      	movs	r3, #132	; 0x84
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	400b      	ands	r3, r1
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	400b      	ands	r3, r1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2102      	movs	r1, #2
 8003888:	400b      	ands	r3, r1
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	2101      	movs	r1, #1
 8003892:	400b      	ands	r3, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	400b      	ands	r3, r1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2138      	movs	r1, #56	; 0x38
 80038a8:	400b      	ands	r3, r1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	400b      	ands	r3, r1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	0011      	movs	r1, r2
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	019b      	lsls	r3, r3, #6
 80038c0:	401a      	ands	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2210      	movs	r2, #16
 80038dc:	401a      	ands	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4907      	ldr	r1, [pc, #28]	; (8003910 <HAL_SPI_Init+0x124>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2251      	movs	r2, #81	; 0x51
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	fffff7ff 	.word	0xfffff7ff

08003914 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e074      	b.n	8003a10 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	223c      	movs	r2, #60	; 0x3c
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	223d      	movs	r2, #61	; 0x3d
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f7fe f91d 	bl	8001b7c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	223c      	movs	r2, #60	; 0x3c
 8003946:	2102      	movs	r1, #2
 8003948:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003960:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003968:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800396e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003974:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800397a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003980:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8003986:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7b1b      	ldrb	r3, [r3, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	0249      	lsls	r1, r1, #9
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	43d2      	mvns	r2, r2
 80039c0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039da:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681c      	ldr	r4, [r3, #0]
 80039e4:	0010      	movs	r0, r2
 80039e6:	f000 f817 	bl	8003a18 <TSC_extract_groups>
 80039ea:	0003      	movs	r3, r0
 80039ec:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2103      	movs	r1, #3
 80039fa:	438a      	bics	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2203      	movs	r2, #3
 8003a04:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	223c      	movs	r2, #60	; 0x3c
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b003      	add	sp, #12
 8003a16:	bd90      	pop	{r4, r7, pc}

08003a18 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e011      	b.n	8003a4e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	220f      	movs	r2, #15
 8003a30:	409a      	lsls	r2, r3
 8003a32:	0013      	movs	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4013      	ands	r3, r2
 8003a38:	d006      	beq.n	8003a48 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	0013      	movs	r3, r2
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b07      	cmp	r3, #7
 8003a52:	d9ea      	bls.n	8003a2a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8003a54:	68fb      	ldr	r3, [r7, #12]
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e044      	b.n	8003afc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d107      	bne.n	8003a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2278      	movs	r2, #120	; 0x78
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7fe f911 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2224      	movs	r2, #36	; 0x24
 8003a8e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 f830 	bl	8003b08 <UART_SetConfig>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e024      	b.n	8003afc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 faa7 	bl	8004010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	490d      	ldr	r1, [pc, #52]	; (8003b04 <HAL_UART_Init+0xa4>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	212a      	movs	r1, #42	; 0x2a
 8003ade:	438a      	bics	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fb3f 	bl	8004178 <UART_CheckIdleState>
 8003afa:	0003      	movs	r3, r0
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	ffffb7ff 	.word	0xffffb7ff

08003b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b08e      	sub	sp, #56	; 0x38
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b10:	231a      	movs	r3, #26
 8003b12:	2218      	movs	r2, #24
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4ac6      	ldr	r2, [pc, #792]	; (8003e54 <UART_SetConfig+0x34c>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4ac1      	ldr	r2, [pc, #772]	; (8003e58 <UART_SetConfig+0x350>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4abb      	ldr	r2, [pc, #748]	; (8003e5c <UART_SetConfig+0x354>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4ab7      	ldr	r2, [pc, #732]	; (8003e60 <UART_SetConfig+0x358>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4ab3      	ldr	r2, [pc, #716]	; (8003e64 <UART_SetConfig+0x35c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d131      	bne.n	8003c00 <UART_SetConfig+0xf8>
 8003b9c:	4bb2      	ldr	r3, [pc, #712]	; (8003e68 <UART_SetConfig+0x360>)
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d01d      	beq.n	8003be4 <UART_SetConfig+0xdc>
 8003ba8:	d823      	bhi.n	8003bf2 <UART_SetConfig+0xea>
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d00c      	beq.n	8003bc8 <UART_SetConfig+0xc0>
 8003bae:	d820      	bhi.n	8003bf2 <UART_SetConfig+0xea>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <UART_SetConfig+0xb2>
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d00e      	beq.n	8003bd6 <UART_SetConfig+0xce>
 8003bb8:	e01b      	b.n	8003bf2 <UART_SetConfig+0xea>
 8003bba:	231b      	movs	r3, #27
 8003bbc:	2218      	movs	r2, #24
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e09c      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003bc8:	231b      	movs	r3, #27
 8003bca:	2218      	movs	r2, #24
 8003bcc:	189b      	adds	r3, r3, r2
 8003bce:	19db      	adds	r3, r3, r7
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e095      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003bd6:	231b      	movs	r3, #27
 8003bd8:	2218      	movs	r2, #24
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	19db      	adds	r3, r3, r7
 8003bde:	2204      	movs	r2, #4
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e08e      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003be4:	231b      	movs	r3, #27
 8003be6:	2218      	movs	r2, #24
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	2208      	movs	r2, #8
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e087      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003bf2:	231b      	movs	r3, #27
 8003bf4:	2218      	movs	r2, #24
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e080      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a99      	ldr	r2, [pc, #612]	; (8003e6c <UART_SetConfig+0x364>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d131      	bne.n	8003c6e <UART_SetConfig+0x166>
 8003c0a:	4b97      	ldr	r3, [pc, #604]	; (8003e68 <UART_SetConfig+0x360>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	220c      	movs	r2, #12
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d01d      	beq.n	8003c52 <UART_SetConfig+0x14a>
 8003c16:	d823      	bhi.n	8003c60 <UART_SetConfig+0x158>
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d00c      	beq.n	8003c36 <UART_SetConfig+0x12e>
 8003c1c:	d820      	bhi.n	8003c60 <UART_SetConfig+0x158>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x120>
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d00e      	beq.n	8003c44 <UART_SetConfig+0x13c>
 8003c26:	e01b      	b.n	8003c60 <UART_SetConfig+0x158>
 8003c28:	231b      	movs	r3, #27
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e065      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003c36:	231b      	movs	r3, #27
 8003c38:	2218      	movs	r2, #24
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	2202      	movs	r2, #2
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e05e      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003c44:	231b      	movs	r3, #27
 8003c46:	2218      	movs	r2, #24
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e057      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003c52:	231b      	movs	r3, #27
 8003c54:	2218      	movs	r2, #24
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e050      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003c60:	231b      	movs	r3, #27
 8003c62:	2218      	movs	r2, #24
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	2210      	movs	r2, #16
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e049      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7a      	ldr	r2, [pc, #488]	; (8003e5c <UART_SetConfig+0x354>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d13e      	bne.n	8003cf6 <UART_SetConfig+0x1ee>
 8003c78:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <UART_SetConfig+0x360>)
 8003c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c7c:	23c0      	movs	r3, #192	; 0xc0
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4013      	ands	r3, r2
 8003c82:	22c0      	movs	r2, #192	; 0xc0
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <UART_SetConfig+0x1d2>
 8003c8a:	22c0      	movs	r2, #192	; 0xc0
 8003c8c:	0112      	lsls	r2, r2, #4
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d82a      	bhi.n	8003ce8 <UART_SetConfig+0x1e0>
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d011      	beq.n	8003cbe <UART_SetConfig+0x1b6>
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d822      	bhi.n	8003ce8 <UART_SetConfig+0x1e0>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <UART_SetConfig+0x1a8>
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	00d2      	lsls	r2, r2, #3
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <UART_SetConfig+0x1c4>
 8003cae:	e01b      	b.n	8003ce8 <UART_SetConfig+0x1e0>
 8003cb0:	231b      	movs	r3, #27
 8003cb2:	2218      	movs	r2, #24
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	19db      	adds	r3, r3, r7
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e021      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003cbe:	231b      	movs	r3, #27
 8003cc0:	2218      	movs	r2, #24
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	19db      	adds	r3, r3, r7
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e01a      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003ccc:	231b      	movs	r3, #27
 8003cce:	2218      	movs	r2, #24
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e013      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003cda:	231b      	movs	r3, #27
 8003cdc:	2218      	movs	r2, #24
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	19db      	adds	r3, r3, r7
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e00c      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003ce8:	231b      	movs	r3, #27
 8003cea:	2218      	movs	r2, #24
 8003cec:	189b      	adds	r3, r3, r2
 8003cee:	19db      	adds	r3, r3, r7
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e005      	b.n	8003d02 <UART_SetConfig+0x1fa>
 8003cf6:	231b      	movs	r3, #27
 8003cf8:	2218      	movs	r2, #24
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	2210      	movs	r2, #16
 8003d00:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a55      	ldr	r2, [pc, #340]	; (8003e5c <UART_SetConfig+0x354>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d000      	beq.n	8003d0e <UART_SetConfig+0x206>
 8003d0c:	e084      	b.n	8003e18 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d0e:	231b      	movs	r3, #27
 8003d10:	2218      	movs	r2, #24
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	19db      	adds	r3, r3, r7
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d01d      	beq.n	8003d58 <UART_SetConfig+0x250>
 8003d1c:	dc20      	bgt.n	8003d60 <UART_SetConfig+0x258>
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d015      	beq.n	8003d4e <UART_SetConfig+0x246>
 8003d22:	dc1d      	bgt.n	8003d60 <UART_SetConfig+0x258>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <UART_SetConfig+0x226>
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d005      	beq.n	8003d38 <UART_SetConfig+0x230>
 8003d2c:	e018      	b.n	8003d60 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2e:	f7ff fba3 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8003d32:	0003      	movs	r3, r0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d36:	e01c      	b.n	8003d72 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d38:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <UART_SetConfig+0x360>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d002      	beq.n	8003d48 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d42:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <UART_SetConfig+0x368>)
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d46:	e014      	b.n	8003d72 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <UART_SetConfig+0x36c>)
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d4c:	e011      	b.n	8003d72 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7ff fae3 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8003d52:	0003      	movs	r3, r0
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d56:	e00c      	b.n	8003d72 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d5e:	e008      	b.n	8003d72 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d64:	231a      	movs	r3, #26
 8003d66:	2218      	movs	r2, #24
 8003d68:	189b      	adds	r3, r3, r2
 8003d6a:	19db      	adds	r3, r3, r7
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
        break;
 8003d70:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d100      	bne.n	8003d7a <UART_SetConfig+0x272>
 8003d78:	e132      	b.n	8003fe0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	0013      	movs	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d305      	bcc.n	8003d96 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d906      	bls.n	8003da4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003d96:	231a      	movs	r3, #26
 8003d98:	2218      	movs	r2, #24
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	19db      	adds	r3, r3, r7
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e11d      	b.n	8003fe0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	6939      	ldr	r1, [r7, #16]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	000b      	movs	r3, r1
 8003db2:	0e1b      	lsrs	r3, r3, #24
 8003db4:	0010      	movs	r0, r2
 8003db6:	0205      	lsls	r5, r0, #8
 8003db8:	431d      	orrs	r5, r3
 8003dba:	000b      	movs	r3, r1
 8003dbc:	021c      	lsls	r4, r3, #8
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	1900      	adds	r0, r0, r4
 8003dd0:	4169      	adcs	r1, r5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f7fc fa28 	bl	8000234 <__aeabi_uldivmod>
 8003de4:	0002      	movs	r2, r0
 8003de6:	000b      	movs	r3, r1
 8003de8:	0013      	movs	r3, r2
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dee:	23c0      	movs	r3, #192	; 0xc0
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d309      	bcc.n	8003e0a <UART_SetConfig+0x302>
 8003df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	035b      	lsls	r3, r3, #13
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d204      	bcs.n	8003e0a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e0ea      	b.n	8003fe0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e0a:	231a      	movs	r3, #26
 8003e0c:	2218      	movs	r2, #24
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	19db      	adds	r3, r3, r7
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e0e3      	b.n	8003fe0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d000      	beq.n	8003e26 <UART_SetConfig+0x31e>
 8003e24:	e085      	b.n	8003f32 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003e26:	231b      	movs	r3, #27
 8003e28:	2218      	movs	r2, #24
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d837      	bhi.n	8003ea4 <UART_SetConfig+0x39c>
 8003e34:	009a      	lsls	r2, r3, #2
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <UART_SetConfig+0x370>)
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3e:	f7ff fb1b 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8003e42:	0003      	movs	r3, r0
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e46:	e036      	b.n	8003eb6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7ff fb2c 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e50:	e031      	b.n	8003eb6 <UART_SetConfig+0x3ae>
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	efff69f3 	.word	0xefff69f3
 8003e58:	ffffcfff 	.word	0xffffcfff
 8003e5c:	40004800 	.word	0x40004800
 8003e60:	fffff4ff 	.word	0xfffff4ff
 8003e64:	40013800 	.word	0x40013800
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40004400 	.word	0x40004400
 8003e70:	003d0900 	.word	0x003d0900
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	08006d50 	.word	0x08006d50
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e7c:	4b60      	ldr	r3, [pc, #384]	; (8004000 <UART_SetConfig+0x4f8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2210      	movs	r2, #16
 8003e82:	4013      	ands	r3, r2
 8003e84:	d002      	beq.n	8003e8c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <UART_SetConfig+0x4fc>)
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e8a:	e014      	b.n	8003eb6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b5e      	ldr	r3, [pc, #376]	; (8004008 <UART_SetConfig+0x500>)
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e90:	e011      	b.n	8003eb6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7ff fa41 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8003e96:	0003      	movs	r3, r0
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e9a:	e00c      	b.n	8003eb6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea2:	e008      	b.n	8003eb6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003ea8:	231a      	movs	r3, #26
 8003eaa:	2218      	movs	r2, #24
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
        break;
 8003eb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d100      	bne.n	8003ebe <UART_SetConfig+0x3b6>
 8003ebc:	e090      	b.n	8003fe0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	005a      	lsls	r2, r3, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	18d2      	adds	r2, r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0019      	movs	r1, r3
 8003ed0:	0010      	movs	r0, r2
 8003ed2:	f7fc f923 	bl	800011c <__udivsi3>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b0f      	cmp	r3, #15
 8003ede:	d921      	bls.n	8003f24 <UART_SetConfig+0x41c>
 8003ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	025b      	lsls	r3, r3, #9
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d21c      	bcs.n	8003f24 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	200e      	movs	r0, #14
 8003ef0:	2418      	movs	r4, #24
 8003ef2:	1903      	adds	r3, r0, r4
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	438a      	bics	r2, r1
 8003efa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2207      	movs	r2, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	b299      	uxth	r1, r3
 8003f08:	1903      	adds	r3, r0, r4
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	1902      	adds	r2, r0, r4
 8003f0e:	19d2      	adds	r2, r2, r7
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1902      	adds	r2, r0, r4
 8003f1c:	19d2      	adds	r2, r2, r7
 8003f1e:	8812      	ldrh	r2, [r2, #0]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e05d      	b.n	8003fe0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f24:	231a      	movs	r3, #26
 8003f26:	2218      	movs	r2, #24
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e056      	b.n	8003fe0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f32:	231b      	movs	r3, #27
 8003f34:	2218      	movs	r2, #24
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d822      	bhi.n	8003f86 <UART_SetConfig+0x47e>
 8003f40:	009a      	lsls	r2, r3, #2
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <UART_SetConfig+0x504>)
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4a:	f7ff fa95 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f52:	e021      	b.n	8003f98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7ff faa6 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f5c:	e01c      	b.n	8003f98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f5e:	4b28      	ldr	r3, [pc, #160]	; (8004000 <UART_SetConfig+0x4f8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	4013      	ands	r3, r2
 8003f66:	d002      	beq.n	8003f6e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f68:	4b26      	ldr	r3, [pc, #152]	; (8004004 <UART_SetConfig+0x4fc>)
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f6c:	e014      	b.n	8003f98 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <UART_SetConfig+0x500>)
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f72:	e011      	b.n	8003f98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f74:	f7ff f9d0 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f7c:	e00c      	b.n	8003f98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f84:	e008      	b.n	8003f98 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f8a:	231a      	movs	r3, #26
 8003f8c:	2218      	movs	r2, #24
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	19db      	adds	r3, r3, r7
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
        break;
 8003f96:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	085a      	lsrs	r2, r3, #1
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	18d2      	adds	r2, r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	0019      	movs	r1, r3
 8003fae:	0010      	movs	r0, r2
 8003fb0:	f7fc f8b4 	bl	800011c <__udivsi3>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d90a      	bls.n	8003fd4 <UART_SetConfig+0x4cc>
 8003fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	025b      	lsls	r3, r3, #9
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d205      	bcs.n	8003fd4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	e005      	b.n	8003fe0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd4:	231a      	movs	r3, #26
 8003fd6:	2218      	movs	r2, #24
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fec:	231a      	movs	r3, #26
 8003fee:	2218      	movs	r2, #24
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	19db      	adds	r3, r3, r7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b00e      	add	sp, #56	; 0x38
 8003ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	40021000 	.word	0x40021000
 8004004:	003d0900 	.word	0x003d0900
 8004008:	00f42400 	.word	0x00f42400
 800400c:	08006d74 	.word	0x08006d74

08004010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	2201      	movs	r2, #1
 800401e:	4013      	ands	r3, r2
 8004020:	d00b      	beq.n	800403a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <UART_AdvFeatureConfig+0x144>)
 800402a:	4013      	ands	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2202      	movs	r2, #2
 8004040:	4013      	ands	r3, r2
 8004042:	d00b      	beq.n	800405c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a43      	ldr	r2, [pc, #268]	; (8004158 <UART_AdvFeatureConfig+0x148>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2204      	movs	r2, #4
 8004062:	4013      	ands	r3, r2
 8004064:	d00b      	beq.n	800407e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a3b      	ldr	r2, [pc, #236]	; (800415c <UART_AdvFeatureConfig+0x14c>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2208      	movs	r2, #8
 8004084:	4013      	ands	r3, r2
 8004086:	d00b      	beq.n	80040a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a34      	ldr	r2, [pc, #208]	; (8004160 <UART_AdvFeatureConfig+0x150>)
 8004090:	4013      	ands	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2210      	movs	r2, #16
 80040a6:	4013      	ands	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <UART_AdvFeatureConfig+0x154>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	0019      	movs	r1, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2220      	movs	r2, #32
 80040c8:	4013      	ands	r3, r2
 80040ca:	d00b      	beq.n	80040e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4a25      	ldr	r2, [pc, #148]	; (8004168 <UART_AdvFeatureConfig+0x158>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	4013      	ands	r3, r2
 80040ec:	d01d      	beq.n	800412a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	; (800416c <UART_AdvFeatureConfig+0x15c>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	035b      	lsls	r3, r3, #13
 800410e:	429a      	cmp	r2, r3
 8004110:	d10b      	bne.n	800412a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a15      	ldr	r2, [pc, #84]	; (8004170 <UART_AdvFeatureConfig+0x160>)
 800411a:	4013      	ands	r3, r2
 800411c:	0019      	movs	r1, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	4013      	ands	r3, r2
 8004132:	d00b      	beq.n	800414c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <UART_AdvFeatureConfig+0x164>)
 800413c:	4013      	ands	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	b002      	add	sp, #8
 8004152:	bd80      	pop	{r7, pc}
 8004154:	fffdffff 	.word	0xfffdffff
 8004158:	fffeffff 	.word	0xfffeffff
 800415c:	fffbffff 	.word	0xfffbffff
 8004160:	ffff7fff 	.word	0xffff7fff
 8004164:	ffffefff 	.word	0xffffefff
 8004168:	ffffdfff 	.word	0xffffdfff
 800416c:	ffefffff 	.word	0xffefffff
 8004170:	ff9fffff 	.word	0xff9fffff
 8004174:	fff7ffff 	.word	0xfff7ffff

08004178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b092      	sub	sp, #72	; 0x48
 800417c:	af02      	add	r7, sp, #8
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2284      	movs	r2, #132	; 0x84
 8004184:	2100      	movs	r1, #0
 8004186:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004188:	f7fd fed0 	bl	8001f2c <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2208      	movs	r2, #8
 8004198:	4013      	ands	r3, r2
 800419a:	2b08      	cmp	r3, #8
 800419c:	d12c      	bne.n	80041f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a0:	2280      	movs	r2, #128	; 0x80
 80041a2:	0391      	lsls	r1, r2, #14
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4a46      	ldr	r2, [pc, #280]	; (80042c0 <UART_CheckIdleState+0x148>)
 80041a8:	9200      	str	r2, [sp, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f000 f88c 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 80041b0:	1e03      	subs	r3, r0, #0
 80041b2:	d021      	beq.n	80041f8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041be:	2301      	movs	r3, #1
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	438a      	bics	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2278      	movs	r2, #120	; 0x78
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e05f      	b.n	80042b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2204      	movs	r2, #4
 8004200:	4013      	ands	r3, r2
 8004202:	2b04      	cmp	r3, #4
 8004204:	d146      	bne.n	8004294 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	03d1      	lsls	r1, r2, #15
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <UART_CheckIdleState+0x148>)
 8004210:	9200      	str	r2, [sp, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	f000 f858 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d03b      	beq.n	8004294 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421c:	f3ef 8310 	mrs	r3, PRIMASK
 8004220:	60fb      	str	r3, [r7, #12]
  return(result);
 8004222:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
 8004226:	2301      	movs	r3, #1
 8004228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f383 8810 	msr	PRIMASK, r3
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4921      	ldr	r1, [pc, #132]	; (80042c4 <UART_CheckIdleState+0x14c>)
 800423e:	400a      	ands	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424e:	f3ef 8310 	mrs	r3, PRIMASK
 8004252:	61bb      	str	r3, [r7, #24]
  return(result);
 8004254:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	633b      	str	r3, [r7, #48]	; 0x30
 8004258:	2301      	movs	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f383 8810 	msr	PRIMASK, r3
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	438a      	bics	r2, r1
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	f383 8810 	msr	PRIMASK, r3
}
 800427e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	2120      	movs	r1, #32
 8004286:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2278      	movs	r2, #120	; 0x78
 800428c:	2100      	movs	r1, #0
 800428e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e011      	b.n	80042b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	2120      	movs	r1, #32
 80042a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2278      	movs	r2, #120	; 0x78
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b010      	add	sp, #64	; 0x40
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	01ffffff 	.word	0x01ffffff
 80042c4:	fffffedf 	.word	0xfffffedf

080042c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	1dfb      	adds	r3, r7, #7
 80042d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d8:	e04b      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	3301      	adds	r3, #1
 80042de:	d048      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7fd fe24 	bl	8001f2c <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e04b      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2204      	movs	r2, #4
 8004302:	4013      	ands	r3, r2
 8004304:	d035      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	2208      	movs	r2, #8
 800430e:	4013      	ands	r3, r2
 8004310:	2b08      	cmp	r3, #8
 8004312:	d111      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2208      	movs	r2, #8
 800431a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	0018      	movs	r0, r3
 8004320:	f000 f83c 	bl	800439c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2284      	movs	r2, #132	; 0x84
 8004328:	2108      	movs	r1, #8
 800432a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2278      	movs	r2, #120	; 0x78
 8004330:	2100      	movs	r1, #0
 8004332:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e02c      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	401a      	ands	r2, r3
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	429a      	cmp	r2, r3
 800434a:	d112      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	0112      	lsls	r2, r2, #4
 8004354:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	0018      	movs	r0, r3
 800435a:	f000 f81f 	bl	800439c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2284      	movs	r2, #132	; 0x84
 8004362:	2120      	movs	r1, #32
 8004364:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2278      	movs	r2, #120	; 0x78
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e00f      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	425a      	negs	r2, r3
 8004382:	4153      	adcs	r3, r2
 8004384:	b2db      	uxtb	r3, r3
 8004386:	001a      	movs	r2, r3
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d0a4      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	; 0x38
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a4:	f3ef 8310 	mrs	r3, PRIMASK
 80043a8:	617b      	str	r3, [r7, #20]
  return(result);
 80043aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	2301      	movs	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f383 8810 	msr	PRIMASK, r3
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4926      	ldr	r1, [pc, #152]	; (8004460 <UART_EndRxTransfer+0xc4>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	623b      	str	r3, [r7, #32]
  return(result);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
 80043e0:	2301      	movs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	438a      	bics	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	2b01      	cmp	r3, #1
 800440e:	d118      	bne.n	8004442 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004410:	f3ef 8310 	mrs	r3, PRIMASK
 8004414:	60bb      	str	r3, [r7, #8]
  return(result);
 8004416:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441a:	2301      	movs	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f383 8810 	msr	PRIMASK, r3
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2110      	movs	r1, #16
 8004432:	438a      	bics	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	2120      	movs	r1, #32
 8004448:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b00e      	add	sp, #56	; 0x38
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	fffffedf 	.word	0xfffffedf

08004464 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <USB_DisableGlobalInt+0x30>)
 800446e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	5a9b      	ldrh	r3, [r3, r2]
 8004476:	b29b      	uxth	r3, r3
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	b292      	uxth	r2, r2
 800447c:	43d2      	mvns	r2, r2
 800447e:	b292      	uxth	r2, r2
 8004480:	4013      	ands	r3, r2
 8004482:	b299      	uxth	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b004      	add	sp, #16
 8004492:	bd80      	pop	{r7, pc}
 8004494:	0000bf80 	.word	0x0000bf80

08004498 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004498:	b084      	sub	sp, #16
 800449a:	b590      	push	{r4, r7, lr}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	2004      	movs	r0, #4
 80044a4:	2410      	movs	r4, #16
 80044a6:	1900      	adds	r0, r0, r4
 80044a8:	2408      	movs	r4, #8
 80044aa:	46a4      	mov	ip, r4
 80044ac:	44bc      	add	ip, r7
 80044ae:	4460      	add	r0, ip
 80044b0:	6001      	str	r1, [r0, #0]
 80044b2:	6042      	str	r2, [r0, #4]
 80044b4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	2101      	movs	r1, #1
 80044bc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2240      	movs	r2, #64	; 0x40
 80044c2:	2100      	movs	r1, #0
 80044c4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2244      	movs	r2, #68	; 0x44
 80044ca:	2100      	movs	r1, #0
 80044cc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2250      	movs	r2, #80	; 0x50
 80044d2:	2100      	movs	r1, #0
 80044d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b003      	add	sp, #12
 80044de:	bc90      	pop	{r4, r7}
 80044e0:	bc08      	pop	{r3}
 80044e2:	b004      	add	sp, #16
 80044e4:	4718      	bx	r3
	...

080044e8 <__errno>:
 80044e8:	4b01      	ldr	r3, [pc, #4]	; (80044f0 <__errno+0x8>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	4770      	bx	lr
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	2000003c 	.word	0x2000003c

080044f4 <__libc_init_array>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	2600      	movs	r6, #0
 80044f8:	4d0c      	ldr	r5, [pc, #48]	; (800452c <__libc_init_array+0x38>)
 80044fa:	4c0d      	ldr	r4, [pc, #52]	; (8004530 <__libc_init_array+0x3c>)
 80044fc:	1b64      	subs	r4, r4, r5
 80044fe:	10a4      	asrs	r4, r4, #2
 8004500:	42a6      	cmp	r6, r4
 8004502:	d109      	bne.n	8004518 <__libc_init_array+0x24>
 8004504:	2600      	movs	r6, #0
 8004506:	f000 fc8b 	bl	8004e20 <_init>
 800450a:	4d0a      	ldr	r5, [pc, #40]	; (8004534 <__libc_init_array+0x40>)
 800450c:	4c0a      	ldr	r4, [pc, #40]	; (8004538 <__libc_init_array+0x44>)
 800450e:	1b64      	subs	r4, r4, r5
 8004510:	10a4      	asrs	r4, r4, #2
 8004512:	42a6      	cmp	r6, r4
 8004514:	d105      	bne.n	8004522 <__libc_init_array+0x2e>
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	00b3      	lsls	r3, r6, #2
 800451a:	58eb      	ldr	r3, [r5, r3]
 800451c:	4798      	blx	r3
 800451e:	3601      	adds	r6, #1
 8004520:	e7ee      	b.n	8004500 <__libc_init_array+0xc>
 8004522:	00b3      	lsls	r3, r6, #2
 8004524:	58eb      	ldr	r3, [r5, r3]
 8004526:	4798      	blx	r3
 8004528:	3601      	adds	r6, #1
 800452a:	e7f2      	b.n	8004512 <__libc_init_array+0x1e>
 800452c:	08006dd4 	.word	0x08006dd4
 8004530:	08006dd4 	.word	0x08006dd4
 8004534:	08006dd4 	.word	0x08006dd4
 8004538:	08006dd8 	.word	0x08006dd8

0800453c <memset>:
 800453c:	0003      	movs	r3, r0
 800453e:	1882      	adds	r2, r0, r2
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	7019      	strb	r1, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <siprintf>:
 800454c:	b40e      	push	{r1, r2, r3}
 800454e:	b500      	push	{lr}
 8004550:	490b      	ldr	r1, [pc, #44]	; (8004580 <siprintf+0x34>)
 8004552:	b09c      	sub	sp, #112	; 0x70
 8004554:	ab1d      	add	r3, sp, #116	; 0x74
 8004556:	9002      	str	r0, [sp, #8]
 8004558:	9006      	str	r0, [sp, #24]
 800455a:	9107      	str	r1, [sp, #28]
 800455c:	9104      	str	r1, [sp, #16]
 800455e:	4809      	ldr	r0, [pc, #36]	; (8004584 <siprintf+0x38>)
 8004560:	4909      	ldr	r1, [pc, #36]	; (8004588 <siprintf+0x3c>)
 8004562:	cb04      	ldmia	r3!, {r2}
 8004564:	9105      	str	r1, [sp, #20]
 8004566:	6800      	ldr	r0, [r0, #0]
 8004568:	a902      	add	r1, sp, #8
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	f000 f870 	bl	8004650 <_svfiprintf_r>
 8004570:	2300      	movs	r3, #0
 8004572:	9a02      	ldr	r2, [sp, #8]
 8004574:	7013      	strb	r3, [r2, #0]
 8004576:	b01c      	add	sp, #112	; 0x70
 8004578:	bc08      	pop	{r3}
 800457a:	b003      	add	sp, #12
 800457c:	4718      	bx	r3
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	7fffffff 	.word	0x7fffffff
 8004584:	2000003c 	.word	0x2000003c
 8004588:	ffff0208 	.word	0xffff0208

0800458c <__ssputs_r>:
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458e:	688e      	ldr	r6, [r1, #8]
 8004590:	b085      	sub	sp, #20
 8004592:	0007      	movs	r7, r0
 8004594:	000c      	movs	r4, r1
 8004596:	9203      	str	r2, [sp, #12]
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	429e      	cmp	r6, r3
 800459c:	d83c      	bhi.n	8004618 <__ssputs_r+0x8c>
 800459e:	2390      	movs	r3, #144	; 0x90
 80045a0:	898a      	ldrh	r2, [r1, #12]
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	421a      	tst	r2, r3
 80045a6:	d034      	beq.n	8004612 <__ssputs_r+0x86>
 80045a8:	6909      	ldr	r1, [r1, #16]
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6960      	ldr	r0, [r4, #20]
 80045ae:	1a5b      	subs	r3, r3, r1
 80045b0:	9302      	str	r3, [sp, #8]
 80045b2:	2303      	movs	r3, #3
 80045b4:	4343      	muls	r3, r0
 80045b6:	0fdd      	lsrs	r5, r3, #31
 80045b8:	18ed      	adds	r5, r5, r3
 80045ba:	9b01      	ldr	r3, [sp, #4]
 80045bc:	9802      	ldr	r0, [sp, #8]
 80045be:	3301      	adds	r3, #1
 80045c0:	181b      	adds	r3, r3, r0
 80045c2:	106d      	asrs	r5, r5, #1
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	d900      	bls.n	80045ca <__ssputs_r+0x3e>
 80045c8:	001d      	movs	r5, r3
 80045ca:	0553      	lsls	r3, r2, #21
 80045cc:	d532      	bpl.n	8004634 <__ssputs_r+0xa8>
 80045ce:	0029      	movs	r1, r5
 80045d0:	0038      	movs	r0, r7
 80045d2:	f000 fb53 	bl	8004c7c <_malloc_r>
 80045d6:	1e06      	subs	r6, r0, #0
 80045d8:	d109      	bne.n	80045ee <__ssputs_r+0x62>
 80045da:	230c      	movs	r3, #12
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	2340      	movs	r3, #64	; 0x40
 80045e0:	2001      	movs	r0, #1
 80045e2:	89a2      	ldrh	r2, [r4, #12]
 80045e4:	4240      	negs	r0, r0
 80045e6:	4313      	orrs	r3, r2
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	b005      	add	sp, #20
 80045ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ee:	9a02      	ldr	r2, [sp, #8]
 80045f0:	6921      	ldr	r1, [r4, #16]
 80045f2:	f000 faba 	bl	8004b6a <memcpy>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <__ssputs_r+0xc0>)
 80045fa:	401a      	ands	r2, r3
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	4313      	orrs	r3, r2
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	9b02      	ldr	r3, [sp, #8]
 8004604:	6126      	str	r6, [r4, #16]
 8004606:	18f6      	adds	r6, r6, r3
 8004608:	6026      	str	r6, [r4, #0]
 800460a:	6165      	str	r5, [r4, #20]
 800460c:	9e01      	ldr	r6, [sp, #4]
 800460e:	1aed      	subs	r5, r5, r3
 8004610:	60a5      	str	r5, [r4, #8]
 8004612:	9b01      	ldr	r3, [sp, #4]
 8004614:	429e      	cmp	r6, r3
 8004616:	d900      	bls.n	800461a <__ssputs_r+0x8e>
 8004618:	9e01      	ldr	r6, [sp, #4]
 800461a:	0032      	movs	r2, r6
 800461c:	9903      	ldr	r1, [sp, #12]
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	f000 faac 	bl	8004b7c <memmove>
 8004624:	68a3      	ldr	r3, [r4, #8]
 8004626:	2000      	movs	r0, #0
 8004628:	1b9b      	subs	r3, r3, r6
 800462a:	60a3      	str	r3, [r4, #8]
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	199e      	adds	r6, r3, r6
 8004630:	6026      	str	r6, [r4, #0]
 8004632:	e7da      	b.n	80045ea <__ssputs_r+0x5e>
 8004634:	002a      	movs	r2, r5
 8004636:	0038      	movs	r0, r7
 8004638:	f000 fb96 	bl	8004d68 <_realloc_r>
 800463c:	1e06      	subs	r6, r0, #0
 800463e:	d1e0      	bne.n	8004602 <__ssputs_r+0x76>
 8004640:	0038      	movs	r0, r7
 8004642:	6921      	ldr	r1, [r4, #16]
 8004644:	f000 faae 	bl	8004ba4 <_free_r>
 8004648:	e7c7      	b.n	80045da <__ssputs_r+0x4e>
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	fffffb7f 	.word	0xfffffb7f

08004650 <_svfiprintf_r>:
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	b0a1      	sub	sp, #132	; 0x84
 8004654:	9003      	str	r0, [sp, #12]
 8004656:	001d      	movs	r5, r3
 8004658:	898b      	ldrh	r3, [r1, #12]
 800465a:	000f      	movs	r7, r1
 800465c:	0016      	movs	r6, r2
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	d511      	bpl.n	8004686 <_svfiprintf_r+0x36>
 8004662:	690b      	ldr	r3, [r1, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10e      	bne.n	8004686 <_svfiprintf_r+0x36>
 8004668:	2140      	movs	r1, #64	; 0x40
 800466a:	f000 fb07 	bl	8004c7c <_malloc_r>
 800466e:	6038      	str	r0, [r7, #0]
 8004670:	6138      	str	r0, [r7, #16]
 8004672:	2800      	cmp	r0, #0
 8004674:	d105      	bne.n	8004682 <_svfiprintf_r+0x32>
 8004676:	230c      	movs	r3, #12
 8004678:	9a03      	ldr	r2, [sp, #12]
 800467a:	3801      	subs	r0, #1
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	b021      	add	sp, #132	; 0x84
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	ac08      	add	r4, sp, #32
 800468a:	6163      	str	r3, [r4, #20]
 800468c:	3320      	adds	r3, #32
 800468e:	7663      	strb	r3, [r4, #25]
 8004690:	3310      	adds	r3, #16
 8004692:	76a3      	strb	r3, [r4, #26]
 8004694:	9507      	str	r5, [sp, #28]
 8004696:	0035      	movs	r5, r6
 8004698:	782b      	ldrb	r3, [r5, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <_svfiprintf_r+0x52>
 800469e:	2b25      	cmp	r3, #37	; 0x25
 80046a0:	d147      	bne.n	8004732 <_svfiprintf_r+0xe2>
 80046a2:	1bab      	subs	r3, r5, r6
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	d00c      	beq.n	80046c4 <_svfiprintf_r+0x74>
 80046aa:	0032      	movs	r2, r6
 80046ac:	0039      	movs	r1, r7
 80046ae:	9803      	ldr	r0, [sp, #12]
 80046b0:	f7ff ff6c 	bl	800458c <__ssputs_r>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d100      	bne.n	80046ba <_svfiprintf_r+0x6a>
 80046b8:	e0ae      	b.n	8004818 <_svfiprintf_r+0x1c8>
 80046ba:	6962      	ldr	r2, [r4, #20]
 80046bc:	9b05      	ldr	r3, [sp, #20]
 80046be:	4694      	mov	ip, r2
 80046c0:	4463      	add	r3, ip
 80046c2:	6163      	str	r3, [r4, #20]
 80046c4:	782b      	ldrb	r3, [r5, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d100      	bne.n	80046cc <_svfiprintf_r+0x7c>
 80046ca:	e0a5      	b.n	8004818 <_svfiprintf_r+0x1c8>
 80046cc:	2201      	movs	r2, #1
 80046ce:	2300      	movs	r3, #0
 80046d0:	4252      	negs	r2, r2
 80046d2:	6062      	str	r2, [r4, #4]
 80046d4:	a904      	add	r1, sp, #16
 80046d6:	3254      	adds	r2, #84	; 0x54
 80046d8:	1852      	adds	r2, r2, r1
 80046da:	1c6e      	adds	r6, r5, #1
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	60e3      	str	r3, [r4, #12]
 80046e0:	60a3      	str	r3, [r4, #8]
 80046e2:	7013      	strb	r3, [r2, #0]
 80046e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80046e6:	2205      	movs	r2, #5
 80046e8:	7831      	ldrb	r1, [r6, #0]
 80046ea:	4854      	ldr	r0, [pc, #336]	; (800483c <_svfiprintf_r+0x1ec>)
 80046ec:	f000 fa32 	bl	8004b54 <memchr>
 80046f0:	1c75      	adds	r5, r6, #1
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d11f      	bne.n	8004736 <_svfiprintf_r+0xe6>
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	06d3      	lsls	r3, r2, #27
 80046fa:	d504      	bpl.n	8004706 <_svfiprintf_r+0xb6>
 80046fc:	2353      	movs	r3, #83	; 0x53
 80046fe:	a904      	add	r1, sp, #16
 8004700:	185b      	adds	r3, r3, r1
 8004702:	2120      	movs	r1, #32
 8004704:	7019      	strb	r1, [r3, #0]
 8004706:	0713      	lsls	r3, r2, #28
 8004708:	d504      	bpl.n	8004714 <_svfiprintf_r+0xc4>
 800470a:	2353      	movs	r3, #83	; 0x53
 800470c:	a904      	add	r1, sp, #16
 800470e:	185b      	adds	r3, r3, r1
 8004710:	212b      	movs	r1, #43	; 0x2b
 8004712:	7019      	strb	r1, [r3, #0]
 8004714:	7833      	ldrb	r3, [r6, #0]
 8004716:	2b2a      	cmp	r3, #42	; 0x2a
 8004718:	d016      	beq.n	8004748 <_svfiprintf_r+0xf8>
 800471a:	0035      	movs	r5, r6
 800471c:	2100      	movs	r1, #0
 800471e:	200a      	movs	r0, #10
 8004720:	68e3      	ldr	r3, [r4, #12]
 8004722:	782a      	ldrb	r2, [r5, #0]
 8004724:	1c6e      	adds	r6, r5, #1
 8004726:	3a30      	subs	r2, #48	; 0x30
 8004728:	2a09      	cmp	r2, #9
 800472a:	d94e      	bls.n	80047ca <_svfiprintf_r+0x17a>
 800472c:	2900      	cmp	r1, #0
 800472e:	d111      	bne.n	8004754 <_svfiprintf_r+0x104>
 8004730:	e017      	b.n	8004762 <_svfiprintf_r+0x112>
 8004732:	3501      	adds	r5, #1
 8004734:	e7b0      	b.n	8004698 <_svfiprintf_r+0x48>
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <_svfiprintf_r+0x1ec>)
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	1ac0      	subs	r0, r0, r3
 800473c:	2301      	movs	r3, #1
 800473e:	4083      	lsls	r3, r0
 8004740:	4313      	orrs	r3, r2
 8004742:	002e      	movs	r6, r5
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	e7ce      	b.n	80046e6 <_svfiprintf_r+0x96>
 8004748:	9b07      	ldr	r3, [sp, #28]
 800474a:	1d19      	adds	r1, r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	9107      	str	r1, [sp, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db01      	blt.n	8004758 <_svfiprintf_r+0x108>
 8004754:	930b      	str	r3, [sp, #44]	; 0x2c
 8004756:	e004      	b.n	8004762 <_svfiprintf_r+0x112>
 8004758:	425b      	negs	r3, r3
 800475a:	60e3      	str	r3, [r4, #12]
 800475c:	2302      	movs	r3, #2
 800475e:	4313      	orrs	r3, r2
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	782b      	ldrb	r3, [r5, #0]
 8004764:	2b2e      	cmp	r3, #46	; 0x2e
 8004766:	d10a      	bne.n	800477e <_svfiprintf_r+0x12e>
 8004768:	786b      	ldrb	r3, [r5, #1]
 800476a:	2b2a      	cmp	r3, #42	; 0x2a
 800476c:	d135      	bne.n	80047da <_svfiprintf_r+0x18a>
 800476e:	9b07      	ldr	r3, [sp, #28]
 8004770:	3502      	adds	r5, #2
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	9207      	str	r2, [sp, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	db2b      	blt.n	80047d4 <_svfiprintf_r+0x184>
 800477c:	9309      	str	r3, [sp, #36]	; 0x24
 800477e:	4e30      	ldr	r6, [pc, #192]	; (8004840 <_svfiprintf_r+0x1f0>)
 8004780:	2203      	movs	r2, #3
 8004782:	0030      	movs	r0, r6
 8004784:	7829      	ldrb	r1, [r5, #0]
 8004786:	f000 f9e5 	bl	8004b54 <memchr>
 800478a:	2800      	cmp	r0, #0
 800478c:	d006      	beq.n	800479c <_svfiprintf_r+0x14c>
 800478e:	2340      	movs	r3, #64	; 0x40
 8004790:	1b80      	subs	r0, r0, r6
 8004792:	4083      	lsls	r3, r0
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	3501      	adds	r5, #1
 8004798:	4313      	orrs	r3, r2
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	7829      	ldrb	r1, [r5, #0]
 800479e:	2206      	movs	r2, #6
 80047a0:	4828      	ldr	r0, [pc, #160]	; (8004844 <_svfiprintf_r+0x1f4>)
 80047a2:	1c6e      	adds	r6, r5, #1
 80047a4:	7621      	strb	r1, [r4, #24]
 80047a6:	f000 f9d5 	bl	8004b54 <memchr>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d03c      	beq.n	8004828 <_svfiprintf_r+0x1d8>
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <_svfiprintf_r+0x1f8>)
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d125      	bne.n	8004800 <_svfiprintf_r+0x1b0>
 80047b4:	2207      	movs	r2, #7
 80047b6:	9b07      	ldr	r3, [sp, #28]
 80047b8:	3307      	adds	r3, #7
 80047ba:	4393      	bics	r3, r2
 80047bc:	3308      	adds	r3, #8
 80047be:	9307      	str	r3, [sp, #28]
 80047c0:	6963      	ldr	r3, [r4, #20]
 80047c2:	9a04      	ldr	r2, [sp, #16]
 80047c4:	189b      	adds	r3, r3, r2
 80047c6:	6163      	str	r3, [r4, #20]
 80047c8:	e765      	b.n	8004696 <_svfiprintf_r+0x46>
 80047ca:	4343      	muls	r3, r0
 80047cc:	0035      	movs	r5, r6
 80047ce:	2101      	movs	r1, #1
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	e7a6      	b.n	8004722 <_svfiprintf_r+0xd2>
 80047d4:	2301      	movs	r3, #1
 80047d6:	425b      	negs	r3, r3
 80047d8:	e7d0      	b.n	800477c <_svfiprintf_r+0x12c>
 80047da:	2300      	movs	r3, #0
 80047dc:	200a      	movs	r0, #10
 80047de:	001a      	movs	r2, r3
 80047e0:	3501      	adds	r5, #1
 80047e2:	6063      	str	r3, [r4, #4]
 80047e4:	7829      	ldrb	r1, [r5, #0]
 80047e6:	1c6e      	adds	r6, r5, #1
 80047e8:	3930      	subs	r1, #48	; 0x30
 80047ea:	2909      	cmp	r1, #9
 80047ec:	d903      	bls.n	80047f6 <_svfiprintf_r+0x1a6>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0c5      	beq.n	800477e <_svfiprintf_r+0x12e>
 80047f2:	9209      	str	r2, [sp, #36]	; 0x24
 80047f4:	e7c3      	b.n	800477e <_svfiprintf_r+0x12e>
 80047f6:	4342      	muls	r2, r0
 80047f8:	0035      	movs	r5, r6
 80047fa:	2301      	movs	r3, #1
 80047fc:	1852      	adds	r2, r2, r1
 80047fe:	e7f1      	b.n	80047e4 <_svfiprintf_r+0x194>
 8004800:	ab07      	add	r3, sp, #28
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	003a      	movs	r2, r7
 8004806:	0021      	movs	r1, r4
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <_svfiprintf_r+0x1fc>)
 800480a:	9803      	ldr	r0, [sp, #12]
 800480c:	e000      	b.n	8004810 <_svfiprintf_r+0x1c0>
 800480e:	bf00      	nop
 8004810:	9004      	str	r0, [sp, #16]
 8004812:	9b04      	ldr	r3, [sp, #16]
 8004814:	3301      	adds	r3, #1
 8004816:	d1d3      	bne.n	80047c0 <_svfiprintf_r+0x170>
 8004818:	89bb      	ldrh	r3, [r7, #12]
 800481a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800481c:	065b      	lsls	r3, r3, #25
 800481e:	d400      	bmi.n	8004822 <_svfiprintf_r+0x1d2>
 8004820:	e72d      	b.n	800467e <_svfiprintf_r+0x2e>
 8004822:	2001      	movs	r0, #1
 8004824:	4240      	negs	r0, r0
 8004826:	e72a      	b.n	800467e <_svfiprintf_r+0x2e>
 8004828:	ab07      	add	r3, sp, #28
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	003a      	movs	r2, r7
 800482e:	0021      	movs	r1, r4
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <_svfiprintf_r+0x1fc>)
 8004832:	9803      	ldr	r0, [sp, #12]
 8004834:	f000 f87c 	bl	8004930 <_printf_i>
 8004838:	e7ea      	b.n	8004810 <_svfiprintf_r+0x1c0>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	08006d98 	.word	0x08006d98
 8004840:	08006d9e 	.word	0x08006d9e
 8004844:	08006da2 	.word	0x08006da2
 8004848:	00000000 	.word	0x00000000
 800484c:	0800458d 	.word	0x0800458d

08004850 <_printf_common>:
 8004850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004852:	0015      	movs	r5, r2
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	688a      	ldr	r2, [r1, #8]
 8004858:	690b      	ldr	r3, [r1, #16]
 800485a:	000c      	movs	r4, r1
 800485c:	9000      	str	r0, [sp, #0]
 800485e:	4293      	cmp	r3, r2
 8004860:	da00      	bge.n	8004864 <_printf_common+0x14>
 8004862:	0013      	movs	r3, r2
 8004864:	0022      	movs	r2, r4
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	3243      	adds	r2, #67	; 0x43
 800486a:	7812      	ldrb	r2, [r2, #0]
 800486c:	2a00      	cmp	r2, #0
 800486e:	d001      	beq.n	8004874 <_printf_common+0x24>
 8004870:	3301      	adds	r3, #1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	069b      	lsls	r3, r3, #26
 8004878:	d502      	bpl.n	8004880 <_printf_common+0x30>
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	3302      	adds	r3, #2
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	2306      	movs	r3, #6
 8004884:	0017      	movs	r7, r2
 8004886:	401f      	ands	r7, r3
 8004888:	421a      	tst	r2, r3
 800488a:	d027      	beq.n	80048dc <_printf_common+0x8c>
 800488c:	0023      	movs	r3, r4
 800488e:	3343      	adds	r3, #67	; 0x43
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	4193      	sbcs	r3, r2
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	0692      	lsls	r2, r2, #26
 800489a:	d430      	bmi.n	80048fe <_printf_common+0xae>
 800489c:	0022      	movs	r2, r4
 800489e:	9901      	ldr	r1, [sp, #4]
 80048a0:	9800      	ldr	r0, [sp, #0]
 80048a2:	9e08      	ldr	r6, [sp, #32]
 80048a4:	3243      	adds	r2, #67	; 0x43
 80048a6:	47b0      	blx	r6
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d025      	beq.n	80048f8 <_printf_common+0xa8>
 80048ac:	2306      	movs	r3, #6
 80048ae:	6820      	ldr	r0, [r4, #0]
 80048b0:	682a      	ldr	r2, [r5, #0]
 80048b2:	68e1      	ldr	r1, [r4, #12]
 80048b4:	2500      	movs	r5, #0
 80048b6:	4003      	ands	r3, r0
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d103      	bne.n	80048c4 <_printf_common+0x74>
 80048bc:	1a8d      	subs	r5, r1, r2
 80048be:	43eb      	mvns	r3, r5
 80048c0:	17db      	asrs	r3, r3, #31
 80048c2:	401d      	ands	r5, r3
 80048c4:	68a3      	ldr	r3, [r4, #8]
 80048c6:	6922      	ldr	r2, [r4, #16]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	dd01      	ble.n	80048d0 <_printf_common+0x80>
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	18ed      	adds	r5, r5, r3
 80048d0:	2700      	movs	r7, #0
 80048d2:	42bd      	cmp	r5, r7
 80048d4:	d120      	bne.n	8004918 <_printf_common+0xc8>
 80048d6:	2000      	movs	r0, #0
 80048d8:	e010      	b.n	80048fc <_printf_common+0xac>
 80048da:	3701      	adds	r7, #1
 80048dc:	68e3      	ldr	r3, [r4, #12]
 80048de:	682a      	ldr	r2, [r5, #0]
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	42bb      	cmp	r3, r7
 80048e4:	ddd2      	ble.n	800488c <_printf_common+0x3c>
 80048e6:	0022      	movs	r2, r4
 80048e8:	2301      	movs	r3, #1
 80048ea:	9901      	ldr	r1, [sp, #4]
 80048ec:	9800      	ldr	r0, [sp, #0]
 80048ee:	9e08      	ldr	r6, [sp, #32]
 80048f0:	3219      	adds	r2, #25
 80048f2:	47b0      	blx	r6
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d1f0      	bne.n	80048da <_printf_common+0x8a>
 80048f8:	2001      	movs	r0, #1
 80048fa:	4240      	negs	r0, r0
 80048fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048fe:	2030      	movs	r0, #48	; 0x30
 8004900:	18e1      	adds	r1, r4, r3
 8004902:	3143      	adds	r1, #67	; 0x43
 8004904:	7008      	strb	r0, [r1, #0]
 8004906:	0021      	movs	r1, r4
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	3145      	adds	r1, #69	; 0x45
 800490c:	7809      	ldrb	r1, [r1, #0]
 800490e:	18a2      	adds	r2, r4, r2
 8004910:	3243      	adds	r2, #67	; 0x43
 8004912:	3302      	adds	r3, #2
 8004914:	7011      	strb	r1, [r2, #0]
 8004916:	e7c1      	b.n	800489c <_printf_common+0x4c>
 8004918:	0022      	movs	r2, r4
 800491a:	2301      	movs	r3, #1
 800491c:	9901      	ldr	r1, [sp, #4]
 800491e:	9800      	ldr	r0, [sp, #0]
 8004920:	9e08      	ldr	r6, [sp, #32]
 8004922:	321a      	adds	r2, #26
 8004924:	47b0      	blx	r6
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d0e6      	beq.n	80048f8 <_printf_common+0xa8>
 800492a:	3701      	adds	r7, #1
 800492c:	e7d1      	b.n	80048d2 <_printf_common+0x82>
	...

08004930 <_printf_i>:
 8004930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004932:	b08b      	sub	sp, #44	; 0x2c
 8004934:	9206      	str	r2, [sp, #24]
 8004936:	000a      	movs	r2, r1
 8004938:	3243      	adds	r2, #67	; 0x43
 800493a:	9307      	str	r3, [sp, #28]
 800493c:	9005      	str	r0, [sp, #20]
 800493e:	9204      	str	r2, [sp, #16]
 8004940:	7e0a      	ldrb	r2, [r1, #24]
 8004942:	000c      	movs	r4, r1
 8004944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004946:	2a78      	cmp	r2, #120	; 0x78
 8004948:	d807      	bhi.n	800495a <_printf_i+0x2a>
 800494a:	2a62      	cmp	r2, #98	; 0x62
 800494c:	d809      	bhi.n	8004962 <_printf_i+0x32>
 800494e:	2a00      	cmp	r2, #0
 8004950:	d100      	bne.n	8004954 <_printf_i+0x24>
 8004952:	e0c1      	b.n	8004ad8 <_printf_i+0x1a8>
 8004954:	2a58      	cmp	r2, #88	; 0x58
 8004956:	d100      	bne.n	800495a <_printf_i+0x2a>
 8004958:	e08c      	b.n	8004a74 <_printf_i+0x144>
 800495a:	0026      	movs	r6, r4
 800495c:	3642      	adds	r6, #66	; 0x42
 800495e:	7032      	strb	r2, [r6, #0]
 8004960:	e022      	b.n	80049a8 <_printf_i+0x78>
 8004962:	0010      	movs	r0, r2
 8004964:	3863      	subs	r0, #99	; 0x63
 8004966:	2815      	cmp	r0, #21
 8004968:	d8f7      	bhi.n	800495a <_printf_i+0x2a>
 800496a:	f7fb fbcd 	bl	8000108 <__gnu_thumb1_case_shi>
 800496e:	0016      	.short	0x0016
 8004970:	fff6001f 	.word	0xfff6001f
 8004974:	fff6fff6 	.word	0xfff6fff6
 8004978:	001ffff6 	.word	0x001ffff6
 800497c:	fff6fff6 	.word	0xfff6fff6
 8004980:	fff6fff6 	.word	0xfff6fff6
 8004984:	003600a8 	.word	0x003600a8
 8004988:	fff6009a 	.word	0xfff6009a
 800498c:	00b9fff6 	.word	0x00b9fff6
 8004990:	0036fff6 	.word	0x0036fff6
 8004994:	fff6fff6 	.word	0xfff6fff6
 8004998:	009e      	.short	0x009e
 800499a:	0026      	movs	r6, r4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	3642      	adds	r6, #66	; 0x42
 80049a0:	1d11      	adds	r1, r2, #4
 80049a2:	6019      	str	r1, [r3, #0]
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	7033      	strb	r3, [r6, #0]
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0a7      	b.n	8004afc <_printf_i+0x1cc>
 80049ac:	6808      	ldr	r0, [r1, #0]
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	1d0a      	adds	r2, r1, #4
 80049b2:	0605      	lsls	r5, r0, #24
 80049b4:	d50b      	bpl.n	80049ce <_printf_i+0x9e>
 80049b6:	680d      	ldr	r5, [r1, #0]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	da03      	bge.n	80049c6 <_printf_i+0x96>
 80049be:	232d      	movs	r3, #45	; 0x2d
 80049c0:	9a04      	ldr	r2, [sp, #16]
 80049c2:	426d      	negs	r5, r5
 80049c4:	7013      	strb	r3, [r2, #0]
 80049c6:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <_printf_i+0x21c>)
 80049c8:	270a      	movs	r7, #10
 80049ca:	9303      	str	r3, [sp, #12]
 80049cc:	e01b      	b.n	8004a06 <_printf_i+0xd6>
 80049ce:	680d      	ldr	r5, [r1, #0]
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	0641      	lsls	r1, r0, #25
 80049d4:	d5f1      	bpl.n	80049ba <_printf_i+0x8a>
 80049d6:	b22d      	sxth	r5, r5
 80049d8:	e7ef      	b.n	80049ba <_printf_i+0x8a>
 80049da:	680d      	ldr	r5, [r1, #0]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	1d08      	adds	r0, r1, #4
 80049e0:	6018      	str	r0, [r3, #0]
 80049e2:	062e      	lsls	r6, r5, #24
 80049e4:	d501      	bpl.n	80049ea <_printf_i+0xba>
 80049e6:	680d      	ldr	r5, [r1, #0]
 80049e8:	e003      	b.n	80049f2 <_printf_i+0xc2>
 80049ea:	066d      	lsls	r5, r5, #25
 80049ec:	d5fb      	bpl.n	80049e6 <_printf_i+0xb6>
 80049ee:	680d      	ldr	r5, [r1, #0]
 80049f0:	b2ad      	uxth	r5, r5
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <_printf_i+0x21c>)
 80049f4:	2708      	movs	r7, #8
 80049f6:	9303      	str	r3, [sp, #12]
 80049f8:	2a6f      	cmp	r2, #111	; 0x6f
 80049fa:	d000      	beq.n	80049fe <_printf_i+0xce>
 80049fc:	3702      	adds	r7, #2
 80049fe:	0023      	movs	r3, r4
 8004a00:	2200      	movs	r2, #0
 8004a02:	3343      	adds	r3, #67	; 0x43
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	60a3      	str	r3, [r4, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db03      	blt.n	8004a16 <_printf_i+0xe6>
 8004a0e:	2204      	movs	r2, #4
 8004a10:	6821      	ldr	r1, [r4, #0]
 8004a12:	4391      	bics	r1, r2
 8004a14:	6021      	str	r1, [r4, #0]
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	d102      	bne.n	8004a20 <_printf_i+0xf0>
 8004a1a:	9e04      	ldr	r6, [sp, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <_printf_i+0x10a>
 8004a20:	9e04      	ldr	r6, [sp, #16]
 8004a22:	0028      	movs	r0, r5
 8004a24:	0039      	movs	r1, r7
 8004a26:	f7fb fbff 	bl	8000228 <__aeabi_uidivmod>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	3e01      	subs	r6, #1
 8004a2e:	5c5b      	ldrb	r3, [r3, r1]
 8004a30:	7033      	strb	r3, [r6, #0]
 8004a32:	002b      	movs	r3, r5
 8004a34:	0005      	movs	r5, r0
 8004a36:	429f      	cmp	r7, r3
 8004a38:	d9f3      	bls.n	8004a22 <_printf_i+0xf2>
 8004a3a:	2f08      	cmp	r7, #8
 8004a3c:	d109      	bne.n	8004a52 <_printf_i+0x122>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	07db      	lsls	r3, r3, #31
 8004a42:	d506      	bpl.n	8004a52 <_printf_i+0x122>
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	6922      	ldr	r2, [r4, #16]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	dc02      	bgt.n	8004a52 <_printf_i+0x122>
 8004a4c:	2330      	movs	r3, #48	; 0x30
 8004a4e:	3e01      	subs	r6, #1
 8004a50:	7033      	strb	r3, [r6, #0]
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	1b9b      	subs	r3, r3, r6
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	9b07      	ldr	r3, [sp, #28]
 8004a5a:	0021      	movs	r1, r4
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	9805      	ldr	r0, [sp, #20]
 8004a60:	9b06      	ldr	r3, [sp, #24]
 8004a62:	aa09      	add	r2, sp, #36	; 0x24
 8004a64:	f7ff fef4 	bl	8004850 <_printf_common>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d14c      	bne.n	8004b06 <_printf_i+0x1d6>
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	4240      	negs	r0, r0
 8004a70:	b00b      	add	sp, #44	; 0x2c
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	3145      	adds	r1, #69	; 0x45
 8004a76:	700a      	strb	r2, [r1, #0]
 8004a78:	4a34      	ldr	r2, [pc, #208]	; (8004b4c <_printf_i+0x21c>)
 8004a7a:	9203      	str	r2, [sp, #12]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	ca20      	ldmia	r2!, {r5}
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	0608      	lsls	r0, r1, #24
 8004a86:	d516      	bpl.n	8004ab6 <_printf_i+0x186>
 8004a88:	07cb      	lsls	r3, r1, #31
 8004a8a:	d502      	bpl.n	8004a92 <_printf_i+0x162>
 8004a8c:	2320      	movs	r3, #32
 8004a8e:	4319      	orrs	r1, r3
 8004a90:	6021      	str	r1, [r4, #0]
 8004a92:	2710      	movs	r7, #16
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	d1b2      	bne.n	80049fe <_printf_i+0xce>
 8004a98:	2320      	movs	r3, #32
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	439a      	bics	r2, r3
 8004a9e:	6022      	str	r2, [r4, #0]
 8004aa0:	e7ad      	b.n	80049fe <_printf_i+0xce>
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	6809      	ldr	r1, [r1, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	6022      	str	r2, [r4, #0]
 8004aaa:	0022      	movs	r2, r4
 8004aac:	2178      	movs	r1, #120	; 0x78
 8004aae:	3245      	adds	r2, #69	; 0x45
 8004ab0:	7011      	strb	r1, [r2, #0]
 8004ab2:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <_printf_i+0x220>)
 8004ab4:	e7e1      	b.n	8004a7a <_printf_i+0x14a>
 8004ab6:	0648      	lsls	r0, r1, #25
 8004ab8:	d5e6      	bpl.n	8004a88 <_printf_i+0x158>
 8004aba:	b2ad      	uxth	r5, r5
 8004abc:	e7e4      	b.n	8004a88 <_printf_i+0x158>
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	680d      	ldr	r5, [r1, #0]
 8004ac2:	1d10      	adds	r0, r2, #4
 8004ac4:	6949      	ldr	r1, [r1, #20]
 8004ac6:	6018      	str	r0, [r3, #0]
 8004ac8:	6813      	ldr	r3, [r2, #0]
 8004aca:	062e      	lsls	r6, r5, #24
 8004acc:	d501      	bpl.n	8004ad2 <_printf_i+0x1a2>
 8004ace:	6019      	str	r1, [r3, #0]
 8004ad0:	e002      	b.n	8004ad8 <_printf_i+0x1a8>
 8004ad2:	066d      	lsls	r5, r5, #25
 8004ad4:	d5fb      	bpl.n	8004ace <_printf_i+0x19e>
 8004ad6:	8019      	strh	r1, [r3, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9e04      	ldr	r6, [sp, #16]
 8004adc:	6123      	str	r3, [r4, #16]
 8004ade:	e7bb      	b.n	8004a58 <_printf_i+0x128>
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	1d11      	adds	r1, r2, #4
 8004ae4:	6019      	str	r1, [r3, #0]
 8004ae6:	6816      	ldr	r6, [r2, #0]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	0030      	movs	r0, r6
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	f000 f831 	bl	8004b54 <memchr>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d001      	beq.n	8004afa <_printf_i+0x1ca>
 8004af6:	1b80      	subs	r0, r0, r6
 8004af8:	6060      	str	r0, [r4, #4]
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	9a04      	ldr	r2, [sp, #16]
 8004b02:	7013      	strb	r3, [r2, #0]
 8004b04:	e7a8      	b.n	8004a58 <_printf_i+0x128>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	0032      	movs	r2, r6
 8004b0a:	9906      	ldr	r1, [sp, #24]
 8004b0c:	9805      	ldr	r0, [sp, #20]
 8004b0e:	9d07      	ldr	r5, [sp, #28]
 8004b10:	47a8      	blx	r5
 8004b12:	1c43      	adds	r3, r0, #1
 8004b14:	d0aa      	beq.n	8004a6c <_printf_i+0x13c>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	079b      	lsls	r3, r3, #30
 8004b1a:	d415      	bmi.n	8004b48 <_printf_i+0x218>
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	68e0      	ldr	r0, [r4, #12]
 8004b20:	4298      	cmp	r0, r3
 8004b22:	daa5      	bge.n	8004a70 <_printf_i+0x140>
 8004b24:	0018      	movs	r0, r3
 8004b26:	e7a3      	b.n	8004a70 <_printf_i+0x140>
 8004b28:	0022      	movs	r2, r4
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	9906      	ldr	r1, [sp, #24]
 8004b2e:	9805      	ldr	r0, [sp, #20]
 8004b30:	9e07      	ldr	r6, [sp, #28]
 8004b32:	3219      	adds	r2, #25
 8004b34:	47b0      	blx	r6
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d098      	beq.n	8004a6c <_printf_i+0x13c>
 8004b3a:	3501      	adds	r5, #1
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	dcf0      	bgt.n	8004b28 <_printf_i+0x1f8>
 8004b46:	e7e9      	b.n	8004b1c <_printf_i+0x1ec>
 8004b48:	2500      	movs	r5, #0
 8004b4a:	e7f7      	b.n	8004b3c <_printf_i+0x20c>
 8004b4c:	08006da9 	.word	0x08006da9
 8004b50:	08006dba 	.word	0x08006dba

08004b54 <memchr>:
 8004b54:	b2c9      	uxtb	r1, r1
 8004b56:	1882      	adds	r2, r0, r2
 8004b58:	4290      	cmp	r0, r2
 8004b5a:	d101      	bne.n	8004b60 <memchr+0xc>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	4770      	bx	lr
 8004b60:	7803      	ldrb	r3, [r0, #0]
 8004b62:	428b      	cmp	r3, r1
 8004b64:	d0fb      	beq.n	8004b5e <memchr+0xa>
 8004b66:	3001      	adds	r0, #1
 8004b68:	e7f6      	b.n	8004b58 <memchr+0x4>

08004b6a <memcpy>:
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d100      	bne.n	8004b74 <memcpy+0xa>
 8004b72:	bd10      	pop	{r4, pc}
 8004b74:	5ccc      	ldrb	r4, [r1, r3]
 8004b76:	54c4      	strb	r4, [r0, r3]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	e7f8      	b.n	8004b6e <memcpy+0x4>

08004b7c <memmove>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4288      	cmp	r0, r1
 8004b80:	d902      	bls.n	8004b88 <memmove+0xc>
 8004b82:	188b      	adds	r3, r1, r2
 8004b84:	4298      	cmp	r0, r3
 8004b86:	d303      	bcc.n	8004b90 <memmove+0x14>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e007      	b.n	8004b9c <memmove+0x20>
 8004b8c:	5c8b      	ldrb	r3, [r1, r2]
 8004b8e:	5483      	strb	r3, [r0, r2]
 8004b90:	3a01      	subs	r2, #1
 8004b92:	d2fb      	bcs.n	8004b8c <memmove+0x10>
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	5ccc      	ldrb	r4, [r1, r3]
 8004b98:	54c4      	strb	r4, [r0, r3]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1fa      	bne.n	8004b96 <memmove+0x1a>
 8004ba0:	e7f8      	b.n	8004b94 <memmove+0x18>
	...

08004ba4 <_free_r>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	0005      	movs	r5, r0
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d010      	beq.n	8004bce <_free_r+0x2a>
 8004bac:	1f0c      	subs	r4, r1, #4
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da00      	bge.n	8004bb6 <_free_r+0x12>
 8004bb4:	18e4      	adds	r4, r4, r3
 8004bb6:	0028      	movs	r0, r5
 8004bb8:	f000 f918 	bl	8004dec <__malloc_lock>
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <_free_r+0x90>)
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <_free_r+0x2c>
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	6014      	str	r4, [r2, #0]
 8004bc8:	0028      	movs	r0, r5
 8004bca:	f000 f917 	bl	8004dfc <__malloc_unlock>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d908      	bls.n	8004be6 <_free_r+0x42>
 8004bd4:	6821      	ldr	r1, [r4, #0]
 8004bd6:	1860      	adds	r0, r4, r1
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	d1f3      	bne.n	8004bc4 <_free_r+0x20>
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1841      	adds	r1, r0, r1
 8004be2:	6021      	str	r1, [r4, #0]
 8004be4:	e7ee      	b.n	8004bc4 <_free_r+0x20>
 8004be6:	001a      	movs	r2, r3
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <_free_r+0x4e>
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	d9f9      	bls.n	8004be6 <_free_r+0x42>
 8004bf2:	6811      	ldr	r1, [r2, #0]
 8004bf4:	1850      	adds	r0, r2, r1
 8004bf6:	42a0      	cmp	r0, r4
 8004bf8:	d10b      	bne.n	8004c12 <_free_r+0x6e>
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1809      	adds	r1, r1, r0
 8004bfe:	1850      	adds	r0, r2, r1
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	4283      	cmp	r3, r0
 8004c04:	d1e0      	bne.n	8004bc8 <_free_r+0x24>
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	1841      	adds	r1, r0, r1
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	6053      	str	r3, [r2, #4]
 8004c10:	e7da      	b.n	8004bc8 <_free_r+0x24>
 8004c12:	42a0      	cmp	r0, r4
 8004c14:	d902      	bls.n	8004c1c <_free_r+0x78>
 8004c16:	230c      	movs	r3, #12
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	e7d5      	b.n	8004bc8 <_free_r+0x24>
 8004c1c:	6821      	ldr	r1, [r4, #0]
 8004c1e:	1860      	adds	r0, r4, r1
 8004c20:	4283      	cmp	r3, r0
 8004c22:	d103      	bne.n	8004c2c <_free_r+0x88>
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	1841      	adds	r1, r0, r1
 8004c2a:	6021      	str	r1, [r4, #0]
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	6054      	str	r4, [r2, #4]
 8004c30:	e7ca      	b.n	8004bc8 <_free_r+0x24>
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	200005a4 	.word	0x200005a4

08004c38 <sbrk_aligned>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4e0f      	ldr	r6, [pc, #60]	; (8004c78 <sbrk_aligned+0x40>)
 8004c3c:	000d      	movs	r5, r1
 8004c3e:	6831      	ldr	r1, [r6, #0]
 8004c40:	0004      	movs	r4, r0
 8004c42:	2900      	cmp	r1, #0
 8004c44:	d102      	bne.n	8004c4c <sbrk_aligned+0x14>
 8004c46:	f000 f8bf 	bl	8004dc8 <_sbrk_r>
 8004c4a:	6030      	str	r0, [r6, #0]
 8004c4c:	0029      	movs	r1, r5
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f000 f8ba 	bl	8004dc8 <_sbrk_r>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d00a      	beq.n	8004c6e <sbrk_aligned+0x36>
 8004c58:	2303      	movs	r3, #3
 8004c5a:	1cc5      	adds	r5, r0, #3
 8004c5c:	439d      	bics	r5, r3
 8004c5e:	42a8      	cmp	r0, r5
 8004c60:	d007      	beq.n	8004c72 <sbrk_aligned+0x3a>
 8004c62:	1a29      	subs	r1, r5, r0
 8004c64:	0020      	movs	r0, r4
 8004c66:	f000 f8af 	bl	8004dc8 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d101      	bne.n	8004c72 <sbrk_aligned+0x3a>
 8004c6e:	2501      	movs	r5, #1
 8004c70:	426d      	negs	r5, r5
 8004c72:	0028      	movs	r0, r5
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	200005a8 	.word	0x200005a8

08004c7c <_malloc_r>:
 8004c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c7e:	2203      	movs	r2, #3
 8004c80:	1ccb      	adds	r3, r1, #3
 8004c82:	4393      	bics	r3, r2
 8004c84:	3308      	adds	r3, #8
 8004c86:	0006      	movs	r6, r0
 8004c88:	001f      	movs	r7, r3
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	d232      	bcs.n	8004cf4 <_malloc_r+0x78>
 8004c8e:	270c      	movs	r7, #12
 8004c90:	42b9      	cmp	r1, r7
 8004c92:	d831      	bhi.n	8004cf8 <_malloc_r+0x7c>
 8004c94:	0030      	movs	r0, r6
 8004c96:	f000 f8a9 	bl	8004dec <__malloc_lock>
 8004c9a:	4d32      	ldr	r5, [pc, #200]	; (8004d64 <_malloc_r+0xe8>)
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	001c      	movs	r4, r3
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	d12e      	bne.n	8004d02 <_malloc_r+0x86>
 8004ca4:	0039      	movs	r1, r7
 8004ca6:	0030      	movs	r0, r6
 8004ca8:	f7ff ffc6 	bl	8004c38 <sbrk_aligned>
 8004cac:	0004      	movs	r4, r0
 8004cae:	1c43      	adds	r3, r0, #1
 8004cb0:	d11e      	bne.n	8004cf0 <_malloc_r+0x74>
 8004cb2:	682c      	ldr	r4, [r5, #0]
 8004cb4:	0025      	movs	r5, r4
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	d14a      	bne.n	8004d50 <_malloc_r+0xd4>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	0029      	movs	r1, r5
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	0030      	movs	r0, r6
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	f000 f880 	bl	8004dc8 <_sbrk_r>
 8004cc8:	9b01      	ldr	r3, [sp, #4]
 8004cca:	4283      	cmp	r3, r0
 8004ccc:	d143      	bne.n	8004d56 <_malloc_r+0xda>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	3703      	adds	r7, #3
 8004cd2:	1aff      	subs	r7, r7, r3
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	439f      	bics	r7, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	2f0c      	cmp	r7, #12
 8004cdc:	d200      	bcs.n	8004ce0 <_malloc_r+0x64>
 8004cde:	270c      	movs	r7, #12
 8004ce0:	0039      	movs	r1, r7
 8004ce2:	0030      	movs	r0, r6
 8004ce4:	f7ff ffa8 	bl	8004c38 <sbrk_aligned>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d034      	beq.n	8004d56 <_malloc_r+0xda>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	19df      	adds	r7, r3, r7
 8004cf0:	6027      	str	r7, [r4, #0]
 8004cf2:	e013      	b.n	8004d1c <_malloc_r+0xa0>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dacb      	bge.n	8004c90 <_malloc_r+0x14>
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	6033      	str	r3, [r6, #0]
 8004cfe:	0028      	movs	r0, r5
 8004d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	1bd1      	subs	r1, r2, r7
 8004d06:	d420      	bmi.n	8004d4a <_malloc_r+0xce>
 8004d08:	290b      	cmp	r1, #11
 8004d0a:	d917      	bls.n	8004d3c <_malloc_r+0xc0>
 8004d0c:	19e2      	adds	r2, r4, r7
 8004d0e:	6027      	str	r7, [r4, #0]
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d111      	bne.n	8004d38 <_malloc_r+0xbc>
 8004d14:	602a      	str	r2, [r5, #0]
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	6053      	str	r3, [r2, #4]
 8004d1c:	0030      	movs	r0, r6
 8004d1e:	0025      	movs	r5, r4
 8004d20:	f000 f86c 	bl	8004dfc <__malloc_unlock>
 8004d24:	2207      	movs	r2, #7
 8004d26:	350b      	adds	r5, #11
 8004d28:	1d23      	adds	r3, r4, #4
 8004d2a:	4395      	bics	r5, r2
 8004d2c:	1aea      	subs	r2, r5, r3
 8004d2e:	429d      	cmp	r5, r3
 8004d30:	d0e5      	beq.n	8004cfe <_malloc_r+0x82>
 8004d32:	1b5b      	subs	r3, r3, r5
 8004d34:	50a3      	str	r3, [r4, r2]
 8004d36:	e7e2      	b.n	8004cfe <_malloc_r+0x82>
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	e7ec      	b.n	8004d16 <_malloc_r+0x9a>
 8004d3c:	6862      	ldr	r2, [r4, #4]
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	d101      	bne.n	8004d46 <_malloc_r+0xca>
 8004d42:	602a      	str	r2, [r5, #0]
 8004d44:	e7ea      	b.n	8004d1c <_malloc_r+0xa0>
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	e7e8      	b.n	8004d1c <_malloc_r+0xa0>
 8004d4a:	0023      	movs	r3, r4
 8004d4c:	6864      	ldr	r4, [r4, #4]
 8004d4e:	e7a7      	b.n	8004ca0 <_malloc_r+0x24>
 8004d50:	002c      	movs	r4, r5
 8004d52:	686d      	ldr	r5, [r5, #4]
 8004d54:	e7af      	b.n	8004cb6 <_malloc_r+0x3a>
 8004d56:	230c      	movs	r3, #12
 8004d58:	0030      	movs	r0, r6
 8004d5a:	6033      	str	r3, [r6, #0]
 8004d5c:	f000 f84e 	bl	8004dfc <__malloc_unlock>
 8004d60:	e7cd      	b.n	8004cfe <_malloc_r+0x82>
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	200005a4 	.word	0x200005a4

08004d68 <_realloc_r>:
 8004d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6a:	0007      	movs	r7, r0
 8004d6c:	000e      	movs	r6, r1
 8004d6e:	0014      	movs	r4, r2
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d105      	bne.n	8004d80 <_realloc_r+0x18>
 8004d74:	0011      	movs	r1, r2
 8004d76:	f7ff ff81 	bl	8004c7c <_malloc_r>
 8004d7a:	0005      	movs	r5, r0
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	d103      	bne.n	8004d8c <_realloc_r+0x24>
 8004d84:	f7ff ff0e 	bl	8004ba4 <_free_r>
 8004d88:	0025      	movs	r5, r4
 8004d8a:	e7f7      	b.n	8004d7c <_realloc_r+0x14>
 8004d8c:	f000 f83e 	bl	8004e0c <_malloc_usable_size_r>
 8004d90:	9001      	str	r0, [sp, #4]
 8004d92:	4284      	cmp	r4, r0
 8004d94:	d803      	bhi.n	8004d9e <_realloc_r+0x36>
 8004d96:	0035      	movs	r5, r6
 8004d98:	0843      	lsrs	r3, r0, #1
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	d3ee      	bcc.n	8004d7c <_realloc_r+0x14>
 8004d9e:	0021      	movs	r1, r4
 8004da0:	0038      	movs	r0, r7
 8004da2:	f7ff ff6b 	bl	8004c7c <_malloc_r>
 8004da6:	1e05      	subs	r5, r0, #0
 8004da8:	d0e8      	beq.n	8004d7c <_realloc_r+0x14>
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	0022      	movs	r2, r4
 8004dae:	429c      	cmp	r4, r3
 8004db0:	d900      	bls.n	8004db4 <_realloc_r+0x4c>
 8004db2:	001a      	movs	r2, r3
 8004db4:	0031      	movs	r1, r6
 8004db6:	0028      	movs	r0, r5
 8004db8:	f7ff fed7 	bl	8004b6a <memcpy>
 8004dbc:	0031      	movs	r1, r6
 8004dbe:	0038      	movs	r0, r7
 8004dc0:	f7ff fef0 	bl	8004ba4 <_free_r>
 8004dc4:	e7da      	b.n	8004d7c <_realloc_r+0x14>
	...

08004dc8 <_sbrk_r>:
 8004dc8:	2300      	movs	r3, #0
 8004dca:	b570      	push	{r4, r5, r6, lr}
 8004dcc:	4d06      	ldr	r5, [pc, #24]	; (8004de8 <_sbrk_r+0x20>)
 8004dce:	0004      	movs	r4, r0
 8004dd0:	0008      	movs	r0, r1
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	f7fc ffde 	bl	8001d94 <_sbrk>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d103      	bne.n	8004de4 <_sbrk_r+0x1c>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d000      	beq.n	8004de4 <_sbrk_r+0x1c>
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	200005ac 	.word	0x200005ac

08004dec <__malloc_lock>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	4802      	ldr	r0, [pc, #8]	; (8004df8 <__malloc_lock+0xc>)
 8004df0:	f000 f814 	bl	8004e1c <__retarget_lock_acquire_recursive>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	200005b0 	.word	0x200005b0

08004dfc <__malloc_unlock>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4802      	ldr	r0, [pc, #8]	; (8004e08 <__malloc_unlock+0xc>)
 8004e00:	f000 f80d 	bl	8004e1e <__retarget_lock_release_recursive>
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	200005b0 	.word	0x200005b0

08004e0c <_malloc_usable_size_r>:
 8004e0c:	1f0b      	subs	r3, r1, #4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	1f18      	subs	r0, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da01      	bge.n	8004e1a <_malloc_usable_size_r+0xe>
 8004e16:	580b      	ldr	r3, [r1, r0]
 8004e18:	18c0      	adds	r0, r0, r3
 8004e1a:	4770      	bx	lr

08004e1c <__retarget_lock_acquire_recursive>:
 8004e1c:	4770      	bx	lr

08004e1e <__retarget_lock_release_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
