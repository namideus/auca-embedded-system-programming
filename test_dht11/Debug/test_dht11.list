
test_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001990  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c8  080072c8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d0  080072d0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080072d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200000b4  0800738c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800738c  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ca1  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  00033d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00036b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fbf  00000000  00000000  00038b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151fd  00000000  00000000  0004eadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f7d  00000000  00000000  00063cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6c59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  000e6cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b4 	.word	0x200000b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005920 	.word	0x08005920

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b8 	.word	0x200000b8
 8000104:	08005920 	.word	0x08005920

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f84c 	bl	8000310 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f000 fc92 	bl	8000c10 <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 fbad 	bl	8000a50 <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 f9f9 	bl	80006f4 <__aeabi_fsub>
 8000302:	f000 fba5 	bl	8000a50 <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f000 fc96 	bl	8000c60 <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f000 fc91 	bl	8000c60 <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	469b      	mov	fp, r3
 8000346:	d433      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000348:	465a      	mov	r2, fp
 800034a:	4653      	mov	r3, sl
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83a      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e078      	b.n	8000454 <__udivmoddi4+0x144>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e075      	b.n	800045a <__udivmoddi4+0x14a>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e028      	b.n	80003da <__udivmoddi4+0xca>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	4652      	mov	r2, sl
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	4641      	mov	r1, r8
 80003bc:	0013      	movs	r3, r2
 80003be:	464a      	mov	r2, r9
 80003c0:	408a      	lsls	r2, r1
 80003c2:	0017      	movs	r7, r2
 80003c4:	4642      	mov	r2, r8
 80003c6:	431f      	orrs	r7, r3
 80003c8:	4653      	mov	r3, sl
 80003ca:	4093      	lsls	r3, r2
 80003cc:	001e      	movs	r6, r3
 80003ce:	42af      	cmp	r7, r5
 80003d0:	d9c4      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0d9      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e0:	07fb      	lsls	r3, r7, #31
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	431a      	orrs	r2, r3
 80003e6:	4646      	mov	r6, r8
 80003e8:	087b      	lsrs	r3, r7, #1
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xfa>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xe4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xfe>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0x108>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xdc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xfa>
 8000418:	9800      	ldr	r0, [sp, #0]
 800041a:	9901      	ldr	r1, [sp, #4]
 800041c:	465b      	mov	r3, fp
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db24      	blt.n	8000470 <__udivmoddi4+0x160>
 8000426:	002b      	movs	r3, r5
 8000428:	465a      	mov	r2, fp
 800042a:	4644      	mov	r4, r8
 800042c:	40d3      	lsrs	r3, r2
 800042e:	002a      	movs	r2, r5
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	465b      	mov	r3, fp
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2a      	blt.n	8000492 <__udivmoddi4+0x182>
 800043c:	0026      	movs	r6, r4
 800043e:	409e      	lsls	r6, r3
 8000440:	0033      	movs	r3, r6
 8000442:	0026      	movs	r6, r4
 8000444:	4647      	mov	r7, r8
 8000446:	40be      	lsls	r6, r7
 8000448:	0032      	movs	r2, r6
 800044a:	1a80      	subs	r0, r0, r2
 800044c:	4199      	sbcs	r1, r3
 800044e:	9000      	str	r0, [sp, #0]
 8000450:	9101      	str	r1, [sp, #4]
 8000452:	e79f      	b.n	8000394 <__udivmoddi4+0x84>
 8000454:	42a3      	cmp	r3, r4
 8000456:	d8bc      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 8000458:	e783      	b.n	8000362 <__udivmoddi4+0x52>
 800045a:	4642      	mov	r2, r8
 800045c:	2320      	movs	r3, #32
 800045e:	2100      	movs	r1, #0
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	9100      	str	r1, [sp, #0]
 8000466:	9201      	str	r2, [sp, #4]
 8000468:	2201      	movs	r2, #1
 800046a:	40da      	lsrs	r2, r3
 800046c:	9201      	str	r2, [sp, #4]
 800046e:	e786      	b.n	800037e <__udivmoddi4+0x6e>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	002a      	movs	r2, r5
 8000478:	4646      	mov	r6, r8
 800047a:	409a      	lsls	r2, r3
 800047c:	0023      	movs	r3, r4
 800047e:	40f3      	lsrs	r3, r6
 8000480:	4644      	mov	r4, r8
 8000482:	4313      	orrs	r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	40e2      	lsrs	r2, r4
 8000488:	001c      	movs	r4, r3
 800048a:	465b      	mov	r3, fp
 800048c:	0015      	movs	r5, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	dad4      	bge.n	800043c <__udivmoddi4+0x12c>
 8000492:	4642      	mov	r2, r8
 8000494:	002f      	movs	r7, r5
 8000496:	2320      	movs	r3, #32
 8000498:	0026      	movs	r6, r4
 800049a:	4097      	lsls	r7, r2
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	40de      	lsrs	r6, r3
 80004a0:	003b      	movs	r3, r7
 80004a2:	4333      	orrs	r3, r6
 80004a4:	e7cd      	b.n	8000442 <__udivmoddi4+0x132>
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0244      	lsls	r4, r0, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	0a64      	lsrs	r4, r4, #9
 80004b8:	1c0f      	adds	r7, r1, #0
 80004ba:	0e2d      	lsrs	r5, r5, #24
 80004bc:	0fc6      	lsrs	r6, r0, #31
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fmul+0x1c>
 80004c2:	e08d      	b.n	80005e0 <__aeabi_fmul+0x138>
 80004c4:	2dff      	cmp	r5, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fmul+0x22>
 80004c8:	e092      	b.n	80005f0 <__aeabi_fmul+0x148>
 80004ca:	2300      	movs	r3, #0
 80004cc:	2080      	movs	r0, #128	; 0x80
 80004ce:	4699      	mov	r9, r3
 80004d0:	469a      	mov	sl, r3
 80004d2:	00e4      	lsls	r4, r4, #3
 80004d4:	04c0      	lsls	r0, r0, #19
 80004d6:	4304      	orrs	r4, r0
 80004d8:	3d7f      	subs	r5, #127	; 0x7f
 80004da:	0278      	lsls	r0, r7, #9
 80004dc:	0a43      	lsrs	r3, r0, #9
 80004de:	4698      	mov	r8, r3
 80004e0:	007b      	lsls	r3, r7, #1
 80004e2:	0e1b      	lsrs	r3, r3, #24
 80004e4:	0fff      	lsrs	r7, r7, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fmul+0x44>
 80004ea:	e070      	b.n	80005ce <__aeabi_fmul+0x126>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fmul+0x4a>
 80004f0:	e086      	b.n	8000600 <__aeabi_fmul+0x158>
 80004f2:	4642      	mov	r2, r8
 80004f4:	00d0      	lsls	r0, r2, #3
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	18ed      	adds	r5, r5, r3
 80004fc:	2300      	movs	r3, #0
 80004fe:	04d2      	lsls	r2, r2, #19
 8000500:	4302      	orrs	r2, r0
 8000502:	4690      	mov	r8, r2
 8000504:	469c      	mov	ip, r3
 8000506:	0031      	movs	r1, r6
 8000508:	464b      	mov	r3, r9
 800050a:	4079      	eors	r1, r7
 800050c:	1c68      	adds	r0, r5, #1
 800050e:	2b0f      	cmp	r3, #15
 8000510:	d81c      	bhi.n	800054c <__aeabi_fmul+0xa4>
 8000512:	4a76      	ldr	r2, [pc, #472]	; (80006ec <__aeabi_fmul+0x244>)
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	58d3      	ldr	r3, [r2, r3]
 8000518:	469f      	mov	pc, r3
 800051a:	0039      	movs	r1, r7
 800051c:	4644      	mov	r4, r8
 800051e:	46e2      	mov	sl, ip
 8000520:	4653      	mov	r3, sl
 8000522:	2b02      	cmp	r3, #2
 8000524:	d00f      	beq.n	8000546 <__aeabi_fmul+0x9e>
 8000526:	2b03      	cmp	r3, #3
 8000528:	d100      	bne.n	800052c <__aeabi_fmul+0x84>
 800052a:	e0d7      	b.n	80006dc <__aeabi_fmul+0x234>
 800052c:	2b01      	cmp	r3, #1
 800052e:	d137      	bne.n	80005a0 <__aeabi_fmul+0xf8>
 8000530:	2000      	movs	r0, #0
 8000532:	2400      	movs	r4, #0
 8000534:	05c0      	lsls	r0, r0, #23
 8000536:	4320      	orrs	r0, r4
 8000538:	07c9      	lsls	r1, r1, #31
 800053a:	4308      	orrs	r0, r1
 800053c:	bce0      	pop	{r5, r6, r7}
 800053e:	46ba      	mov	sl, r7
 8000540:	46b1      	mov	r9, r6
 8000542:	46a8      	mov	r8, r5
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	20ff      	movs	r0, #255	; 0xff
 8000548:	2400      	movs	r4, #0
 800054a:	e7f3      	b.n	8000534 <__aeabi_fmul+0x8c>
 800054c:	0c26      	lsrs	r6, r4, #16
 800054e:	0424      	lsls	r4, r4, #16
 8000550:	0c22      	lsrs	r2, r4, #16
 8000552:	4644      	mov	r4, r8
 8000554:	0424      	lsls	r4, r4, #16
 8000556:	0c24      	lsrs	r4, r4, #16
 8000558:	4643      	mov	r3, r8
 800055a:	0027      	movs	r7, r4
 800055c:	0c1b      	lsrs	r3, r3, #16
 800055e:	4357      	muls	r7, r2
 8000560:	4374      	muls	r4, r6
 8000562:	435a      	muls	r2, r3
 8000564:	435e      	muls	r6, r3
 8000566:	1912      	adds	r2, r2, r4
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	189b      	adds	r3, r3, r2
 800056c:	429c      	cmp	r4, r3
 800056e:	d903      	bls.n	8000578 <__aeabi_fmul+0xd0>
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	0252      	lsls	r2, r2, #9
 8000574:	4694      	mov	ip, r2
 8000576:	4466      	add	r6, ip
 8000578:	043f      	lsls	r7, r7, #16
 800057a:	041a      	lsls	r2, r3, #16
 800057c:	0c3f      	lsrs	r7, r7, #16
 800057e:	19d2      	adds	r2, r2, r7
 8000580:	0194      	lsls	r4, r2, #6
 8000582:	1e67      	subs	r7, r4, #1
 8000584:	41bc      	sbcs	r4, r7
 8000586:	0c1b      	lsrs	r3, r3, #16
 8000588:	0e92      	lsrs	r2, r2, #26
 800058a:	199b      	adds	r3, r3, r6
 800058c:	4314      	orrs	r4, r2
 800058e:	019b      	lsls	r3, r3, #6
 8000590:	431c      	orrs	r4, r3
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	d400      	bmi.n	8000598 <__aeabi_fmul+0xf0>
 8000596:	e09b      	b.n	80006d0 <__aeabi_fmul+0x228>
 8000598:	2301      	movs	r3, #1
 800059a:	0862      	lsrs	r2, r4, #1
 800059c:	401c      	ands	r4, r3
 800059e:	4314      	orrs	r4, r2
 80005a0:	0002      	movs	r2, r0
 80005a2:	327f      	adds	r2, #127	; 0x7f
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	dd64      	ble.n	8000672 <__aeabi_fmul+0x1ca>
 80005a8:	0763      	lsls	r3, r4, #29
 80005aa:	d004      	beq.n	80005b6 <__aeabi_fmul+0x10e>
 80005ac:	230f      	movs	r3, #15
 80005ae:	4023      	ands	r3, r4
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fmul+0x10e>
 80005b4:	3404      	adds	r4, #4
 80005b6:	0123      	lsls	r3, r4, #4
 80005b8:	d503      	bpl.n	80005c2 <__aeabi_fmul+0x11a>
 80005ba:	0002      	movs	r2, r0
 80005bc:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <__aeabi_fmul+0x248>)
 80005be:	3280      	adds	r2, #128	; 0x80
 80005c0:	401c      	ands	r4, r3
 80005c2:	2afe      	cmp	r2, #254	; 0xfe
 80005c4:	dcbf      	bgt.n	8000546 <__aeabi_fmul+0x9e>
 80005c6:	01a4      	lsls	r4, r4, #6
 80005c8:	0a64      	lsrs	r4, r4, #9
 80005ca:	b2d0      	uxtb	r0, r2
 80005cc:	e7b2      	b.n	8000534 <__aeabi_fmul+0x8c>
 80005ce:	4643      	mov	r3, r8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d13d      	bne.n	8000650 <__aeabi_fmul+0x1a8>
 80005d4:	464a      	mov	r2, r9
 80005d6:	3301      	adds	r3, #1
 80005d8:	431a      	orrs	r2, r3
 80005da:	4691      	mov	r9, r2
 80005dc:	469c      	mov	ip, r3
 80005de:	e792      	b.n	8000506 <__aeabi_fmul+0x5e>
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d129      	bne.n	8000638 <__aeabi_fmul+0x190>
 80005e4:	2304      	movs	r3, #4
 80005e6:	4699      	mov	r9, r3
 80005e8:	3b03      	subs	r3, #3
 80005ea:	2500      	movs	r5, #0
 80005ec:	469a      	mov	sl, r3
 80005ee:	e774      	b.n	80004da <__aeabi_fmul+0x32>
 80005f0:	2c00      	cmp	r4, #0
 80005f2:	d11b      	bne.n	800062c <__aeabi_fmul+0x184>
 80005f4:	2308      	movs	r3, #8
 80005f6:	4699      	mov	r9, r3
 80005f8:	3b06      	subs	r3, #6
 80005fa:	25ff      	movs	r5, #255	; 0xff
 80005fc:	469a      	mov	sl, r3
 80005fe:	e76c      	b.n	80004da <__aeabi_fmul+0x32>
 8000600:	4643      	mov	r3, r8
 8000602:	35ff      	adds	r5, #255	; 0xff
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10b      	bne.n	8000620 <__aeabi_fmul+0x178>
 8000608:	2302      	movs	r3, #2
 800060a:	464a      	mov	r2, r9
 800060c:	431a      	orrs	r2, r3
 800060e:	4691      	mov	r9, r2
 8000610:	469c      	mov	ip, r3
 8000612:	e778      	b.n	8000506 <__aeabi_fmul+0x5e>
 8000614:	4653      	mov	r3, sl
 8000616:	0031      	movs	r1, r6
 8000618:	2b02      	cmp	r3, #2
 800061a:	d000      	beq.n	800061e <__aeabi_fmul+0x176>
 800061c:	e783      	b.n	8000526 <__aeabi_fmul+0x7e>
 800061e:	e792      	b.n	8000546 <__aeabi_fmul+0x9e>
 8000620:	2303      	movs	r3, #3
 8000622:	464a      	mov	r2, r9
 8000624:	431a      	orrs	r2, r3
 8000626:	4691      	mov	r9, r2
 8000628:	469c      	mov	ip, r3
 800062a:	e76c      	b.n	8000506 <__aeabi_fmul+0x5e>
 800062c:	230c      	movs	r3, #12
 800062e:	4699      	mov	r9, r3
 8000630:	3b09      	subs	r3, #9
 8000632:	25ff      	movs	r5, #255	; 0xff
 8000634:	469a      	mov	sl, r3
 8000636:	e750      	b.n	80004da <__aeabi_fmul+0x32>
 8000638:	0020      	movs	r0, r4
 800063a:	f000 faf3 	bl	8000c24 <__clzsi2>
 800063e:	2576      	movs	r5, #118	; 0x76
 8000640:	1f43      	subs	r3, r0, #5
 8000642:	409c      	lsls	r4, r3
 8000644:	2300      	movs	r3, #0
 8000646:	426d      	negs	r5, r5
 8000648:	4699      	mov	r9, r3
 800064a:	469a      	mov	sl, r3
 800064c:	1a2d      	subs	r5, r5, r0
 800064e:	e744      	b.n	80004da <__aeabi_fmul+0x32>
 8000650:	4640      	mov	r0, r8
 8000652:	f000 fae7 	bl	8000c24 <__clzsi2>
 8000656:	4642      	mov	r2, r8
 8000658:	1f43      	subs	r3, r0, #5
 800065a:	409a      	lsls	r2, r3
 800065c:	2300      	movs	r3, #0
 800065e:	1a2d      	subs	r5, r5, r0
 8000660:	4690      	mov	r8, r2
 8000662:	469c      	mov	ip, r3
 8000664:	3d76      	subs	r5, #118	; 0x76
 8000666:	e74e      	b.n	8000506 <__aeabi_fmul+0x5e>
 8000668:	2480      	movs	r4, #128	; 0x80
 800066a:	2100      	movs	r1, #0
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	03e4      	lsls	r4, r4, #15
 8000670:	e760      	b.n	8000534 <__aeabi_fmul+0x8c>
 8000672:	2301      	movs	r3, #1
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	2b1b      	cmp	r3, #27
 8000678:	dd00      	ble.n	800067c <__aeabi_fmul+0x1d4>
 800067a:	e759      	b.n	8000530 <__aeabi_fmul+0x88>
 800067c:	0022      	movs	r2, r4
 800067e:	309e      	adds	r0, #158	; 0x9e
 8000680:	40da      	lsrs	r2, r3
 8000682:	4084      	lsls	r4, r0
 8000684:	0013      	movs	r3, r2
 8000686:	1e62      	subs	r2, r4, #1
 8000688:	4194      	sbcs	r4, r2
 800068a:	431c      	orrs	r4, r3
 800068c:	0763      	lsls	r3, r4, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fmul+0x1f2>
 8000690:	230f      	movs	r3, #15
 8000692:	4023      	ands	r3, r4
 8000694:	2b04      	cmp	r3, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fmul+0x1f2>
 8000698:	3404      	adds	r4, #4
 800069a:	0163      	lsls	r3, r4, #5
 800069c:	d51a      	bpl.n	80006d4 <__aeabi_fmul+0x22c>
 800069e:	2001      	movs	r0, #1
 80006a0:	2400      	movs	r4, #0
 80006a2:	e747      	b.n	8000534 <__aeabi_fmul+0x8c>
 80006a4:	2080      	movs	r0, #128	; 0x80
 80006a6:	03c0      	lsls	r0, r0, #15
 80006a8:	4204      	tst	r4, r0
 80006aa:	d009      	beq.n	80006c0 <__aeabi_fmul+0x218>
 80006ac:	4643      	mov	r3, r8
 80006ae:	4203      	tst	r3, r0
 80006b0:	d106      	bne.n	80006c0 <__aeabi_fmul+0x218>
 80006b2:	4644      	mov	r4, r8
 80006b4:	4304      	orrs	r4, r0
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0039      	movs	r1, r7
 80006ba:	20ff      	movs	r0, #255	; 0xff
 80006bc:	0a64      	lsrs	r4, r4, #9
 80006be:	e739      	b.n	8000534 <__aeabi_fmul+0x8c>
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	03c0      	lsls	r0, r0, #15
 80006c4:	4304      	orrs	r4, r0
 80006c6:	0264      	lsls	r4, r4, #9
 80006c8:	0031      	movs	r1, r6
 80006ca:	20ff      	movs	r0, #255	; 0xff
 80006cc:	0a64      	lsrs	r4, r4, #9
 80006ce:	e731      	b.n	8000534 <__aeabi_fmul+0x8c>
 80006d0:	0028      	movs	r0, r5
 80006d2:	e765      	b.n	80005a0 <__aeabi_fmul+0xf8>
 80006d4:	01a4      	lsls	r4, r4, #6
 80006d6:	2000      	movs	r0, #0
 80006d8:	0a64      	lsrs	r4, r4, #9
 80006da:	e72b      	b.n	8000534 <__aeabi_fmul+0x8c>
 80006dc:	2080      	movs	r0, #128	; 0x80
 80006de:	03c0      	lsls	r0, r0, #15
 80006e0:	4304      	orrs	r4, r0
 80006e2:	0264      	lsls	r4, r4, #9
 80006e4:	20ff      	movs	r0, #255	; 0xff
 80006e6:	0a64      	lsrs	r4, r4, #9
 80006e8:	e724      	b.n	8000534 <__aeabi_fmul+0x8c>
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	0800596c 	.word	0x0800596c
 80006f0:	f7ffffff 	.word	0xf7ffffff

080006f4 <__aeabi_fsub>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	46ce      	mov	lr, r9
 80006f8:	4647      	mov	r7, r8
 80006fa:	0243      	lsls	r3, r0, #9
 80006fc:	0a5b      	lsrs	r3, r3, #9
 80006fe:	024e      	lsls	r6, r1, #9
 8000700:	00da      	lsls	r2, r3, #3
 8000702:	4694      	mov	ip, r2
 8000704:	0a72      	lsrs	r2, r6, #9
 8000706:	4691      	mov	r9, r2
 8000708:	0045      	lsls	r5, r0, #1
 800070a:	004a      	lsls	r2, r1, #1
 800070c:	b580      	push	{r7, lr}
 800070e:	0e2d      	lsrs	r5, r5, #24
 8000710:	001f      	movs	r7, r3
 8000712:	0fc4      	lsrs	r4, r0, #31
 8000714:	0e12      	lsrs	r2, r2, #24
 8000716:	0fc9      	lsrs	r1, r1, #31
 8000718:	09b6      	lsrs	r6, r6, #6
 800071a:	2aff      	cmp	r2, #255	; 0xff
 800071c:	d05b      	beq.n	80007d6 <__aeabi_fsub+0xe2>
 800071e:	2001      	movs	r0, #1
 8000720:	4041      	eors	r1, r0
 8000722:	428c      	cmp	r4, r1
 8000724:	d039      	beq.n	800079a <__aeabi_fsub+0xa6>
 8000726:	1aa8      	subs	r0, r5, r2
 8000728:	2800      	cmp	r0, #0
 800072a:	dd5a      	ble.n	80007e2 <__aeabi_fsub+0xee>
 800072c:	2a00      	cmp	r2, #0
 800072e:	d06a      	beq.n	8000806 <__aeabi_fsub+0x112>
 8000730:	2dff      	cmp	r5, #255	; 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fsub+0x42>
 8000734:	e0d9      	b.n	80008ea <__aeabi_fsub+0x1f6>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	04d2      	lsls	r2, r2, #19
 800073a:	4316      	orrs	r6, r2
 800073c:	281b      	cmp	r0, #27
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fsub+0x4e>
 8000740:	e0e9      	b.n	8000916 <__aeabi_fsub+0x222>
 8000742:	2001      	movs	r0, #1
 8000744:	4663      	mov	r3, ip
 8000746:	1a18      	subs	r0, r3, r0
 8000748:	0143      	lsls	r3, r0, #5
 800074a:	d400      	bmi.n	800074e <__aeabi_fsub+0x5a>
 800074c:	e0b4      	b.n	80008b8 <__aeabi_fsub+0x1c4>
 800074e:	0180      	lsls	r0, r0, #6
 8000750:	0987      	lsrs	r7, r0, #6
 8000752:	0038      	movs	r0, r7
 8000754:	f000 fa66 	bl	8000c24 <__clzsi2>
 8000758:	3805      	subs	r0, #5
 800075a:	4087      	lsls	r7, r0
 800075c:	4285      	cmp	r5, r0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_fsub+0x6e>
 8000760:	e0cc      	b.n	80008fc <__aeabi_fsub+0x208>
 8000762:	1a2d      	subs	r5, r5, r0
 8000764:	48b5      	ldr	r0, [pc, #724]	; (8000a3c <__aeabi_fsub+0x348>)
 8000766:	4038      	ands	r0, r7
 8000768:	0743      	lsls	r3, r0, #29
 800076a:	d004      	beq.n	8000776 <__aeabi_fsub+0x82>
 800076c:	230f      	movs	r3, #15
 800076e:	4003      	ands	r3, r0
 8000770:	2b04      	cmp	r3, #4
 8000772:	d000      	beq.n	8000776 <__aeabi_fsub+0x82>
 8000774:	3004      	adds	r0, #4
 8000776:	0143      	lsls	r3, r0, #5
 8000778:	d400      	bmi.n	800077c <__aeabi_fsub+0x88>
 800077a:	e0a0      	b.n	80008be <__aeabi_fsub+0x1ca>
 800077c:	1c6a      	adds	r2, r5, #1
 800077e:	2dfe      	cmp	r5, #254	; 0xfe
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x90>
 8000782:	e08d      	b.n	80008a0 <__aeabi_fsub+0x1ac>
 8000784:	0180      	lsls	r0, r0, #6
 8000786:	0a47      	lsrs	r7, r0, #9
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	05d0      	lsls	r0, r2, #23
 800078c:	4338      	orrs	r0, r7
 800078e:	07e4      	lsls	r4, r4, #31
 8000790:	4320      	orrs	r0, r4
 8000792:	bcc0      	pop	{r6, r7}
 8000794:	46b9      	mov	r9, r7
 8000796:	46b0      	mov	r8, r6
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079a:	1aa8      	subs	r0, r5, r2
 800079c:	4680      	mov	r8, r0
 800079e:	2800      	cmp	r0, #0
 80007a0:	dd45      	ble.n	800082e <__aeabi_fsub+0x13a>
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d070      	beq.n	8000888 <__aeabi_fsub+0x194>
 80007a6:	2dff      	cmp	r5, #255	; 0xff
 80007a8:	d100      	bne.n	80007ac <__aeabi_fsub+0xb8>
 80007aa:	e09e      	b.n	80008ea <__aeabi_fsub+0x1f6>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	04db      	lsls	r3, r3, #19
 80007b0:	431e      	orrs	r6, r3
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b1b      	cmp	r3, #27
 80007b6:	dc00      	bgt.n	80007ba <__aeabi_fsub+0xc6>
 80007b8:	e0d2      	b.n	8000960 <__aeabi_fsub+0x26c>
 80007ba:	2001      	movs	r0, #1
 80007bc:	4460      	add	r0, ip
 80007be:	0143      	lsls	r3, r0, #5
 80007c0:	d57a      	bpl.n	80008b8 <__aeabi_fsub+0x1c4>
 80007c2:	3501      	adds	r5, #1
 80007c4:	2dff      	cmp	r5, #255	; 0xff
 80007c6:	d06b      	beq.n	80008a0 <__aeabi_fsub+0x1ac>
 80007c8:	2301      	movs	r3, #1
 80007ca:	4a9d      	ldr	r2, [pc, #628]	; (8000a40 <__aeabi_fsub+0x34c>)
 80007cc:	4003      	ands	r3, r0
 80007ce:	0840      	lsrs	r0, r0, #1
 80007d0:	4010      	ands	r0, r2
 80007d2:	4318      	orrs	r0, r3
 80007d4:	e7c8      	b.n	8000768 <__aeabi_fsub+0x74>
 80007d6:	2e00      	cmp	r6, #0
 80007d8:	d020      	beq.n	800081c <__aeabi_fsub+0x128>
 80007da:	428c      	cmp	r4, r1
 80007dc:	d023      	beq.n	8000826 <__aeabi_fsub+0x132>
 80007de:	0028      	movs	r0, r5
 80007e0:	38ff      	subs	r0, #255	; 0xff
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d039      	beq.n	800085a <__aeabi_fsub+0x166>
 80007e6:	1b57      	subs	r7, r2, r5
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d000      	beq.n	80007ee <__aeabi_fsub+0xfa>
 80007ec:	e09d      	b.n	800092a <__aeabi_fsub+0x236>
 80007ee:	4663      	mov	r3, ip
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x102>
 80007f4:	e0db      	b.n	80009ae <__aeabi_fsub+0x2ba>
 80007f6:	1e7b      	subs	r3, r7, #1
 80007f8:	2f01      	cmp	r7, #1
 80007fa:	d100      	bne.n	80007fe <__aeabi_fsub+0x10a>
 80007fc:	e10d      	b.n	8000a1a <__aeabi_fsub+0x326>
 80007fe:	2fff      	cmp	r7, #255	; 0xff
 8000800:	d071      	beq.n	80008e6 <__aeabi_fsub+0x1f2>
 8000802:	001f      	movs	r7, r3
 8000804:	e098      	b.n	8000938 <__aeabi_fsub+0x244>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x118>
 800080a:	e0a7      	b.n	800095c <__aeabi_fsub+0x268>
 800080c:	1e42      	subs	r2, r0, #1
 800080e:	2801      	cmp	r0, #1
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x120>
 8000812:	e0e6      	b.n	80009e2 <__aeabi_fsub+0x2ee>
 8000814:	28ff      	cmp	r0, #255	; 0xff
 8000816:	d068      	beq.n	80008ea <__aeabi_fsub+0x1f6>
 8000818:	0010      	movs	r0, r2
 800081a:	e78f      	b.n	800073c <__aeabi_fsub+0x48>
 800081c:	2001      	movs	r0, #1
 800081e:	4041      	eors	r1, r0
 8000820:	42a1      	cmp	r1, r4
 8000822:	d000      	beq.n	8000826 <__aeabi_fsub+0x132>
 8000824:	e77f      	b.n	8000726 <__aeabi_fsub+0x32>
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	4240      	negs	r0, r0
 800082a:	4680      	mov	r8, r0
 800082c:	44a8      	add	r8, r5
 800082e:	4640      	mov	r0, r8
 8000830:	2800      	cmp	r0, #0
 8000832:	d038      	beq.n	80008a6 <__aeabi_fsub+0x1b2>
 8000834:	1b51      	subs	r1, r2, r5
 8000836:	2d00      	cmp	r5, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fsub+0x148>
 800083a:	e0ae      	b.n	800099a <__aeabi_fsub+0x2a6>
 800083c:	2aff      	cmp	r2, #255	; 0xff
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x14e>
 8000840:	e0df      	b.n	8000a02 <__aeabi_fsub+0x30e>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	4660      	mov	r0, ip
 8000846:	04db      	lsls	r3, r3, #19
 8000848:	4318      	orrs	r0, r3
 800084a:	4684      	mov	ip, r0
 800084c:	291b      	cmp	r1, #27
 800084e:	dc00      	bgt.n	8000852 <__aeabi_fsub+0x15e>
 8000850:	e0d9      	b.n	8000a06 <__aeabi_fsub+0x312>
 8000852:	2001      	movs	r0, #1
 8000854:	0015      	movs	r5, r2
 8000856:	1980      	adds	r0, r0, r6
 8000858:	e7b1      	b.n	80007be <__aeabi_fsub+0xca>
 800085a:	20fe      	movs	r0, #254	; 0xfe
 800085c:	1c6a      	adds	r2, r5, #1
 800085e:	4210      	tst	r0, r2
 8000860:	d171      	bne.n	8000946 <__aeabi_fsub+0x252>
 8000862:	2d00      	cmp	r5, #0
 8000864:	d000      	beq.n	8000868 <__aeabi_fsub+0x174>
 8000866:	e0a6      	b.n	80009b6 <__aeabi_fsub+0x2c2>
 8000868:	4663      	mov	r3, ip
 800086a:	2b00      	cmp	r3, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x17c>
 800086e:	e0d9      	b.n	8000a24 <__aeabi_fsub+0x330>
 8000870:	2200      	movs	r2, #0
 8000872:	2e00      	cmp	r6, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fsub+0x184>
 8000876:	e788      	b.n	800078a <__aeabi_fsub+0x96>
 8000878:	1b98      	subs	r0, r3, r6
 800087a:	0143      	lsls	r3, r0, #5
 800087c:	d400      	bmi.n	8000880 <__aeabi_fsub+0x18c>
 800087e:	e0e1      	b.n	8000a44 <__aeabi_fsub+0x350>
 8000880:	4663      	mov	r3, ip
 8000882:	000c      	movs	r4, r1
 8000884:	1af0      	subs	r0, r6, r3
 8000886:	e76f      	b.n	8000768 <__aeabi_fsub+0x74>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x19a>
 800088c:	e0b7      	b.n	80009fe <__aeabi_fsub+0x30a>
 800088e:	0002      	movs	r2, r0
 8000890:	3a01      	subs	r2, #1
 8000892:	2801      	cmp	r0, #1
 8000894:	d100      	bne.n	8000898 <__aeabi_fsub+0x1a4>
 8000896:	e09c      	b.n	80009d2 <__aeabi_fsub+0x2de>
 8000898:	28ff      	cmp	r0, #255	; 0xff
 800089a:	d026      	beq.n	80008ea <__aeabi_fsub+0x1f6>
 800089c:	4690      	mov	r8, r2
 800089e:	e788      	b.n	80007b2 <__aeabi_fsub+0xbe>
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	2700      	movs	r7, #0
 80008a4:	e771      	b.n	800078a <__aeabi_fsub+0x96>
 80008a6:	20fe      	movs	r0, #254	; 0xfe
 80008a8:	1c6a      	adds	r2, r5, #1
 80008aa:	4210      	tst	r0, r2
 80008ac:	d064      	beq.n	8000978 <__aeabi_fsub+0x284>
 80008ae:	2aff      	cmp	r2, #255	; 0xff
 80008b0:	d0f6      	beq.n	80008a0 <__aeabi_fsub+0x1ac>
 80008b2:	0015      	movs	r5, r2
 80008b4:	4466      	add	r6, ip
 80008b6:	0870      	lsrs	r0, r6, #1
 80008b8:	0743      	lsls	r3, r0, #29
 80008ba:	d000      	beq.n	80008be <__aeabi_fsub+0x1ca>
 80008bc:	e756      	b.n	800076c <__aeabi_fsub+0x78>
 80008be:	08c3      	lsrs	r3, r0, #3
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d012      	beq.n	80008ea <__aeabi_fsub+0x1f6>
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5f      	lsrs	r7, r3, #9
 80008c8:	b2ea      	uxtb	r2, r5
 80008ca:	e75e      	b.n	800078a <__aeabi_fsub+0x96>
 80008cc:	4662      	mov	r2, ip
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fsub+0x1e0>
 80008d2:	e096      	b.n	8000a02 <__aeabi_fsub+0x30e>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d008      	beq.n	80008ea <__aeabi_fsub+0x1f6>
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	03d2      	lsls	r2, r2, #15
 80008dc:	4213      	tst	r3, r2
 80008de:	d004      	beq.n	80008ea <__aeabi_fsub+0x1f6>
 80008e0:	4648      	mov	r0, r9
 80008e2:	4210      	tst	r0, r2
 80008e4:	d101      	bne.n	80008ea <__aeabi_fsub+0x1f6>
 80008e6:	000c      	movs	r4, r1
 80008e8:	464b      	mov	r3, r9
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0d8      	beq.n	80008a0 <__aeabi_fsub+0x1ac>
 80008ee:	2780      	movs	r7, #128	; 0x80
 80008f0:	03ff      	lsls	r7, r7, #15
 80008f2:	431f      	orrs	r7, r3
 80008f4:	027f      	lsls	r7, r7, #9
 80008f6:	22ff      	movs	r2, #255	; 0xff
 80008f8:	0a7f      	lsrs	r7, r7, #9
 80008fa:	e746      	b.n	800078a <__aeabi_fsub+0x96>
 80008fc:	2320      	movs	r3, #32
 80008fe:	003a      	movs	r2, r7
 8000900:	1b45      	subs	r5, r0, r5
 8000902:	0038      	movs	r0, r7
 8000904:	3501      	adds	r5, #1
 8000906:	40ea      	lsrs	r2, r5
 8000908:	1b5d      	subs	r5, r3, r5
 800090a:	40a8      	lsls	r0, r5
 800090c:	1e43      	subs	r3, r0, #1
 800090e:	4198      	sbcs	r0, r3
 8000910:	2500      	movs	r5, #0
 8000912:	4310      	orrs	r0, r2
 8000914:	e728      	b.n	8000768 <__aeabi_fsub+0x74>
 8000916:	2320      	movs	r3, #32
 8000918:	1a1b      	subs	r3, r3, r0
 800091a:	0032      	movs	r2, r6
 800091c:	409e      	lsls	r6, r3
 800091e:	40c2      	lsrs	r2, r0
 8000920:	0030      	movs	r0, r6
 8000922:	1e43      	subs	r3, r0, #1
 8000924:	4198      	sbcs	r0, r3
 8000926:	4310      	orrs	r0, r2
 8000928:	e70c      	b.n	8000744 <__aeabi_fsub+0x50>
 800092a:	2aff      	cmp	r2, #255	; 0xff
 800092c:	d0db      	beq.n	80008e6 <__aeabi_fsub+0x1f2>
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	4660      	mov	r0, ip
 8000932:	04db      	lsls	r3, r3, #19
 8000934:	4318      	orrs	r0, r3
 8000936:	4684      	mov	ip, r0
 8000938:	2f1b      	cmp	r7, #27
 800093a:	dd56      	ble.n	80009ea <__aeabi_fsub+0x2f6>
 800093c:	2001      	movs	r0, #1
 800093e:	000c      	movs	r4, r1
 8000940:	0015      	movs	r5, r2
 8000942:	1a30      	subs	r0, r6, r0
 8000944:	e700      	b.n	8000748 <__aeabi_fsub+0x54>
 8000946:	4663      	mov	r3, ip
 8000948:	1b9f      	subs	r7, r3, r6
 800094a:	017b      	lsls	r3, r7, #5
 800094c:	d43d      	bmi.n	80009ca <__aeabi_fsub+0x2d6>
 800094e:	2f00      	cmp	r7, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_fsub+0x260>
 8000952:	e6fe      	b.n	8000752 <__aeabi_fsub+0x5e>
 8000954:	2400      	movs	r4, #0
 8000956:	2200      	movs	r2, #0
 8000958:	2700      	movs	r7, #0
 800095a:	e716      	b.n	800078a <__aeabi_fsub+0x96>
 800095c:	0005      	movs	r5, r0
 800095e:	e7af      	b.n	80008c0 <__aeabi_fsub+0x1cc>
 8000960:	0032      	movs	r2, r6
 8000962:	4643      	mov	r3, r8
 8000964:	4641      	mov	r1, r8
 8000966:	40da      	lsrs	r2, r3
 8000968:	2320      	movs	r3, #32
 800096a:	1a5b      	subs	r3, r3, r1
 800096c:	409e      	lsls	r6, r3
 800096e:	0030      	movs	r0, r6
 8000970:	1e43      	subs	r3, r0, #1
 8000972:	4198      	sbcs	r0, r3
 8000974:	4310      	orrs	r0, r2
 8000976:	e721      	b.n	80007bc <__aeabi_fsub+0xc8>
 8000978:	2d00      	cmp	r5, #0
 800097a:	d1a7      	bne.n	80008cc <__aeabi_fsub+0x1d8>
 800097c:	4663      	mov	r3, ip
 800097e:	2b00      	cmp	r3, #0
 8000980:	d059      	beq.n	8000a36 <__aeabi_fsub+0x342>
 8000982:	2200      	movs	r2, #0
 8000984:	2e00      	cmp	r6, #0
 8000986:	d100      	bne.n	800098a <__aeabi_fsub+0x296>
 8000988:	e6ff      	b.n	800078a <__aeabi_fsub+0x96>
 800098a:	0030      	movs	r0, r6
 800098c:	4460      	add	r0, ip
 800098e:	0143      	lsls	r3, r0, #5
 8000990:	d592      	bpl.n	80008b8 <__aeabi_fsub+0x1c4>
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <__aeabi_fsub+0x348>)
 8000994:	3501      	adds	r5, #1
 8000996:	4018      	ands	r0, r3
 8000998:	e78e      	b.n	80008b8 <__aeabi_fsub+0x1c4>
 800099a:	4663      	mov	r3, ip
 800099c:	2b00      	cmp	r3, #0
 800099e:	d047      	beq.n	8000a30 <__aeabi_fsub+0x33c>
 80009a0:	1e4b      	subs	r3, r1, #1
 80009a2:	2901      	cmp	r1, #1
 80009a4:	d015      	beq.n	80009d2 <__aeabi_fsub+0x2de>
 80009a6:	29ff      	cmp	r1, #255	; 0xff
 80009a8:	d02b      	beq.n	8000a02 <__aeabi_fsub+0x30e>
 80009aa:	0019      	movs	r1, r3
 80009ac:	e74e      	b.n	800084c <__aeabi_fsub+0x158>
 80009ae:	000c      	movs	r4, r1
 80009b0:	464b      	mov	r3, r9
 80009b2:	003d      	movs	r5, r7
 80009b4:	e784      	b.n	80008c0 <__aeabi_fsub+0x1cc>
 80009b6:	4662      	mov	r2, ip
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d18b      	bne.n	80008d4 <__aeabi_fsub+0x1e0>
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d192      	bne.n	80008e6 <__aeabi_fsub+0x1f2>
 80009c0:	2780      	movs	r7, #128	; 0x80
 80009c2:	2400      	movs	r4, #0
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	03ff      	lsls	r7, r7, #15
 80009c8:	e6df      	b.n	800078a <__aeabi_fsub+0x96>
 80009ca:	4663      	mov	r3, ip
 80009cc:	000c      	movs	r4, r1
 80009ce:	1af7      	subs	r7, r6, r3
 80009d0:	e6bf      	b.n	8000752 <__aeabi_fsub+0x5e>
 80009d2:	0030      	movs	r0, r6
 80009d4:	4460      	add	r0, ip
 80009d6:	2501      	movs	r5, #1
 80009d8:	0143      	lsls	r3, r0, #5
 80009da:	d400      	bmi.n	80009de <__aeabi_fsub+0x2ea>
 80009dc:	e76c      	b.n	80008b8 <__aeabi_fsub+0x1c4>
 80009de:	2502      	movs	r5, #2
 80009e0:	e6f2      	b.n	80007c8 <__aeabi_fsub+0xd4>
 80009e2:	4663      	mov	r3, ip
 80009e4:	2501      	movs	r5, #1
 80009e6:	1b98      	subs	r0, r3, r6
 80009e8:	e6ae      	b.n	8000748 <__aeabi_fsub+0x54>
 80009ea:	2320      	movs	r3, #32
 80009ec:	4664      	mov	r4, ip
 80009ee:	4660      	mov	r0, ip
 80009f0:	40fc      	lsrs	r4, r7
 80009f2:	1bdf      	subs	r7, r3, r7
 80009f4:	40b8      	lsls	r0, r7
 80009f6:	1e43      	subs	r3, r0, #1
 80009f8:	4198      	sbcs	r0, r3
 80009fa:	4320      	orrs	r0, r4
 80009fc:	e79f      	b.n	800093e <__aeabi_fsub+0x24a>
 80009fe:	0005      	movs	r5, r0
 8000a00:	e75e      	b.n	80008c0 <__aeabi_fsub+0x1cc>
 8000a02:	464b      	mov	r3, r9
 8000a04:	e771      	b.n	80008ea <__aeabi_fsub+0x1f6>
 8000a06:	2320      	movs	r3, #32
 8000a08:	4665      	mov	r5, ip
 8000a0a:	4660      	mov	r0, ip
 8000a0c:	40cd      	lsrs	r5, r1
 8000a0e:	1a59      	subs	r1, r3, r1
 8000a10:	4088      	lsls	r0, r1
 8000a12:	1e43      	subs	r3, r0, #1
 8000a14:	4198      	sbcs	r0, r3
 8000a16:	4328      	orrs	r0, r5
 8000a18:	e71c      	b.n	8000854 <__aeabi_fsub+0x160>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	2501      	movs	r5, #1
 8000a20:	1af0      	subs	r0, r6, r3
 8000a22:	e691      	b.n	8000748 <__aeabi_fsub+0x54>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d095      	beq.n	8000954 <__aeabi_fsub+0x260>
 8000a28:	000c      	movs	r4, r1
 8000a2a:	464f      	mov	r7, r9
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e6ac      	b.n	800078a <__aeabi_fsub+0x96>
 8000a30:	464b      	mov	r3, r9
 8000a32:	000d      	movs	r5, r1
 8000a34:	e744      	b.n	80008c0 <__aeabi_fsub+0x1cc>
 8000a36:	464f      	mov	r7, r9
 8000a38:	2200      	movs	r2, #0
 8000a3a:	e6a6      	b.n	800078a <__aeabi_fsub+0x96>
 8000a3c:	fbffffff 	.word	0xfbffffff
 8000a40:	7dffffff 	.word	0x7dffffff
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fsub+0x356>
 8000a48:	e736      	b.n	80008b8 <__aeabi_fsub+0x1c4>
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	2700      	movs	r7, #0
 8000a4e:	e69c      	b.n	800078a <__aeabi_fsub+0x96>

08000a50 <__aeabi_f2iz>:
 8000a50:	0241      	lsls	r1, r0, #9
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	0fc3      	lsrs	r3, r0, #31
 8000a56:	0a49      	lsrs	r1, r1, #9
 8000a58:	2000      	movs	r0, #0
 8000a5a:	0e12      	lsrs	r2, r2, #24
 8000a5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a5e:	dd03      	ble.n	8000a68 <__aeabi_f2iz+0x18>
 8000a60:	2a9d      	cmp	r2, #157	; 0x9d
 8000a62:	dd02      	ble.n	8000a6a <__aeabi_f2iz+0x1a>
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <__aeabi_f2iz+0x3c>)
 8000a66:	1898      	adds	r0, r3, r2
 8000a68:	4770      	bx	lr
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	0400      	lsls	r0, r0, #16
 8000a6e:	4301      	orrs	r1, r0
 8000a70:	2a95      	cmp	r2, #149	; 0x95
 8000a72:	dc07      	bgt.n	8000a84 <__aeabi_f2iz+0x34>
 8000a74:	2096      	movs	r0, #150	; 0x96
 8000a76:	1a82      	subs	r2, r0, r2
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	4248      	negs	r0, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f3      	bne.n	8000a68 <__aeabi_f2iz+0x18>
 8000a80:	0008      	movs	r0, r1
 8000a82:	e7f1      	b.n	8000a68 <__aeabi_f2iz+0x18>
 8000a84:	3a96      	subs	r2, #150	; 0x96
 8000a86:	4091      	lsls	r1, r2
 8000a88:	e7f7      	b.n	8000a7a <__aeabi_f2iz+0x2a>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	7fffffff 	.word	0x7fffffff

08000a90 <__aeabi_i2f>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d013      	beq.n	8000abe <__aeabi_i2f+0x2e>
 8000a96:	17c3      	asrs	r3, r0, #31
 8000a98:	18c6      	adds	r6, r0, r3
 8000a9a:	405e      	eors	r6, r3
 8000a9c:	0fc4      	lsrs	r4, r0, #31
 8000a9e:	0030      	movs	r0, r6
 8000aa0:	f000 f8c0 	bl	8000c24 <__clzsi2>
 8000aa4:	239e      	movs	r3, #158	; 0x9e
 8000aa6:	0005      	movs	r5, r0
 8000aa8:	1a1b      	subs	r3, r3, r0
 8000aaa:	2b96      	cmp	r3, #150	; 0x96
 8000aac:	dc0f      	bgt.n	8000ace <__aeabi_i2f+0x3e>
 8000aae:	2808      	cmp	r0, #8
 8000ab0:	dd01      	ble.n	8000ab6 <__aeabi_i2f+0x26>
 8000ab2:	3d08      	subs	r5, #8
 8000ab4:	40ae      	lsls	r6, r5
 8000ab6:	0276      	lsls	r6, r6, #9
 8000ab8:	0a76      	lsrs	r6, r6, #9
 8000aba:	b2d8      	uxtb	r0, r3
 8000abc:	e002      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000abe:	2400      	movs	r4, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	05c0      	lsls	r0, r0, #23
 8000ac6:	4330      	orrs	r0, r6
 8000ac8:	07e4      	lsls	r4, r4, #31
 8000aca:	4320      	orrs	r0, r4
 8000acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ace:	2b99      	cmp	r3, #153	; 0x99
 8000ad0:	dd0c      	ble.n	8000aec <__aeabi_i2f+0x5c>
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	0031      	movs	r1, r6
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	40d1      	lsrs	r1, r2
 8000ada:	000a      	movs	r2, r1
 8000adc:	0001      	movs	r1, r0
 8000ade:	0030      	movs	r0, r6
 8000ae0:	311b      	adds	r1, #27
 8000ae2:	4088      	lsls	r0, r1
 8000ae4:	1e41      	subs	r1, r0, #1
 8000ae6:	4188      	sbcs	r0, r1
 8000ae8:	4302      	orrs	r2, r0
 8000aea:	0016      	movs	r6, r2
 8000aec:	2d05      	cmp	r5, #5
 8000aee:	dc12      	bgt.n	8000b16 <__aeabi_i2f+0x86>
 8000af0:	0031      	movs	r1, r6
 8000af2:	4f0d      	ldr	r7, [pc, #52]	; (8000b28 <__aeabi_i2f+0x98>)
 8000af4:	4039      	ands	r1, r7
 8000af6:	0772      	lsls	r2, r6, #29
 8000af8:	d009      	beq.n	8000b0e <__aeabi_i2f+0x7e>
 8000afa:	200f      	movs	r0, #15
 8000afc:	4030      	ands	r0, r6
 8000afe:	2804      	cmp	r0, #4
 8000b00:	d005      	beq.n	8000b0e <__aeabi_i2f+0x7e>
 8000b02:	3104      	adds	r1, #4
 8000b04:	014a      	lsls	r2, r1, #5
 8000b06:	d502      	bpl.n	8000b0e <__aeabi_i2f+0x7e>
 8000b08:	239f      	movs	r3, #159	; 0x9f
 8000b0a:	4039      	ands	r1, r7
 8000b0c:	1b5b      	subs	r3, r3, r5
 8000b0e:	0189      	lsls	r1, r1, #6
 8000b10:	0a4e      	lsrs	r6, r1, #9
 8000b12:	b2d8      	uxtb	r0, r3
 8000b14:	e7d6      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000b16:	1f6a      	subs	r2, r5, #5
 8000b18:	4096      	lsls	r6, r2
 8000b1a:	0031      	movs	r1, r6
 8000b1c:	4f02      	ldr	r7, [pc, #8]	; (8000b28 <__aeabi_i2f+0x98>)
 8000b1e:	4039      	ands	r1, r7
 8000b20:	0772      	lsls	r2, r6, #29
 8000b22:	d0f4      	beq.n	8000b0e <__aeabi_i2f+0x7e>
 8000b24:	e7e9      	b.n	8000afa <__aeabi_i2f+0x6a>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	fbffffff 	.word	0xfbffffff

08000b2c <__aeabi_ui2f>:
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	1e05      	subs	r5, r0, #0
 8000b30:	d00e      	beq.n	8000b50 <__aeabi_ui2f+0x24>
 8000b32:	f000 f877 	bl	8000c24 <__clzsi2>
 8000b36:	239e      	movs	r3, #158	; 0x9e
 8000b38:	0004      	movs	r4, r0
 8000b3a:	1a1b      	subs	r3, r3, r0
 8000b3c:	2b96      	cmp	r3, #150	; 0x96
 8000b3e:	dc0c      	bgt.n	8000b5a <__aeabi_ui2f+0x2e>
 8000b40:	2808      	cmp	r0, #8
 8000b42:	dd01      	ble.n	8000b48 <__aeabi_ui2f+0x1c>
 8000b44:	3c08      	subs	r4, #8
 8000b46:	40a5      	lsls	r5, r4
 8000b48:	026d      	lsls	r5, r5, #9
 8000b4a:	0a6d      	lsrs	r5, r5, #9
 8000b4c:	b2d8      	uxtb	r0, r3
 8000b4e:	e001      	b.n	8000b54 <__aeabi_ui2f+0x28>
 8000b50:	2000      	movs	r0, #0
 8000b52:	2500      	movs	r5, #0
 8000b54:	05c0      	lsls	r0, r0, #23
 8000b56:	4328      	orrs	r0, r5
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	2b99      	cmp	r3, #153	; 0x99
 8000b5c:	dd09      	ble.n	8000b72 <__aeabi_ui2f+0x46>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	0029      	movs	r1, r5
 8000b62:	321b      	adds	r2, #27
 8000b64:	4091      	lsls	r1, r2
 8000b66:	1e4a      	subs	r2, r1, #1
 8000b68:	4191      	sbcs	r1, r2
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	1a12      	subs	r2, r2, r0
 8000b6e:	40d5      	lsrs	r5, r2
 8000b70:	430d      	orrs	r5, r1
 8000b72:	2c05      	cmp	r4, #5
 8000b74:	dc12      	bgt.n	8000b9c <__aeabi_ui2f+0x70>
 8000b76:	0029      	movs	r1, r5
 8000b78:	4e0c      	ldr	r6, [pc, #48]	; (8000bac <__aeabi_ui2f+0x80>)
 8000b7a:	4031      	ands	r1, r6
 8000b7c:	076a      	lsls	r2, r5, #29
 8000b7e:	d009      	beq.n	8000b94 <__aeabi_ui2f+0x68>
 8000b80:	200f      	movs	r0, #15
 8000b82:	4028      	ands	r0, r5
 8000b84:	2804      	cmp	r0, #4
 8000b86:	d005      	beq.n	8000b94 <__aeabi_ui2f+0x68>
 8000b88:	3104      	adds	r1, #4
 8000b8a:	014a      	lsls	r2, r1, #5
 8000b8c:	d502      	bpl.n	8000b94 <__aeabi_ui2f+0x68>
 8000b8e:	239f      	movs	r3, #159	; 0x9f
 8000b90:	4031      	ands	r1, r6
 8000b92:	1b1b      	subs	r3, r3, r4
 8000b94:	0189      	lsls	r1, r1, #6
 8000b96:	0a4d      	lsrs	r5, r1, #9
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	e7db      	b.n	8000b54 <__aeabi_ui2f+0x28>
 8000b9c:	1f62      	subs	r2, r4, #5
 8000b9e:	4095      	lsls	r5, r2
 8000ba0:	0029      	movs	r1, r5
 8000ba2:	4e02      	ldr	r6, [pc, #8]	; (8000bac <__aeabi_ui2f+0x80>)
 8000ba4:	4031      	ands	r1, r6
 8000ba6:	076a      	lsls	r2, r5, #29
 8000ba8:	d0f4      	beq.n	8000b94 <__aeabi_ui2f+0x68>
 8000baa:	e7e9      	b.n	8000b80 <__aeabi_ui2f+0x54>
 8000bac:	fbffffff 	.word	0xfbffffff

08000bb0 <__aeabi_cfrcmple>:
 8000bb0:	4684      	mov	ip, r0
 8000bb2:	0008      	movs	r0, r1
 8000bb4:	4661      	mov	r1, ip
 8000bb6:	e7ff      	b.n	8000bb8 <__aeabi_cfcmpeq>

08000bb8 <__aeabi_cfcmpeq>:
 8000bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000bba:	f000 f8c9 	bl	8000d50 <__lesf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d401      	bmi.n	8000bc6 <__aeabi_cfcmpeq+0xe>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	42c8      	cmn	r0, r1
 8000bc6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000bc8 <__aeabi_fcmpeq>:
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	f000 f855 	bl	8000c78 <__eqsf2>
 8000bce:	4240      	negs	r0, r0
 8000bd0:	3001      	adds	r0, #1
 8000bd2:	bd10      	pop	{r4, pc}

08000bd4 <__aeabi_fcmplt>:
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	f000 f8bb 	bl	8000d50 <__lesf2>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	db01      	blt.n	8000be2 <__aeabi_fcmplt+0xe>
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	2001      	movs	r0, #1
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fcmple>:
 8000be8:	b510      	push	{r4, lr}
 8000bea:	f000 f8b1 	bl	8000d50 <__lesf2>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	dd01      	ble.n	8000bf6 <__aeabi_fcmple+0xe>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)

08000bfc <__aeabi_fcmpgt>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	f000 f861 	bl	8000cc4 <__gesf2>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	dc01      	bgt.n	8000c0a <__aeabi_fcmpgt+0xe>
 8000c06:	2000      	movs	r0, #0
 8000c08:	bd10      	pop	{r4, pc}
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fcmpge>:
 8000c10:	b510      	push	{r4, lr}
 8000c12:	f000 f857 	bl	8000cc4 <__gesf2>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	da01      	bge.n	8000c1e <__aeabi_fcmpge+0xe>
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	2001      	movs	r0, #1
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)

08000c24 <__clzsi2>:
 8000c24:	211c      	movs	r1, #28
 8000c26:	2301      	movs	r3, #1
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	4298      	cmp	r0, r3
 8000c2c:	d301      	bcc.n	8000c32 <__clzsi2+0xe>
 8000c2e:	0c00      	lsrs	r0, r0, #16
 8000c30:	3910      	subs	r1, #16
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	4298      	cmp	r0, r3
 8000c36:	d301      	bcc.n	8000c3c <__clzsi2+0x18>
 8000c38:	0a00      	lsrs	r0, r0, #8
 8000c3a:	3908      	subs	r1, #8
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d301      	bcc.n	8000c46 <__clzsi2+0x22>
 8000c42:	0900      	lsrs	r0, r0, #4
 8000c44:	3904      	subs	r1, #4
 8000c46:	a202      	add	r2, pc, #8	; (adr r2, 8000c50 <__clzsi2+0x2c>)
 8000c48:	5c10      	ldrb	r0, [r2, r0]
 8000c4a:	1840      	adds	r0, r0, r1
 8000c4c:	4770      	bx	lr
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	02020304 	.word	0x02020304
 8000c54:	01010101 	.word	0x01010101
	...

08000c60 <__clzdi2>:
 8000c60:	b510      	push	{r4, lr}
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d103      	bne.n	8000c6e <__clzdi2+0xe>
 8000c66:	f7ff ffdd 	bl	8000c24 <__clzsi2>
 8000c6a:	3020      	adds	r0, #32
 8000c6c:	e002      	b.n	8000c74 <__clzdi2+0x14>
 8000c6e:	0008      	movs	r0, r1
 8000c70:	f7ff ffd8 	bl	8000c24 <__clzsi2>
 8000c74:	bd10      	pop	{r4, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)

08000c78 <__eqsf2>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	0042      	lsls	r2, r0, #1
 8000c7c:	0245      	lsls	r5, r0, #9
 8000c7e:	024e      	lsls	r6, r1, #9
 8000c80:	004c      	lsls	r4, r1, #1
 8000c82:	0fc3      	lsrs	r3, r0, #31
 8000c84:	0a6d      	lsrs	r5, r5, #9
 8000c86:	2001      	movs	r0, #1
 8000c88:	0e12      	lsrs	r2, r2, #24
 8000c8a:	0a76      	lsrs	r6, r6, #9
 8000c8c:	0e24      	lsrs	r4, r4, #24
 8000c8e:	0fc9      	lsrs	r1, r1, #31
 8000c90:	2aff      	cmp	r2, #255	; 0xff
 8000c92:	d006      	beq.n	8000ca2 <__eqsf2+0x2a>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d003      	beq.n	8000ca0 <__eqsf2+0x28>
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d101      	bne.n	8000ca0 <__eqsf2+0x28>
 8000c9c:	42b5      	cmp	r5, r6
 8000c9e:	d006      	beq.n	8000cae <__eqsf2+0x36>
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	d1fc      	bne.n	8000ca0 <__eqsf2+0x28>
 8000ca6:	2cff      	cmp	r4, #255	; 0xff
 8000ca8:	d1fa      	bne.n	8000ca0 <__eqsf2+0x28>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d1f8      	bne.n	8000ca0 <__eqsf2+0x28>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d006      	beq.n	8000cc0 <__eqsf2+0x48>
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d1f3      	bne.n	8000ca0 <__eqsf2+0x28>
 8000cb8:	0028      	movs	r0, r5
 8000cba:	1e43      	subs	r3, r0, #1
 8000cbc:	4198      	sbcs	r0, r3
 8000cbe:	e7ef      	b.n	8000ca0 <__eqsf2+0x28>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ed      	b.n	8000ca0 <__eqsf2+0x28>

08000cc4 <__gesf2>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	0042      	lsls	r2, r0, #1
 8000cc8:	0245      	lsls	r5, r0, #9
 8000cca:	024e      	lsls	r6, r1, #9
 8000ccc:	004c      	lsls	r4, r1, #1
 8000cce:	0fc3      	lsrs	r3, r0, #31
 8000cd0:	0a6d      	lsrs	r5, r5, #9
 8000cd2:	0e12      	lsrs	r2, r2, #24
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc8      	lsrs	r0, r1, #31
 8000cda:	2aff      	cmp	r2, #255	; 0xff
 8000cdc:	d01b      	beq.n	8000d16 <__gesf2+0x52>
 8000cde:	2cff      	cmp	r4, #255	; 0xff
 8000ce0:	d00e      	beq.n	8000d00 <__gesf2+0x3c>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d11b      	bne.n	8000d1e <__gesf2+0x5a>
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	d101      	bne.n	8000cee <__gesf2+0x2a>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d01c      	beq.n	8000d28 <__gesf2+0x64>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d00c      	beq.n	8000d0c <__gesf2+0x48>
 8000cf2:	4283      	cmp	r3, r0
 8000cf4:	d01c      	beq.n	8000d30 <__gesf2+0x6c>
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	1e58      	subs	r0, r3, #1
 8000cfa:	4008      	ands	r0, r1
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d122      	bne.n	8000d4a <__gesf2+0x86>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d1f4      	bne.n	8000cf2 <__gesf2+0x2e>
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d1f2      	bne.n	8000cf2 <__gesf2+0x2e>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d1f6      	bne.n	8000cfe <__gesf2+0x3a>
 8000d10:	2001      	movs	r0, #1
 8000d12:	4240      	negs	r0, r0
 8000d14:	e7f3      	b.n	8000cfe <__gesf2+0x3a>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d117      	bne.n	8000d4a <__gesf2+0x86>
 8000d1a:	2cff      	cmp	r4, #255	; 0xff
 8000d1c:	d0f0      	beq.n	8000d00 <__gesf2+0x3c>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d1e7      	bne.n	8000cf2 <__gesf2+0x2e>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d1e5      	bne.n	8000cf2 <__gesf2+0x2e>
 8000d26:	e7e6      	b.n	8000cf6 <__gesf2+0x32>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e7      	beq.n	8000cfe <__gesf2+0x3a>
 8000d2e:	e7e2      	b.n	8000cf6 <__gesf2+0x32>
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	dc05      	bgt.n	8000d40 <__gesf2+0x7c>
 8000d34:	dbea      	blt.n	8000d0c <__gesf2+0x48>
 8000d36:	42b5      	cmp	r5, r6
 8000d38:	d802      	bhi.n	8000d40 <__gesf2+0x7c>
 8000d3a:	d3e7      	bcc.n	8000d0c <__gesf2+0x48>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7de      	b.n	8000cfe <__gesf2+0x3a>
 8000d40:	4243      	negs	r3, r0
 8000d42:	4158      	adcs	r0, r3
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7d9      	b.n	8000cfe <__gesf2+0x3a>
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	4240      	negs	r0, r0
 8000d4e:	e7d6      	b.n	8000cfe <__gesf2+0x3a>

08000d50 <__lesf2>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	0042      	lsls	r2, r0, #1
 8000d54:	0245      	lsls	r5, r0, #9
 8000d56:	024e      	lsls	r6, r1, #9
 8000d58:	004c      	lsls	r4, r1, #1
 8000d5a:	0fc3      	lsrs	r3, r0, #31
 8000d5c:	0a6d      	lsrs	r5, r5, #9
 8000d5e:	0e12      	lsrs	r2, r2, #24
 8000d60:	0a76      	lsrs	r6, r6, #9
 8000d62:	0e24      	lsrs	r4, r4, #24
 8000d64:	0fc8      	lsrs	r0, r1, #31
 8000d66:	2aff      	cmp	r2, #255	; 0xff
 8000d68:	d00b      	beq.n	8000d82 <__lesf2+0x32>
 8000d6a:	2cff      	cmp	r4, #255	; 0xff
 8000d6c:	d00d      	beq.n	8000d8a <__lesf2+0x3a>
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d11f      	bne.n	8000db2 <__lesf2+0x62>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	d116      	bne.n	8000da4 <__lesf2+0x54>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d114      	bne.n	8000da4 <__lesf2+0x54>
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d010      	beq.n	8000da2 <__lesf2+0x52>
 8000d80:	e009      	b.n	8000d96 <__lesf2+0x46>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d10c      	bne.n	8000da0 <__lesf2+0x50>
 8000d86:	2cff      	cmp	r4, #255	; 0xff
 8000d88:	d113      	bne.n	8000db2 <__lesf2+0x62>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d108      	bne.n	8000da0 <__lesf2+0x50>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d008      	beq.n	8000da4 <__lesf2+0x54>
 8000d92:	4283      	cmp	r3, r0
 8000d94:	d012      	beq.n	8000dbc <__lesf2+0x6c>
 8000d96:	2102      	movs	r1, #2
 8000d98:	1e58      	subs	r0, r3, #1
 8000d9a:	4008      	ands	r0, r1
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	e000      	b.n	8000da2 <__lesf2+0x52>
 8000da0:	2002      	movs	r0, #2
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	2d00      	cmp	r5, #0
 8000da6:	d1f4      	bne.n	8000d92 <__lesf2+0x42>
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d1fa      	bne.n	8000da2 <__lesf2+0x52>
 8000dac:	2001      	movs	r0, #1
 8000dae:	4240      	negs	r0, r0
 8000db0:	e7f7      	b.n	8000da2 <__lesf2+0x52>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	d1ed      	bne.n	8000d92 <__lesf2+0x42>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d1eb      	bne.n	8000d92 <__lesf2+0x42>
 8000dba:	e7ec      	b.n	8000d96 <__lesf2+0x46>
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	dc05      	bgt.n	8000dcc <__lesf2+0x7c>
 8000dc0:	dbf2      	blt.n	8000da8 <__lesf2+0x58>
 8000dc2:	42b5      	cmp	r5, r6
 8000dc4:	d802      	bhi.n	8000dcc <__lesf2+0x7c>
 8000dc6:	d3ef      	bcc.n	8000da8 <__lesf2+0x58>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e7ea      	b.n	8000da2 <__lesf2+0x52>
 8000dcc:	4243      	negs	r3, r0
 8000dce:	4158      	adcs	r0, r3
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	3801      	subs	r0, #1
 8000dd4:	e7e5      	b.n	8000da2 <__lesf2+0x52>
 8000dd6:	46c0      	nop			; (mov r8, r8)

08000dd8 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	240c      	movs	r4, #12
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	2314      	movs	r3, #20
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f004 f926 	bl	800503c <memset>

  //По умолчанию на линии высокий уровень
  lineUp();
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	889b      	ldrh	r3, [r3, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	f001 ffeb 	bl	8002dd6 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	001a      	movs	r2, r3
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2211      	movs	r2, #17
 8000e0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	79db      	ldrb	r3, [r3, #7]
 8000e14:	001a      	movs	r2, r3
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	609a      	str	r2, [r3, #8]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	193a      	adds	r2, r7, r4
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fe41 	bl	8002ab0 <HAL_GPIO_Init>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b009      	add	sp, #36	; 0x24
 8000e34:	bd90      	pop	{r4, r7, pc}

08000e36 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000e36:	b590      	push	{r4, r7, lr}
 8000e38:	b089      	sub	sp, #36	; 0x24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	240c      	movs	r4, #12
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2314      	movs	r3, #20
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f004 f8f7 	bl	800503c <memset>

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	889b      	ldrh	r3, [r3, #4]
 8000e52:	001a      	movs	r2, r3
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	79db      	ldrb	r3, [r3, #7]
 8000e62:	001a      	movs	r2, r3
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	193a      	adds	r2, r7, r4
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fe1d 	bl	8002ab0 <HAL_GPIO_Init>
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b009      	add	sp, #36	; 0x24
 8000e7c:	bd90      	pop	{r4, r7, pc}
	...

08000e80 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	4ac7      	ldr	r2, [pc, #796]	; (80011ac <DHT_getData+0x32c>)
 8000e90:	ca03      	ldmia	r2!, {r0, r1}
 8000e92:	c303      	stmia	r3!, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	799b      	ldrb	r3, [r3, #6]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000e9c:	2326      	movs	r3, #38	; 0x26
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	22fa      	movs	r2, #250	; 0xfa
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	801a      	strh	r2, [r3, #0]
 8000ea6:	e004      	b.n	8000eb2 <DHT_getData+0x32>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000ea8:	2326      	movs	r3, #38	; 0x26
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	22fa      	movs	r2, #250	; 0xfa
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	801a      	strh	r2, [r3, #0]
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000eb2:	f001 fd1b 	bl	80028ec <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	2326      	movs	r3, #38	; 0x26
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d211      	bcs.n	8000eec <DHT_getData+0x6c>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00d      	beq.n	8000eec <DHT_getData+0x6c>
		data.hum = sensor->lastHum;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	2114      	movs	r1, #20
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	601a      	str	r2, [r3, #0]
		data.temp = sensor->lastTemp;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	605a      	str	r2, [r3, #4]
		return data;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	187a      	adds	r2, r7, r1
 8000ee6:	ca03      	ldmia	r2!, {r0, r1}
 8000ee8:	c303      	stmia	r3!, {r0, r1}
 8000eea:	e1a8      	b.n	800123e <DHT_getData+0x3be>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000eec:	f001 fcfe 	bl	80028ec <HAL_GetTick>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff ff6c 	bl	8000dd8 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	889b      	ldrh	r3, [r3, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	f001 ff63 	bl	8002dd6 <HAL_GPIO_WritePin>
	Delay(18);
 8000f10:	2012      	movs	r0, #18
 8000f12:	f001 fcf5 	bl	8002900 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	0019      	movs	r1, r3
 8000f22:	f001 ff58 	bl	8002dd6 <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ff84 	bl	8000e36 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2e:	b672      	cpsid	i
}
 8000f30:	46c0      	nop			; (mov r8, r8)
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000f32:	2324      	movs	r3, #36	; 0x24
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8000f3a:	e01a      	b.n	8000f72 <DHT_getData+0xf2>
		timeout++;
 8000f3c:	2124      	movs	r1, #36	; 0x24
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	3201      	adds	r2, #1
 8000f46:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	4a98      	ldr	r2, [pc, #608]	; (80011b0 <DHT_getData+0x330>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d90f      	bls.n	8000f72 <DHT_getData+0xf2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f52:	b662      	cpsie	i
}
 8000f54:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	22c3      	movs	r2, #195	; 0xc3
 8000f5a:	0612      	lsls	r2, r2, #24
 8000f5c:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	22c3      	movs	r2, #195	; 0xc3
 8000f62:	0612      	lsls	r2, r2, #24
 8000f64:	60da      	str	r2, [r3, #12]

			return data;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2214      	movs	r2, #20
 8000f6a:	18ba      	adds	r2, r7, r2
 8000f6c:	ca03      	ldmia	r2!, {r0, r1}
 8000f6e:	c303      	stmia	r3!, {r0, r1}
 8000f70:	e165      	b.n	800123e <DHT_getData+0x3be>
	while(getLine()) {
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	0010      	movs	r0, r2
 8000f7e:	f001 ff0d 	bl	8002d9c <HAL_GPIO_ReadPin>
 8000f82:	0003      	movs	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d0d9      	beq.n	8000f3c <DHT_getData+0xbc>
		}
	}
	timeout = 0;
 8000f88:	2324      	movs	r3, #36	; 0x24
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	801a      	strh	r2, [r3, #0]
	//Ожидание подъёма
	while(!getLine()) {
 8000f90:	e01a      	b.n	8000fc8 <DHT_getData+0x148>
		timeout++;
 8000f92:	2124      	movs	r1, #36	; 0x24
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	881a      	ldrh	r2, [r3, #0]
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	3201      	adds	r2, #1
 8000f9c:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	4a83      	ldr	r2, [pc, #524]	; (80011b0 <DHT_getData+0x330>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d90f      	bls.n	8000fc8 <DHT_getData+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa8:	b662      	cpsie	i
}
 8000faa:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	22c3      	movs	r2, #195	; 0xc3
 8000fb0:	0612      	lsls	r2, r2, #24
 8000fb2:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	22c3      	movs	r2, #195	; 0xc3
 8000fb8:	0612      	lsls	r2, r2, #24
 8000fba:	60da      	str	r2, [r3, #12]

			return data;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	18ba      	adds	r2, r7, r2
 8000fc2:	ca03      	ldmia	r2!, {r0, r1}
 8000fc4:	c303      	stmia	r3!, {r0, r1}
 8000fc6:	e13a      	b.n	800123e <DHT_getData+0x3be>
	while(!getLine()) {
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	889b      	ldrh	r3, [r3, #4]
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	f001 fee2 	bl	8002d9c <HAL_GPIO_ReadPin>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1d9      	bne.n	8000f92 <DHT_getData+0x112>
		}
	}
	timeout = 0;
 8000fde:	2324      	movs	r3, #36	; 0x24
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8000fe6:	e012      	b.n	800100e <DHT_getData+0x18e>
		timeout++;
 8000fe8:	2124      	movs	r1, #36	; 0x24
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	881a      	ldrh	r2, [r3, #0]
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4a6d      	ldr	r2, [pc, #436]	; (80011b0 <DHT_getData+0x330>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d907      	bls.n	800100e <DHT_getData+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ffe:	b662      	cpsie	i
}
 8001000:	46c0      	nop			; (mov r8, r8)
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2214      	movs	r2, #20
 8001006:	18ba      	adds	r2, r7, r2
 8001008:	ca03      	ldmia	r2!, {r0, r1}
 800100a:	c303      	stmia	r3!, {r0, r1}
 800100c:	e117      	b.n	800123e <DHT_getData+0x3be>
	while(getLine()) {
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	889b      	ldrh	r3, [r3, #4]
 8001016:	0019      	movs	r1, r3
 8001018:	0010      	movs	r0, r2
 800101a:	f001 febf 	bl	8002d9c <HAL_GPIO_ReadPin>
 800101e:	0003      	movs	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d0e1      	beq.n	8000fe8 <DHT_getData+0x168>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001024:	230c      	movs	r3, #12
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <DHT_getData+0x334>)
 800102a:	6811      	ldr	r1, [r2, #0]
 800102c:	6019      	str	r1, [r3, #0]
 800102e:	7912      	ldrb	r2, [r2, #4]
 8001030:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8001032:	2323      	movs	r3, #35	; 0x23
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e06e      	b.n	800111a <DHT_getData+0x29a>
		for(uint8_t b = 7; b != 255; b--) {
 800103c:	2322      	movs	r3, #34	; 0x22
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2207      	movs	r2, #7
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e05e      	b.n	8001104 <DHT_getData+0x284>
			uint16_t hT = 0, lT = 0;
 8001046:	2320      	movs	r3, #32
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2200      	movs	r2, #0
 800104c:	801a      	strh	r2, [r3, #0]
 800104e:	231e      	movs	r3, #30
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2200      	movs	r2, #0
 8001054:	801a      	strh	r2, [r3, #0]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8001056:	e005      	b.n	8001064 <DHT_getData+0x1e4>
 8001058:	211e      	movs	r1, #30
 800105a:	187b      	adds	r3, r7, r1
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	187b      	adds	r3, r7, r1
 8001060:	3201      	adds	r2, #1
 8001062:	801a      	strh	r2, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f001 fe94 	bl	8002d9c <HAL_GPIO_ReadPin>
 8001074:	0003      	movs	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d005      	beq.n	8001086 <DHT_getData+0x206>
 800107a:	231e      	movs	r3, #30
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <DHT_getData+0x338>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d1e8      	bne.n	8001058 <DHT_getData+0x1d8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8001086:	2324      	movs	r3, #36	; 0x24
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2200      	movs	r2, #0
 800108c:	801a      	strh	r2, [r3, #0]
			while(getLine()&& hT != 65535) hT++;
 800108e:	e005      	b.n	800109c <DHT_getData+0x21c>
 8001090:	2120      	movs	r1, #32
 8001092:	187b      	adds	r3, r7, r1
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	187b      	adds	r3, r7, r1
 8001098:	3201      	adds	r2, #1
 800109a:	801a      	strh	r2, [r3, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	889b      	ldrh	r3, [r3, #4]
 80010a4:	0019      	movs	r1, r3
 80010a6:	0010      	movs	r0, r2
 80010a8:	f001 fe78 	bl	8002d9c <HAL_GPIO_ReadPin>
 80010ac:	0003      	movs	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d105      	bne.n	80010be <DHT_getData+0x23e>
 80010b2:	2320      	movs	r3, #32
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <DHT_getData+0x338>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d1e8      	bne.n	8001090 <DHT_getData+0x210>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80010be:	2320      	movs	r3, #32
 80010c0:	18fa      	adds	r2, r7, r3
 80010c2:	231e      	movs	r3, #30
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d914      	bls.n	80010f8 <DHT_getData+0x278>
 80010ce:	2023      	movs	r0, #35	; 0x23
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	240c      	movs	r4, #12
 80010d6:	193a      	adds	r2, r7, r4
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	2322      	movs	r3, #34	; 0x22
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2101      	movs	r1, #1
 80010e4:	4099      	lsls	r1, r3
 80010e6:	000b      	movs	r3, r1
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	193a      	adds	r2, r7, r4
 80010f6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t b = 7; b != 255; b--) {
 80010f8:	2122      	movs	r1, #34	; 0x22
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	3a01      	subs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	2322      	movs	r3, #34	; 0x22
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d19b      	bne.n	8001046 <DHT_getData+0x1c6>
	for(uint8_t a = 0; a < 5; a++) {
 800110e:	2123      	movs	r1, #35	; 0x23
 8001110:	187b      	adds	r3, r7, r1
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	187b      	adds	r3, r7, r1
 8001116:	3201      	adds	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	2323      	movs	r3, #35	; 0x23
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d98b      	bls.n	800103c <DHT_getData+0x1bc>
  __ASM volatile ("cpsie i" : : : "memory");
 8001124:	b662      	cpsie	i
}
 8001126:	46c0      	nop			; (mov r8, r8)
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001128:	240c      	movs	r4, #12
 800112a:	193b      	adds	r3, r7, r4
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	193b      	adds	r3, r7, r4
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	193b      	adds	r3, r7, r4
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	b2da      	uxtb	r2, r3
 800113e:	193b      	adds	r3, r7, r4
 8001140:	78db      	ldrb	r3, [r3, #3]
 8001142:	18d3      	adds	r3, r2, r3
 8001144:	b2da      	uxtb	r2, r3
 8001146:	193b      	adds	r3, r7, r4
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d16a      	bne.n	8001224 <DHT_getData+0x3a4>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	799b      	ldrb	r3, [r3, #6]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d150      	bne.n	80011f8 <DHT_getData+0x378>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001156:	193b      	adds	r3, r7, r4
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	193a      	adds	r2, r7, r4
 800115e:	7852      	ldrb	r2, [r2, #1]
 8001160:	4313      	orrs	r3, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff fc94 	bl	8000a90 <__aeabi_i2f>
 8001168:	1c03      	adds	r3, r0, #0
 800116a:	4914      	ldr	r1, [pc, #80]	; (80011bc <DHT_getData+0x33c>)
 800116c:	1c18      	adds	r0, r3, #0
 800116e:	f7ff f99b 	bl	80004a8 <__aeabi_fmul>
 8001172:	1c03      	adds	r3, r0, #0
 8001174:	1c1a      	adds	r2, r3, #0
 8001176:	2514      	movs	r5, #20
 8001178:	197b      	adds	r3, r7, r5
 800117a:	601a      	str	r2, [r3, #0]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800117c:	193b      	adds	r3, r7, r4
 800117e:	789b      	ldrb	r3, [r3, #2]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	db1c      	blt.n	80011c0 <DHT_getData+0x340>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	193a      	adds	r2, r7, r4
 800118e:	78d2      	ldrb	r2, [r2, #3]
 8001190:	4313      	orrs	r3, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff fc7c 	bl	8000a90 <__aeabi_i2f>
 8001198:	1c03      	adds	r3, r0, #0
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <DHT_getData+0x33c>)
 800119c:	1c18      	adds	r0, r3, #0
 800119e:	f7ff f983 	bl	80004a8 <__aeabi_fmul>
 80011a2:	1c03      	adds	r3, r0, #0
 80011a4:	1c1a      	adds	r2, r3, #0
 80011a6:	197b      	adds	r3, r7, r5
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	e025      	b.n	80011f8 <DHT_getData+0x378>
 80011ac:	08005938 	.word	0x08005938
 80011b0:	00002710 	.word	0x00002710
 80011b4:	08005940 	.word	0x08005940
 80011b8:	0000ffff 	.word	0x0000ffff
 80011bc:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 80011c0:	210c      	movs	r1, #12
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	227f      	movs	r2, #127	; 0x7f
 80011c8:	4013      	ands	r3, r2
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	709a      	strb	r2, [r3, #2]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80011d0:	000a      	movs	r2, r1
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	18ba      	adds	r2, r7, r2
 80011da:	78d2      	ldrb	r2, [r2, #3]
 80011dc:	4313      	orrs	r3, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff fc56 	bl	8000a90 <__aeabi_i2f>
 80011e4:	1c03      	adds	r3, r0, #0
 80011e6:	4918      	ldr	r1, [pc, #96]	; (8001248 <DHT_getData+0x3c8>)
 80011e8:	1c18      	adds	r0, r3, #0
 80011ea:	f7ff f95d 	bl	80004a8 <__aeabi_fmul>
 80011ee:	1c03      	adds	r3, r0, #0
 80011f0:	1c1a      	adds	r2, r3, #0
 80011f2:	2314      	movs	r3, #20
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	605a      	str	r2, [r3, #4]
			}
		}
		if (sensor->type == DHT11) {
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	799b      	ldrb	r3, [r3, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <DHT_getData+0x3a4>
			data.hum = (float)rawData[0];
 8001200:	240c      	movs	r4, #12
 8001202:	193b      	adds	r3, r7, r4
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff fc90 	bl	8000b2c <__aeabi_ui2f>
 800120c:	1c02      	adds	r2, r0, #0
 800120e:	2514      	movs	r5, #20
 8001210:	197b      	adds	r3, r7, r5
 8001212:	601a      	str	r2, [r3, #0]
			data.temp = (float)rawData[2];
 8001214:	193b      	adds	r3, r7, r4
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fc87 	bl	8000b2c <__aeabi_ui2f>
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	197b      	adds	r3, r7, r5
 8001222:	605a      	str	r2, [r3, #4]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8001224:	2114      	movs	r1, #20
 8001226:	187b      	adds	r3, r7, r1
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	187a      	adds	r2, r7, r1
 800123a:	ca03      	ldmia	r2!, {r0, r1}
 800123c:	c303      	stmia	r3!, {r0, r1}
}
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	46bd      	mov	sp, r7
 8001242:	b00a      	add	sp, #40	; 0x28
 8001244:	bdb0      	pop	{r4, r5, r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	bdcccccd 	.word	0xbdcccccd

0800124c <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 8001258:	f000 fae0 	bl	800181c <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 800125c:	2010      	movs	r0, #16
 800125e:	f000 fb1d 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f000 fafa 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 8001268:	2011      	movs	r0, #17
 800126a:	f000 fb17 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 800126e:	2003      	movs	r0, #3
 8001270:	f000 faf4 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 8001274:	2044      	movs	r0, #68	; 0x44
 8001276:	f000 fb11 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 800127a:	2000      	movs	r0, #0
 800127c:	f000 faee 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 8001280:	2011      	movs	r0, #17
 8001282:	f000 faeb 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 8001286:	2045      	movs	r0, #69	; 0x45
 8001288:	f000 fb08 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fae5 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8001292:	20ab      	movs	r0, #171	; 0xab
 8001294:	f000 fae2 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 8001298:	204e      	movs	r0, #78	; 0x4e
 800129a:	f000 faff 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 fadc 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 80012a4:	204f      	movs	r0, #79	; 0x4f
 80012a6:	f000 faf9 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 fad6 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 80012b0:	20f0      	movs	r0, #240	; 0xf0
 80012b2:	f000 faf3 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 80012b6:	201f      	movs	r0, #31
 80012b8:	f000 fad0 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 80012bc:	2021      	movs	r0, #33	; 0x21
 80012be:	f000 faed 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80012c2:	2003      	movs	r0, #3
 80012c4:	f000 faca 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 80012c8:	202c      	movs	r0, #44	; 0x2c
 80012ca:	f000 fae7 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 80012ce:	20a0      	movs	r0, #160	; 0xa0
 80012d0:	f000 fac4 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 80012d4:	203c      	movs	r0, #60	; 0x3c
 80012d6:	f000 fae1 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f000 fabe 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 80012e0:	2032      	movs	r0, #50	; 0x32
 80012e2:	f000 fadb 	bl	800189c <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e00c      	b.n	8001308 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <gde021a1_Init+0xd0>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 faaf 	bl	800185c <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	3201      	adds	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b59      	cmp	r3, #89	; 0x59
 800130e:	d9ee      	bls.n	80012ee <gde021a1_Init+0xa2>
  }
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	080071cc 	.word	0x080071cc

08001320 <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	0002      	movs	r2, r0
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 800132c:	2024      	movs	r0, #36	; 0x24
 800132e:	f000 fab5 	bl	800189c <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	0018      	movs	r0, r3
 800133a:	f000 fa8f 	bl	800185c <EPD_IO_WriteData>
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}

08001346 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001346:	b5b0      	push	{r4, r5, r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	0005      	movs	r5, r0
 800134e:	000c      	movs	r4, r1
 8001350:	0010      	movs	r0, r2
 8001352:	0019      	movs	r1, r3
 8001354:	1dbb      	adds	r3, r7, #6
 8001356:	1c2a      	adds	r2, r5, #0
 8001358:	801a      	strh	r2, [r3, #0]
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	1c22      	adds	r2, r4, #0
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	003b      	movs	r3, r7
 8001368:	1c0a      	adds	r2, r1, #0
 800136a:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 800136c:	2044      	movs	r0, #68	; 0x44
 800136e:	f000 fa95 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	f000 fa70 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 800137c:	003b      	movs	r3, r7
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f000 fa6b 	bl	800185c <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 8001386:	2045      	movs	r0, #69	; 0x45
 8001388:	f000 fa88 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 800138c:	1dbb      	adds	r3, r7, #6
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	0018      	movs	r0, r3
 8001392:	f000 fa63 	bl	800185c <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fa5e 	bl	800185c <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 80013a0:	204e      	movs	r0, #78	; 0x4e
 80013a2:	f000 fa7b 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 fa56 	bl	800185c <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 80013b0:	204f      	movs	r0, #79	; 0x4f
 80013b2:	f000 fa73 	bl	800189c <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fa4e 	bl	800185c <EPD_IO_WriteData>
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}

080013c8 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 80013cc:	23ac      	movs	r3, #172	; 0xac
}
 80013ce:	0018      	movs	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 80013d8:	2312      	movs	r3, #18
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 80013e4:	2022      	movs	r0, #34	; 0x22
 80013e6:	f000 fa59 	bl	800189c <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 80013ea:	20c4      	movs	r0, #196	; 0xc4
 80013ec:	f000 fa36 	bl	800185c <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 80013f0:	2020      	movs	r0, #32
 80013f2:	f000 fa53 	bl	800189c <EPD_IO_WriteReg>
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8001400:	2022      	movs	r0, #34	; 0x22
 8001402:	f000 fa4b 	bl	800189c <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 8001406:	2003      	movs	r0, #3
 8001408:	f000 fa28 	bl	800185c <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800140c:	2020      	movs	r0, #32
 800140e:	f000 fa45 	bl	800189c <EPD_IO_WriteReg>
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	0010      	movs	r0, r2
 8001424:	0019      	movs	r1, r3
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	1c2a      	adds	r2, r5, #0
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	1c22      	adds	r2, r4, #0
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	1cbb      	adds	r3, r7, #2
 8001434:	1c02      	adds	r2, r0, #0
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	003b      	movs	r3, r7
 800143a:	1c0a      	adds	r2, r1, #0
 800143c:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 8001442:	230f      	movs	r3, #15
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 800144a:	2308      	movs	r3, #8
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 8001452:	230d      	movs	r3, #13
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 800145a:	2024      	movs	r0, #36	; 0x24
 800145c:	f000 fa1e 	bl	800189c <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 8001460:	1cbb      	adds	r3, r7, #2
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	2207      	movs	r2, #7
 8001466:	4013      	ands	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d000      	beq.n	8001470 <gde021a1_DrawImage+0x58>
 800146e:	e087      	b.n	8001580 <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e073      	b.n	800155e <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 8001476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	18d2      	adds	r2, r2, r3
 800147c:	210f      	movs	r1, #15
 800147e:	187b      	adds	r3, r7, r1
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 8001484:	187b      	adds	r3, r7, r1
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05f      	beq.n	800154c <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 800148c:	230e      	movs	r3, #14
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	e054      	b.n	8001540 <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	e029      	b.n	80014f0 <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d00d      	beq.n	80014c4 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 80014a8:	2008      	movs	r0, #8
 80014aa:	183a      	adds	r2, r7, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	18d3      	adds	r3, r2, r3
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2203      	movs	r2, #3
 80014b4:	4393      	bics	r3, r2
 80014b6:	b2d9      	uxtb	r1, r3
 80014b8:	183a      	adds	r2, r7, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	1c0a      	adds	r2, r1, #0
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e00c      	b.n	80014de <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 80014c4:	2008      	movs	r0, #8
 80014c6:	183a      	adds	r2, r7, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	18d3      	adds	r3, r2, r3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b2d9      	uxtb	r1, r3
 80014d4:	183a      	adds	r2, r7, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	1c0a      	adds	r2, r1, #0
 80014dc:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 80014de:	220f      	movs	r2, #15
 80014e0:	18bb      	adds	r3, r7, r2
 80014e2:	18ba      	adds	r2, r7, r2
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	0852      	lsrs	r2, r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3301      	adds	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9d2      	bls.n	800149c <gde021a1_DrawImage+0x84>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 80014f6:	2108      	movs	r1, #8
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	187b      	adds	r3, r7, r1
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	b25b      	sxtb	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b25a      	sxtb	r2, r3
 800150c:	187b      	adds	r3, r7, r1
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b25a      	sxtb	r2, r3
 8001518:	187b      	adds	r3, r7, r1
 800151a:	78db      	ldrb	r3, [r3, #3]
 800151c:	b25b      	sxtb	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b25a      	sxtb	r2, r3
 8001522:	210d      	movs	r1, #13
 8001524:	187b      	adds	r3, r7, r1
 8001526:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 8001528:	187b      	adds	r3, r7, r1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	0018      	movs	r0, r3
 8001530:	f000 f994 	bl	800185c <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8001534:	210e      	movs	r1, #14
 8001536:	187b      	adds	r3, r7, r1
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	187b      	adds	r3, r7, r1
 800153c:	3201      	adds	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	230e      	movs	r3, #14
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d9a5      	bls.n	8001496 <gde021a1_DrawImage+0x7e>
 800154a:	e005      	b.n	8001558 <gde021a1_DrawImage+0x140>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 800154c:	20ff      	movs	r0, #255	; 0xff
 800154e:	f000 f985 	bl	800185c <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 8001552:	20ff      	movs	r0, #255	; 0xff
 8001554:	f000 f982 	bl	800185c <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	003b      	movs	r3, r7
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	1cba      	adds	r2, r7, #2
 8001564:	8812      	ldrh	r2, [r2, #0]
 8001566:	0892      	lsrs	r2, r2, #2
 8001568:	b292      	uxth	r2, r2
 800156a:	4353      	muls	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	da00      	bge.n	8001572 <gde021a1_DrawImage+0x15a>
 8001570:	3301      	adds	r3, #1
 8001572:	105b      	asrs	r3, r3, #1
 8001574:	001a      	movs	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4293      	cmp	r3, r2
 800157a:	d200      	bcs.n	800157e <gde021a1_DrawImage+0x166>
 800157c:	e77b      	b.n	8001476 <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 800157e:	e10f      	b.n	80017a0 <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e0fb      	b.n	800177e <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 8001586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	18d2      	adds	r2, r2, r3
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	1cbb      	adds	r3, r7, #2
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da00      	bge.n	80015a8 <gde021a1_DrawImage+0x190>
 80015a6:	3301      	adds	r3, #1
 80015a8:	105b      	asrs	r3, r3, #1
 80015aa:	0019      	movs	r1, r3
 80015ac:	0010      	movs	r0, r2
 80015ae:	f7fe fe43 	bl	8000238 <__aeabi_uidivmod>
 80015b2:	1e0b      	subs	r3, r1, #0
 80015b4:	d100      	bne.n	80015b8 <gde021a1_DrawImage+0x1a0>
 80015b6:	e071      	b.n	800169c <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d05f      	beq.n	8001682 <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80015c2:	230e      	movs	r3, #14
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e054      	b.n	8001676 <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	e029      	b.n	8001626 <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 80015d2:	230f      	movs	r3, #15
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d00d      	beq.n	80015fa <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 80015de:	2008      	movs	r0, #8
 80015e0:	183a      	adds	r2, r7, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4393      	bics	r3, r2
 80015ec:	b2d9      	uxtb	r1, r3
 80015ee:	183a      	adds	r2, r7, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	18d3      	adds	r3, r2, r3
 80015f4:	1c0a      	adds	r2, r1, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e00c      	b.n	8001614 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 80015fa:	2008      	movs	r0, #8
 80015fc:	183a      	adds	r2, r7, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2203      	movs	r2, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	183a      	adds	r2, r7, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	18d3      	adds	r3, r2, r3
 8001610:	1c0a      	adds	r2, r1, #0
 8001612:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8001614:	220f      	movs	r2, #15
 8001616:	18bb      	adds	r3, r7, r2
 8001618:	18ba      	adds	r2, r7, r2
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	0852      	lsrs	r2, r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	3301      	adds	r3, #1
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d9d2      	bls.n	80015d2 <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 800162c:	2108      	movs	r1, #8
 800162e:	187b      	adds	r3, r7, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	b25a      	sxtb	r2, r3
 8001636:	187b      	adds	r3, r7, r1
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	b25b      	sxtb	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b25a      	sxtb	r2, r3
 8001642:	187b      	adds	r3, r7, r1
 8001644:	789b      	ldrb	r3, [r3, #2]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b25a      	sxtb	r2, r3
 800164e:	187b      	adds	r3, r7, r1
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25a      	sxtb	r2, r3
 8001658:	210d      	movs	r1, #13
 800165a:	187b      	adds	r3, r7, r1
 800165c:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 800165e:	187b      	adds	r3, r7, r1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	0018      	movs	r0, r3
 8001666:	f000 f8f9 	bl	800185c <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 800166a:	210e      	movs	r1, #14
 800166c:	187b      	adds	r3, r7, r1
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	187b      	adds	r3, r7, r1
 8001672:	3201      	adds	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	230e      	movs	r3, #14
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d9a5      	bls.n	80015cc <gde021a1_DrawImage+0x1b4>
 8001680:	e07a      	b.n	8001778 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 8001682:	230f      	movs	r3, #15
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d000      	beq.n	800168e <gde021a1_DrawImage+0x276>
 800168c:	e074      	b.n	8001778 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 800168e:	20ff      	movs	r0, #255	; 0xff
 8001690:	f000 f8e4 	bl	800185c <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 8001694:	20ff      	movs	r0, #255	; 0xff
 8001696:	f000 f8e1 	bl	800185c <EPD_IO_WriteData>
 800169a:	e06d      	b.n	8001778 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	1cbb      	adds	r3, r7, #2
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da00      	bge.n	80016b0 <gde021a1_DrawImage+0x298>
 80016ae:	3301      	adds	r3, #1
 80016b0:	105b      	asrs	r3, r3, #1
 80016b2:	0019      	movs	r1, r3
 80016b4:	0010      	movs	r0, r2
 80016b6:	f7fe fdbf 	bl	8000238 <__aeabi_uidivmod>
 80016ba:	1e0b      	subs	r3, r1, #0
 80016bc:	d15c      	bne.n	8001778 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 80016be:	230f      	movs	r3, #15
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2bf0      	cmp	r3, #240	; 0xf0
 80016c6:	d04f      	beq.n	8001768 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e029      	b.n	8001722 <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 80016da:	2008      	movs	r0, #8
 80016dc:	183a      	adds	r2, r7, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4393      	bics	r3, r2
 80016e8:	b2d9      	uxtb	r1, r3
 80016ea:	183a      	adds	r2, r7, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	18d3      	adds	r3, r2, r3
 80016f0:	1c0a      	adds	r2, r1, #0
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e00c      	b.n	8001710 <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 80016f6:	2008      	movs	r0, #8
 80016f8:	183a      	adds	r2, r7, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	18d3      	adds	r3, r2, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2203      	movs	r2, #3
 8001702:	4313      	orrs	r3, r2
 8001704:	b2d9      	uxtb	r1, r3
 8001706:	183a      	adds	r2, r7, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	18d3      	adds	r3, r2, r3
 800170c:	1c0a      	adds	r2, r1, #0
 800170e:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 8001710:	220f      	movs	r2, #15
 8001712:	18bb      	adds	r3, r7, r2
 8001714:	18ba      	adds	r2, r7, r2
 8001716:	7812      	ldrb	r2, [r2, #0]
 8001718:	0852      	lsrs	r2, r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d9d2      	bls.n	80016ce <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8001728:	2108      	movs	r1, #8
 800172a:	187b      	adds	r3, r7, r1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	019b      	lsls	r3, r3, #6
 8001730:	b25a      	sxtb	r2, r3
 8001732:	187b      	adds	r3, r7, r1
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b25a      	sxtb	r2, r3
 800173e:	187b      	adds	r3, r7, r1
 8001740:	789b      	ldrb	r3, [r3, #2]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b25a      	sxtb	r2, r3
 800174a:	187b      	adds	r3, r7, r1
 800174c:	78db      	ldrb	r3, [r3, #3]
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b25a      	sxtb	r2, r3
 8001754:	210d      	movs	r1, #13
 8001756:	187b      	adds	r3, r7, r1
 8001758:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 800175a:	187b      	adds	r3, r7, r1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	0018      	movs	r0, r3
 8001762:	f000 f87b 	bl	800185c <EPD_IO_WriteData>
 8001766:	e007      	b.n	8001778 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 8001768:	230f      	movs	r3, #15
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2bf0      	cmp	r3, #240	; 0xf0
 8001770:	d102      	bne.n	8001778 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 8001772:	20ff      	movs	r0, #255	; 0xff
 8001774:	f000 f872 	bl	800185c <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	003b      	movs	r3, r7
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	1cba      	adds	r2, r7, #2
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	0892      	lsrs	r2, r2, #2
 8001788:	b292      	uxth	r2, r2
 800178a:	3201      	adds	r2, #1
 800178c:	4353      	muls	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	da00      	bge.n	8001794 <gde021a1_DrawImage+0x37c>
 8001792:	3301      	adds	r3, #1
 8001794:	105b      	asrs	r3, r3, #1
 8001796:	001a      	movs	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	4293      	cmp	r3, r2
 800179c:	d200      	bcs.n	80017a0 <gde021a1_DrawImage+0x388>
 800179e:	e6f2      	b.n	8001586 <gde021a1_DrawImage+0x16e>
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b006      	add	sp, #24
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}

080017a8 <LoopDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LoopDelay(volatile uint32_t n) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 80017b0:	e002      	b.n	80017b8 <LoopDelay+0x10>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <LoopDelay+0xa>
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <SPIx_Init>:

static void SPIx_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
  DISCOVERY_SPIx->CR1 = 0
 80017cc:	4b02      	ldr	r3, [pc, #8]	; (80017d8 <SPIx_Init+0x10>)
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <SPIx_Init+0x14>)
 80017d0:	601a      	str	r2, [r3, #0]
    | ( 0 * SPI_CR1_CRCNEXT  )         // Transmit CRC next
    | ( 0 * SPI_CR1_CRCEN    )         // Hardware CRC calculation enable
    | ( 0 * SPI_CR1_BIDIOE   )         // Output enable in bidirectional mode
    | ( 0 * SPI_CR1_BIDIMODE )         // Bidirectional data mode enable
  ;
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013000 	.word	0x40013000
 80017dc:	00000357 	.word	0x00000357

080017e0 <SPIx_Write>:
// won't be used anyway, as there is no MISO from the display
static uint32_t SPIx_Read(void) {
  return 0;
}

static void SPIx_Write(uint8_t n) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	701a      	strb	r2, [r3, #0]
  DISCOVERY_SPIx->DR = n;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <SPIx_Write+0x38>)
 80017ee:	1dfa      	adds	r2, r7, #7
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	60da      	str	r2, [r3, #12]
  while (!(DISCOVERY_SPIx->SR & SPI_SR_TXE)) {
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <SPIx_Write+0x38>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0fa      	beq.n	80017f6 <SPIx_Write+0x16>
    // wait until empty
  }
  while ((DISCOVERY_SPIx->SR & SPI_SR_BSY)) {
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SPIx_Write+0x38>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	4013      	ands	r3, r2
 800180a:	d1fa      	bne.n	8001802 <SPIx_Write+0x22>
    // wait until not busy
  }
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40013000 	.word	0x40013000

0800181c <EPD_IO_Init>:

void EPD_IO_Init(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  // pins pinit - see gpio-clock init and gpio pins init in main()

  /* Enable Display */
  PIN_CLR(EPD_PWR);
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <EPD_IO_Init+0x3c>)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	04d2      	lsls	r2, r2, #19
 8001826:	619a      	str	r2, [r3, #24]

  /* Set or Reset the control line */
  PIN_CLR(EPD_CS);
 8001828:	23a0      	movs	r3, #160	; 0xa0
 800182a:	05db      	lsls	r3, r3, #23
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	0612      	lsls	r2, r2, #24
 8001830:	619a      	str	r2, [r3, #24]
  PIN_SET(EPD_CS);
 8001832:	23a0      	movs	r3, #160	; 0xa0
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	0212      	lsls	r2, r2, #8
 800183a:	619a      	str	r2, [r3, #24]

  /* EPD reset pin mamagement */
  PIN_SET(EPD_RESET);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <EPD_IO_Init+0x3c>)
 800183e:	2204      	movs	r2, #4
 8001840:	619a      	str	r2, [r3, #24]
  EPD_Delay(10);
 8001842:	200a      	movs	r0, #10
 8001844:	f000 f84a 	bl	80018dc <EPD_Delay>

  PIN_SET(DISCOVERY_SPIx_SCK);
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <EPD_IO_Init+0x3c>)
 800184a:	2208      	movs	r2, #8
 800184c:	619a      	str	r2, [r3, #24]
  /* SPI Configuration */
  SPIx_Init();
 800184e:	f7ff ffbb 	bl	80017c8 <SPIx_Init>
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	50000400 	.word	0x50000400

0800185c <EPD_IO_WriteData>:

void EPD_IO_WriteData(uint16_t n) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	0002      	movs	r2, r0
 8001864:	1dbb      	adds	r3, r7, #6
 8001866:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8001868:	23a0      	movs	r3, #160	; 0xa0
 800186a:	05db      	lsls	r3, r3, #23
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	0612      	lsls	r2, r2, #24
 8001870:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to High */
  PIN_SET(EPD_DC);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <EPD_IO_WriteData+0x3c>)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	619a      	str	r2, [r3, #24]
  /* Send Data */
  SPIx_Write(n);
 800187a:	1dbb      	adds	r3, r7, #6
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ffad 	bl	80017e0 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8001886:	23a0      	movs	r3, #160	; 0xa0
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	0212      	lsls	r2, r2, #8
 800188e:	619a      	str	r2, [r3, #24]
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	50000400 	.word	0x50000400

0800189c <EPD_IO_WriteReg>:
/**
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t n) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	0002      	movs	r2, r0
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 80018a8:	23a0      	movs	r3, #160	; 0xa0
 80018aa:	05db      	lsls	r3, r3, #23
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	0612      	lsls	r2, r2, #24
 80018b0:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to Low */
  PIN_CLR(EPD_DC);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <EPD_IO_WriteReg+0x3c>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	0512      	lsls	r2, r2, #20
 80018b8:	619a      	str	r2, [r3, #24]
  /* Send Command */
  SPIx_Write(n);
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff ff8e 	bl	80017e0 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 80018c4:	23a0      	movs	r3, #160	; 0xa0
 80018c6:	05db      	lsls	r3, r3, #23
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0212      	lsls	r2, r2, #8
 80018cc:	619a      	str	r2, [r3, #24]
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	50000400 	.word	0x50000400

080018dc <EPD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t n) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  LoopDelay(n * 3000);  // some fancy factor to get it roughly in ms
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <EPD_Delay+0x1c>)
 80018e8:	4353      	muls	r3, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff ff5c 	bl	80017a8 <LoopDelay>
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	00000bb8 	.word	0x00000bb8

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b096      	sub	sp, #88	; 0x58
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001902:	f000 ff8d 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001906:	f000 f849 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190a:	f000 fa0b 	bl	8001d24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800190e:	f000 f8c1 	bl	8001a94 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001912:	f000 f8ff 	bl	8001b14 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001916:	f000 f935 	bl	8001b84 <MX_SPI2_Init>
  MX_TSC_Init();
 800191a:	f000 f969 	bl	8001bf0 <MX_TSC_Init>
  MX_USART1_UART_Init();
 800191e:	f000 f9ab 	bl	8001c78 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001922:	f000 f9d9 	bl	8001cd8 <MX_USB_PCD_Init>
  //dht1.DataPort = GPIOA;
  //dht1.Type = DHT11;
  //-------------------------------
  static DHT_sensor livingRoom = {GPIOA, GPIO_PIN_4, DHT11, GPIO_NOPULL};

  BSP_EPD_Init();
 8001926:	f000 fab7 	bl	8001e98 <BSP_EPD_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char msg[40];
	//Получение данных �? датчика
	DHT_data d = DHT_getData(&livingRoom);
 800192a:	252c      	movs	r5, #44	; 0x2c
 800192c:	197b      	adds	r3, r7, r5
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <main+0x94>)
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff faa4 	bl	8000e80 <DHT_getData>
	//Печать данных в буффер
	sprintf(msg, "Temp %dC, Hum %d%%", (uint8_t)d.temp, (uint8_t)d.hum);
 8001938:	197b      	adds	r3, r7, r5
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	1c18      	adds	r0, r3, #0
 800193e:	f7fe fccf 	bl	80002e0 <__aeabi_f2uiz>
 8001942:	0003      	movs	r3, r0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	001c      	movs	r4, r3
 8001948:	197b      	adds	r3, r7, r5
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c18      	adds	r0, r3, #0
 800194e:	f7fe fcc7 	bl	80002e0 <__aeabi_f2uiz>
 8001952:	0003      	movs	r3, r0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	490f      	ldr	r1, [pc, #60]	; (8001994 <main+0x98>)
 8001958:	1d38      	adds	r0, r7, #4
 800195a:	0022      	movs	r2, r4
 800195c:	f003 fb76 	bl	800504c <siprintf>
	//Отправка тек�?та в UART

	BSP_EPD_DisplayStringAt(0, 40, (unsigned char *)msg, CENTER_MODE);
 8001960:	1d3a      	adds	r2, r7, #4
 8001962:	2301      	movs	r3, #1
 8001964:	2128      	movs	r1, #40	; 0x28
 8001966:	2000      	movs	r0, #0
 8001968:	f000 fbc2 	bl	80020f0 <BSP_EPD_DisplayStringAt>
	BSP_EPD_RefreshDisplay();
 800196c:	f000 fc72 	bl	8002254 <BSP_EPD_RefreshDisplay>
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001970:	20ff      	movs	r0, #255	; 0xff
 8001972:	f000 fb61 	bl	8002038 <BSP_EPD_Clear>

	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0xFF);
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	0018      	movs	r0, r3
 800197a:	f7fe fbc5 	bl	8000108 <strlen>
 800197e:	0003      	movs	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	1d39      	adds	r1, r7, #4
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <main+0x9c>)
 8001986:	23ff      	movs	r3, #255	; 0xff
 8001988:	f002 fd9e 	bl	80044c8 <HAL_UART_Transmit>
  {
 800198c:	e7cd      	b.n	800192a <main+0x2e>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	20000030 	.word	0x20000030
 8001994:	08005948 	.word	0x08005948
 8001998:	20000218 	.word	0x20000218

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b09d      	sub	sp, #116	; 0x74
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	2438      	movs	r4, #56	; 0x38
 80019a4:	193b      	adds	r3, r7, r4
 80019a6:	0018      	movs	r0, r3
 80019a8:	2338      	movs	r3, #56	; 0x38
 80019aa:	001a      	movs	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f003 fb45 	bl	800503c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b2:	2324      	movs	r3, #36	; 0x24
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	0018      	movs	r0, r3
 80019b8:	2314      	movs	r3, #20
 80019ba:	001a      	movs	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	f003 fb3d 	bl	800503c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c2:	003b      	movs	r3, r7
 80019c4:	0018      	movs	r0, r3
 80019c6:	2324      	movs	r3, #36	; 0x24
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f003 fb36 	bl	800503c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <SystemClock_Config+0xf0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <SystemClock_Config+0xf4>)
 80019d6:	401a      	ands	r2, r3
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <SystemClock_Config+0xf0>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0109      	lsls	r1, r1, #4
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	2221      	movs	r2, #33	; 0x21
 80019e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	22a0      	movs	r2, #160	; 0xa0
 80019ec:	02d2      	lsls	r2, r2, #11
 80019ee:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019f0:	0021      	movs	r1, r4
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2201      	movs	r2, #1
 80019f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2202      	movs	r2, #2
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	0252      	lsls	r2, r2, #9
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0352      	lsls	r2, r2, #13
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f001 fc51 	bl	80032c0 <HAL_RCC_OscConfig>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a22:	f000 fa27 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	2124      	movs	r1, #36	; 0x24
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2203      	movs	r2, #3
 8001a32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2101      	movs	r1, #1
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f001 fffc 	bl	8003a48 <HAL_RCC_ClockConfig>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a54:	f000 fa0e 	bl	8001e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001a58:	003b      	movs	r3, r7
 8001a5a:	2249      	movs	r2, #73	; 0x49
 8001a5c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a5e:	003b      	movs	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a64:	003b      	movs	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a6a:	003b      	movs	r3, r7
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	04d2      	lsls	r2, r2, #19
 8001a70:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a72:	003b      	movs	r3, r7
 8001a74:	0018      	movs	r0, r3
 8001a76:	f002 fa0b 	bl	8003e90 <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a7e:	f000 f9f9 	bl	8001e74 <Error_Handler>
  }
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b01d      	add	sp, #116	; 0x74
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	ffffe7ff 	.word	0xffffe7ff

08001a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <MX_I2C1_Init+0x78>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <MX_I2C1_Init+0x7c>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f001 f99d 	bl	8002e10 <HAL_I2C_Init>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ada:	f000 f9cb 	bl	8001e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 fa2a 	bl	8002f3c <HAL_I2CEx_ConfigAnalogFilter>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d001      	beq.n	8001af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001aec:	f000 f9c2 	bl	8001e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <MX_I2C1_Init+0x74>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	0018      	movs	r0, r3
 8001af6:	f001 fa6d 	bl	8002fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001afe:	f000 f9b9 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000d0 	.word	0x200000d0
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	00707cbb 	.word	0x00707cbb

08001b14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <MX_SPI1_Init+0x6c>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b20:	2282      	movs	r2, #130	; 0x82
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0212      	lsls	r2, r2, #8
 8001b2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f002 fb20 	bl	80041ac <HAL_SPI_Init>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b70:	f000 f980 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40013000 	.word	0x40013000

08001b84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <MX_SPI2_Init+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b90:	2282      	movs	r2, #130	; 0x82
 8001b92:	0052      	lsls	r2, r2, #1
 8001b94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bce:	2207      	movs	r2, #7
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f002 fae9 	bl	80041ac <HAL_SPI_Init>
 8001bda:	1e03      	subs	r3, r0, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8001bde:	f000 f949 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000017c 	.word	0x2000017c
 8001bec:	40003800 	.word	0x40003800

08001bf0 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <MX_TSC_Init+0x80>)
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <MX_TSC_Init+0x84>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_TSC_Init+0x80>)
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0552      	lsls	r2, r2, #21
 8001c00:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	0452      	lsls	r2, r2, #17
 8001c08:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	0192      	lsls	r2, r2, #6
 8001c22:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c26:	22a0      	movs	r2, #160	; 0xa0
 8001c28:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c3e:	222c      	movs	r2, #44	; 0x2c
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c46:	2291      	movs	r2, #145	; 0x91
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c54:	2291      	movs	r2, #145	; 0x91
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <MX_TSC_Init+0x80>)
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f002 fb39 	bl	80042d4 <HAL_TSC_Init>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8001c66:	f000 f905 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200001d4 	.word	0x200001d4
 8001c74:	40024000 	.word	0x40024000

08001c78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <MX_USART1_UART_Init+0x5c>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001c84:	22e1      	movs	r2, #225	; 0xe1
 8001c86:	0252      	lsls	r2, r2, #9
 8001c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <MX_USART1_UART_Init+0x58>)
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f002 fbaf 	bl	8004420 <HAL_UART_Init>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cc6:	f000 f8d5 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000218 	.word	0x20000218
 8001cd4:	40013800 	.word	0x40013800

08001cd8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <MX_USB_PCD_Init+0x48>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <MX_USB_PCD_Init+0x44>)
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f001 f9af 	bl	800306c <HAL_PCD_Init>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001d12:	f000 f8af 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200002a0 	.word	0x200002a0
 8001d20:	40005c00 	.word	0x40005c00

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	2414      	movs	r4, #20
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	0018      	movs	r0, r3
 8001d30:	2314      	movs	r3, #20
 8001d32:	001a      	movs	r2, r3
 8001d34:	2100      	movs	r1, #0
 8001d36:	f003 f981 	bl	800503c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3e:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d40:	2104      	movs	r1, #4
 8001d42:	430a      	orrs	r2, r1
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d88:	2102      	movs	r1, #2
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d8e:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD_R_Pin, GPIO_PIN_RESET);
 8001d9a:	23a0      	movs	r3, #160	; 0xa0
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2130      	movs	r1, #48	; 0x30
 8001da2:	0018      	movs	r0, r3
 8001da4:	f001 f817 	bl	8002dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8001da8:	492f      	ldr	r1, [pc, #188]	; (8001e68 <MX_GPIO_Init+0x144>)
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <MX_GPIO_Init+0x148>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 f811 	bl	8002dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0192      	lsls	r2, r2, #6
 8001dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dbc:	193b      	adds	r3, r7, r4
 8001dbe:	2288      	movs	r2, #136	; 0x88
 8001dc0:	0352      	lsls	r2, r2, #13
 8001dc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <MX_GPIO_Init+0x14c>)
 8001dce:	0019      	movs	r1, r3
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	f000 fe6d 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	2290      	movs	r2, #144	; 0x90
 8001de0:	0352      	lsls	r2, r2, #13
 8001de2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dea:	193a      	adds	r2, r7, r4
 8001dec:	23a0      	movs	r3, #160	; 0xa0
 8001dee:	05db      	lsls	r3, r3, #23
 8001df0:	0011      	movs	r1, r2
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 fe5c 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 8001df8:	193b      	adds	r3, r7, r4
 8001dfa:	2281      	movs	r2, #129	; 0x81
 8001dfc:	0052      	lsls	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	193a      	adds	r2, r7, r4
 8001e0e:	23a0      	movs	r3, #160	; 0xa0
 8001e10:	05db      	lsls	r3, r3, #23
 8001e12:	0011      	movs	r1, r2
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 fe4b 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD_R_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD_R_Pin;
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2230      	movs	r2, #48	; 0x30
 8001e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2201      	movs	r2, #1
 8001e24:	605a      	str	r2, [r3, #4]
  //GPIO_InitStruct.Pull = GPIO_NOPULL;
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	193a      	adds	r2, r7, r4
 8001e28:	23a0      	movs	r3, #160	; 0xa0
 8001e2a:	05db      	lsls	r3, r3, #23
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 fe3e 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8001e34:	0021      	movs	r1, r4
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <MX_GPIO_Init+0x144>)
 8001e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2201      	movs	r2, #1
 8001e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <MX_GPIO_Init+0x148>)
 8001e52:	0019      	movs	r1, r3
 8001e54:	0010      	movs	r0, r2
 8001e56:	f000 fe2b 	bl	8002ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b00b      	add	sp, #44	; 0x2c
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40021000 	.word	0x40021000
 8001e68:	00000c14 	.word	0x00000c14
 8001e6c:	50000400 	.word	0x50000400
 8001e70:	50000800 	.word	0x50000800

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_EPD_DisplayStringAt(0, 42, (unsigned char *)"ERROR OCCURRED", CENTER_MODE);
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <Error_Handler+0x20>)
 8001e7e:	2301      	movs	r3, #1
 8001e80:	212a      	movs	r1, #42	; 0x2a
 8001e82:	2000      	movs	r0, #0
 8001e84:	f000 f934 	bl	80020f0 <BSP_EPD_DisplayStringAt>
	  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001e88:	20ff      	movs	r0, #255	; 0xff
 8001e8a:	f000 f8d5 	bl	8002038 <BSP_EPD_Clear>
	  BSP_EPD_RefreshDisplay();
 8001e8e:	f000 f9e1 	bl	8002254 <BSP_EPD_RefreshDisplay>
	  BSP_EPD_DisplayStringAt(0, 42, (unsigned char *)"ERROR OCCURRED", CENTER_MODE);
 8001e92:	e7f3      	b.n	8001e7c <Error_Handler+0x8>
 8001e94:	0800595c 	.word	0x0800595c

08001e98 <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
	/*!< Set MSION bit */
	RCC->CR |= (uint32_t)0x00000100;
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0049      	lsls	r1, r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

	/*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
	RCC->CFGR &= (uint32_t) 0x88FF400C;
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001eb2:	4942      	ldr	r1, [pc, #264]	; (8001fbc <BSP_EPD_Init+0x124>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

	/*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFF6;
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ebe:	4940      	ldr	r1, [pc, #256]	; (8001fc0 <BSP_EPD_Init+0x128>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

	/*!< Reset HSI48ON  bit */
	RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	438a      	bics	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]

	/*!< Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ed6:	493b      	ldr	r1, [pc, #236]	; (8001fc4 <BSP_EPD_Init+0x12c>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

	/*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
	RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ee2:	4939      	ldr	r1, [pc, #228]	; (8001fc8 <BSP_EPD_Init+0x130>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]

	/*!< Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]

	RCC->IOPENR |= 0
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
			| RCC_IOPENR_GPIOAEN
			| RCC_IOPENR_GPIOBEN
			;
	RCC->APB2ENR |= 0
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <BSP_EPD_Init+0x120>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0149      	lsls	r1, r1, #5
 8001f04:	430a      	orrs	r2, r1
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34
			| RCC_APB2ENR_SPI1EN
			;

	GPIOA->MODER = (GPIOA->MODER
 8001f08:	23a0      	movs	r3, #160	; 0xa0
 8001f0a:	05db      	lsls	r3, r3, #23
 8001f0c:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE5)      // RED LED
			& (~GPIO_MODER_MODE8)      // EPD_BUSY
			& (~GPIO_MODER_MODE15)     // EPD_CS
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <BSP_EPD_Init+0x134>)
 8001f10:	401a      	ands	r2, r3
	GPIOA->MODER = (GPIOA->MODER
 8001f12:	23a0      	movs	r3, #160	; 0xa0
 8001f14:	05db      	lsls	r3, r3, #23
	) | (0
 8001f16:	492e      	ldr	r1, [pc, #184]	; (8001fd0 <BSP_EPD_Init+0x138>)
 8001f18:	430a      	orrs	r2, r1
	GPIOA->MODER = (GPIOA->MODER
 8001f1a:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE5_0)   // RED LED
			| (GPIO_Mode_In  * GPIO_MODER_MODE8_0)   // EPD_BUSY
			| (GPIO_Mode_Out * GPIO_MODER_MODE15_0)  // EPD_CS
	);

	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8001f1c:	23a0      	movs	r3, #160	; 0xa0
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	23a0      	movs	r3, #160	; 0xa0
 8001f24:	05db      	lsls	r3, r3, #23
			& (~GPIO_OSPEEDER_OSPEED15)    // EPD_CS
	) | (0
 8001f26:	21c0      	movs	r1, #192	; 0xc0
 8001f28:	0609      	lsls	r1, r1, #24
 8001f2a:	430a      	orrs	r2, r1
	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8001f2c:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED15_0)  // EPD_CS
	);
	GPIOA->PUPDR = (GPIOA->PUPDR
 8001f2e:	23a0      	movs	r3, #160	; 0xa0
 8001f30:	05db      	lsls	r3, r3, #23
 8001f32:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD8)    // EPD_BUSY
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <BSP_EPD_Init+0x13c>)
 8001f36:	401a      	ands	r2, r3
	GPIOA->PUPDR = (GPIOA->PUPDR
 8001f38:	23a0      	movs	r3, #160	; 0xa0
 8001f3a:	05db      	lsls	r3, r3, #23
	) | (0
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	0289      	lsls	r1, r1, #10
 8001f40:	430a      	orrs	r2, r1
	GPIOA->PUPDR = (GPIOA->PUPDR
 8001f42:	60da      	str	r2, [r3, #12]
			| (GPIO_PullDown * GPIO_PUPDR_PUPD8_0)  // EPD_BUSY
	);

	GPIOB->MODER = (GPIOB->MODER
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <BSP_EPD_Init+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE4)      // GREEN LED
			& (~GPIO_MODER_MODE2)      // EPD_RESET
			& (~GPIO_MODER_MODE10)     // EPD_PWR
			& (~GPIO_MODER_MODE11)     // EPD_DC
			& (~GPIO_MODER_MODE3)      // SPIx_SCK
			& (~GPIO_MODER_MODE5)      // SPIx_MOSI
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <BSP_EPD_Init+0x144>)
 8001f4a:	401a      	ands	r2, r3
	GPIOB->MODER = (GPIOB->MODER
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <BSP_EPD_Init+0x140>)
	) | (0
 8001f4e:	4924      	ldr	r1, [pc, #144]	; (8001fe0 <BSP_EPD_Init+0x148>)
 8001f50:	430a      	orrs	r2, r1
	GPIOB->MODER = (GPIOB->MODER
 8001f52:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE10_0)  // EPD_PWR
			| (GPIO_Mode_Out * GPIO_MODER_MODE11_0)  // EPD_DC
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE3_0)  // SPIx_SCK
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE5_0)  // SPIx_MOSI
	);
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <BSP_EPD_Init+0x140>)
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <BSP_EPD_Init+0x140>)
			& (~GPIO_OSPEEDER_OSPEED2)     // EPD_RESET
			& (~GPIO_OSPEEDER_OSPEED10)    // EPD_PWR
			& (~GPIO_OSPEEDER_OSPEED11)    // EPD_DC
			& (~GPIO_OSPEEDER_OSPEED3)     // SPIx_SCK
			& (~GPIO_OSPEEDER_OSPEED5)     // SPIx_MOSI
	) | (0
 8001f5a:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <BSP_EPD_Init+0x14c>)
 8001f5c:	430a      	orrs	r2, r1
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8001f5e:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED10_0)  // EPD_PWR
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED11_0)  // EPD_DC
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED3_0)   // SPIx_SCK
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED5_0)   // SPIx_MOSI
	);
	GPIOB->PUPDR = (GPIOB->PUPDR
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <BSP_EPD_Init+0x140>)
 8001f62:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD3)    // SPIx_SCK
			& (~GPIO_PUPDR_PUPD5)    // SPIx_MOSI
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <BSP_EPD_Init+0x150>)
 8001f66:	401a      	ands	r2, r3
	GPIOB->PUPDR = (GPIOB->PUPDR
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <BSP_EPD_Init+0x140>)
	) | (0
 8001f6a:	2184      	movs	r1, #132	; 0x84
 8001f6c:	0109      	lsls	r1, r1, #4
 8001f6e:	430a      	orrs	r2, r1
	GPIOB->PUPDR = (GPIOB->PUPDR
 8001f70:	60da      	str	r2, [r3, #12]
			| (GPIO_PullUp   * GPIO_PUPDR_PUPD3_0)  // SPIx_SCK
			| (GPIO_PullDown * GPIO_PUPDR_PUPD5_0)  // SPIx_MOSI
	);
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <BSP_EPD_Init+0x140>)
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <BSP_EPD_Init+0x140>)
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL3_0))    // SPIx_SCK
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL5_0))    // SPIx_MOSI
	) | (0
 8001f78:	491c      	ldr	r1, [pc, #112]	; (8001fec <BSP_EPD_Init+0x154>)
 8001f7a:	400a      	ands	r2, r1
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8001f7c:	621a      	str	r2, [r3, #32]
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL3_0)  // SPIx_SCK
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL5_0)  // SPIx_MOSI
	);

	uint8_t ret = EPD_ERROR;
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]

	/* Default value for the Font */
	pFont = &Font16;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <BSP_EPD_Init+0x158>)
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <BSP_EPD_Init+0x15c>)
 8001f88:	601a      	str	r2, [r3, #0]

	epd_drv = &gde021a1_drv;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <BSP_EPD_Init+0x160>)
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <BSP_EPD_Init+0x164>)
 8001f8e:	601a      	str	r2, [r3, #0]

	/* EPD Init */
	epd_drv->Init();
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <BSP_EPD_Init+0x160>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4798      	blx	r3

	/* Clear the EPD screen */
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001f98:	20ff      	movs	r0, #255	; 0xff
 8001f9a:	f000 f84d 	bl	8002038 <BSP_EPD_Clear>

	/* Initialize the font */
	BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <BSP_EPD_Init+0x168>)
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f83b 	bl	800201c <BSP_EPD_SetFont>

	ret = EPD_OK;
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

	return ret;
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	781b      	ldrb	r3, [r3, #0]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	88ff400c 	.word	0x88ff400c
 8001fc0:	fef6fff6 	.word	0xfef6fff6
 8001fc4:	fffbffff 	.word	0xfffbffff
 8001fc8:	ff02ffff 	.word	0xff02ffff
 8001fcc:	3ffcf3ff 	.word	0x3ffcf3ff
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	fffcffff 	.word	0xfffcffff
 8001fd8:	50000400 	.word	0x50000400
 8001fdc:	ff0ff00f 	.word	0xff0ff00f
 8001fe0:	00500990 	.word	0x00500990
 8001fe4:	00f00cf0 	.word	0x00f00cf0
 8001fe8:	fffff33f 	.word	0xfffff33f
 8001fec:	ff0f0fff 	.word	0xff0f0fff
 8001ff0:	20000594 	.word	0x20000594
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000598 	.word	0x20000598
 8001ffc:	20000010 	.word	0x20000010
 8002000:	20000000 	.word	0x20000000

08002004 <BSP_EPD_GetXSize>:
  * @brief  Gets the EPD X size.
  * @param  None
  * @retval EPD X size
  */
uint32_t BSP_EPD_GetXSize(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelWidth());
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <BSP_EPD_GetXSize+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4798      	blx	r3
 8002010:	0003      	movs	r3, r0
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000598 	.word	0x20000598

0800201c <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <BSP_EPD_SetFont+0x18>)
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	601a      	str	r2, [r3, #0]
}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	20000594 	.word	0x20000594

08002038 <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <BSP_EPD_Clear+0x50>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689c      	ldr	r4, [r3, #8]
 800204e:	2311      	movs	r3, #17
 8002050:	22ab      	movs	r2, #171	; 0xab
 8002052:	2100      	movs	r1, #0
 8002054:	2000      	movs	r0, #0
 8002056:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e00a      	b.n	8002074 <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <BSP_EPD_Clear+0x50>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	1dba      	adds	r2, r7, #6
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	0010      	movs	r0, r2
 800206c:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3301      	adds	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <BSP_EPD_Clear+0x54>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d9f0      	bls.n	800205e <BSP_EPD_Clear+0x26>
  }
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b005      	add	sp, #20
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000598 	.word	0x20000598
 800208c:	00000c17 	.word	0x00000c17

08002090 <BSP_EPD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void BSP_EPD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	0004      	movs	r4, r0
 8002098:	0008      	movs	r0, r1
 800209a:	0011      	movs	r1, r2
 800209c:	1dbb      	adds	r3, r7, #6
 800209e:	1c22      	adds	r2, r4, #0
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	1c02      	adds	r2, r0, #0
 80020a6:	801a      	strh	r2, [r3, #0]
 80020a8:	1cfb      	adds	r3, r7, #3
 80020aa:	1c0a      	adds	r2, r1, #0
 80020ac:	701a      	strb	r2, [r3, #0]
  Ascii -= 32;
 80020ae:	1cfb      	adds	r3, r7, #3
 80020b0:	1cfa      	adds	r2, r7, #3
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	3a20      	subs	r2, #32
 80020b6:	701a      	strb	r2, [r3, #0]
  
  DrawChar(Xpos, Ypos, &pFont->table[Ascii * ((pFont->Height) * (pFont->Width))]);
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <BSP_EPD_DisplayChar+0x5c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	1cfb      	adds	r3, r7, #3
 80020c0:	7819      	ldrb	r1, [r3, #0]
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <BSP_EPD_DisplayChar+0x5c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	88db      	ldrh	r3, [r3, #6]
 80020c8:	0018      	movs	r0, r3
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <BSP_EPD_DisplayChar+0x5c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	4343      	muls	r3, r0
 80020d2:	434b      	muls	r3, r1
 80020d4:	18d2      	adds	r2, r2, r3
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	8819      	ldrh	r1, [r3, #0]
 80020da:	1dbb      	adds	r3, r7, #6
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 f8da 	bl	8002298 <DrawChar>
}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b003      	add	sp, #12
 80020ea:	bd90      	pop	{r4, r7, pc}
 80020ec:	20000594 	.word	0x20000594

080020f0 <BSP_EPD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE  
  * @retval None
  */
void BSP_EPD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	0004      	movs	r4, r0
 80020f8:	0008      	movs	r0, r1
 80020fa:	60ba      	str	r2, [r7, #8]
 80020fc:	0019      	movs	r1, r3
 80020fe:	230e      	movs	r3, #14
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	1c22      	adds	r2, r4, #0
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	230c      	movs	r3, #12
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	1c0a      	adds	r2, r1, #0
 8002112:	701a      	strb	r2, [r3, #0]
  uint16_t refcolumn = 1, i = 0;
 8002114:	231e      	movs	r3, #30
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2201      	movs	r2, #1
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	231c      	movs	r3, #28
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2200      	movs	r2, #0
 8002122:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0, xsize = 0; 
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002130:	e002      	b.n	8002138 <BSP_EPD_DisplayStringAt+0x48>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3301      	adds	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	617a      	str	r2, [r7, #20]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f6      	bne.n	8002132 <BSP_EPD_DisplayStringAt+0x42>
  
  /* Characters number per line */
  xsize = (BSP_EPD_GetXSize()/pFont->Width);
 8002144:	f7ff ff5e 	bl	8002004 <BSP_EPD_GetXSize>
 8002148:	0002      	movs	r2, r0
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <BSP_EPD_DisplayStringAt+0x160>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	0019      	movs	r1, r3
 8002152:	0010      	movs	r0, r2
 8002154:	f7fd ffea 	bl	800012c <__udivsi3>
 8002158:	0003      	movs	r3, r0
 800215a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d016      	beq.n	8002192 <BSP_EPD_DisplayStringAt+0xa2>
 8002164:	dc2d      	bgt.n	80021c2 <BSP_EPD_DisplayStringAt+0xd2>
 8002166:	2b01      	cmp	r3, #1
 8002168:	d002      	beq.n	8002170 <BSP_EPD_DisplayStringAt+0x80>
 800216a:	2b02      	cmp	r3, #2
 800216c:	d018      	beq.n	80021a0 <BSP_EPD_DisplayStringAt+0xb0>
 800216e:	e028      	b.n	80021c2 <BSP_EPD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* pFont->Width) / 2;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad2      	subs	r2, r2, r3
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <BSP_EPD_DisplayStringAt+0x160>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	4353      	muls	r3, r2
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	b299      	uxth	r1, r3
 8002182:	231e      	movs	r3, #30
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	220e      	movs	r2, #14
 8002188:	18ba      	adds	r2, r7, r2
 800218a:	8812      	ldrh	r2, [r2, #0]
 800218c:	188a      	adds	r2, r1, r2
 800218e:	801a      	strh	r2, [r3, #0]
      break;
 8002190:	e01e      	b.n	80021d0 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002192:	231e      	movs	r3, #30
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	220e      	movs	r2, #14
 8002198:	18ba      	adds	r2, r7, r2
 800219a:	8812      	ldrh	r2, [r2, #0]
 800219c:	801a      	strh	r2, [r3, #0]
      break;
 800219e:	e017      	b.n	80021d0 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*pFont->Width);
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <BSP_EPD_DisplayStringAt+0x160>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	889b      	ldrh	r3, [r3, #4]
 80021ae:	4353      	muls	r3, r2
 80021b0:	b299      	uxth	r1, r3
 80021b2:	231e      	movs	r3, #30
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	220e      	movs	r2, #14
 80021b8:	18ba      	adds	r2, r7, r2
 80021ba:	8812      	ldrh	r2, [r2, #0]
 80021bc:	1a8a      	subs	r2, r1, r2
 80021be:	801a      	strh	r2, [r3, #0]
      break;
 80021c0:	e006      	b.n	80021d0 <BSP_EPD_DisplayStringAt+0xe0>
    }    
  default:
    {
      refcolumn = Xpos;
 80021c2:	231e      	movs	r3, #30
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	220e      	movs	r2, #14
 80021c8:	18ba      	adds	r2, r7, r2
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	801a      	strh	r2, [r3, #0]
      break;
 80021ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Send the string character by character on EPD */
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80021d0:	e01b      	b.n	800220a <BSP_EPD_DisplayStringAt+0x11a>
  {
    /* Display one character on EPD */
    BSP_EPD_DisplayChar(refcolumn, Ypos, *Text);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	230c      	movs	r3, #12
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	8819      	ldrh	r1, [r3, #0]
 80021dc:	241e      	movs	r4, #30
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff ff54 	bl	8002090 <BSP_EPD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += pFont->Width;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <BSP_EPD_DisplayStringAt+0x160>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	8899      	ldrh	r1, [r3, #4]
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	193a      	adds	r2, r7, r4
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	188a      	adds	r2, r1, r2
 80021f6:	801a      	strh	r2, [r3, #0]
    /* Point on the next character */
    Text++;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
    i++;
 80021fe:	211c      	movs	r1, #28
 8002200:	187b      	adds	r3, r7, r1
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	187b      	adds	r3, r7, r1
 8002206:	3201      	adds	r2, #1
 8002208:	801a      	strh	r2, [r3, #0]
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	4193      	sbcs	r3, r2
 8002212:	b2dc      	uxtb	r4, r3
 8002214:	f7ff fef6 	bl	8002004 <BSP_EPD_GetXSize>
 8002218:	0001      	movs	r1, r0
 800221a:	231c      	movs	r3, #28
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <BSP_EPD_DisplayStringAt+0x160>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	4353      	muls	r3, r2
 8002228:	1acb      	subs	r3, r1, r3
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	0c1a      	lsrs	r2, r3, #16
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <BSP_EPD_DisplayStringAt+0x160>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	889b      	ldrh	r3, [r3, #4]
 8002234:	0019      	movs	r1, r3
 8002236:	2300      	movs	r3, #0
 8002238:	428a      	cmp	r2, r1
 800223a:	415b      	adcs	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4023      	ands	r3, r4
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1c5      	bne.n	80021d2 <BSP_EPD_DisplayStringAt+0xe2>
  }
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b009      	add	sp, #36	; 0x24
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	20000594 	.word	0x20000594

08002254 <BSP_EPD_RefreshDisplay>:
  * @brief  Updates the display from the data located into the RAM.
  * @param  None
  * @retval None
  */
void BSP_EPD_RefreshDisplay(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Refresh display sequence */
  epd_drv->RefreshDisplay();
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <BSP_EPD_RefreshDisplay+0x3c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	4798      	blx	r3

  /* Poll on the BUSY signal and wait for the EPD to be ready */
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	005a      	lsls	r2, r3, #1
 8002266:	23a0      	movs	r3, #160	; 0xa0
 8002268:	05db      	lsls	r3, r3, #23
 800226a:	0011      	movs	r1, r2
 800226c:	0018      	movs	r0, r3
 800226e:	f000 fd95 	bl	8002d9c <HAL_GPIO_ReadPin>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d1f5      	bne.n	8002262 <BSP_EPD_RefreshDisplay+0xe>

  /*  EPD reset pin mamagement */
  EPD_RESET_HIGH();
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <BSP_EPD_RefreshDisplay+0x40>)
 8002278:	2201      	movs	r2, #1
 800227a:	2104      	movs	r1, #4
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fdaa 	bl	8002dd6 <HAL_GPIO_WritePin>

  /* Add a 10 ms Delay after EPD pin Reset */
  EPD_Delay(10);
 8002282:	200a      	movs	r0, #10
 8002284:	f7ff fb2a 	bl	80018dc <EPD_Delay>
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20000598 	.word	0x20000598
 8002294:	50000400 	.word	0x50000400

08002298 <DrawChar>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 17
  * @param  c: pointer to the character data
  * @retval None
  */
static void  DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	603a      	str	r2, [r7, #0]
 80022a0:	1dbb      	adds	r3, r7, #6
 80022a2:	1c02      	adds	r2, r0, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	1c0a      	adds	r2, r1, #0
 80022aa:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t data_length = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  uint16_t height = 0;
 80022b4:	210e      	movs	r1, #14
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	2200      	movs	r2, #0
 80022ba:	801a      	strh	r2, [r3, #0]
  uint16_t width = 0;
 80022bc:	200c      	movs	r0, #12
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	2200      	movs	r2, #0
 80022c2:	801a      	strh	r2, [r3, #0]

  width  = pFont->Width;
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <DrawChar+0xb4>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	183b      	adds	r3, r7, r0
 80022ca:	8892      	ldrh	r2, [r2, #4]
 80022cc:	801a      	strh	r2, [r3, #0]
  height = pFont->Height;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <DrawChar+0xb4>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	88d2      	ldrh	r2, [r2, #6]
 80022d6:	801a      	strh	r2, [r3, #0]
  
  /* Set the Character display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos + width - 1), (Ypos + height - 1));
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <DrawChar+0xb8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689c      	ldr	r4, [r3, #8]
 80022de:	1dba      	adds	r2, r7, #6
 80022e0:	183b      	adds	r3, r7, r0
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29d      	uxth	r5, r3
 80022ee:	1d3a      	adds	r2, r7, #4
 80022f0:	000e      	movs	r6, r1
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	8819      	ldrh	r1, [r3, #0]
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	8818      	ldrh	r0, [r3, #0]
 8002308:	0013      	movs	r3, r2
 800230a:	002a      	movs	r2, r5
 800230c:	47a0      	blx	r4
  
  data_length = (height * width);
 800230e:	19bb      	adds	r3, r7, r6
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	200c      	movs	r0, #12
 8002314:	183a      	adds	r2, r7, r0
 8002316:	8812      	ldrh	r2, [r2, #0]
 8002318:	4353      	muls	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    
  for(index = 0; index < data_length; index++)
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e00b      	b.n	800233a <DrawChar+0xa2>
  {
    epd_drv->WritePixel(c[index]);
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <DrawChar+0xb8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	188a      	adds	r2, r1, r2
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	0010      	movs	r0, r2
 8002332:	4798      	blx	r3
  for(index = 0; index < data_length; index++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3ef      	bcc.n	8002322 <DrawChar+0x8a>
  }
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b007      	add	sp, #28
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234c:	20000594 	.word	0x20000594
 8002350:	20000598 	.word	0x20000598

08002354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_MspInit+0x24>)
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_MspInit+0x24>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_MspInit+0x24>)
 8002366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_MspInit+0x24>)
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	0549      	lsls	r1, r1, #21
 800236e:	430a      	orrs	r2, r1
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	240c      	movs	r4, #12
 8002386:	193b      	adds	r3, r7, r4
 8002388:	0018      	movs	r0, r3
 800238a:	2314      	movs	r3, #20
 800238c:	001a      	movs	r2, r3
 800238e:	2100      	movs	r1, #0
 8002390:	f002 fe54 	bl	800503c <memset>
  if(hi2c->Instance==I2C1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_I2C_MspInit+0x80>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d129      	bne.n	80023f2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_I2C_MspInit+0x84>)
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_I2C_MspInit+0x84>)
 80023a4:	2102      	movs	r1, #2
 80023a6:	430a      	orrs	r2, r1
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_I2C_MspInit+0x84>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	22c0      	movs	r2, #192	; 0xc0
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023be:	0021      	movs	r1, r4
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2212      	movs	r2, #18
 80023c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2201      	movs	r2, #1
 80023ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2203      	movs	r2, #3
 80023d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2204      	movs	r2, #4
 80023d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_I2C_MspInit+0x88>)
 80023dc:	0019      	movs	r1, r3
 80023de:	0010      	movs	r0, r2
 80023e0:	f000 fb66 	bl	8002ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_I2C_MspInit+0x84>)
 80023e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_I2C_MspInit+0x84>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	0389      	lsls	r1, r1, #14
 80023ee:	430a      	orrs	r2, r1
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b009      	add	sp, #36	; 0x24
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	40005400 	.word	0x40005400
 8002400:	40021000 	.word	0x40021000
 8002404:	50000400 	.word	0x50000400

08002408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	2414      	movs	r4, #20
 8002412:	193b      	adds	r3, r7, r4
 8002414:	0018      	movs	r0, r3
 8002416:	2314      	movs	r3, #20
 8002418:	001a      	movs	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f002 fe0e 	bl	800503c <memset>
  if(hspi->Instance==SPI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <HAL_SPI_MspInit+0x124>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d14c      	bne.n	80024c4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_SPI_MspInit+0x128>)
 800242c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_SPI_MspInit+0x128>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0149      	lsls	r1, r1, #5
 8002434:	430a      	orrs	r2, r1
 8002436:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_SPI_MspInit+0x128>)
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_SPI_MspInit+0x128>)
 800243e:	2101      	movs	r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_SPI_MspInit+0x128>)
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_SPI_MspInit+0x128>)
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_SPI_MspInit+0x128>)
 8002456:	2102      	movs	r1, #2
 8002458:	430a      	orrs	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_SPI_MspInit+0x128>)
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	2202      	movs	r2, #2
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8002468:	193b      	adds	r3, r7, r4
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	0212      	lsls	r2, r2, #8
 800246e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	193b      	adds	r3, r7, r4
 8002472:	2202      	movs	r2, #2
 8002474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	193b      	adds	r3, r7, r4
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	193b      	adds	r3, r7, r4
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002482:	193b      	adds	r3, r7, r4
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8002488:	193a      	adds	r2, r7, r4
 800248a:	23a0      	movs	r3, #160	; 0xa0
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	0011      	movs	r1, r2
 8002490:	0018      	movs	r0, r3
 8002492:	f000 fb0d 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8002496:	0021      	movs	r1, r4
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2228      	movs	r2, #40	; 0x28
 800249c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2202      	movs	r2, #2
 80024a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_SPI_MspInit+0x12c>)
 80024ba:	0019      	movs	r1, r3
 80024bc:	0010      	movs	r0, r2
 80024be:	f000 faf7 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024c2:	e02e      	b.n	8002522 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <HAL_SPI_MspInit+0x130>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d129      	bne.n	8002522 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_SPI_MspInit+0x128>)
 80024d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_SPI_MspInit+0x128>)
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	01c9      	lsls	r1, r1, #7
 80024d8:	430a      	orrs	r2, r1
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_SPI_MspInit+0x128>)
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_SPI_MspInit+0x128>)
 80024e2:	2102      	movs	r1, #2
 80024e4:	430a      	orrs	r2, r1
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_SPI_MspInit+0x128>)
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 80024f4:	2114      	movs	r1, #20
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	22f0      	movs	r2, #240	; 0xf0
 80024fa:	0212      	lsls	r2, r2, #8
 80024fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2202      	movs	r2, #2
 8002502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2203      	movs	r2, #3
 800250e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	187b      	adds	r3, r7, r1
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_SPI_MspInit+0x12c>)
 800251a:	0019      	movs	r1, r3
 800251c:	0010      	movs	r0, r2
 800251e:	f000 fac7 	bl	8002ab0 <HAL_GPIO_Init>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b00b      	add	sp, #44	; 0x2c
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40013000 	.word	0x40013000
 8002530:	40021000 	.word	0x40021000
 8002534:	50000400 	.word	0x50000400
 8002538:	40003800 	.word	0x40003800

0800253c <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b08b      	sub	sp, #44	; 0x2c
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	2414      	movs	r4, #20
 8002546:	193b      	adds	r3, r7, r4
 8002548:	0018      	movs	r0, r3
 800254a:	2314      	movs	r3, #20
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f002 fd74 	bl	800503c <memset>
  if(htsc->Instance==TSC)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a41      	ldr	r2, [pc, #260]	; (8002660 <HAL_TSC_MspInit+0x124>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d17c      	bne.n	8002658 <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_TSC_MspInit+0x128>)
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_TSC_MspInit+0x128>)
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0249      	lsls	r1, r1, #9
 8002568:	430a      	orrs	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
 800256c:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_TSC_MspInit+0x128>)
 800256e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	025b      	lsls	r3, r3, #9
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_TSC_MspInit+0x128>)
 800257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257e:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_TSC_MspInit+0x128>)
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_TSC_MspInit+0x128>)
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_TSC_MspInit+0x128>)
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_TSC_MspInit+0x128>)
 8002598:	2102      	movs	r1, #2
 800259a:	430a      	orrs	r2, r1
 800259c:	62da      	str	r2, [r3, #44]	; 0x2c
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_TSC_MspInit+0x128>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80025aa:	193b      	adds	r3, r7, r4
 80025ac:	2244      	movs	r2, #68	; 0x44
 80025ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	2202      	movs	r2, #2
 80025b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	2203      	movs	r2, #3
 80025c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	193a      	adds	r2, r7, r4
 80025ca:	23a0      	movs	r3, #160	; 0xa0
 80025cc:	05db      	lsls	r3, r3, #23
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fa6d 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2288      	movs	r2, #136	; 0x88
 80025da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	2212      	movs	r2, #18
 80025e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	2203      	movs	r2, #3
 80025f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	193a      	adds	r2, r7, r4
 80025f6:	23a0      	movs	r3, #160	; 0xa0
 80025f8:	05db      	lsls	r3, r3, #23
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fa57 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002602:	193b      	adds	r3, r7, r4
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	193b      	adds	r3, r7, r4
 800260a:	2202      	movs	r2, #2
 800260c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	193b      	adds	r3, r7, r4
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	193b      	adds	r3, r7, r4
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	2203      	movs	r2, #3
 800261e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	193b      	adds	r3, r7, r4
 8002622:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_TSC_MspInit+0x12c>)
 8002624:	0019      	movs	r1, r3
 8002626:	0010      	movs	r0, r2
 8002628:	f000 fa42 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800262c:	0021      	movs	r1, r4
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2202      	movs	r2, #2
 8002632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002634:	187b      	adds	r3, r7, r1
 8002636:	2212      	movs	r2, #18
 8002638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	187b      	adds	r3, r7, r1
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	187b      	adds	r3, r7, r1
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8002646:	187b      	adds	r3, r7, r1
 8002648:	2203      	movs	r2, #3
 800264a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264c:	187b      	adds	r3, r7, r1
 800264e:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_TSC_MspInit+0x12c>)
 8002650:	0019      	movs	r1, r3
 8002652:	0010      	movs	r0, r2
 8002654:	f000 fa2c 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b00b      	add	sp, #44	; 0x2c
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	40024000 	.word	0x40024000
 8002664:	40021000 	.word	0x40021000
 8002668:	50000400 	.word	0x50000400

0800266c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	240c      	movs	r4, #12
 8002676:	193b      	adds	r3, r7, r4
 8002678:	0018      	movs	r0, r3
 800267a:	2314      	movs	r3, #20
 800267c:	001a      	movs	r2, r3
 800267e:	2100      	movs	r1, #0
 8002680:	f002 fcdc 	bl	800503c <memset>
  if(huart->Instance==USART1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_UART_MspInit+0x80>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12a      	bne.n	80026e4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_UART_MspInit+0x84>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_UART_MspInit+0x84>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	01c9      	lsls	r1, r1, #7
 8002698:	430a      	orrs	r2, r1
 800269a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_UART_MspInit+0x84>)
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_UART_MspInit+0x84>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	430a      	orrs	r2, r1
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_UART_MspInit+0x84>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	22c0      	movs	r2, #192	; 0xc0
 80026b8:	00d2      	lsls	r2, r2, #3
 80026ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	0021      	movs	r1, r4
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2202      	movs	r2, #2
 80026c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2203      	movs	r2, #3
 80026ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2204      	movs	r2, #4
 80026d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	187a      	adds	r2, r7, r1
 80026d8:	23a0      	movs	r3, #160	; 0xa0
 80026da:	05db      	lsls	r3, r3, #23
 80026dc:	0011      	movs	r1, r2
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 f9e6 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b009      	add	sp, #36	; 0x24
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <HAL_PCD_MspInit+0x28>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d106      	bne.n	8002714 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_PCD_MspInit+0x2c>)
 8002708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_PCD_MspInit+0x2c>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0409      	lsls	r1, r1, #16
 8002710:	430a      	orrs	r2, r1
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40005c00 	.word	0x40005c00
 8002720:	40021000 	.word	0x40021000

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <NMI_Handler+0x4>

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 f8be 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <_sbrk+0x5c>)
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <_sbrk+0x60>)
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <_sbrk+0x64>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <_sbrk+0x68>)
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d207      	bcs.n	8002794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002784:	f002 fc30 	bl	8004fe8 <__errno>
 8002788:	0003      	movs	r3, r0
 800278a:	220c      	movs	r2, #12
 800278c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278e:	2301      	movs	r3, #1
 8002790:	425b      	negs	r3, r3
 8002792:	e009      	b.n	80027a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	18d2      	adds	r2, r2, r3
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <_sbrk+0x64>)
 80027a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b006      	add	sp, #24
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20002000 	.word	0x20002000
 80027b4:	00000400 	.word	0x00000400
 80027b8:	2000059c 	.word	0x2000059c
 80027bc:	200005b8 	.word	0x200005b8

080027c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d0:	f7ff fff6 	bl	80027c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <LoopForever+0x6>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <LoopForever+0xe>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <LoopForever+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fa:	f002 fbfb 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff f87d 	bl	80018fc <main>

08002802 <LoopForever>:

LoopForever:
    b LoopForever
 8002802:	e7fe      	b.n	8002802 <LoopForever>
  ldr   r0, =_estack
 8002804:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002810:	080072d8 	.word	0x080072d8
  ldr r2, =_sbss
 8002814:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002818:	200005b4 	.word	0x200005b4

0800281c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC1_COMP_IRQHandler>
	...

08002820 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_Init+0x3c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Init+0x3c>)
 8002832:	2140      	movs	r1, #64	; 0x40
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002838:	2000      	movs	r0, #0
 800283a:	f000 f811 	bl	8002860 <HAL_InitTick>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d003      	beq.n	800284a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e001      	b.n	800284e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800284a:	f7ff fd83 	bl	8002354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	781b      	ldrb	r3, [r3, #0]
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_InitTick+0x5c>)
 800286a:	681c      	ldr	r4, [r3, #0]
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_InitTick+0x60>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	0019      	movs	r1, r3
 8002872:	23fa      	movs	r3, #250	; 0xfa
 8002874:	0098      	lsls	r0, r3, #2
 8002876:	f7fd fc59 	bl	800012c <__udivsi3>
 800287a:	0003      	movs	r3, r0
 800287c:	0019      	movs	r1, r3
 800287e:	0020      	movs	r0, r4
 8002880:	f7fd fc54 	bl	800012c <__udivsi3>
 8002884:	0003      	movs	r3, r0
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f905 	bl	8002a96 <HAL_SYSTICK_Config>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e00f      	b.n	80028b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d80b      	bhi.n	80028b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	2301      	movs	r3, #1
 800289e:	425b      	negs	r3, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f8e2 	bl	8002a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_InitTick+0x64>)
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b003      	add	sp, #12
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	20000044 	.word	0x20000044
 80028c0:	2000004c 	.word	0x2000004c
 80028c4:	20000048 	.word	0x20000048

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x1c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	001a      	movs	r2, r3
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_IncTick+0x20>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	18d2      	adds	r2, r2, r3
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_IncTick+0x20>)
 80028da:	601a      	str	r2, [r3, #0]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	2000004c 	.word	0x2000004c
 80028e8:	200005a0 	.word	0x200005a0

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b02      	ldr	r3, [pc, #8]	; (80028fc <HAL_GetTick+0x10>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	200005a0 	.word	0x200005a0

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff fff0 	bl	80028ec <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_Delay+0x44>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	001a      	movs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	189b      	adds	r3, r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	f7ff ffe0 	bl	80028ec <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	b004      	add	sp, #16
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	2000004c 	.word	0x2000004c

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	0002      	movs	r2, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b7f      	cmp	r3, #127	; 0x7f
 800295c:	d828      	bhi.n	80029b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <__NVIC_SetPriority+0xd4>)
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b25b      	sxtb	r3, r3
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	33c0      	adds	r3, #192	; 0xc0
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	589b      	ldr	r3, [r3, r2]
 800296e:	1dfa      	adds	r2, r7, #7
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	0011      	movs	r1, r2
 8002974:	2203      	movs	r2, #3
 8002976:	400a      	ands	r2, r1
 8002978:	00d2      	lsls	r2, r2, #3
 800297a:	21ff      	movs	r1, #255	; 0xff
 800297c:	4091      	lsls	r1, r2
 800297e:	000a      	movs	r2, r1
 8002980:	43d2      	mvns	r2, r2
 8002982:	401a      	ands	r2, r3
 8002984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	22ff      	movs	r2, #255	; 0xff
 800298c:	401a      	ands	r2, r3
 800298e:	1dfb      	adds	r3, r7, #7
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	0018      	movs	r0, r3
 8002994:	2303      	movs	r3, #3
 8002996:	4003      	ands	r3, r0
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800299c:	481f      	ldr	r0, [pc, #124]	; (8002a1c <__NVIC_SetPriority+0xd4>)
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	430a      	orrs	r2, r1
 80029a8:	33c0      	adds	r3, #192	; 0xc0
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029ae:	e031      	b.n	8002a14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <__NVIC_SetPriority+0xd8>)
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	0019      	movs	r1, r3
 80029b8:	230f      	movs	r3, #15
 80029ba:	400b      	ands	r3, r1
 80029bc:	3b08      	subs	r3, #8
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3306      	adds	r3, #6
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	3304      	adds	r3, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	1dfa      	adds	r2, r7, #7
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	0011      	movs	r1, r2
 80029d0:	2203      	movs	r2, #3
 80029d2:	400a      	ands	r2, r1
 80029d4:	00d2      	lsls	r2, r2, #3
 80029d6:	21ff      	movs	r1, #255	; 0xff
 80029d8:	4091      	lsls	r1, r2
 80029da:	000a      	movs	r2, r1
 80029dc:	43d2      	mvns	r2, r2
 80029de:	401a      	ands	r2, r3
 80029e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	22ff      	movs	r2, #255	; 0xff
 80029e8:	401a      	ands	r2, r3
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	0018      	movs	r0, r3
 80029f0:	2303      	movs	r3, #3
 80029f2:	4003      	ands	r3, r0
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <__NVIC_SetPriority+0xd8>)
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	001c      	movs	r4, r3
 8002a00:	230f      	movs	r3, #15
 8002a02:	4023      	ands	r3, r4
 8002a04:	3b08      	subs	r3, #8
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	3306      	adds	r3, #6
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	18c3      	adds	r3, r0, r3
 8002a10:	3304      	adds	r3, #4
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b003      	add	sp, #12
 8002a1a:	bd90      	pop	{r4, r7, pc}
 8002a1c:	e000e100 	.word	0xe000e100
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1e5a      	subs	r2, r3, #1
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	045b      	lsls	r3, r3, #17
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d301      	bcc.n	8002a3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e010      	b.n	8002a5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <SysTick_Config+0x44>)
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	3a01      	subs	r2, #1
 8002a42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a44:	2301      	movs	r3, #1
 8002a46:	425b      	negs	r3, r3
 8002a48:	2103      	movs	r1, #3
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff ff7c 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x44>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x44>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	210f      	movs	r1, #15
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	1c02      	adds	r2, r0, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ff5d 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ffbf 	bl	8002a24 <SysTick_Config>
 8002aa6:	0003      	movs	r3, r0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ac6:	e14f      	b.n	8002d68 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4091      	lsls	r1, r2
 8002ad2:	000a      	movs	r2, r1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d100      	bne.n	8002ae0 <HAL_GPIO_Init+0x30>
 8002ade:	e140      	b.n	8002d62 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d005      	beq.n	8002af8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d130      	bne.n	8002b5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	409a      	lsls	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	0013      	movs	r3, r2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b2e:	2201      	movs	r2, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
 8002b34:	0013      	movs	r3, r2
 8002b36:	43da      	mvns	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	2201      	movs	r2, #1
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d017      	beq.n	8002b96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0013      	movs	r3, r2
 8002b76:	43da      	mvns	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d123      	bne.n	8002bea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	58d3      	ldr	r3, [r2, r3]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2107      	movs	r1, #7
 8002bce:	400b      	ands	r3, r1
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	6939      	ldr	r1, [r7, #16]
 8002be8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	23c0      	movs	r3, #192	; 0xc0
 8002c24:	029b      	lsls	r3, r3, #10
 8002c26:	4013      	ands	r3, r2
 8002c28:	d100      	bne.n	8002c2c <HAL_GPIO_Init+0x17c>
 8002c2a:	e09a      	b.n	8002d62 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_GPIO_Init+0x2d4>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	589b      	ldr	r3, [r3, r2]
 8002c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	220f      	movs	r2, #15
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	43da      	mvns	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	23a0      	movs	r3, #160	; 0xa0
 8002c60:	05db      	lsls	r3, r3, #23
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x1ea>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_GPIO_Init+0x2d8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x1e6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <HAL_GPIO_Init+0x2dc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x1e2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a45      	ldr	r2, [pc, #276]	; (8002d90 <HAL_GPIO_Init+0x2e0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x1de>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a44      	ldr	r2, [pc, #272]	; (8002d94 <HAL_GPIO_Init+0x2e4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x1da>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x2d4>)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	035b      	lsls	r3, r3, #13
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cde:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	039b      	lsls	r3, r3, #14
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d08:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002d0e:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43da      	mvns	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	4013      	ands	r3, r2
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d38:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	025b      	lsls	r3, r3, #9
 8002d50:	4013      	ands	r3, r2
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	40da      	lsrs	r2, r3
 8002d70:	1e13      	subs	r3, r2, #0
 8002d72:	d000      	beq.n	8002d76 <HAL_GPIO_Init+0x2c6>
 8002d74:	e6a8      	b.n	8002ac8 <HAL_GPIO_Init+0x18>
  }
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010000 	.word	0x40010000
 8002d88:	50000400 	.word	0x50000400
 8002d8c:	50000800 	.word	0x50000800
 8002d90:	50000c00 	.word	0x50000c00
 8002d94:	50001c00 	.word	0x50001c00
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	000a      	movs	r2, r1
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	1cba      	adds	r2, r7, #2
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	4013      	ands	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002db6:	230f      	movs	r3, #15
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e003      	b.n	8002dc8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc0:	230f      	movs	r3, #15
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002dc8:	230f      	movs	r3, #15
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	781b      	ldrb	r3, [r3, #0]
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b004      	add	sp, #16
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	0008      	movs	r0, r1
 8002de0:	0011      	movs	r1, r2
 8002de2:	1cbb      	adds	r3, r7, #2
 8002de4:	1c02      	adds	r2, r0, #0
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	1c7b      	adds	r3, r7, #1
 8002dea:	1c0a      	adds	r2, r1, #0
 8002dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dee:	1c7b      	adds	r3, r7, #1
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df6:	1cbb      	adds	r3, r7, #2
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002dfe:	e003      	b.n	8002e08 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002e00:	1cbb      	adds	r3, r7, #2
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e082      	b.n	8002f28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2241      	movs	r2, #65	; 0x41
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2240      	movs	r2, #64	; 0x40
 8002e32:	2100      	movs	r1, #0
 8002e34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff fa9f 	bl	800237c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2241      	movs	r2, #65	; 0x41
 8002e42:	2124      	movs	r1, #36	; 0x24
 8002e44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	438a      	bics	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4934      	ldr	r1, [pc, #208]	; (8002f30 <HAL_I2C_Init+0x120>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4931      	ldr	r1, [pc, #196]	; (8002f34 <HAL_I2C_Init+0x124>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d108      	bne.n	8002e8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0209      	lsls	r1, r1, #8
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	e007      	b.n	8002e9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2184      	movs	r1, #132	; 0x84
 8002e98:	0209      	lsls	r1, r1, #8
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d104      	bne.n	8002eb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	491f      	ldr	r1, [pc, #124]	; (8002f38 <HAL_I2C_Init+0x128>)
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	491a      	ldr	r1, [pc, #104]	; (8002f34 <HAL_I2C_Init+0x124>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69d9      	ldr	r1, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2241      	movs	r2, #65	; 0x41
 8002f14:	2120      	movs	r1, #32
 8002f16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2242      	movs	r2, #66	; 0x42
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	f0ffffff 	.word	0xf0ffffff
 8002f34:	ffff7fff 	.word	0xffff7fff
 8002f38:	02008000 	.word	0x02008000

08002f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2241      	movs	r2, #65	; 0x41
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d138      	bne.n	8002fc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	5c9b      	ldrb	r3, [r3, r2]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e032      	b.n	8002fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2241      	movs	r2, #65	; 0x41
 8002f6c:	2124      	movs	r1, #36	; 0x24
 8002f6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4911      	ldr	r1, [pc, #68]	; (8002fd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2241      	movs	r2, #65	; 0x41
 8002fb4:	2120      	movs	r1, #32
 8002fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2240      	movs	r2, #64	; 0x40
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	ffffefff 	.word	0xffffefff

08002fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2241      	movs	r2, #65	; 0x41
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d139      	bne.n	800305e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2240      	movs	r2, #64	; 0x40
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e033      	b.n	8003060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2241      	movs	r2, #65	; 0x41
 8003004:	2124      	movs	r1, #36	; 0x24
 8003006:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	438a      	bics	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2241      	movs	r2, #65	; 0x41
 800304e:	2120      	movs	r1, #32
 8003050:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2240      	movs	r2, #64	; 0x40
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e000      	b.n	8003060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fffff0ff 	.word	0xfffff0ff

0800306c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306e:	b08b      	sub	sp, #44	; 0x2c
 8003070:	af06      	add	r7, sp, #24
 8003072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0f0      	b.n	8003260 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a79      	ldr	r2, [pc, #484]	; (8003268 <HAL_PCD_Init+0x1fc>)
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	23aa      	movs	r3, #170	; 0xaa
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	2100      	movs	r1, #0
 8003092:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff fb2c 	bl	80026f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a72      	ldr	r2, [pc, #456]	; (8003268 <HAL_PCD_Init+0x1fc>)
 80030a0:	2103      	movs	r1, #3
 80030a2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f001 ff5b 	bl	8004f64 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ae:	230f      	movs	r3, #15
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e049      	b.n	800314c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030b8:	200f      	movs	r0, #15
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	0013      	movs	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	18cb      	adds	r3, r1, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	0013      	movs	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	183a      	adds	r2, r7, r0
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	0013      	movs	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	18cb      	adds	r3, r1, r3
 80030fa:	3303      	adds	r3, #3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003100:	183b      	adds	r3, r7, r0
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	0013      	movs	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	189b      	adds	r3, r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	18cb      	adds	r3, r1, r3
 8003110:	3338      	adds	r3, #56	; 0x38
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003116:	183b      	adds	r3, r7, r0
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	0013      	movs	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	189b      	adds	r3, r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	18cb      	adds	r3, r1, r3
 8003126:	333c      	adds	r3, #60	; 0x3c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800312c:	183b      	adds	r3, r7, r0
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	0013      	movs	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	189b      	adds	r3, r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	18cb      	adds	r3, r1, r3
 800313c:	3340      	adds	r3, #64	; 0x40
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003142:	183b      	adds	r3, r7, r0
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	183b      	adds	r3, r7, r0
 8003148:	3201      	adds	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	210f      	movs	r1, #15
 800314e:	187b      	adds	r3, r7, r1
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3ae      	bcc.n	80030b8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315a:	187b      	adds	r3, r7, r1
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e056      	b.n	8003210 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003162:	240f      	movs	r4, #15
 8003164:	193b      	adds	r3, r7, r4
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	236a      	movs	r3, #106	; 0x6a
 800316c:	33ff      	adds	r3, #255	; 0xff
 800316e:	0019      	movs	r1, r3
 8003170:	0013      	movs	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	189b      	adds	r3, r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	18c3      	adds	r3, r0, r3
 800317a:	185b      	adds	r3, r3, r1
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003180:	193b      	adds	r3, r7, r4
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	23b4      	movs	r3, #180	; 0xb4
 8003188:	0059      	lsls	r1, r3, #1
 800318a:	0013      	movs	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	189b      	adds	r3, r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	18c3      	adds	r3, r0, r3
 8003194:	185b      	adds	r3, r3, r1
 8003196:	193a      	adds	r2, r7, r4
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800319c:	193b      	adds	r3, r7, r4
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	236c      	movs	r3, #108	; 0x6c
 80031a4:	33ff      	adds	r3, #255	; 0xff
 80031a6:	0019      	movs	r1, r3
 80031a8:	0013      	movs	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	18c3      	adds	r3, r0, r3
 80031b2:	185b      	adds	r3, r3, r1
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	23bc      	movs	r3, #188	; 0xbc
 80031c0:	0059      	lsls	r1, r3, #1
 80031c2:	0013      	movs	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	18c3      	adds	r3, r0, r3
 80031cc:	185b      	adds	r3, r3, r1
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	23be      	movs	r3, #190	; 0xbe
 80031da:	0059      	lsls	r1, r3, #1
 80031dc:	0013      	movs	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	18c3      	adds	r3, r0, r3
 80031e6:	185b      	adds	r3, r3, r1
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	0059      	lsls	r1, r3, #1
 80031f6:	0013      	movs	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	18c3      	adds	r3, r0, r3
 8003200:	185b      	adds	r3, r3, r1
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003206:	193b      	adds	r3, r7, r4
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	193b      	adds	r3, r7, r4
 800320c:	3201      	adds	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	230f      	movs	r3, #15
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d3a1      	bcc.n	8003162 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	466a      	mov	r2, sp
 8003226:	0011      	movs	r1, r2
 8003228:	001a      	movs	r2, r3
 800322a:	3210      	adds	r2, #16
 800322c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800322e:	c170      	stmia	r1!, {r4, r5, r6}
 8003230:	ca30      	ldmia	r2!, {r4, r5}
 8003232:	c130      	stmia	r1!, {r4, r5}
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f001 fead 	bl	8004f98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_PCD_Init+0x1fc>)
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d103      	bne.n	800325e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 f807 	bl	800326c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b005      	add	sp, #20
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003268:	000002a9 	.word	0x000002a9

0800326c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	23ba      	movs	r3, #186	; 0xba
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	2101      	movs	r1, #1
 8003282:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	23b8      	movs	r3, #184	; 0xb8
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	2100      	movs	r1, #0
 800328c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2254      	movs	r2, #84	; 0x54
 8003292:	5a9b      	ldrh	r3, [r3, r2]
 8003294:	b29b      	uxth	r3, r3
 8003296:	2201      	movs	r2, #1
 8003298:	4313      	orrs	r3, r2
 800329a:	b299      	uxth	r1, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2254      	movs	r2, #84	; 0x54
 80032a0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2254      	movs	r2, #84	; 0x54
 80032a6:	5a9b      	ldrh	r3, [r3, r2]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2202      	movs	r2, #2
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b299      	uxth	r1, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2254      	movs	r2, #84	; 0x54
 80032b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f000 fbaf 	bl	8003a32 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d4:	4bcf      	ldr	r3, [pc, #828]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	220c      	movs	r2, #12
 80032da:	4013      	ands	r3, r2
 80032dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032de:	4bcd      	ldr	r3, [pc, #820]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	025b      	lsls	r3, r3, #9
 80032e6:	4013      	ands	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	d100      	bne.n	80032f6 <HAL_RCC_OscConfig+0x36>
 80032f4:	e07e      	b.n	80033f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d007      	beq.n	800330c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d112      	bne.n	8003328 <HAL_RCC_OscConfig+0x68>
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	025b      	lsls	r3, r3, #9
 8003308:	429a      	cmp	r2, r3
 800330a:	d10d      	bne.n	8003328 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	4bc1      	ldr	r3, [pc, #772]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	4013      	ands	r3, r2
 8003316:	d100      	bne.n	800331a <HAL_RCC_OscConfig+0x5a>
 8003318:	e06b      	b.n	80033f2 <HAL_RCC_OscConfig+0x132>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d167      	bne.n	80033f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f000 fb85 	bl	8003a32 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	025b      	lsls	r3, r3, #9
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x84>
 8003334:	4bb7      	ldr	r3, [pc, #732]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4bb6      	ldr	r3, [pc, #728]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	0249      	lsls	r1, r1, #9
 800333e:	430a      	orrs	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e027      	b.n	8003394 <HAL_RCC_OscConfig+0xd4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	23a0      	movs	r3, #160	; 0xa0
 800334a:	02db      	lsls	r3, r3, #11
 800334c:	429a      	cmp	r2, r3
 800334e:	d10e      	bne.n	800336e <HAL_RCC_OscConfig+0xae>
 8003350:	4bb0      	ldr	r3, [pc, #704]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4baf      	ldr	r3, [pc, #700]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	02c9      	lsls	r1, r1, #11
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	4bad      	ldr	r3, [pc, #692]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4bac      	ldr	r3, [pc, #688]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	0249      	lsls	r1, r1, #9
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e012      	b.n	8003394 <HAL_RCC_OscConfig+0xd4>
 800336e:	4ba9      	ldr	r3, [pc, #676]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4ba8      	ldr	r3, [pc, #672]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003374:	49a8      	ldr	r1, [pc, #672]	; (8003618 <HAL_RCC_OscConfig+0x358>)
 8003376:	400a      	ands	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	4ba6      	ldr	r3, [pc, #664]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	025b      	lsls	r3, r3, #9
 8003382:	4013      	ands	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4ba2      	ldr	r3, [pc, #648]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4ba1      	ldr	r3, [pc, #644]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800338e:	49a3      	ldr	r1, [pc, #652]	; (800361c <HAL_RCC_OscConfig+0x35c>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d015      	beq.n	80033c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff faa6 	bl	80028ec <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033a4:	e009      	b.n	80033ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a6:	f7ff faa1 	bl	80028ec <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b64      	cmp	r3, #100	; 0x64
 80033b2:	d902      	bls.n	80033ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f000 fb3c 	bl	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ba:	4b96      	ldr	r3, [pc, #600]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	029b      	lsls	r3, r3, #10
 80033c2:	4013      	ands	r3, r2
 80033c4:	d0ef      	beq.n	80033a6 <HAL_RCC_OscConfig+0xe6>
 80033c6:	e015      	b.n	80033f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7ff fa90 	bl	80028ec <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d2:	f7ff fa8b 	bl	80028ec <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b64      	cmp	r3, #100	; 0x64
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e326      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e4:	4b8b      	ldr	r3, [pc, #556]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	029b      	lsls	r3, r3, #10
 80033ec:	4013      	ands	r3, r2
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x112>
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2202      	movs	r2, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	d100      	bne.n	8003400 <HAL_RCC_OscConfig+0x140>
 80033fe:	e08b      	b.n	8003518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d005      	beq.n	8003418 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d13e      	bne.n	8003490 <HAL_RCC_OscConfig+0x1d0>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d13b      	bne.n	8003490 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003418:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2204      	movs	r2, #4
 800341e:	4013      	ands	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_RCC_OscConfig+0x16c>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e302      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a7b      	ldr	r2, [pc, #492]	; (8003620 <HAL_RCC_OscConfig+0x360>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	4b75      	ldr	r3, [pc, #468]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003442:	4b74      	ldr	r3, [pc, #464]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2209      	movs	r2, #9
 8003448:	4393      	bics	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	4b71      	ldr	r3, [pc, #452]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003454:	f000 fc40 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003458:	0001      	movs	r1, r0
 800345a:	4b6e      	ldr	r3, [pc, #440]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	220f      	movs	r2, #15
 8003462:	4013      	ands	r3, r2
 8003464:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x364>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	000a      	movs	r2, r1
 800346a:	40da      	lsrs	r2, r3
 800346c:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <HAL_RCC_OscConfig+0x368>)
 800346e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003470:	4b6e      	ldr	r3, [pc, #440]	; (800362c <HAL_RCC_OscConfig+0x36c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2513      	movs	r5, #19
 8003476:	197c      	adds	r4, r7, r5
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff f9f1 	bl	8002860 <HAL_InitTick>
 800347e:	0003      	movs	r3, r0
 8003480:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003482:	197b      	adds	r3, r7, r5
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d046      	beq.n	8003518 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800348a:	197b      	adds	r3, r7, r5
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	e2d0      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d027      	beq.n	80034e6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003496:	4b5f      	ldr	r3, [pc, #380]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2209      	movs	r2, #9
 800349c:	4393      	bics	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	4b5c      	ldr	r3, [pc, #368]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7ff fa20 	bl	80028ec <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b2:	f7ff fa1b 	bl	80028ec <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e2b6      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2204      	movs	r2, #4
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0f1      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b51      	ldr	r3, [pc, #324]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a53      	ldr	r2, [pc, #332]	; (8003620 <HAL_RCC_OscConfig+0x360>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	021a      	lsls	r2, r3, #8
 80034de:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	e018      	b.n	8003518 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	438a      	bics	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7ff f9fb 	bl	80028ec <HAL_GetTick>
 80034f6:	0003      	movs	r3, r0
 80034f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fc:	f7ff f9f6 	bl	80028ec <HAL_GetTick>
 8003500:	0002      	movs	r2, r0
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e291      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
 8003516:	d1f1      	bne.n	80034fc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2210      	movs	r2, #16
 800351e:	4013      	ands	r3, r2
 8003520:	d100      	bne.n	8003524 <HAL_RCC_OscConfig+0x264>
 8003522:	e0a1      	b.n	8003668 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d140      	bne.n	80035ac <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4013      	ands	r3, r2
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x282>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e277      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <HAL_RCC_OscConfig+0x370>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	0a19      	lsrs	r1, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	061a      	lsls	r2, r3, #24
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	0b5b      	lsrs	r3, r3, #13
 8003570:	3301      	adds	r3, #1
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	0212      	lsls	r2, r2, #8
 8003576:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	210f      	movs	r1, #15
 8003580:	400b      	ands	r3, r1
 8003582:	4928      	ldr	r1, [pc, #160]	; (8003624 <HAL_RCC_OscConfig+0x364>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003588:	4b27      	ldr	r3, [pc, #156]	; (8003628 <HAL_RCC_OscConfig+0x368>)
 800358a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x36c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2513      	movs	r5, #19
 8003592:	197c      	adds	r4, r7, r5
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff f963 	bl	8002860 <HAL_InitTick>
 800359a:	0003      	movs	r3, r0
 800359c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800359e:	197b      	adds	r3, r7, r5
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d060      	beq.n	8003668 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80035a6:	197b      	adds	r3, r7, r5
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	e242      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03f      	beq.n	8003634 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0049      	lsls	r1, r1, #1
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7ff f993 	bl	80028ec <HAL_GetTick>
 80035c6:	0003      	movs	r3, r0
 80035c8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035cc:	f7ff f98e 	bl	80028ec <HAL_GetTick>
 80035d0:	0002      	movs	r2, r0
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e229      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4013      	ands	r3, r2
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a10      	ldr	r2, [pc, #64]	; (8003630 <HAL_RCC_OscConfig+0x370>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	0a19      	lsrs	r1, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	061a      	lsls	r2, r3, #24
 800360c:	4b01      	ldr	r3, [pc, #4]	; (8003614 <HAL_RCC_OscConfig+0x354>)
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e029      	b.n	8003668 <HAL_RCC_OscConfig+0x3a8>
 8003614:	40021000 	.word	0x40021000
 8003618:	fffeffff 	.word	0xfffeffff
 800361c:	fffbffff 	.word	0xfffbffff
 8003620:	ffffe0ff 	.word	0xffffe0ff
 8003624:	08007228 	.word	0x08007228
 8003628:	20000044 	.word	0x20000044
 800362c:	20000048 	.word	0x20000048
 8003630:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003634:	4bbd      	ldr	r3, [pc, #756]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4bbc      	ldr	r3, [pc, #752]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800363a:	49bd      	ldr	r1, [pc, #756]	; (8003930 <HAL_RCC_OscConfig+0x670>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7ff f954 	bl	80028ec <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364a:	f7ff f94f 	bl	80028ec <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1ea      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800365c:	4bb3      	ldr	r3, [pc, #716]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4013      	ands	r3, r2
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2208      	movs	r2, #8
 800366e:	4013      	ands	r3, r2
 8003670:	d036      	beq.n	80036e0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4bac      	ldr	r3, [pc, #688]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800367c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800367e:	4bab      	ldr	r3, [pc, #684]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003680:	2101      	movs	r1, #1
 8003682:	430a      	orrs	r2, r1
 8003684:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7ff f931 	bl	80028ec <HAL_GetTick>
 800368a:	0003      	movs	r3, r0
 800368c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003690:	f7ff f92c 	bl	80028ec <HAL_GetTick>
 8003694:	0002      	movs	r2, r0
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1c7      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a2:	4ba2      	ldr	r3, [pc, #648]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	2202      	movs	r2, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	d0f1      	beq.n	8003690 <HAL_RCC_OscConfig+0x3d0>
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b9f      	ldr	r3, [pc, #636]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80036b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b2:	4b9e      	ldr	r3, [pc, #632]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	438a      	bics	r2, r1
 80036b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff f917 	bl	80028ec <HAL_GetTick>
 80036be:	0003      	movs	r3, r0
 80036c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c4:	f7ff f912 	bl	80028ec <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1ad      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036d6:	4b95      	ldr	r3, [pc, #596]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d1f1      	bne.n	80036c4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2204      	movs	r2, #4
 80036e6:	4013      	ands	r3, r2
 80036e8:	d100      	bne.n	80036ec <HAL_RCC_OscConfig+0x42c>
 80036ea:	e0ae      	b.n	800384a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ec:	2027      	movs	r0, #39	; 0x27
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b8d      	ldr	r3, [pc, #564]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80036f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	055b      	lsls	r3, r3, #21
 80036fc:	4013      	ands	r3, r2
 80036fe:	d109      	bne.n	8003714 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b8a      	ldr	r3, [pc, #552]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003704:	4b89      	ldr	r3, [pc, #548]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	0549      	lsls	r1, r1, #21
 800370a:	430a      	orrs	r2, r1
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800370e:	183b      	adds	r3, r7, r0
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b87      	ldr	r3, [pc, #540]	; (8003934 <HAL_RCC_OscConfig+0x674>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4013      	ands	r3, r2
 800371e:	d11a      	bne.n	8003756 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003720:	4b84      	ldr	r3, [pc, #528]	; (8003934 <HAL_RCC_OscConfig+0x674>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x674>)
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	0049      	lsls	r1, r1, #1
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7ff f8dd 	bl	80028ec <HAL_GetTick>
 8003732:	0003      	movs	r3, r0
 8003734:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7ff f8d8 	bl	80028ec <HAL_GetTick>
 800373c:	0002      	movs	r2, r0
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e173      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b7a      	ldr	r3, [pc, #488]	; (8003934 <HAL_RCC_OscConfig+0x674>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4013      	ands	r3, r2
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	429a      	cmp	r2, r3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_OscConfig+0x4b2>
 8003762:	4b72      	ldr	r3, [pc, #456]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003766:	4b71      	ldr	r3, [pc, #452]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	0049      	lsls	r1, r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
 8003770:	e031      	b.n	80037d6 <HAL_RCC_OscConfig+0x516>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x4d4>
 800377a:	4b6c      	ldr	r3, [pc, #432]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800377c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800377e:	4b6b      	ldr	r3, [pc, #428]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003780:	496b      	ldr	r1, [pc, #428]	; (8003930 <HAL_RCC_OscConfig+0x670>)
 8003782:	400a      	ands	r2, r1
 8003784:	651a      	str	r2, [r3, #80]	; 0x50
 8003786:	4b69      	ldr	r3, [pc, #420]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800378a:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800378c:	496a      	ldr	r1, [pc, #424]	; (8003938 <HAL_RCC_OscConfig+0x678>)
 800378e:	400a      	ands	r2, r1
 8003790:	651a      	str	r2, [r3, #80]	; 0x50
 8003792:	e020      	b.n	80037d6 <HAL_RCC_OscConfig+0x516>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	23a0      	movs	r3, #160	; 0xa0
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	429a      	cmp	r2, r3
 800379e:	d10e      	bne.n	80037be <HAL_RCC_OscConfig+0x4fe>
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037a4:	4b61      	ldr	r3, [pc, #388]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	00c9      	lsls	r1, r1, #3
 80037aa:	430a      	orrs	r2, r1
 80037ac:	651a      	str	r2, [r3, #80]	; 0x50
 80037ae:	4b5f      	ldr	r3, [pc, #380]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037b2:	4b5e      	ldr	r3, [pc, #376]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	0049      	lsls	r1, r1, #1
 80037b8:	430a      	orrs	r2, r1
 80037ba:	651a      	str	r2, [r3, #80]	; 0x50
 80037bc:	e00b      	b.n	80037d6 <HAL_RCC_OscConfig+0x516>
 80037be:	4b5b      	ldr	r3, [pc, #364]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c2:	4b5a      	ldr	r3, [pc, #360]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037c4:	495a      	ldr	r1, [pc, #360]	; (8003930 <HAL_RCC_OscConfig+0x670>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	651a      	str	r2, [r3, #80]	; 0x50
 80037ca:	4b58      	ldr	r3, [pc, #352]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ce:	4b57      	ldr	r3, [pc, #348]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037d0:	4959      	ldr	r1, [pc, #356]	; (8003938 <HAL_RCC_OscConfig+0x678>)
 80037d2:	400a      	ands	r2, r1
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d015      	beq.n	800380a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7ff f885 	bl	80028ec <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e6:	e009      	b.n	80037fc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7ff f880 	bl	80028ec <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4a52      	ldr	r2, [pc, #328]	; (800393c <HAL_RCC_OscConfig+0x67c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e11a      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fc:	4b4b      	ldr	r3, [pc, #300]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80037fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4013      	ands	r3, r2
 8003806:	d0ef      	beq.n	80037e8 <HAL_RCC_OscConfig+0x528>
 8003808:	e014      	b.n	8003834 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7ff f86f 	bl	80028ec <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003812:	e009      	b.n	8003828 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7ff f86a 	bl	80028ec <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	4a47      	ldr	r2, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x67c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e104      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003828:	4b40      	ldr	r3, [pc, #256]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800382a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4013      	ands	r3, r2
 8003832:	d1ef      	bne.n	8003814 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003834:	2327      	movs	r3, #39	; 0x27
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003844:	493e      	ldr	r1, [pc, #248]	; (8003940 <HAL_RCC_OscConfig+0x680>)
 8003846:	400a      	ands	r2, r1
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2220      	movs	r2, #32
 8003850:	4013      	ands	r3, r2
 8003852:	d049      	beq.n	80038e8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d026      	beq.n	80038aa <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800385c:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003862:	2101      	movs	r1, #1
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800386a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386c:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 800386e:	2101      	movs	r1, #1
 8003870:	430a      	orrs	r2, r1
 8003872:	635a      	str	r2, [r3, #52]	; 0x34
 8003874:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x684>)
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	4b32      	ldr	r3, [pc, #200]	; (8003944 <HAL_RCC_OscConfig+0x684>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0189      	lsls	r1, r1, #6
 800387e:	430a      	orrs	r2, r1
 8003880:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7ff f833 	bl	80028ec <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800388c:	f7ff f82e 	bl	80028ec <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0c9      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	d0f1      	beq.n	800388c <HAL_RCC_OscConfig+0x5cc>
 80038a8:	e01e      	b.n	80038e8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	438a      	bics	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_RCC_OscConfig+0x684>)
 80038b8:	6a1a      	ldr	r2, [r3, #32]
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_OscConfig+0x684>)
 80038bc:	4922      	ldr	r1, [pc, #136]	; (8003948 <HAL_RCC_OscConfig+0x688>)
 80038be:	400a      	ands	r2, r1
 80038c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7ff f813 	bl	80028ec <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038cc:	f7ff f80e 	bl	80028ec <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0a9      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2202      	movs	r2, #2
 80038e4:	4013      	ands	r3, r2
 80038e6:	d1f1      	bne.n	80038cc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d100      	bne.n	80038f2 <HAL_RCC_OscConfig+0x632>
 80038f0:	e09e      	b.n	8003a30 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	d100      	bne.n	80038fa <HAL_RCC_OscConfig+0x63a>
 80038f8:	e077      	b.n	80039ea <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d158      	bne.n	80039b4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x66c>)
 8003908:	4910      	ldr	r1, [pc, #64]	; (800394c <HAL_RCC_OscConfig+0x68c>)
 800390a:	400a      	ands	r2, r1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fe ffed 	bl	80028ec <HAL_GetTick>
 8003912:	0003      	movs	r3, r0
 8003914:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003916:	e01b      	b.n	8003950 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe ffe8 	bl	80028ec <HAL_GetTick>
 800391c:	0002      	movs	r2, r0
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d914      	bls.n	8003950 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e083      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40021000 	.word	0x40021000
 8003930:	fffffeff 	.word	0xfffffeff
 8003934:	40007000 	.word	0x40007000
 8003938:	fffffbff 	.word	0xfffffbff
 800393c:	00001388 	.word	0x00001388
 8003940:	efffffff 	.word	0xefffffff
 8003944:	40010000 	.word	0x40010000
 8003948:	ffffdfff 	.word	0xffffdfff
 800394c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	049b      	lsls	r3, r3, #18
 8003958:	4013      	ands	r3, r2
 800395a:	d1dd      	bne.n	8003918 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4a37      	ldr	r2, [pc, #220]	; (8003a40 <HAL_RCC_OscConfig+0x780>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	431a      	orrs	r2, r3
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	0449      	lsls	r1, r1, #17
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe ffaf 	bl	80028ec <HAL_GetTick>
 800398e:	0003      	movs	r3, r0
 8003990:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003994:	f7fe ffaa 	bl	80028ec <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e045      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039a6:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	049b      	lsls	r3, r3, #18
 80039ae:	4013      	ands	r3, r2
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x6d4>
 80039b2:	e03d      	b.n	8003a30 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 80039ba:	4922      	ldr	r1, [pc, #136]	; (8003a44 <HAL_RCC_OscConfig+0x784>)
 80039bc:	400a      	ands	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe ff94 	bl	80028ec <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fe ff8f 	bl	80028ec <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e02a      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	049b      	lsls	r3, r3, #18
 80039e4:	4013      	ands	r3, r2
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x70a>
 80039e8:	e022      	b.n	8003a30 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e01d      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_RCC_OscConfig+0x77c>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	025b      	lsls	r3, r3, #9
 8003a02:	401a      	ands	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d10f      	bne.n	8003a2c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	23f0      	movs	r3, #240	; 0xf0
 8003a10:	039b      	lsls	r3, r3, #14
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	23c0      	movs	r3, #192	; 0xc0
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	401a      	ands	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b00a      	add	sp, #40	; 0x28
 8003a38:	bdb0      	pop	{r4, r5, r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	ff02ffff 	.word	0xff02ffff
 8003a44:	feffffff 	.word	0xfeffffff

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e128      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d91e      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b93      	ldr	r3, [pc, #588]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4393      	bics	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	4b90      	ldr	r3, [pc, #576]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe ff36 	bl	80028ec <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fe ff31 	bl	80028ec <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a8a      	ldr	r2, [pc, #552]	; (8003cbc <HAL_RCC_ClockConfig+0x274>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e109      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b87      	ldr	r3, [pc, #540]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab2:	4b83      	ldr	r3, [pc, #524]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	22f0      	movs	r2, #240	; 0xf0
 8003ab8:	4393      	bics	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b7f      	ldr	r3, [pc, #508]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	4013      	ands	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0x8a>
 8003ad0:	e089      	b.n	8003be6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ada:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d120      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0e1      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003af2:	4b73      	ldr	r3, [pc, #460]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	049b      	lsls	r3, r3, #18
 8003afa:	4013      	ands	r3, r2
 8003afc:	d114      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0d5      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0a:	4b6d      	ldr	r3, [pc, #436]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d109      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0ca      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4013      	ands	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0c2      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b28:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	4393      	bics	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fed6 	bl	80028ec <HAL_GetTick>
 8003b40:	0003      	movs	r3, r0
 8003b42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d111      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4e:	f7fe fecd 	bl	80028ec <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0a5      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b62:	4b57      	ldr	r3, [pc, #348]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	220c      	movs	r2, #12
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d1ef      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x106>
 8003b6e:	e03a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d111      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b78:	e009      	b.n	8003b8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7a:	f7fe feb7 	bl	80028ec <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	4a4d      	ldr	r2, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x274>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e08f      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8e:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	220c      	movs	r2, #12
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d1ef      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x132>
 8003b9a:	e024      	b.n	8003be6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d11b      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ba4:	e009      	b.n	8003bba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7fe fea1 	bl	80028ec <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_RCC_ClockConfig+0x274>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e079      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1ef      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x15e>
 8003bc6:	e00e      	b.n	8003be6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc8:	f7fe fe90 	bl	80028ec <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_RCC_ClockConfig+0x274>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e068      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bdc:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	220c      	movs	r2, #12
 8003be2:	4013      	ands	r3, r2
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d21e      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf4:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4393      	bics	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c06:	f7fe fe71 	bl	80028ec <HAL_GetTick>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	e009      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c10:	f7fe fe6c 	bl	80028ec <HAL_GetTick>
 8003c14:	0002      	movs	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <HAL_RCC_ClockConfig+0x274>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e044      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c24:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCC_ClockConfig+0x270>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d1ee      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2204      	movs	r2, #4
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x27c>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_RCC_ClockConfig+0x280>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	00da      	lsls	r2, r3, #3
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c70:	f000 f832 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c74:	0001      	movs	r1, r0
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_ClockConfig+0x278>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	4013      	ands	r3, r2
 8003c80:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <HAL_RCC_ClockConfig+0x284>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	000a      	movs	r2, r1
 8003c86:	40da      	lsrs	r2, r3
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_RCC_ClockConfig+0x288>)
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_RCC_ClockConfig+0x28c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	250b      	movs	r5, #11
 8003c92:	197c      	adds	r4, r7, r5
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fe fde3 	bl	8002860 <HAL_InitTick>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003c9e:	197b      	adds	r3, r7, r5
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003ca6:	197b      	adds	r3, r7, r5
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	e000      	b.n	8003cae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	00001388 	.word	0x00001388
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	fffff8ff 	.word	0xfffff8ff
 8003cc8:	ffffc7ff 	.word	0xffffc7ff
 8003ccc:	08007228 	.word	0x08007228
 8003cd0:	20000044 	.word	0x20000044
 8003cd4:	20000048 	.word	0x20000048

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	b08e      	sub	sp, #56	; 0x38
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003cde:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d014      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003cee:	d900      	bls.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x1a>
 8003cf0:	e07b      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x112>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d002      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x24>
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cfa:	e076      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003cfc:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2210      	movs	r2, #16
 8003d02:	4013      	ands	r3, r2
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003d06:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003d0a:	e07c      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003d0c:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x140>)
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d10:	e079      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b42      	ldr	r3, [pc, #264]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x144>)
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d16:	e076      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	0c9a      	lsrs	r2, r3, #18
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	401a      	ands	r2, r3
 8003d20:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x148>)
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	0d9a      	lsrs	r2, r3, #22
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	3301      	adds	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d32:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	025b      	lsls	r3, r3, #9
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d01a      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	4a35      	ldr	r2, [pc, #212]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x144>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	69b8      	ldr	r0, [r7, #24]
 8003d4c:	69f9      	ldr	r1, [r7, #28]
 8003d4e:	f7fc fa99 	bl	8000284 <__aeabi_lmul>
 8003d52:	0002      	movs	r2, r0
 8003d54:	000b      	movs	r3, r1
 8003d56:	0010      	movs	r0, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f7fc fa6d 	bl	8000244 <__aeabi_uldivmod>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	0013      	movs	r3, r2
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
 8003d72:	e037      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d74:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d01a      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	4a23      	ldr	r2, [pc, #140]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	68b8      	ldr	r0, [r7, #8]
 8003d8c:	68f9      	ldr	r1, [r7, #12]
 8003d8e:	f7fc fa79 	bl	8000284 <__aeabi_lmul>
 8003d92:	0002      	movs	r2, r0
 8003d94:	000b      	movs	r3, r1
 8003d96:	0010      	movs	r0, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f7fc fa4d 	bl	8000244 <__aeabi_uldivmod>
 8003daa:	0002      	movs	r2, r0
 8003dac:	000b      	movs	r3, r1
 8003dae:	0013      	movs	r3, r2
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	e017      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	0018      	movs	r0, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	0019      	movs	r1, r3
 8003dbc:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x140>)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f7fc fa60 	bl	8000284 <__aeabi_lmul>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	000b      	movs	r3, r1
 8003dc8:	0010      	movs	r0, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	001c      	movs	r4, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	001d      	movs	r5, r3
 8003dd4:	0022      	movs	r2, r4
 8003dd6:	002b      	movs	r3, r5
 8003dd8:	f7fc fa34 	bl	8000244 <__aeabi_uldivmod>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	000b      	movs	r3, r1
 8003de0:	0013      	movs	r3, r2
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003de8:	e00d      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0b5b      	lsrs	r3, r3, #13
 8003df0:	2207      	movs	r2, #7
 8003df2:	4013      	ands	r3, r2
 8003df4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	0212      	lsls	r2, r2, #8
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	0013      	movs	r3, r2
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e04:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b00e      	add	sp, #56	; 0x38
 8003e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	003d0900 	.word	0x003d0900
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200
 8003e20:	08007240 	.word	0x08007240

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	20000044 	.word	0x20000044

08003e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e3c:	f7ff fff2 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e40:	0001      	movs	r1, r0
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	2207      	movs	r2, #7
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	40d9      	lsrs	r1, r3
 8003e52:	000b      	movs	r3, r1
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08007238 	.word	0x08007238

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffdc 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e6c:	0001      	movs	r1, r0
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	0adb      	lsrs	r3, r3, #11
 8003e74:	2207      	movs	r2, #7
 8003e76:	4013      	ands	r3, r2
 8003e78:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	40d9      	lsrs	r1, r3
 8003e7e:	000b      	movs	r3, r1
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	08007238 	.word	0x08007238

08003e90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e98:	2317      	movs	r3, #23
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d100      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003eb6:	e104      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb8:	4bb1      	ldr	r3, [pc, #708]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	055b      	lsls	r3, r3, #21
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d10a      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec4:	4bae      	ldr	r3, [pc, #696]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec8:	4bad      	ldr	r3, [pc, #692]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	0549      	lsls	r1, r1, #21
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003ed2:	2317      	movs	r3, #23
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4baa      	ldr	r3, [pc, #680]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d11a      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee6:	4ba7      	ldr	r3, [pc, #668]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4ba6      	ldr	r3, [pc, #664]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	0049      	lsls	r1, r1, #1
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fcfa 	bl	80028ec <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe fcf5 	bl	80028ec <HAL_GetTick>
 8003f02:	0002      	movs	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e133      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b9c      	ldr	r3, [pc, #624]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f1c:	4b98      	ldr	r3, [pc, #608]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	23c0      	movs	r3, #192	; 0xc0
 8003f22:	039b      	lsls	r3, r3, #14
 8003f24:	4013      	ands	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	23c0      	movs	r3, #192	; 0xc0
 8003f2e:	039b      	lsls	r3, r3, #14
 8003f30:	4013      	ands	r3, r2
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d107      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	23c0      	movs	r3, #192	; 0xc0
 8003f3e:	039b      	lsls	r3, r3, #14
 8003f40:	4013      	ands	r3, r2
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d013      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	23c0      	movs	r3, #192	; 0xc0
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	401a      	ands	r2, r3
 8003f52:	23c0      	movs	r3, #192	; 0xc0
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f5a:	4b89      	ldr	r3, [pc, #548]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	401a      	ands	r2, r3
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e103      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f70:	4b83      	ldr	r3, [pc, #524]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f74:	23c0      	movs	r3, #192	; 0xc0
 8003f76:	029b      	lsls	r3, r3, #10
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d049      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	23c0      	movs	r3, #192	; 0xc0
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d004      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2220      	movs	r2, #32
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d10d      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	23c0      	movs	r3, #192	; 0xc0
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d034      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d02e      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fb8:	4b71      	ldr	r3, [pc, #452]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	4a72      	ldr	r2, [pc, #456]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fc6:	4b6e      	ldr	r3, [pc, #440]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	0309      	lsls	r1, r1, #12
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fd6:	496d      	ldr	r1, [pc, #436]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d014      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fc7e 	bl	80028ec <HAL_GetTick>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff4:	e009      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fe fc79 	bl	80028ec <HAL_GetTick>
 8003ffa:	0002      	movs	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	4a63      	ldr	r2, [pc, #396]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0b6      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800400c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4013      	ands	r3, r2
 8004014:	d0ef      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4013      	ands	r3, r2
 8004020:	d01f      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	23c0      	movs	r3, #192	; 0xc0
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	401a      	ands	r2, r3
 800402c:	23c0      	movs	r3, #192	; 0xc0
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	429a      	cmp	r2, r3
 8004032:	d10c      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004034:	4b52      	ldr	r3, [pc, #328]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a56      	ldr	r2, [pc, #344]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	23c0      	movs	r3, #192	; 0xc0
 8004044:	039b      	lsls	r3, r3, #14
 8004046:	401a      	ands	r2, r3
 8004048:	4b4d      	ldr	r3, [pc, #308]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004050:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	23c0      	movs	r3, #192	; 0xc0
 8004058:	029b      	lsls	r3, r3, #10
 800405a:	401a      	ands	r2, r3
 800405c:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800405e:	430a      	orrs	r2, r1
 8004060:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2220      	movs	r2, #32
 8004068:	4013      	ands	r3, r2
 800406a:	d01f      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	23c0      	movs	r3, #192	; 0xc0
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	401a      	ands	r2, r3
 8004076:	23c0      	movs	r3, #192	; 0xc0
 8004078:	029b      	lsls	r3, r3, #10
 800407a:	429a      	cmp	r2, r3
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800407e:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a44      	ldr	r2, [pc, #272]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004084:	4013      	ands	r3, r2
 8004086:	0019      	movs	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	23c0      	movs	r3, #192	; 0xc0
 800408e:	039b      	lsls	r3, r3, #14
 8004090:	401a      	ands	r2, r3
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	4b39      	ldr	r3, [pc, #228]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800409a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	23c0      	movs	r3, #192	; 0xc0
 80040a2:	029b      	lsls	r3, r3, #10
 80040a4:	401a      	ands	r2, r3
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040ac:	2317      	movs	r3, #23
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040bc:	4936      	ldr	r1, [pc, #216]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040be:	400a      	ands	r2, r1
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	4013      	ands	r3, r2
 80040ca:	d009      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d0:	2203      	movs	r2, #3
 80040d2:	4393      	bics	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2202      	movs	r2, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	220c      	movs	r2, #12
 80040f0:	4393      	bics	r3, r2
 80040f2:	0019      	movs	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040fa:	430a      	orrs	r2, r1
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2204      	movs	r2, #4
 8004104:	4013      	ands	r3, r2
 8004106:	d009      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800410a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410c:	4a23      	ldr	r2, [pc, #140]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800410e:	4013      	ands	r3, r2
 8004110:	0019      	movs	r1, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004118:	430a      	orrs	r2, r1
 800411a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2208      	movs	r2, #8
 8004122:	4013      	ands	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004136:	430a      	orrs	r2, r1
 8004138:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	4013      	ands	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800414a:	4013      	ands	r3, r2
 800414c:	0019      	movs	r1, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1a      	ldr	r2, [r3, #32]
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004154:	430a      	orrs	r2, r1
 8004156:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	4013      	ands	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004172:	430a      	orrs	r2, r1
 8004174:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b006      	add	sp, #24
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	fffcffff 	.word	0xfffcffff
 800418c:	fff7ffff 	.word	0xfff7ffff
 8004190:	00001388 	.word	0x00001388
 8004194:	ffcfffff 	.word	0xffcfffff
 8004198:	efffffff 	.word	0xefffffff
 800419c:	fffff3ff 	.word	0xfffff3ff
 80041a0:	ffffcfff 	.word	0xffffcfff
 80041a4:	fbffffff 	.word	0xfbffffff
 80041a8:	fff3ffff 	.word	0xfff3ffff

080041ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e083      	b.n	80042c6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	2382      	movs	r3, #130	; 0x82
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d009      	beq.n	80041e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	61da      	str	r2, [r3, #28]
 80041d8:	e005      	b.n	80041e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2251      	movs	r2, #81	; 0x51
 80041f0:	5c9b      	ldrb	r3, [r3, r2]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2250      	movs	r2, #80	; 0x50
 80041fc:	2100      	movs	r1, #0
 80041fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	0018      	movs	r0, r3
 8004204:	f7fe f900 	bl	8002408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2251      	movs	r2, #81	; 0x51
 800420c:	2102      	movs	r1, #2
 800420e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2140      	movs	r1, #64	; 0x40
 800421c:	438a      	bics	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	2382      	movs	r3, #130	; 0x82
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	401a      	ands	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6899      	ldr	r1, [r3, #8]
 800422e:	2384      	movs	r3, #132	; 0x84
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	400b      	ands	r3, r1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68d9      	ldr	r1, [r3, #12]
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	400b      	ands	r3, r1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2102      	movs	r1, #2
 8004248:	400b      	ands	r3, r1
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2101      	movs	r1, #1
 8004252:	400b      	ands	r3, r1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6999      	ldr	r1, [r3, #24]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	400b      	ands	r3, r1
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	2138      	movs	r1, #56	; 0x38
 8004268:	400b      	ands	r3, r1
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	400b      	ands	r3, r1
 8004274:	431a      	orrs	r2, r3
 8004276:	0011      	movs	r1, r2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	019b      	lsls	r3, r3, #6
 8004280:	401a      	ands	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	2204      	movs	r2, #4
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2210      	movs	r2, #16
 800429c:	401a      	ands	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4907      	ldr	r1, [pc, #28]	; (80042d0 <HAL_SPI_Init+0x124>)
 80042b2:	400a      	ands	r2, r1
 80042b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2251      	movs	r2, #81	; 0x51
 80042c0:	2101      	movs	r1, #1
 80042c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	fffff7ff 	.word	0xfffff7ff

080042d4 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e074      	b.n	80043d0 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	223c      	movs	r2, #60	; 0x3c
 80042ea:	5c9b      	ldrb	r3, [r3, r2]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	223d      	movs	r2, #61	; 0x3d
 80042f6:	2100      	movs	r1, #0
 80042f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fe f91d 	bl	800253c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223c      	movs	r2, #60	; 0x3c
 8004306:	2102      	movs	r1, #2
 8004308:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004320:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8004328:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800432e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8004334:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800433a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8004340:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8004346:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7b1b      	ldrb	r3, [r3, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d108      	bne.n	800436a <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0249      	lsls	r1, r1, #9
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	43d2      	mvns	r2, r2
 8004380:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800439a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681c      	ldr	r4, [r3, #0]
 80043a4:	0010      	movs	r0, r2
 80043a6:	f000 f817 	bl	80043d8 <TSC_extract_groups>
 80043aa:	0003      	movs	r3, r0
 80043ac:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2103      	movs	r1, #3
 80043ba:	438a      	bics	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2203      	movs	r2, #3
 80043c4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	223c      	movs	r2, #60	; 0x3c
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b003      	add	sp, #12
 80043d6:	bd90      	pop	{r4, r7, pc}

080043d8 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	e011      	b.n	800440e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	409a      	lsls	r2, r3
 80043f2:	0013      	movs	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4013      	ands	r3, r2
 80043f8:	d006      	beq.n	8004408 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80043fa:	2201      	movs	r2, #1
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	409a      	lsls	r2, r3
 8004400:	0013      	movs	r3, r2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	3301      	adds	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b07      	cmp	r3, #7
 8004412:	d9ea      	bls.n	80043ea <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8004414:	68fb      	ldr	r3, [r7, #12]
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e044      	b.n	80044bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2278      	movs	r2, #120	; 0x78
 800443e:	2100      	movs	r1, #0
 8004440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f7fe f911 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2224      	movs	r2, #36	; 0x24
 800444e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2101      	movs	r1, #1
 800445c:	438a      	bics	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f8d0 	bl	8004608 <UART_SetConfig>
 8004468:	0003      	movs	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e024      	b.n	80044bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 fb47 	bl	8004b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	490d      	ldr	r1, [pc, #52]	; (80044c4 <HAL_UART_Init+0xa4>)
 800448e:	400a      	ands	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	212a      	movs	r1, #42	; 0x2a
 800449e:	438a      	bics	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 fbdf 	bl	8004c78 <UART_CheckIdleState>
 80044ba:	0003      	movs	r3, r0
}
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	ffffb7ff 	.word	0xffffb7ff

080044c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	1dbb      	adds	r3, r7, #6
 80044d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d000      	beq.n	80044e2 <HAL_UART_Transmit+0x1a>
 80044e0:	e08c      	b.n	80045fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_UART_Transmit+0x28>
 80044e8:	1dbb      	adds	r3, r7, #6
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e084      	b.n	80045fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	015b      	lsls	r3, r3, #5
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d109      	bne.n	8004514 <HAL_UART_Transmit+0x4c>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	d001      	beq.n	8004514 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e074      	b.n	80045fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2284      	movs	r2, #132	; 0x84
 8004518:	2100      	movs	r1, #0
 800451a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004522:	f7fe f9e3 	bl	80028ec <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1dba      	adds	r2, r7, #6
 800452e:	2150      	movs	r1, #80	; 0x50
 8004530:	8812      	ldrh	r2, [r2, #0]
 8004532:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1dba      	adds	r2, r7, #6
 8004538:	2152      	movs	r1, #82	; 0x52
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	015b      	lsls	r3, r3, #5
 8004546:	429a      	cmp	r2, r3
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x94>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004564:	e02f      	b.n	80045c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	0013      	movs	r3, r2
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	f000 fc28 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d004      	beq.n	8004586 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e03b      	b.n	80045fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	001a      	movs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	05d2      	lsls	r2, r2, #23
 8004598:	0dd2      	lsrs	r2, r2, #23
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3302      	adds	r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e007      	b.n	80045b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2252      	movs	r2, #82	; 0x52
 80045b8:	5a9b      	ldrh	r3, [r3, r2]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b299      	uxth	r1, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2252      	movs	r2, #82	; 0x52
 80045c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2252      	movs	r2, #82	; 0x52
 80045ca:	5a9b      	ldrh	r3, [r3, r2]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1c9      	bne.n	8004566 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	0013      	movs	r3, r2
 80045dc:	2200      	movs	r2, #0
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	f000 fbf2 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 80045e4:	1e03      	subs	r3, r0, #0
 80045e6:	d004      	beq.n	80045f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e005      	b.n	80045fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	b008      	add	sp, #32
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	b5b0      	push	{r4, r5, r7, lr}
 800460a:	b08e      	sub	sp, #56	; 0x38
 800460c:	af00      	add	r7, sp, #0
 800460e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004610:	231a      	movs	r3, #26
 8004612:	2218      	movs	r2, #24
 8004614:	189b      	adds	r3, r3, r2
 8004616:	19db      	adds	r3, r3, r7
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	431a      	orrs	r2, r3
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	431a      	orrs	r2, r3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	4313      	orrs	r3, r2
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4ac6      	ldr	r2, [pc, #792]	; (8004954 <UART_SetConfig+0x34c>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4ac1      	ldr	r2, [pc, #772]	; (8004958 <UART_SetConfig+0x350>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4abb      	ldr	r2, [pc, #748]	; (800495c <UART_SetConfig+0x354>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004678:	4313      	orrs	r3, r2
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4ab7      	ldr	r2, [pc, #732]	; (8004960 <UART_SetConfig+0x358>)
 8004684:	4013      	ands	r3, r2
 8004686:	0019      	movs	r1, r3
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4ab3      	ldr	r2, [pc, #716]	; (8004964 <UART_SetConfig+0x35c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d131      	bne.n	8004700 <UART_SetConfig+0xf8>
 800469c:	4bb2      	ldr	r3, [pc, #712]	; (8004968 <UART_SetConfig+0x360>)
 800469e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a0:	2203      	movs	r2, #3
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d01d      	beq.n	80046e4 <UART_SetConfig+0xdc>
 80046a8:	d823      	bhi.n	80046f2 <UART_SetConfig+0xea>
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d00c      	beq.n	80046c8 <UART_SetConfig+0xc0>
 80046ae:	d820      	bhi.n	80046f2 <UART_SetConfig+0xea>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <UART_SetConfig+0xb2>
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d00e      	beq.n	80046d6 <UART_SetConfig+0xce>
 80046b8:	e01b      	b.n	80046f2 <UART_SetConfig+0xea>
 80046ba:	231b      	movs	r3, #27
 80046bc:	2218      	movs	r2, #24
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	19db      	adds	r3, r3, r7
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e09c      	b.n	8004802 <UART_SetConfig+0x1fa>
 80046c8:	231b      	movs	r3, #27
 80046ca:	2218      	movs	r2, #24
 80046cc:	189b      	adds	r3, r3, r2
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	2202      	movs	r2, #2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e095      	b.n	8004802 <UART_SetConfig+0x1fa>
 80046d6:	231b      	movs	r3, #27
 80046d8:	2218      	movs	r2, #24
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	19db      	adds	r3, r3, r7
 80046de:	2204      	movs	r2, #4
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e08e      	b.n	8004802 <UART_SetConfig+0x1fa>
 80046e4:	231b      	movs	r3, #27
 80046e6:	2218      	movs	r2, #24
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	19db      	adds	r3, r3, r7
 80046ec:	2208      	movs	r2, #8
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e087      	b.n	8004802 <UART_SetConfig+0x1fa>
 80046f2:	231b      	movs	r3, #27
 80046f4:	2218      	movs	r2, #24
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	19db      	adds	r3, r3, r7
 80046fa:	2210      	movs	r2, #16
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	e080      	b.n	8004802 <UART_SetConfig+0x1fa>
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a99      	ldr	r2, [pc, #612]	; (800496c <UART_SetConfig+0x364>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d131      	bne.n	800476e <UART_SetConfig+0x166>
 800470a:	4b97      	ldr	r3, [pc, #604]	; (8004968 <UART_SetConfig+0x360>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	220c      	movs	r2, #12
 8004710:	4013      	ands	r3, r2
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d01d      	beq.n	8004752 <UART_SetConfig+0x14a>
 8004716:	d823      	bhi.n	8004760 <UART_SetConfig+0x158>
 8004718:	2b08      	cmp	r3, #8
 800471a:	d00c      	beq.n	8004736 <UART_SetConfig+0x12e>
 800471c:	d820      	bhi.n	8004760 <UART_SetConfig+0x158>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <UART_SetConfig+0x120>
 8004722:	2b04      	cmp	r3, #4
 8004724:	d00e      	beq.n	8004744 <UART_SetConfig+0x13c>
 8004726:	e01b      	b.n	8004760 <UART_SetConfig+0x158>
 8004728:	231b      	movs	r3, #27
 800472a:	2218      	movs	r2, #24
 800472c:	189b      	adds	r3, r3, r2
 800472e:	19db      	adds	r3, r3, r7
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e065      	b.n	8004802 <UART_SetConfig+0x1fa>
 8004736:	231b      	movs	r3, #27
 8004738:	2218      	movs	r2, #24
 800473a:	189b      	adds	r3, r3, r2
 800473c:	19db      	adds	r3, r3, r7
 800473e:	2202      	movs	r2, #2
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e05e      	b.n	8004802 <UART_SetConfig+0x1fa>
 8004744:	231b      	movs	r3, #27
 8004746:	2218      	movs	r2, #24
 8004748:	189b      	adds	r3, r3, r2
 800474a:	19db      	adds	r3, r3, r7
 800474c:	2204      	movs	r2, #4
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e057      	b.n	8004802 <UART_SetConfig+0x1fa>
 8004752:	231b      	movs	r3, #27
 8004754:	2218      	movs	r2, #24
 8004756:	189b      	adds	r3, r3, r2
 8004758:	19db      	adds	r3, r3, r7
 800475a:	2208      	movs	r2, #8
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e050      	b.n	8004802 <UART_SetConfig+0x1fa>
 8004760:	231b      	movs	r3, #27
 8004762:	2218      	movs	r2, #24
 8004764:	189b      	adds	r3, r3, r2
 8004766:	19db      	adds	r3, r3, r7
 8004768:	2210      	movs	r2, #16
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e049      	b.n	8004802 <UART_SetConfig+0x1fa>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a7a      	ldr	r2, [pc, #488]	; (800495c <UART_SetConfig+0x354>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d13e      	bne.n	80047f6 <UART_SetConfig+0x1ee>
 8004778:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <UART_SetConfig+0x360>)
 800477a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800477c:	23c0      	movs	r3, #192	; 0xc0
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	4013      	ands	r3, r2
 8004782:	22c0      	movs	r2, #192	; 0xc0
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	4293      	cmp	r3, r2
 8004788:	d027      	beq.n	80047da <UART_SetConfig+0x1d2>
 800478a:	22c0      	movs	r2, #192	; 0xc0
 800478c:	0112      	lsls	r2, r2, #4
 800478e:	4293      	cmp	r3, r2
 8004790:	d82a      	bhi.n	80047e8 <UART_SetConfig+0x1e0>
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	0112      	lsls	r2, r2, #4
 8004796:	4293      	cmp	r3, r2
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0x1b6>
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	0112      	lsls	r2, r2, #4
 800479e:	4293      	cmp	r3, r2
 80047a0:	d822      	bhi.n	80047e8 <UART_SetConfig+0x1e0>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <UART_SetConfig+0x1a8>
 80047a6:	2280      	movs	r2, #128	; 0x80
 80047a8:	00d2      	lsls	r2, r2, #3
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <UART_SetConfig+0x1c4>
 80047ae:	e01b      	b.n	80047e8 <UART_SetConfig+0x1e0>
 80047b0:	231b      	movs	r3, #27
 80047b2:	2218      	movs	r2, #24
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	19db      	adds	r3, r3, r7
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e021      	b.n	8004802 <UART_SetConfig+0x1fa>
 80047be:	231b      	movs	r3, #27
 80047c0:	2218      	movs	r2, #24
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	19db      	adds	r3, r3, r7
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e01a      	b.n	8004802 <UART_SetConfig+0x1fa>
 80047cc:	231b      	movs	r3, #27
 80047ce:	2218      	movs	r2, #24
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	2204      	movs	r2, #4
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e013      	b.n	8004802 <UART_SetConfig+0x1fa>
 80047da:	231b      	movs	r3, #27
 80047dc:	2218      	movs	r2, #24
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	19db      	adds	r3, r3, r7
 80047e2:	2208      	movs	r2, #8
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e00c      	b.n	8004802 <UART_SetConfig+0x1fa>
 80047e8:	231b      	movs	r3, #27
 80047ea:	2218      	movs	r2, #24
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	2210      	movs	r2, #16
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e005      	b.n	8004802 <UART_SetConfig+0x1fa>
 80047f6:	231b      	movs	r3, #27
 80047f8:	2218      	movs	r2, #24
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	19db      	adds	r3, r3, r7
 80047fe:	2210      	movs	r2, #16
 8004800:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a55      	ldr	r2, [pc, #340]	; (800495c <UART_SetConfig+0x354>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d000      	beq.n	800480e <UART_SetConfig+0x206>
 800480c:	e084      	b.n	8004918 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800480e:	231b      	movs	r3, #27
 8004810:	2218      	movs	r2, #24
 8004812:	189b      	adds	r3, r3, r2
 8004814:	19db      	adds	r3, r3, r7
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d01d      	beq.n	8004858 <UART_SetConfig+0x250>
 800481c:	dc20      	bgt.n	8004860 <UART_SetConfig+0x258>
 800481e:	2b04      	cmp	r3, #4
 8004820:	d015      	beq.n	800484e <UART_SetConfig+0x246>
 8004822:	dc1d      	bgt.n	8004860 <UART_SetConfig+0x258>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <UART_SetConfig+0x226>
 8004828:	2b02      	cmp	r3, #2
 800482a:	d005      	beq.n	8004838 <UART_SetConfig+0x230>
 800482c:	e018      	b.n	8004860 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482e:	f7ff fb03 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8004832:	0003      	movs	r3, r0
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004836:	e01c      	b.n	8004872 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <UART_SetConfig+0x360>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2210      	movs	r2, #16
 800483e:	4013      	ands	r3, r2
 8004840:	d002      	beq.n	8004848 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004842:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <UART_SetConfig+0x368>)
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004846:	e014      	b.n	8004872 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004848:	4b4a      	ldr	r3, [pc, #296]	; (8004974 <UART_SetConfig+0x36c>)
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800484c:	e011      	b.n	8004872 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7ff fa43 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8004852:	0003      	movs	r3, r0
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004856:	e00c      	b.n	8004872 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800485e:	e008      	b.n	8004872 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004864:	231a      	movs	r3, #26
 8004866:	2218      	movs	r2, #24
 8004868:	189b      	adds	r3, r3, r2
 800486a:	19db      	adds	r3, r3, r7
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
        break;
 8004870:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d100      	bne.n	800487a <UART_SetConfig+0x272>
 8004878:	e132      	b.n	8004ae0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	0013      	movs	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	189b      	adds	r3, r3, r2
 8004884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d305      	bcc.n	8004896 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004892:	429a      	cmp	r2, r3
 8004894:	d906      	bls.n	80048a4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004896:	231a      	movs	r3, #26
 8004898:	2218      	movs	r2, #24
 800489a:	189b      	adds	r3, r3, r2
 800489c:	19db      	adds	r3, r3, r7
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e11d      	b.n	8004ae0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	6939      	ldr	r1, [r7, #16]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	000b      	movs	r3, r1
 80048b2:	0e1b      	lsrs	r3, r3, #24
 80048b4:	0010      	movs	r0, r2
 80048b6:	0205      	lsls	r5, r0, #8
 80048b8:	431d      	orrs	r5, r3
 80048ba:	000b      	movs	r3, r1
 80048bc:	021c      	lsls	r4, r3, #8
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	1900      	adds	r0, r0, r4
 80048d0:	4169      	adcs	r1, r5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	2300      	movs	r3, #0
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f7fb fcb0 	bl	8000244 <__aeabi_uldivmod>
 80048e4:	0002      	movs	r2, r0
 80048e6:	000b      	movs	r3, r1
 80048e8:	0013      	movs	r3, r2
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ee:	23c0      	movs	r3, #192	; 0xc0
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d309      	bcc.n	800490a <UART_SetConfig+0x302>
 80048f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	035b      	lsls	r3, r3, #13
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d204      	bcs.n	800490a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004906:	60da      	str	r2, [r3, #12]
 8004908:	e0ea      	b.n	8004ae0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800490a:	231a      	movs	r3, #26
 800490c:	2218      	movs	r2, #24
 800490e:	189b      	adds	r3, r3, r2
 8004910:	19db      	adds	r3, r3, r7
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e0e3      	b.n	8004ae0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	429a      	cmp	r2, r3
 8004922:	d000      	beq.n	8004926 <UART_SetConfig+0x31e>
 8004924:	e085      	b.n	8004a32 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004926:	231b      	movs	r3, #27
 8004928:	2218      	movs	r2, #24
 800492a:	189b      	adds	r3, r3, r2
 800492c:	19db      	adds	r3, r3, r7
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d837      	bhi.n	80049a4 <UART_SetConfig+0x39c>
 8004934:	009a      	lsls	r2, r3, #2
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <UART_SetConfig+0x370>)
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493e:	f7ff fa7b 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8004942:	0003      	movs	r3, r0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004946:	e036      	b.n	80049b6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7ff fa8c 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 800494c:	0003      	movs	r3, r0
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004950:	e031      	b.n	80049b6 <UART_SetConfig+0x3ae>
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	efff69f3 	.word	0xefff69f3
 8004958:	ffffcfff 	.word	0xffffcfff
 800495c:	40004800 	.word	0x40004800
 8004960:	fffff4ff 	.word	0xfffff4ff
 8004964:	40013800 	.word	0x40013800
 8004968:	40021000 	.word	0x40021000
 800496c:	40004400 	.word	0x40004400
 8004970:	003d0900 	.word	0x003d0900
 8004974:	00f42400 	.word	0x00f42400
 8004978:	0800724c 	.word	0x0800724c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800497c:	4b60      	ldr	r3, [pc, #384]	; (8004b00 <UART_SetConfig+0x4f8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2210      	movs	r2, #16
 8004982:	4013      	ands	r3, r2
 8004984:	d002      	beq.n	800498c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004986:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <UART_SetConfig+0x4fc>)
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800498a:	e014      	b.n	80049b6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800498c:	4b5e      	ldr	r3, [pc, #376]	; (8004b08 <UART_SetConfig+0x500>)
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004990:	e011      	b.n	80049b6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7ff f9a1 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8004996:	0003      	movs	r3, r0
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800499a:	e00c      	b.n	80049b6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049a2:	e008      	b.n	80049b6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049a8:	231a      	movs	r3, #26
 80049aa:	2218      	movs	r2, #24
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	19db      	adds	r3, r3, r7
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
        break;
 80049b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d100      	bne.n	80049be <UART_SetConfig+0x3b6>
 80049bc:	e090      	b.n	8004ae0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	005a      	lsls	r2, r3, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	18d2      	adds	r2, r2, r3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0019      	movs	r1, r3
 80049d0:	0010      	movs	r0, r2
 80049d2:	f7fb fbab 	bl	800012c <__udivsi3>
 80049d6:	0003      	movs	r3, r0
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	2b0f      	cmp	r3, #15
 80049de:	d921      	bls.n	8004a24 <UART_SetConfig+0x41c>
 80049e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	025b      	lsls	r3, r3, #9
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d21c      	bcs.n	8004a24 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	200e      	movs	r0, #14
 80049f0:	2418      	movs	r4, #24
 80049f2:	1903      	adds	r3, r0, r4
 80049f4:	19db      	adds	r3, r3, r7
 80049f6:	210f      	movs	r1, #15
 80049f8:	438a      	bics	r2, r1
 80049fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2207      	movs	r2, #7
 8004a04:	4013      	ands	r3, r2
 8004a06:	b299      	uxth	r1, r3
 8004a08:	1903      	adds	r3, r0, r4
 8004a0a:	19db      	adds	r3, r3, r7
 8004a0c:	1902      	adds	r2, r0, r4
 8004a0e:	19d2      	adds	r2, r2, r7
 8004a10:	8812      	ldrh	r2, [r2, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	1902      	adds	r2, r0, r4
 8004a1c:	19d2      	adds	r2, r2, r7
 8004a1e:	8812      	ldrh	r2, [r2, #0]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	e05d      	b.n	8004ae0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a24:	231a      	movs	r3, #26
 8004a26:	2218      	movs	r2, #24
 8004a28:	189b      	adds	r3, r3, r2
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e056      	b.n	8004ae0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a32:	231b      	movs	r3, #27
 8004a34:	2218      	movs	r2, #24
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	19db      	adds	r3, r3, r7
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d822      	bhi.n	8004a86 <UART_SetConfig+0x47e>
 8004a40:	009a      	lsls	r2, r3, #2
 8004a42:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <UART_SetConfig+0x504>)
 8004a44:	18d3      	adds	r3, r2, r3
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7ff f9f5 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a52:	e021      	b.n	8004a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a54:	f7ff fa06 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a5c:	e01c      	b.n	8004a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <UART_SetConfig+0x4f8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2210      	movs	r2, #16
 8004a64:	4013      	ands	r3, r2
 8004a66:	d002      	beq.n	8004a6e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a68:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <UART_SetConfig+0x4fc>)
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a6c:	e014      	b.n	8004a98 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004a6e:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <UART_SetConfig+0x500>)
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a72:	e011      	b.n	8004a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a74:	f7ff f930 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a7c:	e00c      	b.n	8004a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a84:	e008      	b.n	8004a98 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a8a:	231a      	movs	r3, #26
 8004a8c:	2218      	movs	r2, #24
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	19db      	adds	r3, r3, r7
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
        break;
 8004a96:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d020      	beq.n	8004ae0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	085a      	lsrs	r2, r3, #1
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	18d2      	adds	r2, r2, r3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0019      	movs	r1, r3
 8004aae:	0010      	movs	r0, r2
 8004ab0:	f7fb fb3c 	bl	800012c <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d90a      	bls.n	8004ad4 <UART_SetConfig+0x4cc>
 8004abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	025b      	lsls	r3, r3, #9
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d205      	bcs.n	8004ad4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e005      	b.n	8004ae0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	231a      	movs	r3, #26
 8004ad6:	2218      	movs	r2, #24
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	19db      	adds	r3, r3, r7
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004aec:	231a      	movs	r3, #26
 8004aee:	2218      	movs	r2, #24
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	19db      	adds	r3, r3, r7
 8004af4:	781b      	ldrb	r3, [r3, #0]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b00e      	add	sp, #56	; 0x38
 8004afc:	bdb0      	pop	{r4, r5, r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	40021000 	.word	0x40021000
 8004b04:	003d0900 	.word	0x003d0900
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	08007270 	.word	0x08007270

08004b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a4a      	ldr	r2, [pc, #296]	; (8004c54 <UART_AdvFeatureConfig+0x144>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2202      	movs	r2, #2
 8004b40:	4013      	ands	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4a43      	ldr	r2, [pc, #268]	; (8004c58 <UART_AdvFeatureConfig+0x148>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2204      	movs	r2, #4
 8004b62:	4013      	ands	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a3b      	ldr	r2, [pc, #236]	; (8004c5c <UART_AdvFeatureConfig+0x14c>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	0019      	movs	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2208      	movs	r2, #8
 8004b84:	4013      	ands	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4a34      	ldr	r2, [pc, #208]	; (8004c60 <UART_AdvFeatureConfig+0x150>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	0019      	movs	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a2c      	ldr	r2, [pc, #176]	; (8004c64 <UART_AdvFeatureConfig+0x154>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <UART_AdvFeatureConfig+0x158>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	4013      	ands	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <UART_AdvFeatureConfig+0x15c>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	035b      	lsls	r3, r3, #13
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d10b      	bne.n	8004c2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <UART_AdvFeatureConfig+0x160>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2280      	movs	r2, #128	; 0x80
 8004c30:	4013      	ands	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4a0e      	ldr	r2, [pc, #56]	; (8004c74 <UART_AdvFeatureConfig+0x164>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b002      	add	sp, #8
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	fffdffff 	.word	0xfffdffff
 8004c58:	fffeffff 	.word	0xfffeffff
 8004c5c:	fffbffff 	.word	0xfffbffff
 8004c60:	ffff7fff 	.word	0xffff7fff
 8004c64:	ffffefff 	.word	0xffffefff
 8004c68:	ffffdfff 	.word	0xffffdfff
 8004c6c:	ffefffff 	.word	0xffefffff
 8004c70:	ff9fffff 	.word	0xff9fffff
 8004c74:	fff7ffff 	.word	0xfff7ffff

08004c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b092      	sub	sp, #72	; 0x48
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2284      	movs	r2, #132	; 0x84
 8004c84:	2100      	movs	r1, #0
 8004c86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c88:	f7fd fe30 	bl	80028ec <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2208      	movs	r2, #8
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d12c      	bne.n	8004cf8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	0391      	lsls	r1, r2, #14
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4a46      	ldr	r2, [pc, #280]	; (8004dc0 <UART_CheckIdleState+0x148>)
 8004ca8:	9200      	str	r2, [sp, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f000 f88c 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004cb0:	1e03      	subs	r3, r0, #0
 8004cb2:	d021      	beq.n	8004cf8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2180      	movs	r1, #128	; 0x80
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2278      	movs	r2, #120	; 0x78
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e05f      	b.n	8004db8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d146      	bne.n	8004d94 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	03d1      	lsls	r1, r2, #15
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <UART_CheckIdleState+0x148>)
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f000 f858 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d03b      	beq.n	8004d94 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	2301      	movs	r3, #1
 8004d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4921      	ldr	r1, [pc, #132]	; (8004dc4 <UART_CheckIdleState+0x14c>)
 8004d3e:	400a      	ands	r2, r1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d52:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d54:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
 8004d58:	2301      	movs	r3, #1
 8004d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	438a      	bics	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	2120      	movs	r1, #32
 8004d86:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2278      	movs	r2, #120	; 0x78
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e011      	b.n	8004db8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	2120      	movs	r1, #32
 8004da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2278      	movs	r2, #120	; 0x78
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b010      	add	sp, #64	; 0x40
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	01ffffff 	.word	0x01ffffff
 8004dc4:	fffffedf 	.word	0xfffffedf

08004dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	1dfb      	adds	r3, r7, #7
 8004dd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd8:	e04b      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	d048      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de0:	f7fd fd84 	bl	80028ec <HAL_GetTick>
 8004de4:	0002      	movs	r2, r0
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e04b      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2204      	movs	r2, #4
 8004e02:	4013      	ands	r3, r2
 8004e04:	d035      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d111      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f83c 	bl	8004e9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2284      	movs	r2, #132	; 0x84
 8004e28:	2108      	movs	r1, #8
 8004e2a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2278      	movs	r2, #120	; 0x78
 8004e30:	2100      	movs	r1, #0
 8004e32:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e02c      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	401a      	ands	r2, r3
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d112      	bne.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f000 f81f 	bl	8004e9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2284      	movs	r2, #132	; 0x84
 8004e62:	2120      	movs	r1, #32
 8004e64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2278      	movs	r2, #120	; 0x78
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e00f      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	425a      	negs	r2, r3
 8004e82:	4153      	adcs	r3, r2
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	001a      	movs	r2, r3
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d0a4      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b004      	add	sp, #16
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08e      	sub	sp, #56	; 0x38
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8004eaa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4926      	ldr	r1, [pc, #152]	; (8004f60 <UART_EndRxTransfer+0xc4>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	623b      	str	r3, [r7, #32]
  return(result);
 8004edc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	438a      	bics	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d118      	bne.n	8004f42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f10:	f3ef 8310 	mrs	r3, PRIMASK
 8004f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f383 8810 	msr	PRIMASK, r3
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2110      	movs	r1, #16
 8004f32:	438a      	bics	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f383 8810 	msr	PRIMASK, r3
}
 8004f40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2280      	movs	r2, #128	; 0x80
 8004f46:	2120      	movs	r1, #32
 8004f48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b00e      	add	sp, #56	; 0x38
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	fffffedf 	.word	0xfffffedf

08004f64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <USB_DisableGlobalInt+0x30>)
 8004f6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	5a9b      	ldrh	r3, [r3, r2]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	43d2      	mvns	r2, r2
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	4013      	ands	r3, r2
 8004f82:	b299      	uxth	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2240      	movs	r2, #64	; 0x40
 8004f88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	0000bf80 	.word	0x0000bf80

08004f98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f98:	b084      	sub	sp, #16
 8004f9a:	b590      	push	{r4, r7, lr}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	2004      	movs	r0, #4
 8004fa4:	2410      	movs	r4, #16
 8004fa6:	1900      	adds	r0, r0, r4
 8004fa8:	2408      	movs	r4, #8
 8004faa:	46a4      	mov	ip, r4
 8004fac:	44bc      	add	ip, r7
 8004fae:	4460      	add	r0, ip
 8004fb0:	6001      	str	r1, [r0, #0]
 8004fb2:	6042      	str	r2, [r0, #4]
 8004fb4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2240      	movs	r2, #64	; 0x40
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2240      	movs	r2, #64	; 0x40
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2244      	movs	r2, #68	; 0x44
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2250      	movs	r2, #80	; 0x50
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b003      	add	sp, #12
 8004fde:	bc90      	pop	{r4, r7}
 8004fe0:	bc08      	pop	{r3}
 8004fe2:	b004      	add	sp, #16
 8004fe4:	4718      	bx	r3
	...

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	20000050 	.word	0x20000050

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	2600      	movs	r6, #0
 8004ff8:	4d0c      	ldr	r5, [pc, #48]	; (800502c <__libc_init_array+0x38>)
 8004ffa:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	42a6      	cmp	r6, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	2600      	movs	r6, #0
 8005006:	f000 fc8b 	bl	8005920 <_init>
 800500a:	4d0a      	ldr	r5, [pc, #40]	; (8005034 <__libc_init_array+0x40>)
 800500c:	4c0a      	ldr	r4, [pc, #40]	; (8005038 <__libc_init_array+0x44>)
 800500e:	1b64      	subs	r4, r4, r5
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	42a6      	cmp	r6, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	00b3      	lsls	r3, r6, #2
 800501a:	58eb      	ldr	r3, [r5, r3]
 800501c:	4798      	blx	r3
 800501e:	3601      	adds	r6, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	00b3      	lsls	r3, r6, #2
 8005024:	58eb      	ldr	r3, [r5, r3]
 8005026:	4798      	blx	r3
 8005028:	3601      	adds	r6, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	080072d0 	.word	0x080072d0
 8005030:	080072d0 	.word	0x080072d0
 8005034:	080072d0 	.word	0x080072d0
 8005038:	080072d4 	.word	0x080072d4

0800503c <memset>:
 800503c:	0003      	movs	r3, r0
 800503e:	1882      	adds	r2, r0, r2
 8005040:	4293      	cmp	r3, r2
 8005042:	d100      	bne.n	8005046 <memset+0xa>
 8005044:	4770      	bx	lr
 8005046:	7019      	strb	r1, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	e7f9      	b.n	8005040 <memset+0x4>

0800504c <siprintf>:
 800504c:	b40e      	push	{r1, r2, r3}
 800504e:	b500      	push	{lr}
 8005050:	490b      	ldr	r1, [pc, #44]	; (8005080 <siprintf+0x34>)
 8005052:	b09c      	sub	sp, #112	; 0x70
 8005054:	ab1d      	add	r3, sp, #116	; 0x74
 8005056:	9002      	str	r0, [sp, #8]
 8005058:	9006      	str	r0, [sp, #24]
 800505a:	9107      	str	r1, [sp, #28]
 800505c:	9104      	str	r1, [sp, #16]
 800505e:	4809      	ldr	r0, [pc, #36]	; (8005084 <siprintf+0x38>)
 8005060:	4909      	ldr	r1, [pc, #36]	; (8005088 <siprintf+0x3c>)
 8005062:	cb04      	ldmia	r3!, {r2}
 8005064:	9105      	str	r1, [sp, #20]
 8005066:	6800      	ldr	r0, [r0, #0]
 8005068:	a902      	add	r1, sp, #8
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	f000 f870 	bl	8005150 <_svfiprintf_r>
 8005070:	2300      	movs	r3, #0
 8005072:	9a02      	ldr	r2, [sp, #8]
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	b01c      	add	sp, #112	; 0x70
 8005078:	bc08      	pop	{r3}
 800507a:	b003      	add	sp, #12
 800507c:	4718      	bx	r3
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	7fffffff 	.word	0x7fffffff
 8005084:	20000050 	.word	0x20000050
 8005088:	ffff0208 	.word	0xffff0208

0800508c <__ssputs_r>:
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	688e      	ldr	r6, [r1, #8]
 8005090:	b085      	sub	sp, #20
 8005092:	0007      	movs	r7, r0
 8005094:	000c      	movs	r4, r1
 8005096:	9203      	str	r2, [sp, #12]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	429e      	cmp	r6, r3
 800509c:	d83c      	bhi.n	8005118 <__ssputs_r+0x8c>
 800509e:	2390      	movs	r3, #144	; 0x90
 80050a0:	898a      	ldrh	r2, [r1, #12]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	421a      	tst	r2, r3
 80050a6:	d034      	beq.n	8005112 <__ssputs_r+0x86>
 80050a8:	6909      	ldr	r1, [r1, #16]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6960      	ldr	r0, [r4, #20]
 80050ae:	1a5b      	subs	r3, r3, r1
 80050b0:	9302      	str	r3, [sp, #8]
 80050b2:	2303      	movs	r3, #3
 80050b4:	4343      	muls	r3, r0
 80050b6:	0fdd      	lsrs	r5, r3, #31
 80050b8:	18ed      	adds	r5, r5, r3
 80050ba:	9b01      	ldr	r3, [sp, #4]
 80050bc:	9802      	ldr	r0, [sp, #8]
 80050be:	3301      	adds	r3, #1
 80050c0:	181b      	adds	r3, r3, r0
 80050c2:	106d      	asrs	r5, r5, #1
 80050c4:	42ab      	cmp	r3, r5
 80050c6:	d900      	bls.n	80050ca <__ssputs_r+0x3e>
 80050c8:	001d      	movs	r5, r3
 80050ca:	0553      	lsls	r3, r2, #21
 80050cc:	d532      	bpl.n	8005134 <__ssputs_r+0xa8>
 80050ce:	0029      	movs	r1, r5
 80050d0:	0038      	movs	r0, r7
 80050d2:	f000 fb53 	bl	800577c <_malloc_r>
 80050d6:	1e06      	subs	r6, r0, #0
 80050d8:	d109      	bne.n	80050ee <__ssputs_r+0x62>
 80050da:	230c      	movs	r3, #12
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	2340      	movs	r3, #64	; 0x40
 80050e0:	2001      	movs	r0, #1
 80050e2:	89a2      	ldrh	r2, [r4, #12]
 80050e4:	4240      	negs	r0, r0
 80050e6:	4313      	orrs	r3, r2
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	b005      	add	sp, #20
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ee:	9a02      	ldr	r2, [sp, #8]
 80050f0:	6921      	ldr	r1, [r4, #16]
 80050f2:	f000 faba 	bl	800566a <memcpy>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <__ssputs_r+0xc0>)
 80050fa:	401a      	ands	r2, r3
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	4313      	orrs	r3, r2
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	9b02      	ldr	r3, [sp, #8]
 8005104:	6126      	str	r6, [r4, #16]
 8005106:	18f6      	adds	r6, r6, r3
 8005108:	6026      	str	r6, [r4, #0]
 800510a:	6165      	str	r5, [r4, #20]
 800510c:	9e01      	ldr	r6, [sp, #4]
 800510e:	1aed      	subs	r5, r5, r3
 8005110:	60a5      	str	r5, [r4, #8]
 8005112:	9b01      	ldr	r3, [sp, #4]
 8005114:	429e      	cmp	r6, r3
 8005116:	d900      	bls.n	800511a <__ssputs_r+0x8e>
 8005118:	9e01      	ldr	r6, [sp, #4]
 800511a:	0032      	movs	r2, r6
 800511c:	9903      	ldr	r1, [sp, #12]
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	f000 faac 	bl	800567c <memmove>
 8005124:	68a3      	ldr	r3, [r4, #8]
 8005126:	2000      	movs	r0, #0
 8005128:	1b9b      	subs	r3, r3, r6
 800512a:	60a3      	str	r3, [r4, #8]
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	199e      	adds	r6, r3, r6
 8005130:	6026      	str	r6, [r4, #0]
 8005132:	e7da      	b.n	80050ea <__ssputs_r+0x5e>
 8005134:	002a      	movs	r2, r5
 8005136:	0038      	movs	r0, r7
 8005138:	f000 fb96 	bl	8005868 <_realloc_r>
 800513c:	1e06      	subs	r6, r0, #0
 800513e:	d1e0      	bne.n	8005102 <__ssputs_r+0x76>
 8005140:	0038      	movs	r0, r7
 8005142:	6921      	ldr	r1, [r4, #16]
 8005144:	f000 faae 	bl	80056a4 <_free_r>
 8005148:	e7c7      	b.n	80050da <__ssputs_r+0x4e>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	fffffb7f 	.word	0xfffffb7f

08005150 <_svfiprintf_r>:
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b0a1      	sub	sp, #132	; 0x84
 8005154:	9003      	str	r0, [sp, #12]
 8005156:	001d      	movs	r5, r3
 8005158:	898b      	ldrh	r3, [r1, #12]
 800515a:	000f      	movs	r7, r1
 800515c:	0016      	movs	r6, r2
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	d511      	bpl.n	8005186 <_svfiprintf_r+0x36>
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10e      	bne.n	8005186 <_svfiprintf_r+0x36>
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	f000 fb07 	bl	800577c <_malloc_r>
 800516e:	6038      	str	r0, [r7, #0]
 8005170:	6138      	str	r0, [r7, #16]
 8005172:	2800      	cmp	r0, #0
 8005174:	d105      	bne.n	8005182 <_svfiprintf_r+0x32>
 8005176:	230c      	movs	r3, #12
 8005178:	9a03      	ldr	r2, [sp, #12]
 800517a:	3801      	subs	r0, #1
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	b021      	add	sp, #132	; 0x84
 8005180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005182:	2340      	movs	r3, #64	; 0x40
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	2300      	movs	r3, #0
 8005188:	ac08      	add	r4, sp, #32
 800518a:	6163      	str	r3, [r4, #20]
 800518c:	3320      	adds	r3, #32
 800518e:	7663      	strb	r3, [r4, #25]
 8005190:	3310      	adds	r3, #16
 8005192:	76a3      	strb	r3, [r4, #26]
 8005194:	9507      	str	r5, [sp, #28]
 8005196:	0035      	movs	r5, r6
 8005198:	782b      	ldrb	r3, [r5, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <_svfiprintf_r+0x52>
 800519e:	2b25      	cmp	r3, #37	; 0x25
 80051a0:	d147      	bne.n	8005232 <_svfiprintf_r+0xe2>
 80051a2:	1bab      	subs	r3, r5, r6
 80051a4:	9305      	str	r3, [sp, #20]
 80051a6:	42b5      	cmp	r5, r6
 80051a8:	d00c      	beq.n	80051c4 <_svfiprintf_r+0x74>
 80051aa:	0032      	movs	r2, r6
 80051ac:	0039      	movs	r1, r7
 80051ae:	9803      	ldr	r0, [sp, #12]
 80051b0:	f7ff ff6c 	bl	800508c <__ssputs_r>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d100      	bne.n	80051ba <_svfiprintf_r+0x6a>
 80051b8:	e0ae      	b.n	8005318 <_svfiprintf_r+0x1c8>
 80051ba:	6962      	ldr	r2, [r4, #20]
 80051bc:	9b05      	ldr	r3, [sp, #20]
 80051be:	4694      	mov	ip, r2
 80051c0:	4463      	add	r3, ip
 80051c2:	6163      	str	r3, [r4, #20]
 80051c4:	782b      	ldrb	r3, [r5, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d100      	bne.n	80051cc <_svfiprintf_r+0x7c>
 80051ca:	e0a5      	b.n	8005318 <_svfiprintf_r+0x1c8>
 80051cc:	2201      	movs	r2, #1
 80051ce:	2300      	movs	r3, #0
 80051d0:	4252      	negs	r2, r2
 80051d2:	6062      	str	r2, [r4, #4]
 80051d4:	a904      	add	r1, sp, #16
 80051d6:	3254      	adds	r2, #84	; 0x54
 80051d8:	1852      	adds	r2, r2, r1
 80051da:	1c6e      	adds	r6, r5, #1
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	60e3      	str	r3, [r4, #12]
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	7013      	strb	r3, [r2, #0]
 80051e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80051e6:	2205      	movs	r2, #5
 80051e8:	7831      	ldrb	r1, [r6, #0]
 80051ea:	4854      	ldr	r0, [pc, #336]	; (800533c <_svfiprintf_r+0x1ec>)
 80051ec:	f000 fa32 	bl	8005654 <memchr>
 80051f0:	1c75      	adds	r5, r6, #1
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d11f      	bne.n	8005236 <_svfiprintf_r+0xe6>
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	06d3      	lsls	r3, r2, #27
 80051fa:	d504      	bpl.n	8005206 <_svfiprintf_r+0xb6>
 80051fc:	2353      	movs	r3, #83	; 0x53
 80051fe:	a904      	add	r1, sp, #16
 8005200:	185b      	adds	r3, r3, r1
 8005202:	2120      	movs	r1, #32
 8005204:	7019      	strb	r1, [r3, #0]
 8005206:	0713      	lsls	r3, r2, #28
 8005208:	d504      	bpl.n	8005214 <_svfiprintf_r+0xc4>
 800520a:	2353      	movs	r3, #83	; 0x53
 800520c:	a904      	add	r1, sp, #16
 800520e:	185b      	adds	r3, r3, r1
 8005210:	212b      	movs	r1, #43	; 0x2b
 8005212:	7019      	strb	r1, [r3, #0]
 8005214:	7833      	ldrb	r3, [r6, #0]
 8005216:	2b2a      	cmp	r3, #42	; 0x2a
 8005218:	d016      	beq.n	8005248 <_svfiprintf_r+0xf8>
 800521a:	0035      	movs	r5, r6
 800521c:	2100      	movs	r1, #0
 800521e:	200a      	movs	r0, #10
 8005220:	68e3      	ldr	r3, [r4, #12]
 8005222:	782a      	ldrb	r2, [r5, #0]
 8005224:	1c6e      	adds	r6, r5, #1
 8005226:	3a30      	subs	r2, #48	; 0x30
 8005228:	2a09      	cmp	r2, #9
 800522a:	d94e      	bls.n	80052ca <_svfiprintf_r+0x17a>
 800522c:	2900      	cmp	r1, #0
 800522e:	d111      	bne.n	8005254 <_svfiprintf_r+0x104>
 8005230:	e017      	b.n	8005262 <_svfiprintf_r+0x112>
 8005232:	3501      	adds	r5, #1
 8005234:	e7b0      	b.n	8005198 <_svfiprintf_r+0x48>
 8005236:	4b41      	ldr	r3, [pc, #260]	; (800533c <_svfiprintf_r+0x1ec>)
 8005238:	6822      	ldr	r2, [r4, #0]
 800523a:	1ac0      	subs	r0, r0, r3
 800523c:	2301      	movs	r3, #1
 800523e:	4083      	lsls	r3, r0
 8005240:	4313      	orrs	r3, r2
 8005242:	002e      	movs	r6, r5
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	e7ce      	b.n	80051e6 <_svfiprintf_r+0x96>
 8005248:	9b07      	ldr	r3, [sp, #28]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9107      	str	r1, [sp, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	db01      	blt.n	8005258 <_svfiprintf_r+0x108>
 8005254:	930b      	str	r3, [sp, #44]	; 0x2c
 8005256:	e004      	b.n	8005262 <_svfiprintf_r+0x112>
 8005258:	425b      	negs	r3, r3
 800525a:	60e3      	str	r3, [r4, #12]
 800525c:	2302      	movs	r3, #2
 800525e:	4313      	orrs	r3, r2
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	782b      	ldrb	r3, [r5, #0]
 8005264:	2b2e      	cmp	r3, #46	; 0x2e
 8005266:	d10a      	bne.n	800527e <_svfiprintf_r+0x12e>
 8005268:	786b      	ldrb	r3, [r5, #1]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d135      	bne.n	80052da <_svfiprintf_r+0x18a>
 800526e:	9b07      	ldr	r3, [sp, #28]
 8005270:	3502      	adds	r5, #2
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	9207      	str	r2, [sp, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db2b      	blt.n	80052d4 <_svfiprintf_r+0x184>
 800527c:	9309      	str	r3, [sp, #36]	; 0x24
 800527e:	4e30      	ldr	r6, [pc, #192]	; (8005340 <_svfiprintf_r+0x1f0>)
 8005280:	2203      	movs	r2, #3
 8005282:	0030      	movs	r0, r6
 8005284:	7829      	ldrb	r1, [r5, #0]
 8005286:	f000 f9e5 	bl	8005654 <memchr>
 800528a:	2800      	cmp	r0, #0
 800528c:	d006      	beq.n	800529c <_svfiprintf_r+0x14c>
 800528e:	2340      	movs	r3, #64	; 0x40
 8005290:	1b80      	subs	r0, r0, r6
 8005292:	4083      	lsls	r3, r0
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	3501      	adds	r5, #1
 8005298:	4313      	orrs	r3, r2
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	7829      	ldrb	r1, [r5, #0]
 800529e:	2206      	movs	r2, #6
 80052a0:	4828      	ldr	r0, [pc, #160]	; (8005344 <_svfiprintf_r+0x1f4>)
 80052a2:	1c6e      	adds	r6, r5, #1
 80052a4:	7621      	strb	r1, [r4, #24]
 80052a6:	f000 f9d5 	bl	8005654 <memchr>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d03c      	beq.n	8005328 <_svfiprintf_r+0x1d8>
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <_svfiprintf_r+0x1f8>)
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d125      	bne.n	8005300 <_svfiprintf_r+0x1b0>
 80052b4:	2207      	movs	r2, #7
 80052b6:	9b07      	ldr	r3, [sp, #28]
 80052b8:	3307      	adds	r3, #7
 80052ba:	4393      	bics	r3, r2
 80052bc:	3308      	adds	r3, #8
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	6963      	ldr	r3, [r4, #20]
 80052c2:	9a04      	ldr	r2, [sp, #16]
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	6163      	str	r3, [r4, #20]
 80052c8:	e765      	b.n	8005196 <_svfiprintf_r+0x46>
 80052ca:	4343      	muls	r3, r0
 80052cc:	0035      	movs	r5, r6
 80052ce:	2101      	movs	r1, #1
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	e7a6      	b.n	8005222 <_svfiprintf_r+0xd2>
 80052d4:	2301      	movs	r3, #1
 80052d6:	425b      	negs	r3, r3
 80052d8:	e7d0      	b.n	800527c <_svfiprintf_r+0x12c>
 80052da:	2300      	movs	r3, #0
 80052dc:	200a      	movs	r0, #10
 80052de:	001a      	movs	r2, r3
 80052e0:	3501      	adds	r5, #1
 80052e2:	6063      	str	r3, [r4, #4]
 80052e4:	7829      	ldrb	r1, [r5, #0]
 80052e6:	1c6e      	adds	r6, r5, #1
 80052e8:	3930      	subs	r1, #48	; 0x30
 80052ea:	2909      	cmp	r1, #9
 80052ec:	d903      	bls.n	80052f6 <_svfiprintf_r+0x1a6>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0c5      	beq.n	800527e <_svfiprintf_r+0x12e>
 80052f2:	9209      	str	r2, [sp, #36]	; 0x24
 80052f4:	e7c3      	b.n	800527e <_svfiprintf_r+0x12e>
 80052f6:	4342      	muls	r2, r0
 80052f8:	0035      	movs	r5, r6
 80052fa:	2301      	movs	r3, #1
 80052fc:	1852      	adds	r2, r2, r1
 80052fe:	e7f1      	b.n	80052e4 <_svfiprintf_r+0x194>
 8005300:	ab07      	add	r3, sp, #28
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	003a      	movs	r2, r7
 8005306:	0021      	movs	r1, r4
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <_svfiprintf_r+0x1fc>)
 800530a:	9803      	ldr	r0, [sp, #12]
 800530c:	e000      	b.n	8005310 <_svfiprintf_r+0x1c0>
 800530e:	bf00      	nop
 8005310:	9004      	str	r0, [sp, #16]
 8005312:	9b04      	ldr	r3, [sp, #16]
 8005314:	3301      	adds	r3, #1
 8005316:	d1d3      	bne.n	80052c0 <_svfiprintf_r+0x170>
 8005318:	89bb      	ldrh	r3, [r7, #12]
 800531a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800531c:	065b      	lsls	r3, r3, #25
 800531e:	d400      	bmi.n	8005322 <_svfiprintf_r+0x1d2>
 8005320:	e72d      	b.n	800517e <_svfiprintf_r+0x2e>
 8005322:	2001      	movs	r0, #1
 8005324:	4240      	negs	r0, r0
 8005326:	e72a      	b.n	800517e <_svfiprintf_r+0x2e>
 8005328:	ab07      	add	r3, sp, #28
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	003a      	movs	r2, r7
 800532e:	0021      	movs	r1, r4
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <_svfiprintf_r+0x1fc>)
 8005332:	9803      	ldr	r0, [sp, #12]
 8005334:	f000 f87c 	bl	8005430 <_printf_i>
 8005338:	e7ea      	b.n	8005310 <_svfiprintf_r+0x1c0>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	08007294 	.word	0x08007294
 8005340:	0800729a 	.word	0x0800729a
 8005344:	0800729e 	.word	0x0800729e
 8005348:	00000000 	.word	0x00000000
 800534c:	0800508d 	.word	0x0800508d

08005350 <_printf_common>:
 8005350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005352:	0015      	movs	r5, r2
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	688a      	ldr	r2, [r1, #8]
 8005358:	690b      	ldr	r3, [r1, #16]
 800535a:	000c      	movs	r4, r1
 800535c:	9000      	str	r0, [sp, #0]
 800535e:	4293      	cmp	r3, r2
 8005360:	da00      	bge.n	8005364 <_printf_common+0x14>
 8005362:	0013      	movs	r3, r2
 8005364:	0022      	movs	r2, r4
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	3243      	adds	r2, #67	; 0x43
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	2a00      	cmp	r2, #0
 800536e:	d001      	beq.n	8005374 <_printf_common+0x24>
 8005370:	3301      	adds	r3, #1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	069b      	lsls	r3, r3, #26
 8005378:	d502      	bpl.n	8005380 <_printf_common+0x30>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	3302      	adds	r3, #2
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	2306      	movs	r3, #6
 8005384:	0017      	movs	r7, r2
 8005386:	401f      	ands	r7, r3
 8005388:	421a      	tst	r2, r3
 800538a:	d027      	beq.n	80053dc <_printf_common+0x8c>
 800538c:	0023      	movs	r3, r4
 800538e:	3343      	adds	r3, #67	; 0x43
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	4193      	sbcs	r3, r2
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	0692      	lsls	r2, r2, #26
 800539a:	d430      	bmi.n	80053fe <_printf_common+0xae>
 800539c:	0022      	movs	r2, r4
 800539e:	9901      	ldr	r1, [sp, #4]
 80053a0:	9800      	ldr	r0, [sp, #0]
 80053a2:	9e08      	ldr	r6, [sp, #32]
 80053a4:	3243      	adds	r2, #67	; 0x43
 80053a6:	47b0      	blx	r6
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d025      	beq.n	80053f8 <_printf_common+0xa8>
 80053ac:	2306      	movs	r3, #6
 80053ae:	6820      	ldr	r0, [r4, #0]
 80053b0:	682a      	ldr	r2, [r5, #0]
 80053b2:	68e1      	ldr	r1, [r4, #12]
 80053b4:	2500      	movs	r5, #0
 80053b6:	4003      	ands	r3, r0
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0x74>
 80053bc:	1a8d      	subs	r5, r1, r2
 80053be:	43eb      	mvns	r3, r5
 80053c0:	17db      	asrs	r3, r3, #31
 80053c2:	401d      	ands	r5, r3
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	6922      	ldr	r2, [r4, #16]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	dd01      	ble.n	80053d0 <_printf_common+0x80>
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	18ed      	adds	r5, r5, r3
 80053d0:	2700      	movs	r7, #0
 80053d2:	42bd      	cmp	r5, r7
 80053d4:	d120      	bne.n	8005418 <_printf_common+0xc8>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e010      	b.n	80053fc <_printf_common+0xac>
 80053da:	3701      	adds	r7, #1
 80053dc:	68e3      	ldr	r3, [r4, #12]
 80053de:	682a      	ldr	r2, [r5, #0]
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	42bb      	cmp	r3, r7
 80053e4:	ddd2      	ble.n	800538c <_printf_common+0x3c>
 80053e6:	0022      	movs	r2, r4
 80053e8:	2301      	movs	r3, #1
 80053ea:	9901      	ldr	r1, [sp, #4]
 80053ec:	9800      	ldr	r0, [sp, #0]
 80053ee:	9e08      	ldr	r6, [sp, #32]
 80053f0:	3219      	adds	r2, #25
 80053f2:	47b0      	blx	r6
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d1f0      	bne.n	80053da <_printf_common+0x8a>
 80053f8:	2001      	movs	r0, #1
 80053fa:	4240      	negs	r0, r0
 80053fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053fe:	2030      	movs	r0, #48	; 0x30
 8005400:	18e1      	adds	r1, r4, r3
 8005402:	3143      	adds	r1, #67	; 0x43
 8005404:	7008      	strb	r0, [r1, #0]
 8005406:	0021      	movs	r1, r4
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	3145      	adds	r1, #69	; 0x45
 800540c:	7809      	ldrb	r1, [r1, #0]
 800540e:	18a2      	adds	r2, r4, r2
 8005410:	3243      	adds	r2, #67	; 0x43
 8005412:	3302      	adds	r3, #2
 8005414:	7011      	strb	r1, [r2, #0]
 8005416:	e7c1      	b.n	800539c <_printf_common+0x4c>
 8005418:	0022      	movs	r2, r4
 800541a:	2301      	movs	r3, #1
 800541c:	9901      	ldr	r1, [sp, #4]
 800541e:	9800      	ldr	r0, [sp, #0]
 8005420:	9e08      	ldr	r6, [sp, #32]
 8005422:	321a      	adds	r2, #26
 8005424:	47b0      	blx	r6
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d0e6      	beq.n	80053f8 <_printf_common+0xa8>
 800542a:	3701      	adds	r7, #1
 800542c:	e7d1      	b.n	80053d2 <_printf_common+0x82>
	...

08005430 <_printf_i>:
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005432:	b08b      	sub	sp, #44	; 0x2c
 8005434:	9206      	str	r2, [sp, #24]
 8005436:	000a      	movs	r2, r1
 8005438:	3243      	adds	r2, #67	; 0x43
 800543a:	9307      	str	r3, [sp, #28]
 800543c:	9005      	str	r0, [sp, #20]
 800543e:	9204      	str	r2, [sp, #16]
 8005440:	7e0a      	ldrb	r2, [r1, #24]
 8005442:	000c      	movs	r4, r1
 8005444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005446:	2a78      	cmp	r2, #120	; 0x78
 8005448:	d807      	bhi.n	800545a <_printf_i+0x2a>
 800544a:	2a62      	cmp	r2, #98	; 0x62
 800544c:	d809      	bhi.n	8005462 <_printf_i+0x32>
 800544e:	2a00      	cmp	r2, #0
 8005450:	d100      	bne.n	8005454 <_printf_i+0x24>
 8005452:	e0c1      	b.n	80055d8 <_printf_i+0x1a8>
 8005454:	2a58      	cmp	r2, #88	; 0x58
 8005456:	d100      	bne.n	800545a <_printf_i+0x2a>
 8005458:	e08c      	b.n	8005574 <_printf_i+0x144>
 800545a:	0026      	movs	r6, r4
 800545c:	3642      	adds	r6, #66	; 0x42
 800545e:	7032      	strb	r2, [r6, #0]
 8005460:	e022      	b.n	80054a8 <_printf_i+0x78>
 8005462:	0010      	movs	r0, r2
 8005464:	3863      	subs	r0, #99	; 0x63
 8005466:	2815      	cmp	r0, #21
 8005468:	d8f7      	bhi.n	800545a <_printf_i+0x2a>
 800546a:	f7fa fe55 	bl	8000118 <__gnu_thumb1_case_shi>
 800546e:	0016      	.short	0x0016
 8005470:	fff6001f 	.word	0xfff6001f
 8005474:	fff6fff6 	.word	0xfff6fff6
 8005478:	001ffff6 	.word	0x001ffff6
 800547c:	fff6fff6 	.word	0xfff6fff6
 8005480:	fff6fff6 	.word	0xfff6fff6
 8005484:	003600a8 	.word	0x003600a8
 8005488:	fff6009a 	.word	0xfff6009a
 800548c:	00b9fff6 	.word	0x00b9fff6
 8005490:	0036fff6 	.word	0x0036fff6
 8005494:	fff6fff6 	.word	0xfff6fff6
 8005498:	009e      	.short	0x009e
 800549a:	0026      	movs	r6, r4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	3642      	adds	r6, #66	; 0x42
 80054a0:	1d11      	adds	r1, r2, #4
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	7033      	strb	r3, [r6, #0]
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0a7      	b.n	80055fc <_printf_i+0x1cc>
 80054ac:	6808      	ldr	r0, [r1, #0]
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	1d0a      	adds	r2, r1, #4
 80054b2:	0605      	lsls	r5, r0, #24
 80054b4:	d50b      	bpl.n	80054ce <_printf_i+0x9e>
 80054b6:	680d      	ldr	r5, [r1, #0]
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	da03      	bge.n	80054c6 <_printf_i+0x96>
 80054be:	232d      	movs	r3, #45	; 0x2d
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	426d      	negs	r5, r5
 80054c4:	7013      	strb	r3, [r2, #0]
 80054c6:	4b61      	ldr	r3, [pc, #388]	; (800564c <_printf_i+0x21c>)
 80054c8:	270a      	movs	r7, #10
 80054ca:	9303      	str	r3, [sp, #12]
 80054cc:	e01b      	b.n	8005506 <_printf_i+0xd6>
 80054ce:	680d      	ldr	r5, [r1, #0]
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	0641      	lsls	r1, r0, #25
 80054d4:	d5f1      	bpl.n	80054ba <_printf_i+0x8a>
 80054d6:	b22d      	sxth	r5, r5
 80054d8:	e7ef      	b.n	80054ba <_printf_i+0x8a>
 80054da:	680d      	ldr	r5, [r1, #0]
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	1d08      	adds	r0, r1, #4
 80054e0:	6018      	str	r0, [r3, #0]
 80054e2:	062e      	lsls	r6, r5, #24
 80054e4:	d501      	bpl.n	80054ea <_printf_i+0xba>
 80054e6:	680d      	ldr	r5, [r1, #0]
 80054e8:	e003      	b.n	80054f2 <_printf_i+0xc2>
 80054ea:	066d      	lsls	r5, r5, #25
 80054ec:	d5fb      	bpl.n	80054e6 <_printf_i+0xb6>
 80054ee:	680d      	ldr	r5, [r1, #0]
 80054f0:	b2ad      	uxth	r5, r5
 80054f2:	4b56      	ldr	r3, [pc, #344]	; (800564c <_printf_i+0x21c>)
 80054f4:	2708      	movs	r7, #8
 80054f6:	9303      	str	r3, [sp, #12]
 80054f8:	2a6f      	cmp	r2, #111	; 0x6f
 80054fa:	d000      	beq.n	80054fe <_printf_i+0xce>
 80054fc:	3702      	adds	r7, #2
 80054fe:	0023      	movs	r3, r4
 8005500:	2200      	movs	r2, #0
 8005502:	3343      	adds	r3, #67	; 0x43
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	db03      	blt.n	8005516 <_printf_i+0xe6>
 800550e:	2204      	movs	r2, #4
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	4391      	bics	r1, r2
 8005514:	6021      	str	r1, [r4, #0]
 8005516:	2d00      	cmp	r5, #0
 8005518:	d102      	bne.n	8005520 <_printf_i+0xf0>
 800551a:	9e04      	ldr	r6, [sp, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00c      	beq.n	800553a <_printf_i+0x10a>
 8005520:	9e04      	ldr	r6, [sp, #16]
 8005522:	0028      	movs	r0, r5
 8005524:	0039      	movs	r1, r7
 8005526:	f7fa fe87 	bl	8000238 <__aeabi_uidivmod>
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	3e01      	subs	r6, #1
 800552e:	5c5b      	ldrb	r3, [r3, r1]
 8005530:	7033      	strb	r3, [r6, #0]
 8005532:	002b      	movs	r3, r5
 8005534:	0005      	movs	r5, r0
 8005536:	429f      	cmp	r7, r3
 8005538:	d9f3      	bls.n	8005522 <_printf_i+0xf2>
 800553a:	2f08      	cmp	r7, #8
 800553c:	d109      	bne.n	8005552 <_printf_i+0x122>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	07db      	lsls	r3, r3, #31
 8005542:	d506      	bpl.n	8005552 <_printf_i+0x122>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	6922      	ldr	r2, [r4, #16]
 8005548:	4293      	cmp	r3, r2
 800554a:	dc02      	bgt.n	8005552 <_printf_i+0x122>
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	3e01      	subs	r6, #1
 8005550:	7033      	strb	r3, [r6, #0]
 8005552:	9b04      	ldr	r3, [sp, #16]
 8005554:	1b9b      	subs	r3, r3, r6
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	9b07      	ldr	r3, [sp, #28]
 800555a:	0021      	movs	r1, r4
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	9805      	ldr	r0, [sp, #20]
 8005560:	9b06      	ldr	r3, [sp, #24]
 8005562:	aa09      	add	r2, sp, #36	; 0x24
 8005564:	f7ff fef4 	bl	8005350 <_printf_common>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d14c      	bne.n	8005606 <_printf_i+0x1d6>
 800556c:	2001      	movs	r0, #1
 800556e:	4240      	negs	r0, r0
 8005570:	b00b      	add	sp, #44	; 0x2c
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005574:	3145      	adds	r1, #69	; 0x45
 8005576:	700a      	strb	r2, [r1, #0]
 8005578:	4a34      	ldr	r2, [pc, #208]	; (800564c <_printf_i+0x21c>)
 800557a:	9203      	str	r2, [sp, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	6821      	ldr	r1, [r4, #0]
 8005580:	ca20      	ldmia	r2!, {r5}
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	0608      	lsls	r0, r1, #24
 8005586:	d516      	bpl.n	80055b6 <_printf_i+0x186>
 8005588:	07cb      	lsls	r3, r1, #31
 800558a:	d502      	bpl.n	8005592 <_printf_i+0x162>
 800558c:	2320      	movs	r3, #32
 800558e:	4319      	orrs	r1, r3
 8005590:	6021      	str	r1, [r4, #0]
 8005592:	2710      	movs	r7, #16
 8005594:	2d00      	cmp	r5, #0
 8005596:	d1b2      	bne.n	80054fe <_printf_i+0xce>
 8005598:	2320      	movs	r3, #32
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	439a      	bics	r2, r3
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	e7ad      	b.n	80054fe <_printf_i+0xce>
 80055a2:	2220      	movs	r2, #32
 80055a4:	6809      	ldr	r1, [r1, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	0022      	movs	r2, r4
 80055ac:	2178      	movs	r1, #120	; 0x78
 80055ae:	3245      	adds	r2, #69	; 0x45
 80055b0:	7011      	strb	r1, [r2, #0]
 80055b2:	4a27      	ldr	r2, [pc, #156]	; (8005650 <_printf_i+0x220>)
 80055b4:	e7e1      	b.n	800557a <_printf_i+0x14a>
 80055b6:	0648      	lsls	r0, r1, #25
 80055b8:	d5e6      	bpl.n	8005588 <_printf_i+0x158>
 80055ba:	b2ad      	uxth	r5, r5
 80055bc:	e7e4      	b.n	8005588 <_printf_i+0x158>
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	680d      	ldr	r5, [r1, #0]
 80055c2:	1d10      	adds	r0, r2, #4
 80055c4:	6949      	ldr	r1, [r1, #20]
 80055c6:	6018      	str	r0, [r3, #0]
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	062e      	lsls	r6, r5, #24
 80055cc:	d501      	bpl.n	80055d2 <_printf_i+0x1a2>
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	e002      	b.n	80055d8 <_printf_i+0x1a8>
 80055d2:	066d      	lsls	r5, r5, #25
 80055d4:	d5fb      	bpl.n	80055ce <_printf_i+0x19e>
 80055d6:	8019      	strh	r1, [r3, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	9e04      	ldr	r6, [sp, #16]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	e7bb      	b.n	8005558 <_printf_i+0x128>
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	1d11      	adds	r1, r2, #4
 80055e4:	6019      	str	r1, [r3, #0]
 80055e6:	6816      	ldr	r6, [r2, #0]
 80055e8:	2100      	movs	r1, #0
 80055ea:	0030      	movs	r0, r6
 80055ec:	6862      	ldr	r2, [r4, #4]
 80055ee:	f000 f831 	bl	8005654 <memchr>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d001      	beq.n	80055fa <_printf_i+0x1ca>
 80055f6:	1b80      	subs	r0, r0, r6
 80055f8:	6060      	str	r0, [r4, #4]
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	2300      	movs	r3, #0
 8005600:	9a04      	ldr	r2, [sp, #16]
 8005602:	7013      	strb	r3, [r2, #0]
 8005604:	e7a8      	b.n	8005558 <_printf_i+0x128>
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	0032      	movs	r2, r6
 800560a:	9906      	ldr	r1, [sp, #24]
 800560c:	9805      	ldr	r0, [sp, #20]
 800560e:	9d07      	ldr	r5, [sp, #28]
 8005610:	47a8      	blx	r5
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	d0aa      	beq.n	800556c <_printf_i+0x13c>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	079b      	lsls	r3, r3, #30
 800561a:	d415      	bmi.n	8005648 <_printf_i+0x218>
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	68e0      	ldr	r0, [r4, #12]
 8005620:	4298      	cmp	r0, r3
 8005622:	daa5      	bge.n	8005570 <_printf_i+0x140>
 8005624:	0018      	movs	r0, r3
 8005626:	e7a3      	b.n	8005570 <_printf_i+0x140>
 8005628:	0022      	movs	r2, r4
 800562a:	2301      	movs	r3, #1
 800562c:	9906      	ldr	r1, [sp, #24]
 800562e:	9805      	ldr	r0, [sp, #20]
 8005630:	9e07      	ldr	r6, [sp, #28]
 8005632:	3219      	adds	r2, #25
 8005634:	47b0      	blx	r6
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	d098      	beq.n	800556c <_printf_i+0x13c>
 800563a:	3501      	adds	r5, #1
 800563c:	68e3      	ldr	r3, [r4, #12]
 800563e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	42ab      	cmp	r3, r5
 8005644:	dcf0      	bgt.n	8005628 <_printf_i+0x1f8>
 8005646:	e7e9      	b.n	800561c <_printf_i+0x1ec>
 8005648:	2500      	movs	r5, #0
 800564a:	e7f7      	b.n	800563c <_printf_i+0x20c>
 800564c:	080072a5 	.word	0x080072a5
 8005650:	080072b6 	.word	0x080072b6

08005654 <memchr>:
 8005654:	b2c9      	uxtb	r1, r1
 8005656:	1882      	adds	r2, r0, r2
 8005658:	4290      	cmp	r0, r2
 800565a:	d101      	bne.n	8005660 <memchr+0xc>
 800565c:	2000      	movs	r0, #0
 800565e:	4770      	bx	lr
 8005660:	7803      	ldrb	r3, [r0, #0]
 8005662:	428b      	cmp	r3, r1
 8005664:	d0fb      	beq.n	800565e <memchr+0xa>
 8005666:	3001      	adds	r0, #1
 8005668:	e7f6      	b.n	8005658 <memchr+0x4>

0800566a <memcpy>:
 800566a:	2300      	movs	r3, #0
 800566c:	b510      	push	{r4, lr}
 800566e:	429a      	cmp	r2, r3
 8005670:	d100      	bne.n	8005674 <memcpy+0xa>
 8005672:	bd10      	pop	{r4, pc}
 8005674:	5ccc      	ldrb	r4, [r1, r3]
 8005676:	54c4      	strb	r4, [r0, r3]
 8005678:	3301      	adds	r3, #1
 800567a:	e7f8      	b.n	800566e <memcpy+0x4>

0800567c <memmove>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4288      	cmp	r0, r1
 8005680:	d902      	bls.n	8005688 <memmove+0xc>
 8005682:	188b      	adds	r3, r1, r2
 8005684:	4298      	cmp	r0, r3
 8005686:	d303      	bcc.n	8005690 <memmove+0x14>
 8005688:	2300      	movs	r3, #0
 800568a:	e007      	b.n	800569c <memmove+0x20>
 800568c:	5c8b      	ldrb	r3, [r1, r2]
 800568e:	5483      	strb	r3, [r0, r2]
 8005690:	3a01      	subs	r2, #1
 8005692:	d2fb      	bcs.n	800568c <memmove+0x10>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	5ccc      	ldrb	r4, [r1, r3]
 8005698:	54c4      	strb	r4, [r0, r3]
 800569a:	3301      	adds	r3, #1
 800569c:	429a      	cmp	r2, r3
 800569e:	d1fa      	bne.n	8005696 <memmove+0x1a>
 80056a0:	e7f8      	b.n	8005694 <memmove+0x18>
	...

080056a4 <_free_r>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	0005      	movs	r5, r0
 80056a8:	2900      	cmp	r1, #0
 80056aa:	d010      	beq.n	80056ce <_free_r+0x2a>
 80056ac:	1f0c      	subs	r4, r1, #4
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da00      	bge.n	80056b6 <_free_r+0x12>
 80056b4:	18e4      	adds	r4, r4, r3
 80056b6:	0028      	movs	r0, r5
 80056b8:	f000 f918 	bl	80058ec <__malloc_lock>
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <_free_r+0x90>)
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <_free_r+0x2c>
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6014      	str	r4, [r2, #0]
 80056c8:	0028      	movs	r0, r5
 80056ca:	f000 f917 	bl	80058fc <__malloc_unlock>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d908      	bls.n	80056e6 <_free_r+0x42>
 80056d4:	6821      	ldr	r1, [r4, #0]
 80056d6:	1860      	adds	r0, r4, r1
 80056d8:	4283      	cmp	r3, r0
 80056da:	d1f3      	bne.n	80056c4 <_free_r+0x20>
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	1841      	adds	r1, r0, r1
 80056e2:	6021      	str	r1, [r4, #0]
 80056e4:	e7ee      	b.n	80056c4 <_free_r+0x20>
 80056e6:	001a      	movs	r2, r3
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <_free_r+0x4e>
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	d9f9      	bls.n	80056e6 <_free_r+0x42>
 80056f2:	6811      	ldr	r1, [r2, #0]
 80056f4:	1850      	adds	r0, r2, r1
 80056f6:	42a0      	cmp	r0, r4
 80056f8:	d10b      	bne.n	8005712 <_free_r+0x6e>
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1809      	adds	r1, r1, r0
 80056fe:	1850      	adds	r0, r2, r1
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	4283      	cmp	r3, r0
 8005704:	d1e0      	bne.n	80056c8 <_free_r+0x24>
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	1841      	adds	r1, r0, r1
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	6053      	str	r3, [r2, #4]
 8005710:	e7da      	b.n	80056c8 <_free_r+0x24>
 8005712:	42a0      	cmp	r0, r4
 8005714:	d902      	bls.n	800571c <_free_r+0x78>
 8005716:	230c      	movs	r3, #12
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	e7d5      	b.n	80056c8 <_free_r+0x24>
 800571c:	6821      	ldr	r1, [r4, #0]
 800571e:	1860      	adds	r0, r4, r1
 8005720:	4283      	cmp	r3, r0
 8005722:	d103      	bne.n	800572c <_free_r+0x88>
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	1841      	adds	r1, r0, r1
 800572a:	6021      	str	r1, [r4, #0]
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	6054      	str	r4, [r2, #4]
 8005730:	e7ca      	b.n	80056c8 <_free_r+0x24>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	200005a4 	.word	0x200005a4

08005738 <sbrk_aligned>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4e0f      	ldr	r6, [pc, #60]	; (8005778 <sbrk_aligned+0x40>)
 800573c:	000d      	movs	r5, r1
 800573e:	6831      	ldr	r1, [r6, #0]
 8005740:	0004      	movs	r4, r0
 8005742:	2900      	cmp	r1, #0
 8005744:	d102      	bne.n	800574c <sbrk_aligned+0x14>
 8005746:	f000 f8bf 	bl	80058c8 <_sbrk_r>
 800574a:	6030      	str	r0, [r6, #0]
 800574c:	0029      	movs	r1, r5
 800574e:	0020      	movs	r0, r4
 8005750:	f000 f8ba 	bl	80058c8 <_sbrk_r>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d00a      	beq.n	800576e <sbrk_aligned+0x36>
 8005758:	2303      	movs	r3, #3
 800575a:	1cc5      	adds	r5, r0, #3
 800575c:	439d      	bics	r5, r3
 800575e:	42a8      	cmp	r0, r5
 8005760:	d007      	beq.n	8005772 <sbrk_aligned+0x3a>
 8005762:	1a29      	subs	r1, r5, r0
 8005764:	0020      	movs	r0, r4
 8005766:	f000 f8af 	bl	80058c8 <_sbrk_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	d101      	bne.n	8005772 <sbrk_aligned+0x3a>
 800576e:	2501      	movs	r5, #1
 8005770:	426d      	negs	r5, r5
 8005772:	0028      	movs	r0, r5
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	200005a8 	.word	0x200005a8

0800577c <_malloc_r>:
 800577c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800577e:	2203      	movs	r2, #3
 8005780:	1ccb      	adds	r3, r1, #3
 8005782:	4393      	bics	r3, r2
 8005784:	3308      	adds	r3, #8
 8005786:	0006      	movs	r6, r0
 8005788:	001f      	movs	r7, r3
 800578a:	2b0c      	cmp	r3, #12
 800578c:	d232      	bcs.n	80057f4 <_malloc_r+0x78>
 800578e:	270c      	movs	r7, #12
 8005790:	42b9      	cmp	r1, r7
 8005792:	d831      	bhi.n	80057f8 <_malloc_r+0x7c>
 8005794:	0030      	movs	r0, r6
 8005796:	f000 f8a9 	bl	80058ec <__malloc_lock>
 800579a:	4d32      	ldr	r5, [pc, #200]	; (8005864 <_malloc_r+0xe8>)
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	001c      	movs	r4, r3
 80057a0:	2c00      	cmp	r4, #0
 80057a2:	d12e      	bne.n	8005802 <_malloc_r+0x86>
 80057a4:	0039      	movs	r1, r7
 80057a6:	0030      	movs	r0, r6
 80057a8:	f7ff ffc6 	bl	8005738 <sbrk_aligned>
 80057ac:	0004      	movs	r4, r0
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	d11e      	bne.n	80057f0 <_malloc_r+0x74>
 80057b2:	682c      	ldr	r4, [r5, #0]
 80057b4:	0025      	movs	r5, r4
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	d14a      	bne.n	8005850 <_malloc_r+0xd4>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	0029      	movs	r1, r5
 80057be:	18e3      	adds	r3, r4, r3
 80057c0:	0030      	movs	r0, r6
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	f000 f880 	bl	80058c8 <_sbrk_r>
 80057c8:	9b01      	ldr	r3, [sp, #4]
 80057ca:	4283      	cmp	r3, r0
 80057cc:	d143      	bne.n	8005856 <_malloc_r+0xda>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	3703      	adds	r7, #3
 80057d2:	1aff      	subs	r7, r7, r3
 80057d4:	2303      	movs	r3, #3
 80057d6:	439f      	bics	r7, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	2f0c      	cmp	r7, #12
 80057dc:	d200      	bcs.n	80057e0 <_malloc_r+0x64>
 80057de:	270c      	movs	r7, #12
 80057e0:	0039      	movs	r1, r7
 80057e2:	0030      	movs	r0, r6
 80057e4:	f7ff ffa8 	bl	8005738 <sbrk_aligned>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d034      	beq.n	8005856 <_malloc_r+0xda>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	19df      	adds	r7, r3, r7
 80057f0:	6027      	str	r7, [r4, #0]
 80057f2:	e013      	b.n	800581c <_malloc_r+0xa0>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	dacb      	bge.n	8005790 <_malloc_r+0x14>
 80057f8:	230c      	movs	r3, #12
 80057fa:	2500      	movs	r5, #0
 80057fc:	6033      	str	r3, [r6, #0]
 80057fe:	0028      	movs	r0, r5
 8005800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	1bd1      	subs	r1, r2, r7
 8005806:	d420      	bmi.n	800584a <_malloc_r+0xce>
 8005808:	290b      	cmp	r1, #11
 800580a:	d917      	bls.n	800583c <_malloc_r+0xc0>
 800580c:	19e2      	adds	r2, r4, r7
 800580e:	6027      	str	r7, [r4, #0]
 8005810:	42a3      	cmp	r3, r4
 8005812:	d111      	bne.n	8005838 <_malloc_r+0xbc>
 8005814:	602a      	str	r2, [r5, #0]
 8005816:	6863      	ldr	r3, [r4, #4]
 8005818:	6011      	str	r1, [r2, #0]
 800581a:	6053      	str	r3, [r2, #4]
 800581c:	0030      	movs	r0, r6
 800581e:	0025      	movs	r5, r4
 8005820:	f000 f86c 	bl	80058fc <__malloc_unlock>
 8005824:	2207      	movs	r2, #7
 8005826:	350b      	adds	r5, #11
 8005828:	1d23      	adds	r3, r4, #4
 800582a:	4395      	bics	r5, r2
 800582c:	1aea      	subs	r2, r5, r3
 800582e:	429d      	cmp	r5, r3
 8005830:	d0e5      	beq.n	80057fe <_malloc_r+0x82>
 8005832:	1b5b      	subs	r3, r3, r5
 8005834:	50a3      	str	r3, [r4, r2]
 8005836:	e7e2      	b.n	80057fe <_malloc_r+0x82>
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	e7ec      	b.n	8005816 <_malloc_r+0x9a>
 800583c:	6862      	ldr	r2, [r4, #4]
 800583e:	42a3      	cmp	r3, r4
 8005840:	d101      	bne.n	8005846 <_malloc_r+0xca>
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	e7ea      	b.n	800581c <_malloc_r+0xa0>
 8005846:	605a      	str	r2, [r3, #4]
 8005848:	e7e8      	b.n	800581c <_malloc_r+0xa0>
 800584a:	0023      	movs	r3, r4
 800584c:	6864      	ldr	r4, [r4, #4]
 800584e:	e7a7      	b.n	80057a0 <_malloc_r+0x24>
 8005850:	002c      	movs	r4, r5
 8005852:	686d      	ldr	r5, [r5, #4]
 8005854:	e7af      	b.n	80057b6 <_malloc_r+0x3a>
 8005856:	230c      	movs	r3, #12
 8005858:	0030      	movs	r0, r6
 800585a:	6033      	str	r3, [r6, #0]
 800585c:	f000 f84e 	bl	80058fc <__malloc_unlock>
 8005860:	e7cd      	b.n	80057fe <_malloc_r+0x82>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	200005a4 	.word	0x200005a4

08005868 <_realloc_r>:
 8005868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800586a:	0007      	movs	r7, r0
 800586c:	000e      	movs	r6, r1
 800586e:	0014      	movs	r4, r2
 8005870:	2900      	cmp	r1, #0
 8005872:	d105      	bne.n	8005880 <_realloc_r+0x18>
 8005874:	0011      	movs	r1, r2
 8005876:	f7ff ff81 	bl	800577c <_malloc_r>
 800587a:	0005      	movs	r5, r0
 800587c:	0028      	movs	r0, r5
 800587e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005880:	2a00      	cmp	r2, #0
 8005882:	d103      	bne.n	800588c <_realloc_r+0x24>
 8005884:	f7ff ff0e 	bl	80056a4 <_free_r>
 8005888:	0025      	movs	r5, r4
 800588a:	e7f7      	b.n	800587c <_realloc_r+0x14>
 800588c:	f000 f83e 	bl	800590c <_malloc_usable_size_r>
 8005890:	9001      	str	r0, [sp, #4]
 8005892:	4284      	cmp	r4, r0
 8005894:	d803      	bhi.n	800589e <_realloc_r+0x36>
 8005896:	0035      	movs	r5, r6
 8005898:	0843      	lsrs	r3, r0, #1
 800589a:	42a3      	cmp	r3, r4
 800589c:	d3ee      	bcc.n	800587c <_realloc_r+0x14>
 800589e:	0021      	movs	r1, r4
 80058a0:	0038      	movs	r0, r7
 80058a2:	f7ff ff6b 	bl	800577c <_malloc_r>
 80058a6:	1e05      	subs	r5, r0, #0
 80058a8:	d0e8      	beq.n	800587c <_realloc_r+0x14>
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	0022      	movs	r2, r4
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d900      	bls.n	80058b4 <_realloc_r+0x4c>
 80058b2:	001a      	movs	r2, r3
 80058b4:	0031      	movs	r1, r6
 80058b6:	0028      	movs	r0, r5
 80058b8:	f7ff fed7 	bl	800566a <memcpy>
 80058bc:	0031      	movs	r1, r6
 80058be:	0038      	movs	r0, r7
 80058c0:	f7ff fef0 	bl	80056a4 <_free_r>
 80058c4:	e7da      	b.n	800587c <_realloc_r+0x14>
	...

080058c8 <_sbrk_r>:
 80058c8:	2300      	movs	r3, #0
 80058ca:	b570      	push	{r4, r5, r6, lr}
 80058cc:	4d06      	ldr	r5, [pc, #24]	; (80058e8 <_sbrk_r+0x20>)
 80058ce:	0004      	movs	r4, r0
 80058d0:	0008      	movs	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fc ff3e 	bl	8002754 <_sbrk>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d103      	bne.n	80058e4 <_sbrk_r+0x1c>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d000      	beq.n	80058e4 <_sbrk_r+0x1c>
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	200005ac 	.word	0x200005ac

080058ec <__malloc_lock>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4802      	ldr	r0, [pc, #8]	; (80058f8 <__malloc_lock+0xc>)
 80058f0:	f000 f814 	bl	800591c <__retarget_lock_acquire_recursive>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	200005b0 	.word	0x200005b0

080058fc <__malloc_unlock>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4802      	ldr	r0, [pc, #8]	; (8005908 <__malloc_unlock+0xc>)
 8005900:	f000 f80d 	bl	800591e <__retarget_lock_release_recursive>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	200005b0 	.word	0x200005b0

0800590c <_malloc_usable_size_r>:
 800590c:	1f0b      	subs	r3, r1, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	1f18      	subs	r0, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	da01      	bge.n	800591a <_malloc_usable_size_r+0xe>
 8005916:	580b      	ldr	r3, [r1, r0]
 8005918:	18c0      	adds	r0, r0, r3
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_acquire_recursive>:
 800591c:	4770      	bx	lr

0800591e <__retarget_lock_release_recursive>:
 800591e:	4770      	bx	lr

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
