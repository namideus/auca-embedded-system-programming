
test_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003468  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003594  08003594  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800359c  0800359c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  2000000c  080035b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080035b0  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012150  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e5  00000000  00000000  00032184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00034570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00035418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144a7  00000000  00000000  000361d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123d9  00000000  00000000  0004a67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cea8  00000000  00000000  0005ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9900  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000d9950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003510 	.word	0x08003510

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003510 	.word	0x08003510

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fcc2 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9dc 	bl	8000870 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b8:	f000 f892 	bl	80005e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004bc:	f000 f8d0 	bl	8000660 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004c0:	f000 f906 	bl	80006d0 <MX_SPI2_Init>
  MX_TSC_Init();
 80004c4:	f000 f93a 	bl	800073c <MX_TSC_Init>
  MX_USART1_UART_Init();
 80004c8:	f000 f97c 	bl	80007c4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004cc:	f000 f9aa 	bl	8000824 <MX_USB_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2110      	movs	r1, #16
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 ff87 	bl	80013ea <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80004dc:	23fa      	movs	r3, #250	; 0xfa
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fd17 	bl	8000f14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 80004e6:	e7f3      	b.n	80004d0 <main+0x28>

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b09d      	sub	sp, #116	; 0x74
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2438      	movs	r4, #56	; 0x38
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2338      	movs	r3, #56	; 0x38
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f003 f801 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fff9 	bl	8003500 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 fff2 	bl	8003500 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <SystemClock_Config+0xf0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <SystemClock_Config+0xf4>)
 8000522:	401a      	ands	r2, r3
 8000524:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <SystemClock_Config+0xf0>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0109      	lsls	r1, r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2221      	movs	r2, #33	; 0x21
 8000532:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	22a0      	movs	r2, #160	; 0xa0
 8000538:	02d2      	lsls	r2, r2, #11
 800053a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800053c:	0021      	movs	r1, r4
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2202      	movs	r2, #2
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0252      	lsls	r2, r2, #9
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	0352      	lsls	r2, r2, #13
 8000558:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	0412      	lsls	r2, r2, #16
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	187b      	adds	r3, r7, r1
 8000564:	0018      	movs	r0, r3
 8000566:	f001 f9b3 	bl	80018d0 <HAL_RCC_OscConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800056e:	f000 fa2d 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	2124      	movs	r1, #36	; 0x24
 8000574:	187b      	adds	r3, r7, r1
 8000576:	220f      	movs	r2, #15
 8000578:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2203      	movs	r2, #3
 800057e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2101      	movs	r1, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fd5e 	bl	8002058 <HAL_RCC_ClockConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005a0:	f000 fa14 	bl	80009cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80005a4:	003b      	movs	r3, r7
 80005a6:	2249      	movs	r2, #73	; 0x49
 80005a8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	04d2      	lsls	r2, r2, #19
 80005bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 ff6d 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005ca:	f000 f9ff 	bl	80009cc <Error_Handler>
  }
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b01d      	add	sp, #116	; 0x74
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e6:	4a1d      	ldr	r2, [pc, #116]	; (800065c <MX_I2C1_Init+0x7c>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_I2C1_Init+0x78>)
 80005ec:	22e1      	movs	r2, #225	; 0xe1
 80005ee:	00d2      	lsls	r2, r2, #3
 80005f0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_I2C1_Init+0x78>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_I2C1_Init+0x78>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_I2C1_Init+0x78>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_I2C1_Init+0x78>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_I2C1_Init+0x78>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x78>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_I2C1_Init+0x78>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x78>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fefe 	bl	8001420 <HAL_I2C_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f9d0 	bl	80009cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x78>)
 800062e:	2100      	movs	r1, #0
 8000630:	0018      	movs	r0, r3
 8000632:	f000 ff8b 	bl	800154c <HAL_I2CEx_ConfigAnalogFilter>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800063a:	f000 f9c7 	bl	80009cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x78>)
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f000 ffce 	bl	80015e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 f9be 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000028 	.word	0x20000028
 800065c:	40005400 	.word	0x40005400

08000660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <MX_SPI1_Init+0x6c>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_SPI1_Init+0x68>)
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0212      	lsls	r2, r2, #8
 8000678:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_SPI1_Init+0x68>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_SPI1_Init+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_SPI1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 f882 	bl	80027bc <HAL_SPI_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 f986 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	2000007c 	.word	0x2000007c
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI2_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI2_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI2_Init+0x64>)
 80006dc:	2282      	movs	r2, #130	; 0x82
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI2_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI2_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI2_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI2_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI2_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI2_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_SPI2_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI2_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_SPI2_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI2_Init+0x64>)
 800071a:	2207      	movs	r2, #7
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <MX_SPI2_Init+0x64>)
 8000720:	0018      	movs	r0, r3
 8000722:	f002 f84b 	bl	80027bc <HAL_SPI_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 800072a:	f000 f94f 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d4 	.word	0x200000d4
 8000738:	40003800 	.word	0x40003800

0800073c <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_TSC_Init+0x80>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MX_TSC_Init+0x84>)
 8000744:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TSC_Init+0x80>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0552      	lsls	r2, r2, #21
 800074c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TSC_Init+0x80>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0452      	lsls	r2, r2, #17
 8000754:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_TSC_Init+0x80>)
 8000758:	2200      	movs	r2, #0
 800075a:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_TSC_Init+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TSC_Init+0x80>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_TSC_Init+0x80>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	0192      	lsls	r2, r2, #6
 800076e:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_TSC_Init+0x80>)
 8000772:	22a0      	movs	r2, #160	; 0xa0
 8000774:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_TSC_Init+0x80>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_TSC_Init+0x80>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_TSC_Init+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_TSC_Init+0x80>)
 800078a:	222c      	movs	r2, #44	; 0x2c
 800078c:	2100      	movs	r1, #0
 800078e:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_TSC_Init+0x80>)
 8000792:	2291      	movs	r2, #145	; 0x91
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_TSC_Init+0x80>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_TSC_Init+0x80>)
 80007a0:	2291      	movs	r2, #145	; 0x91
 80007a2:	00d2      	lsls	r2, r2, #3
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_TSC_Init+0x80>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f89b 	bl	80028e4 <HAL_TSC_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80007b2:	f000 f90b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000012c 	.word	0x2000012c
 80007c0:	40024000 	.word	0x40024000

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART1_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007d0:	22e1      	movs	r2, #225	; 0xe1
 80007d2:	0252      	lsls	r2, r2, #9
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <MX_USART1_UART_Init+0x58>)
 8000808:	0018      	movs	r0, r3
 800080a:	f002 f911 	bl	8002a30 <HAL_UART_Init>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8db 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000170 	.word	0x20000170
 8000820:	40013800 	.word	0x40013800

08000824 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USB_PCD_Init+0x44>)
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <MX_USB_PCD_Init+0x48>)
 800082c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USB_PCD_Init+0x44>)
 8000830:	2208      	movs	r2, #8
 8000832:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USB_PCD_Init+0x44>)
 8000836:	2202      	movs	r2, #2
 8000838:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USB_PCD_Init+0x44>)
 800083c:	2202      	movs	r2, #2
 800083e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USB_PCD_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USB_PCD_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USB_PCD_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_USB_PCD_Init+0x44>)
 8000854:	0018      	movs	r0, r3
 8000856:	f000 ff11 	bl	800167c <HAL_PCD_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800085e:	f000 f8b5 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001f8 	.word	0x200001f8
 800086c:	40005c00 	.word	0x40005c00

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	2414      	movs	r4, #20
 8000878:	193b      	adds	r3, r7, r4
 800087a:	0018      	movs	r0, r3
 800087c:	2314      	movs	r3, #20
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f002 fe3d 	bl	8003500 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088a:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_GPIO_Init+0x14c>)
 800088c:	2104      	movs	r1, #4
 800088e:	430a      	orrs	r2, r1
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	2204      	movs	r2, #4
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	430a      	orrs	r2, r1
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008d4:	2102      	movs	r1, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	2202      	movs	r2, #2
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD_R_Pin, GPIO_PIN_RESET);
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2130      	movs	r1, #48	; 0x30
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fd5e 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 80008f4:	4932      	ldr	r1, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x150>)
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x154>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fd58 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0192      	lsls	r2, r2, #6
 8000906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2288      	movs	r2, #136	; 0x88
 800090c:	0352      	lsls	r2, r2, #13
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000916:	193b      	adds	r3, r7, r4
 8000918:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <MX_GPIO_Init+0x158>)
 800091a:	0019      	movs	r1, r3
 800091c:	0010      	movs	r0, r2
 800091e:	f000 fbd1 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2290      	movs	r2, #144	; 0x90
 800092c:	0352      	lsls	r2, r2, #13
 800092e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	193a      	adds	r2, r7, r4
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fbc0 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2281      	movs	r2, #129	; 0x81
 8000948:	0052      	lsls	r2, r2, #1
 800094a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	193a      	adds	r2, r7, r4
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fbaf 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD_R_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD_R_Pin;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2230      	movs	r2, #48	; 0x30
 800096a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2201      	movs	r2, #1
 8000970:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	193a      	adds	r2, r7, r4
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fb9c 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 800098c:	0021      	movs	r1, r4
 800098e:	187b      	adds	r3, r7, r1
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <MX_GPIO_Init+0x150>)
 8000992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2201      	movs	r2, #1
 8000998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <MX_GPIO_Init+0x154>)
 80009aa:	0019      	movs	r1, r3
 80009ac:	0010      	movs	r0, r2
 80009ae:	f000 fb89 	bl	80010c4 <HAL_GPIO_Init>

}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b00b      	add	sp, #44	; 0x2c
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40021000 	.word	0x40021000
 80009c0:	00000c14 	.word	0x00000c14
 80009c4:	50000400 	.word	0x50000400
 80009c8:	50000800 	.word	0x50000800

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_MspInit+0x24>)
 80009de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x24>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_MspInit+0x24>)
 80009ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_MspInit+0x24>)
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	0549      	lsls	r1, r1, #21
 80009f2:	430a      	orrs	r2, r1
 80009f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	240c      	movs	r4, #12
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f002 fd74 	bl	8003500 <memset>
  if(hi2c->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <HAL_I2C_MspInit+0x80>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d129      	bne.n	8000a76 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a28:	2102      	movs	r1, #2
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	2202      	movs	r2, #2
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	22c0      	movs	r2, #192	; 0xc0
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	0021      	movs	r1, r4
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2212      	movs	r2, #18
 8000a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2203      	movs	r2, #3
 8000a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2204      	movs	r2, #4
 8000a5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a60:	0019      	movs	r1, r3
 8000a62:	0010      	movs	r0, r2
 8000a64:	f000 fb2e 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	0389      	lsls	r1, r1, #14
 8000a72:	430a      	orrs	r2, r1
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b009      	add	sp, #36	; 0x24
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40021000 	.word	0x40021000
 8000a88:	50000400 	.word	0x50000400

08000a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08b      	sub	sp, #44	; 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2414      	movs	r4, #20
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f002 fd2e 	bl	8003500 <memset>
  if(hspi->Instance==SPI1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a41      	ldr	r2, [pc, #260]	; (8000bb0 <HAL_SPI_MspInit+0x124>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d14c      	bne.n	8000b48 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab2:	4b40      	ldr	r3, [pc, #256]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0149      	lsls	r1, r1, #5
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac0:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	2201      	movs	r2, #1
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad8:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000ada:	2102      	movs	r1, #2
 8000adc:	430a      	orrs	r2, r1
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0212      	lsls	r2, r2, #8
 8000af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2202      	movs	r2, #2
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	193a      	adds	r2, r7, r4
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fad5 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000b1a:	0021      	movs	r1, r4
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2228      	movs	r2, #40	; 0x28
 8000b20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2202      	movs	r2, #2
 8000b26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_SPI_MspInit+0x12c>)
 8000b3e:	0019      	movs	r1, r3
 8000b40:	0010      	movs	r0, r2
 8000b42:	f000 fabf 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b46:	e02e      	b.n	8000ba6 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <HAL_SPI_MspInit+0x130>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d129      	bne.n	8000ba6 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	01c9      	lsls	r1, r1, #7
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000b66:	2102      	movs	r1, #2
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_SPI_MspInit+0x128>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	2202      	movs	r2, #2
 8000b72:	4013      	ands	r3, r2
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000b78:	2114      	movs	r1, #20
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	22f0      	movs	r2, #240	; 0xf0
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2202      	movs	r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2203      	movs	r2, #3
 8000b92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_SPI_MspInit+0x12c>)
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	f000 fa8f 	bl	80010c4 <HAL_GPIO_Init>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b00b      	add	sp, #44	; 0x2c
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	50000400 	.word	0x50000400
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2414      	movs	r4, #20
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f002 fc94 	bl	8003500 <memset>
  if(htsc->Instance==TSC)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a41      	ldr	r2, [pc, #260]	; (8000ce4 <HAL_TSC_MspInit+0x124>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d17c      	bne.n	8000cdc <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	0249      	lsls	r1, r1, #9
 8000bec:	430a      	orrs	r2, r1
 8000bee:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	025b      	lsls	r3, r3, #9
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <HAL_TSC_MspInit+0x128>)
 8000c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2244      	movs	r2, #68	; 0x44
 8000c32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2202      	movs	r2, #2
 8000c38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2203      	movs	r2, #3
 8000c4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	193a      	adds	r2, r7, r4
 8000c4e:	23a0      	movs	r3, #160	; 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fa35 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2288      	movs	r2, #136	; 0x88
 8000c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2212      	movs	r2, #18
 8000c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2203      	movs	r2, #3
 8000c76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fa1f 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2202      	movs	r2, #2
 8000c90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_TSC_MspInit+0x12c>)
 8000ca8:	0019      	movs	r1, r3
 8000caa:	0010      	movs	r0, r2
 8000cac:	f000 fa0a 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb0:	0021      	movs	r1, r4
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2212      	movs	r2, #18
 8000cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_TSC_MspInit+0x12c>)
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0010      	movs	r0, r2
 8000cd8:	f000 f9f4 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b00b      	add	sp, #44	; 0x2c
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	40024000 	.word	0x40024000
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	50000400 	.word	0x50000400

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	240c      	movs	r4, #12
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	2314      	movs	r3, #20
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f002 fbfc 	bl	8003500 <memset>
  if(huart->Instance==USART1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x80>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12a      	bne.n	8000d68 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	01c9      	lsls	r1, r1, #7
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	2201      	movs	r2, #1
 8000d32:	4013      	ands	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	22c0      	movs	r2, #192	; 0xc0
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	0021      	movs	r1, r4
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2202      	movs	r2, #2
 8000d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2203      	movs	r2, #3
 8000d52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2204      	movs	r2, #4
 8000d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	187a      	adds	r2, r7, r1
 8000d5c:	23a0      	movs	r3, #160	; 0xa0
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f9ae 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b009      	add	sp, #36	; 0x24
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_PCD_MspInit+0x28>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_PCD_MspInit+0x2c>)
 8000d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_PCD_MspInit+0x2c>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	430a      	orrs	r2, r1
 8000d96:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40005c00 	.word	0x40005c00
 8000da4:	40021000 	.word	0x40021000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f886 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de4:	f7ff fff7 	bl	8000dd6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fb53 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fb49 	bl	80004a8 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   r0, =_estack
 8000e18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e24:	080035a4 	.word	0x080035a4
  ldr r2, =_sbss
 8000e28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e2c:	200004f0 	.word	0x200004f0

08000e30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_COMP_IRQHandler>
	...

08000e34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x3c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Init+0x3c>)
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f811 	bl	8000e74 <HAL_InitTick>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e001      	b.n	8000e62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5e:	f7ff fdbb 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000e7e:	681c      	ldr	r4, [r3, #0]
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_InitTick+0x60>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	0019      	movs	r1, r3
 8000e86:	23fa      	movs	r3, #250	; 0xfa
 8000e88:	0098      	lsls	r0, r3, #2
 8000e8a:	f7ff f93d 	bl	8000108 <__udivsi3>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	0019      	movs	r1, r3
 8000e92:	0020      	movs	r0, r4
 8000e94:	f7ff f938 	bl	8000108 <__udivsi3>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f905 	bl	80010aa <HAL_SYSTICK_Config>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e00f      	b.n	8000ec8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d80b      	bhi.n	8000ec6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 f8e2 	bl	8001080 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_InitTick+0x64>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b003      	add	sp, #12
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x1c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x20>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	18d2      	adds	r2, r2, r3
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_IncTick+0x20>)
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	200004ec 	.word	0x200004ec

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <HAL_GetTick+0x10>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	200004ec 	.word	0x200004ec

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	001a      	movs	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	189b      	adds	r3, r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	f7ff ffe0 	bl	8000f00 <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	0002      	movs	r2, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f70:	d828      	bhi.n	8000fc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f72:	4a2f      	ldr	r2, [pc, #188]	; (8001030 <__NVIC_SetPriority+0xd4>)
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	33c0      	adds	r3, #192	; 0xc0
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	589b      	ldr	r3, [r3, r2]
 8000f82:	1dfa      	adds	r2, r7, #7
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	0011      	movs	r1, r2
 8000f88:	2203      	movs	r2, #3
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	21ff      	movs	r1, #255	; 0xff
 8000f90:	4091      	lsls	r1, r2
 8000f92:	000a      	movs	r2, r1
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	401a      	ands	r2, r3
 8000f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	2303      	movs	r3, #3
 8000faa:	4003      	ands	r3, r0
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb0:	481f      	ldr	r0, [pc, #124]	; (8001030 <__NVIC_SetPriority+0xd4>)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	33c0      	adds	r3, #192	; 0xc0
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fc2:	e031      	b.n	8001028 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <__NVIC_SetPriority+0xd8>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0019      	movs	r1, r3
 8000fcc:	230f      	movs	r3, #15
 8000fce:	400b      	ands	r3, r1
 8000fd0:	3b08      	subs	r3, #8
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3306      	adds	r3, #6
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	18d3      	adds	r3, r2, r3
 8000fda:	3304      	adds	r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	00d2      	lsls	r2, r2, #3
 8000fea:	21ff      	movs	r1, #255	; 0xff
 8000fec:	4091      	lsls	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	0018      	movs	r0, r3
 8001004:	2303      	movs	r3, #3
 8001006:	4003      	ands	r3, r0
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <__NVIC_SetPriority+0xd8>)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	001c      	movs	r4, r3
 8001014:	230f      	movs	r3, #15
 8001016:	4023      	ands	r3, r4
 8001018:	3b08      	subs	r3, #8
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	430a      	orrs	r2, r1
 800101e:	3306      	adds	r3, #6
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	18c3      	adds	r3, r0, r3
 8001024:	3304      	adds	r3, #4
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b003      	add	sp, #12
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1e5a      	subs	r2, r3, #1
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	045b      	lsls	r3, r3, #17
 8001048:	429a      	cmp	r2, r3
 800104a:	d301      	bcc.n	8001050 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104c:	2301      	movs	r3, #1
 800104e:	e010      	b.n	8001072 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <SysTick_Config+0x44>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	3a01      	subs	r2, #1
 8001056:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001058:	2301      	movs	r3, #1
 800105a:	425b      	negs	r3, r3
 800105c:	2103      	movs	r1, #3
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff ff7c 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x44>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x44>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	210f      	movs	r1, #15
 800108c:	187b      	adds	r3, r7, r1
 800108e:	1c02      	adds	r2, r0, #0
 8001090:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	187b      	adds	r3, r7, r1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b004      	add	sp, #16
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ffbf 	bl	8001038 <SysTick_Config>
 80010ba:	0003      	movs	r3, r0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010da:	e14f      	b.n	800137c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d100      	bne.n	80010f4 <HAL_GPIO_Init+0x30>
 80010f2:	e140      	b.n	8001376 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001108:	2b02      	cmp	r3, #2
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	409a      	lsls	r2, r3
 800112e:	0013      	movs	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	2201      	movs	r2, #1
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	2b03      	cmp	r3, #3
 8001178:	d017      	beq.n	80011aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d123      	bne.n	80011fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	58d3      	ldr	r3, [r2, r3]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2207      	movs	r2, #7
 80011c8:	4013      	ands	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2107      	movs	r1, #7
 80011e2:	400b      	ands	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	401a      	ands	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	23c0      	movs	r3, #192	; 0xc0
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x17c>
 800123e:	e09a      	b.n	8001376 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	4b54      	ldr	r3, [pc, #336]	; (8001394 <HAL_GPIO_Init+0x2d0>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_GPIO_Init+0x2d0>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x2d4>)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	589b      	ldr	r3, [r3, r2]
 8001258:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	23a0      	movs	r3, #160	; 0xa0
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	429a      	cmp	r2, r3
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x1ea>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x1e6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x1e2>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x2e0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x1de>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x1da>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x1ec>
 800129e:	2306      	movs	r3, #6
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x1ec>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x1ec>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x1ec>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x1ec>
 80012ae:	2300      	movs	r3, #0
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	2103      	movs	r1, #3
 80012b4:	400a      	ands	r2, r1
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x2d4>)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	035b      	lsls	r3, r3, #13
 80012e6:	4013      	ands	r3, r2
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	039b      	lsls	r3, r3, #14
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	4013      	ands	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	40da      	lsrs	r2, r3
 8001384:	1e13      	subs	r3, r2, #0
 8001386:	d000      	beq.n	800138a <HAL_GPIO_Init+0x2c6>
 8001388:	e6a8      	b.n	80010dc <HAL_GPIO_Init+0x18>
  }
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b006      	add	sp, #24
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	50000400 	.word	0x50000400
 80013a0:	50000800 	.word	0x50000800
 80013a4:	50000c00 	.word	0x50000c00
 80013a8:	50001c00 	.word	0x50001c00
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	0008      	movs	r0, r1
 80013ba:	0011      	movs	r1, r2
 80013bc:	1cbb      	adds	r3, r7, #2
 80013be:	1c02      	adds	r2, r0, #0
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	1c7b      	adds	r3, r7, #1
 80013c4:	1c0a      	adds	r2, r1, #0
 80013c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c8:	1c7b      	adds	r3, r7, #1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d0:	1cbb      	adds	r3, r7, #2
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013da:	1cbb      	adds	r3, r7, #2
 80013dc:	881a      	ldrh	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	000a      	movs	r2, r1
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fe:	1cbb      	adds	r3, r7, #2
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	1cb9      	adds	r1, r7, #2
 800140e:	8809      	ldrh	r1, [r1, #0]
 8001410:	400b      	ands	r3, r1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e082      	b.n	8001538 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2241      	movs	r2, #65	; 0x41
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	2100      	movs	r1, #0
 8001444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fad9 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2241      	movs	r2, #65	; 0x41
 8001452:	2124      	movs	r1, #36	; 0x24
 8001454:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	438a      	bics	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4934      	ldr	r1, [pc, #208]	; (8001540 <HAL_I2C_Init+0x120>)
 8001470:	400a      	ands	r2, r1
 8001472:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4931      	ldr	r1, [pc, #196]	; (8001544 <HAL_I2C_Init+0x124>)
 8001480:	400a      	ands	r2, r1
 8001482:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0209      	lsls	r1, r1, #8
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e007      	b.n	80014ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2184      	movs	r1, #132	; 0x84
 80014a8:	0209      	lsls	r1, r1, #8
 80014aa:	430a      	orrs	r2, r1
 80014ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d104      	bne.n	80014c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	491f      	ldr	r1, [pc, #124]	; (8001548 <HAL_I2C_Init+0x128>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <HAL_I2C_Init+0x124>)
 80014dc:	400a      	ands	r2, r1
 80014de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69d9      	ldr	r1, [r3, #28]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1a      	ldr	r2, [r3, #32]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2241      	movs	r2, #65	; 0x41
 8001524:	2120      	movs	r1, #32
 8001526:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2242      	movs	r2, #66	; 0x42
 8001532:	2100      	movs	r1, #0
 8001534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}
 8001540:	f0ffffff 	.word	0xf0ffffff
 8001544:	ffff7fff 	.word	0xffff7fff
 8001548:	02008000 	.word	0x02008000

0800154c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2241      	movs	r2, #65	; 0x41
 800155a:	5c9b      	ldrb	r3, [r3, r2]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b20      	cmp	r3, #32
 8001560:	d138      	bne.n	80015d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	5c9b      	ldrb	r3, [r3, r2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800156c:	2302      	movs	r3, #2
 800156e:	e032      	b.n	80015d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	2101      	movs	r1, #1
 8001576:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	2124      	movs	r1, #36	; 0x24
 800157e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4911      	ldr	r1, [pc, #68]	; (80015e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2241      	movs	r2, #65	; 0x41
 80015c4:	2120      	movs	r1, #32
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015d4:	2302      	movs	r3, #2
  }
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	ffffefff 	.word	0xffffefff

080015e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2241      	movs	r2, #65	; 0x41
 80015f2:	5c9b      	ldrb	r3, [r3, r2]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d139      	bne.n	800166e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001604:	2302      	movs	r3, #2
 8001606:	e033      	b.n	8001670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	2101      	movs	r1, #1
 800160e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2241      	movs	r2, #65	; 0x41
 8001614:	2124      	movs	r1, #36	; 0x24
 8001616:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2101      	movs	r1, #1
 8001624:	438a      	bics	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2241      	movs	r2, #65	; 0x41
 800165e:	2120      	movs	r1, #32
 8001660:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2100      	movs	r1, #0
 8001668:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800166e:	2302      	movs	r3, #2
  }
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	fffff0ff 	.word	0xfffff0ff

0800167c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af06      	add	r7, sp, #24
 8001682:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0f0      	b.n	8001870 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_PCD_Init+0x1fc>)
 8001692:	5c9b      	ldrb	r3, [r3, r2]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	23aa      	movs	r3, #170	; 0xaa
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	2100      	movs	r1, #0
 80016a2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fb66 	bl	8000d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a72      	ldr	r2, [pc, #456]	; (8001878 <HAL_PCD_Init+0x1fc>)
 80016b0:	2103      	movs	r1, #3
 80016b2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0018      	movs	r0, r3
 80016ba:	f001 febb 	bl	8003434 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	230f      	movs	r3, #15
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e049      	b.n	800175c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016c8:	200f      	movs	r0, #15
 80016ca:	183b      	adds	r3, r7, r0
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	0013      	movs	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	18cb      	adds	r3, r1, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	0013      	movs	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	189b      	adds	r3, r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	183a      	adds	r2, r7, r0
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	0013      	movs	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	189b      	adds	r3, r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	18cb      	adds	r3, r1, r3
 800170a:	3303      	adds	r3, #3
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001710:	183b      	adds	r3, r7, r0
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	0013      	movs	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	189b      	adds	r3, r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	18cb      	adds	r3, r1, r3
 8001720:	3338      	adds	r3, #56	; 0x38
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001726:	183b      	adds	r3, r7, r0
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	0013      	movs	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	189b      	adds	r3, r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	18cb      	adds	r3, r1, r3
 8001736:	333c      	adds	r3, #60	; 0x3c
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800173c:	183b      	adds	r3, r7, r0
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	0013      	movs	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	189b      	adds	r3, r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	18cb      	adds	r3, r1, r3
 800174c:	3340      	adds	r3, #64	; 0x40
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	183b      	adds	r3, r7, r0
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	183b      	adds	r3, r7, r0
 8001758:	3201      	adds	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	210f      	movs	r1, #15
 800175e:	187b      	adds	r3, r7, r1
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3ae      	bcc.n	80016c8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e056      	b.n	8001820 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001772:	240f      	movs	r4, #15
 8001774:	193b      	adds	r3, r7, r4
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	236a      	movs	r3, #106	; 0x6a
 800177c:	33ff      	adds	r3, #255	; 0xff
 800177e:	0019      	movs	r1, r3
 8001780:	0013      	movs	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	189b      	adds	r3, r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	18c3      	adds	r3, r0, r3
 800178a:	185b      	adds	r3, r3, r1
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	23b4      	movs	r3, #180	; 0xb4
 8001798:	0059      	lsls	r1, r3, #1
 800179a:	0013      	movs	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	18c3      	adds	r3, r0, r3
 80017a4:	185b      	adds	r3, r3, r1
 80017a6:	193a      	adds	r2, r7, r4
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	236c      	movs	r3, #108	; 0x6c
 80017b4:	33ff      	adds	r3, #255	; 0xff
 80017b6:	0019      	movs	r1, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	18c3      	adds	r3, r0, r3
 80017c2:	185b      	adds	r3, r3, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	23bc      	movs	r3, #188	; 0xbc
 80017d0:	0059      	lsls	r1, r3, #1
 80017d2:	0013      	movs	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	189b      	adds	r3, r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	18c3      	adds	r3, r0, r3
 80017dc:	185b      	adds	r3, r3, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	23be      	movs	r3, #190	; 0xbe
 80017ea:	0059      	lsls	r1, r3, #1
 80017ec:	0013      	movs	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	189b      	adds	r3, r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	18c3      	adds	r3, r0, r3
 80017f6:	185b      	adds	r3, r3, r1
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	0059      	lsls	r1, r3, #1
 8001806:	0013      	movs	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	189b      	adds	r3, r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	18c3      	adds	r3, r0, r3
 8001810:	185b      	adds	r3, r3, r1
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001816:	193b      	adds	r3, r7, r4
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	193b      	adds	r3, r7, r4
 800181c:	3201      	adds	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	230f      	movs	r3, #15
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3a1      	bcc.n	8001772 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	466a      	mov	r2, sp
 8001836:	0011      	movs	r1, r2
 8001838:	001a      	movs	r2, r3
 800183a:	3210      	adds	r2, #16
 800183c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800183e:	c170      	stmia	r1!, {r4, r5, r6}
 8001840:	ca30      	ldmia	r2!, {r4, r5}
 8001842:	c130      	stmia	r1!, {r4, r5}
 8001844:	6859      	ldr	r1, [r3, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f001 fe0d 	bl	8003468 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2224      	movs	r2, #36	; 0x24
 8001852:	2100      	movs	r1, #0
 8001854:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_PCD_Init+0x1fc>)
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d103      	bne.n	800186e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f000 f807 	bl	800187c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b005      	add	sp, #20
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	000002a9 	.word	0x000002a9

0800187c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	23ba      	movs	r3, #186	; 0xba
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	2101      	movs	r1, #1
 8001892:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	23b8      	movs	r3, #184	; 0xb8
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	2100      	movs	r1, #0
 800189c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2254      	movs	r2, #84	; 0x54
 80018a2:	5a9b      	ldrh	r3, [r3, r2]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b299      	uxth	r1, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2254      	movs	r2, #84	; 0x54
 80018b0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2254      	movs	r2, #84	; 0x54
 80018b6:	5a9b      	ldrh	r3, [r3, r2]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2202      	movs	r2, #2
 80018bc:	4313      	orrs	r3, r2
 80018be:	b299      	uxth	r1, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2254      	movs	r2, #84	; 0x54
 80018c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	f000 fbaf 	bl	8002042 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e4:	4bcf      	ldr	r3, [pc, #828]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	220c      	movs	r2, #12
 80018ea:	4013      	ands	r3, r2
 80018ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ee:	4bcd      	ldr	r3, [pc, #820]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	4013      	ands	r3, r2
 80018f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x36>
 8001904:	e07e      	b.n	8001a04 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d007      	beq.n	800191c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x68>
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	429a      	cmp	r2, r3
 800191a:	d10d      	bne.n	8001938 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4bc1      	ldr	r3, [pc, #772]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x5a>
 8001928:	e06b      	b.n	8001a02 <HAL_RCC_OscConfig+0x132>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d167      	bne.n	8001a02 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f000 fb85 	bl	8002042 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x84>
 8001944:	4bb7      	ldr	r3, [pc, #732]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4bb6      	ldr	r3, [pc, #728]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0249      	lsls	r1, r1, #9
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e027      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	23a0      	movs	r3, #160	; 0xa0
 800195a:	02db      	lsls	r3, r3, #11
 800195c:	429a      	cmp	r2, r3
 800195e:	d10e      	bne.n	800197e <HAL_RCC_OscConfig+0xae>
 8001960:	4bb0      	ldr	r3, [pc, #704]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4baf      	ldr	r3, [pc, #700]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	02c9      	lsls	r1, r1, #11
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4bad      	ldr	r3, [pc, #692]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4bac      	ldr	r3, [pc, #688]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0249      	lsls	r1, r1, #9
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e012      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 800197e:	4ba9      	ldr	r3, [pc, #676]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4ba8      	ldr	r3, [pc, #672]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001984:	49a8      	ldr	r1, [pc, #672]	; (8001c28 <HAL_RCC_OscConfig+0x358>)
 8001986:	400a      	ands	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4ba6      	ldr	r3, [pc, #664]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4ba2      	ldr	r3, [pc, #648]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4ba1      	ldr	r3, [pc, #644]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 800199e:	49a3      	ldr	r1, [pc, #652]	; (8001c2c <HAL_RCC_OscConfig+0x35c>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff faa8 	bl	8000f00 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b4:	e009      	b.n	80019ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff faa3 	bl	8000f00 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d902      	bls.n	80019ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f000 fb3c 	bl	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ca:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	029b      	lsls	r3, r3, #10
 80019d2:	4013      	ands	r3, r2
 80019d4:	d0ef      	beq.n	80019b6 <HAL_RCC_OscConfig+0xe6>
 80019d6:	e015      	b.n	8001a04 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa92 	bl	8000f00 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff fa8d 	bl	8000f00 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e326      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019f4:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	029b      	lsls	r3, r3, #10
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x112>
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d100      	bne.n	8001a10 <HAL_RCC_OscConfig+0x140>
 8001a0e:	e08b      	b.n	8001b28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d13e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1d0>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d13b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a28:	4b7e      	ldr	r3, [pc, #504]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_RCC_OscConfig+0x16c>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e302      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a7b      	ldr	r2, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x360>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	021a      	lsls	r2, r3, #8
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a52:	4b74      	ldr	r3, [pc, #464]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2209      	movs	r2, #9
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	4b71      	ldr	r3, [pc, #452]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a64:	f000 fc40 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8001a68:	0001      	movs	r1, r0
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	220f      	movs	r2, #15
 8001a72:	4013      	ands	r3, r2
 8001a74:	4a6f      	ldr	r2, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x364>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	000a      	movs	r2, r1
 8001a7a:	40da      	lsrs	r2, r3
 8001a7c:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x368>)
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a80:	4b6e      	ldr	r3, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x36c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2513      	movs	r5, #19
 8001a86:	197c      	adds	r4, r7, r5
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff f9f3 	bl	8000e74 <HAL_InitTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a92:	197b      	adds	r3, r7, r5
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d046      	beq.n	8001b28 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a9a:	197b      	adds	r3, r7, r5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	e2d0      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d027      	beq.n	8001af6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aa6:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2209      	movs	r2, #9
 8001aac:	4393      	bics	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fa22 	bl	8000f00 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fa1d 	bl	8000f00 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e2b6      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	4013      	ands	r3, r2
 8001adc:	d0f1      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_RCC_OscConfig+0x360>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	021a      	lsls	r2, r3, #8
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	e018      	b.n	8001b28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001afc:	2101      	movs	r1, #1
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff f9fd 	bl	8000f00 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f9f8 	bl	8000f00 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e291      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2204      	movs	r2, #4
 8001b24:	4013      	ands	r3, r2
 8001b26:	d1f1      	bne.n	8001b0c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d100      	bne.n	8001b34 <HAL_RCC_OscConfig+0x264>
 8001b32:	e0a1      	b.n	8001c78 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d140      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x282>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e277      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_RCC_OscConfig+0x370>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b60:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	0a19      	lsrs	r1, r3, #8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	061a      	lsls	r2, r3, #24
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	3301      	adds	r3, #1
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	0212      	lsls	r2, r2, #8
 8001b86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	210f      	movs	r1, #15
 8001b90:	400b      	ands	r3, r1
 8001b92:	4928      	ldr	r1, [pc, #160]	; (8001c34 <HAL_RCC_OscConfig+0x364>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x368>)
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x36c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2513      	movs	r5, #19
 8001ba2:	197c      	adds	r4, r7, r5
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff f965 	bl	8000e74 <HAL_InitTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bae:	197b      	adds	r3, r7, r5
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d060      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001bb6:	197b      	adds	r3, r7, r5
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	e242      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d03f      	beq.n	8001c44 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	0049      	lsls	r1, r1, #1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f995 	bl	8000f00 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f990 	bl	8000f00 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e229      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_RCC_OscConfig+0x370>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	0a19      	lsrs	r1, r3, #8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	061a      	lsls	r2, r3, #24
 8001c1c:	4b01      	ldr	r3, [pc, #4]	; (8001c24 <HAL_RCC_OscConfig+0x354>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	e029      	b.n	8001c78 <HAL_RCC_OscConfig+0x3a8>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	fffeffff 	.word	0xfffeffff
 8001c2c:	fffbffff 	.word	0xfffbffff
 8001c30:	ffffe0ff 	.word	0xffffe0ff
 8001c34:	08003528 	.word	0x08003528
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c44:	4bbd      	ldr	r3, [pc, #756]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4bbc      	ldr	r3, [pc, #752]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001c4a:	49bd      	ldr	r1, [pc, #756]	; (8001f40 <HAL_RCC_OscConfig+0x670>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f956 	bl	8000f00 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f951 	bl	8000f00 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1ea      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c6c:	4bb3      	ldr	r3, [pc, #716]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d036      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d019      	beq.n	8001cbe <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4bac      	ldr	r3, [pc, #688]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c8e:	4bab      	ldr	r3, [pc, #684]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff f933 	bl	8000f00 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f92e 	bl	8000f00 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1c7      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb2:	4ba2      	ldr	r3, [pc, #648]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0f1      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x3d0>
 8001cbc:	e018      	b.n	8001cf0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbe:	4b9f      	ldr	r3, [pc, #636]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc2:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	438a      	bics	r2, r1
 8001cc8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f919 	bl	8000f00 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f914 	bl	8000f00 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1ad      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce6:	4b95      	ldr	r3, [pc, #596]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1f1      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d100      	bne.n	8001cfc <HAL_RCC_OscConfig+0x42c>
 8001cfa:	e0ae      	b.n	8001e5a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfc:	2027      	movs	r0, #39	; 0x27
 8001cfe:	183b      	adds	r3, r7, r0
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d04:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	055b      	lsls	r3, r3, #21
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d109      	bne.n	8001d24 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d14:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0549      	lsls	r1, r1, #21
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d1e:	183b      	adds	r3, r7, r0
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b87      	ldr	r3, [pc, #540]	; (8001f44 <HAL_RCC_OscConfig+0x674>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d11a      	bne.n	8001d66 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x674>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x674>)
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	0049      	lsls	r1, r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f8df 	bl	8000f00 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d48:	f7ff f8da 	bl	8000f00 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e173      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b7a      	ldr	r3, [pc, #488]	; (8001f44 <HAL_RCC_OscConfig+0x674>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4b2>
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d76:	4b71      	ldr	r3, [pc, #452]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0049      	lsls	r1, r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d80:	e031      	b.n	8001de6 <HAL_RCC_OscConfig+0x516>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4d4>
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8e:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d90:	496b      	ldr	r1, [pc, #428]	; (8001f40 <HAL_RCC_OscConfig+0x670>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d9a:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001d9c:	496a      	ldr	r1, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0x678>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
 8001da2:	e020      	b.n	8001de6 <HAL_RCC_OscConfig+0x516>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	23a0      	movs	r3, #160	; 0xa0
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10e      	bne.n	8001dce <HAL_RCC_OscConfig+0x4fe>
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	00c9      	lsls	r1, r1, #3
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc2:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0049      	lsls	r1, r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	651a      	str	r2, [r3, #80]	; 0x50
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCC_OscConfig+0x516>
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001dd4:	495a      	ldr	r1, [pc, #360]	; (8001f40 <HAL_RCC_OscConfig+0x670>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	651a      	str	r2, [r3, #80]	; 0x50
 8001dda:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001ddc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001de0:	4959      	ldr	r1, [pc, #356]	; (8001f48 <HAL_RCC_OscConfig+0x678>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d015      	beq.n	8001e1a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f887 	bl	8000f00 <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df6:	e009      	b.n	8001e0c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f882 	bl	8000f00 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_RCC_OscConfig+0x67c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e11a      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d0ef      	beq.n	8001df8 <HAL_RCC_OscConfig+0x528>
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f871 	bl	8000f00 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e22:	e009      	b.n	8001e38 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f86c 	bl	8000f00 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_RCC_OscConfig+0x67c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e104      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e38:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d1ef      	bne.n	8001e24 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e44:	2327      	movs	r3, #39	; 0x27
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e54:	493e      	ldr	r1, [pc, #248]	; (8001f50 <HAL_RCC_OscConfig+0x680>)
 8001e56:	400a      	ands	r2, r1
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d049      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d026      	beq.n	8001eba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
 8001e84:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x684>)
 8001e86:	6a1a      	ldr	r2, [r3, #32]
 8001e88:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCC_OscConfig+0x684>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0189      	lsls	r1, r1, #6
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff f835 	bl	8000f00 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9c:	f7ff f830 	bl	8000f00 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0c9      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d0f1      	beq.n	8001e9c <HAL_RCC_OscConfig+0x5cc>
 8001eb8:	e01e      	b.n	8001ef8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_RCC_OscConfig+0x684>)
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCC_OscConfig+0x684>)
 8001ecc:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_RCC_OscConfig+0x688>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f815 	bl	8000f00 <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001edc:	f7ff f810 	bl	8000f00 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e0a9      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d1f1      	bne.n	8001edc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d100      	bne.n	8001f02 <HAL_RCC_OscConfig+0x632>
 8001f00:	e09e      	b.n	8002040 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x63a>
 8001f08:	e077      	b.n	8001ffa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d158      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x66c>)
 8001f18:	4910      	ldr	r1, [pc, #64]	; (8001f5c <HAL_RCC_OscConfig+0x68c>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe ffef 	bl	8000f00 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe ffea 	bl	8000f00 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d914      	bls.n	8001f60 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e083      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	fffffeff 	.word	0xfffffeff
 8001f44:	40007000 	.word	0x40007000
 8001f48:	fffffbff 	.word	0xfffffbff
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	efffffff 	.word	0xefffffff
 8001f54:	40010000 	.word	0x40010000
 8001f58:	ffffdfff 	.word	0xffffdfff
 8001f5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	049b      	lsls	r3, r3, #18
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d1dd      	bne.n	8001f28 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a37      	ldr	r2, [pc, #220]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	431a      	orrs	r2, r3
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0449      	lsls	r1, r1, #17
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe ffb1 	bl	8000f00 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe ffac 	bl	8000f00 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e045      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	049b      	lsls	r3, r3, #18
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x6d4>
 8001fc2:	e03d      	b.n	8002040 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001fca:	4922      	ldr	r1, [pc, #136]	; (8002054 <HAL_RCC_OscConfig+0x784>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff96 	bl	8000f00 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe ff91 	bl	8000f00 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e02a      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	049b      	lsls	r3, r3, #18
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x70a>
 8001ff8:	e022      	b.n	8002040 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e01d      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_RCC_OscConfig+0x77c>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	025b      	lsls	r3, r3, #9
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	429a      	cmp	r2, r3
 800201a:	d10f      	bne.n	800203c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	23f0      	movs	r3, #240	; 0xf0
 8002020:	039b      	lsls	r3, r3, #14
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b00a      	add	sp, #40	; 0x28
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40021000 	.word	0x40021000
 8002050:	ff02ffff 	.word	0xff02ffff
 8002054:	feffffff 	.word	0xfeffffff

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e128      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b96      	ldr	r3, [pc, #600]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d91e      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b93      	ldr	r3, [pc, #588]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2201      	movs	r2, #1
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	4b90      	ldr	r3, [pc, #576]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800208c:	f7fe ff38 	bl	8000f00 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002094:	e009      	b.n	80020aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f7fe ff33 	bl	8000f00 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e109      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b87      	ldr	r3, [pc, #540]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c2:	4b83      	ldr	r3, [pc, #524]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	22f0      	movs	r2, #240	; 0xf0
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
 80020e0:	e089      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	4013      	ands	r3, r2
 80020f4:	d120      	bne.n	8002138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0e1      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002102:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	049b      	lsls	r3, r3, #18
 800210a:	4013      	ands	r3, r2
 800210c:	d114      	bne.n	8002138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0d5      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211a:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2204      	movs	r2, #4
 8002120:	4013      	ands	r3, r2
 8002122:	d109      	bne.n	8002138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0ca      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002128:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0c2      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002138:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2203      	movs	r2, #3
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7fe fed8 	bl	8000f00 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d111      	bne.n	8002180 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800215c:	e009      	b.n	8002172 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215e:	f7fe fecf 	bl	8000f00 <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0a5      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	220c      	movs	r2, #12
 8002178:	4013      	ands	r3, r2
 800217a:	2b08      	cmp	r3, #8
 800217c:	d1ef      	bne.n	800215e <HAL_RCC_ClockConfig+0x106>
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d111      	bne.n	80021ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002188:	e009      	b.n	800219e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe feb9 	bl	8000f00 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e08f      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	220c      	movs	r2, #12
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d1ef      	bne.n	800218a <HAL_RCC_ClockConfig+0x132>
 80021aa:	e024      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d11b      	bne.n	80021ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b4:	e009      	b.n	80021ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b6:	f7fe fea3 	bl	8000f00 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4a42      	ldr	r2, [pc, #264]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e079      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	220c      	movs	r2, #12
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d1ef      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x15e>
 80021d6:	e00e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fe92 	bl	8000f00 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e068      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	220c      	movs	r2, #12
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d21e      	bcs.n	8002242 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4393      	bics	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002216:	f7fe fe73 	bl	8000f00 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	e009      	b.n	8002234 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7fe fe6e 	bl	8000f00 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	4a28      	ldr	r2, [pc, #160]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e044      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2201      	movs	r2, #1
 800223a:	4013      	ands	r3, r2
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_RCC_ClockConfig+0x27c>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800225c:	430a      	orrs	r2, r1
 800225e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	4013      	ands	r3, r2
 8002268:	d00a      	beq.n	8002280 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_RCC_ClockConfig+0x280>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	00da      	lsls	r2, r3, #3
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002280:	f000 f832 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8002284:	0001      	movs	r1, r0
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x278>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	220f      	movs	r2, #15
 800228e:	4013      	ands	r3, r2
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_RCC_ClockConfig+0x284>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	000a      	movs	r2, r1
 8002296:	40da      	lsrs	r2, r3
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_ClockConfig+0x288>)
 800229a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_ClockConfig+0x28c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	250b      	movs	r5, #11
 80022a2:	197c      	adds	r4, r7, r5
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7fe fde5 	bl	8000e74 <HAL_InitTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022ae:	197b      	adds	r3, r7, r5
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022b6:	197b      	adds	r3, r7, r5
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	e000      	b.n	80022be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bdb0      	pop	{r4, r5, r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	40022000 	.word	0x40022000
 80022cc:	00001388 	.word	0x00001388
 80022d0:	40021000 	.word	0x40021000
 80022d4:	fffff8ff 	.word	0xfffff8ff
 80022d8:	ffffc7ff 	.word	0xffffc7ff
 80022dc:	08003528 	.word	0x08003528
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_GetSysClockFreq+0x138>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f6:	230c      	movs	r3, #12
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d014      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x40>
 80022fe:	d900      	bls.n	8002302 <HAL_RCC_GetSysClockFreq+0x1a>
 8002300:	e07b      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x112>
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x24>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x3a>
 800230a:	e076      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_GetSysClockFreq+0x138>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2210      	movs	r2, #16
 8002312:	4013      	ands	r3, r2
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800231a:	e07c      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800231c:	4b42      	ldr	r3, [pc, #264]	; (8002428 <HAL_RCC_GetSysClockFreq+0x140>)
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002320:	e079      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002322:	4b42      	ldr	r3, [pc, #264]	; (800242c <HAL_RCC_GetSysClockFreq+0x144>)
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002326:	e076      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	0c9a      	lsrs	r2, r3, #18
 800232c:	230f      	movs	r3, #15
 800232e:	401a      	ands	r2, r3
 8002330:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_GetSysClockFreq+0x148>)
 8002332:	5c9b      	ldrb	r3, [r3, r2]
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	0d9a      	lsrs	r2, r3, #22
 800233a:	2303      	movs	r3, #3
 800233c:	4013      	ands	r3, r2
 800233e:	3301      	adds	r3, #1
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002342:	4b37      	ldr	r3, [pc, #220]	; (8002420 <HAL_RCC_GetSysClockFreq+0x138>)
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	025b      	lsls	r3, r3, #9
 800234a:	4013      	ands	r3, r2
 800234c:	d01a      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	4a35      	ldr	r2, [pc, #212]	; (800242c <HAL_RCC_GetSysClockFreq+0x144>)
 8002358:	2300      	movs	r3, #0
 800235a:	69b8      	ldr	r0, [r7, #24]
 800235c:	69f9      	ldr	r1, [r7, #28]
 800235e:	f7fd ff7f 	bl	8000260 <__aeabi_lmul>
 8002362:	0002      	movs	r2, r0
 8002364:	000b      	movs	r3, r1
 8002366:	0010      	movs	r0, r2
 8002368:	0019      	movs	r1, r3
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f7fd ff53 	bl	8000220 <__aeabi_uldivmod>
 800237a:	0002      	movs	r2, r0
 800237c:	000b      	movs	r3, r1
 800237e:	0013      	movs	r3, r2
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
 8002382:	e037      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_GetSysClockFreq+0x138>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2210      	movs	r2, #16
 800238a:	4013      	ands	r3, r2
 800238c:	d01a      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002398:	2300      	movs	r3, #0
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	f7fd ff5f 	bl	8000260 <__aeabi_lmul>
 80023a2:	0002      	movs	r2, r0
 80023a4:	000b      	movs	r3, r1
 80023a6:	0010      	movs	r0, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f7fd ff33 	bl	8000220 <__aeabi_uldivmod>
 80023ba:	0002      	movs	r2, r0
 80023bc:	000b      	movs	r3, r1
 80023be:	0013      	movs	r3, r2
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
 80023c2:	e017      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	0018      	movs	r0, r3
 80023c8:	2300      	movs	r3, #0
 80023ca:	0019      	movs	r1, r3
 80023cc:	4a16      	ldr	r2, [pc, #88]	; (8002428 <HAL_RCC_GetSysClockFreq+0x140>)
 80023ce:	2300      	movs	r3, #0
 80023d0:	f7fd ff46 	bl	8000260 <__aeabi_lmul>
 80023d4:	0002      	movs	r2, r0
 80023d6:	000b      	movs	r3, r1
 80023d8:	0010      	movs	r0, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	001c      	movs	r4, r3
 80023e0:	2300      	movs	r3, #0
 80023e2:	001d      	movs	r5, r3
 80023e4:	0022      	movs	r2, r4
 80023e6:	002b      	movs	r3, r5
 80023e8:	f7fd ff1a 	bl	8000220 <__aeabi_uldivmod>
 80023ec:	0002      	movs	r2, r0
 80023ee:	000b      	movs	r3, r1
 80023f0:	0013      	movs	r3, r2
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023f8:	e00d      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_GetSysClockFreq+0x138>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0b5b      	lsrs	r3, r3, #13
 8002400:	2207      	movs	r2, #7
 8002402:	4013      	ands	r3, r2
 8002404:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	3301      	adds	r3, #1
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	0212      	lsls	r2, r2, #8
 800240e:	409a      	lsls	r2, r3
 8002410:	0013      	movs	r3, r2
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002414:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b00e      	add	sp, #56	; 0x38
 800241e:	bdb0      	pop	{r4, r5, r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	003d0900 	.word	0x003d0900
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200
 8002430:	08003540 	.word	0x08003540

08002434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b02      	ldr	r3, [pc, #8]	; (8002444 <HAL_RCC_GetHCLKFreq+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800244c:	f7ff fff2 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002450:	0001      	movs	r1, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	2207      	movs	r2, #7
 800245a:	4013      	ands	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	40d9      	lsrs	r1, r3
 8002462:	000b      	movs	r3, r1
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	40021000 	.word	0x40021000
 8002470:	08003538 	.word	0x08003538

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002478:	f7ff ffdc 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 800247c:	0001      	movs	r1, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	2207      	movs	r2, #7
 8002486:	4013      	ands	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK2Freq+0x28>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	40d9      	lsrs	r1, r3
 800248e:	000b      	movs	r3, r1
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40021000 	.word	0x40021000
 800249c:	08003538 	.word	0x08003538

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80024a8:	2317      	movs	r3, #23
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	4013      	ands	r3, r2
 80024b8:	d106      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	d100      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80024c6:	e104      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c8:	4bb1      	ldr	r3, [pc, #708]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	055b      	lsls	r3, r3, #21
 80024d0:	4013      	ands	r3, r2
 80024d2:	d10a      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4bae      	ldr	r3, [pc, #696]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d8:	4bad      	ldr	r3, [pc, #692]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0549      	lsls	r1, r1, #21
 80024de:	430a      	orrs	r2, r1
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80024e2:	2317      	movs	r3, #23
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4baa      	ldr	r3, [pc, #680]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d11a      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4ba7      	ldr	r3, [pc, #668]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4ba6      	ldr	r3, [pc, #664]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0049      	lsls	r1, r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002504:	f7fe fcfc 	bl	8000f00 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fcf7 	bl	8000f00 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e133      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b9c      	ldr	r3, [pc, #624]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4013      	ands	r3, r2
 800252a:	d0f0      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800252c:	4b98      	ldr	r3, [pc, #608]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	23c0      	movs	r3, #192	; 0xc0
 8002532:	039b      	lsls	r3, r3, #14
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	039b      	lsls	r3, r3, #14
 8002540:	4013      	ands	r3, r2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	23c0      	movs	r3, #192	; 0xc0
 800254e:	039b      	lsls	r3, r3, #14
 8002550:	4013      	ands	r3, r2
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d013      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	401a      	ands	r2, r3
 8002562:	23c0      	movs	r3, #192	; 0xc0
 8002564:	029b      	lsls	r3, r3, #10
 8002566:	429a      	cmp	r2, r3
 8002568:	d10a      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800256a:	4b89      	ldr	r3, [pc, #548]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	401a      	ands	r2, r3
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	429a      	cmp	r2, r3
 800257a:	d101      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e103      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002580:	4b83      	ldr	r3, [pc, #524]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	029b      	lsls	r3, r3, #10
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d049      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	029b      	lsls	r3, r3, #10
 800259a:	4013      	ands	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d004      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2220      	movs	r2, #32
 80025a8:	4013      	ands	r3, r2
 80025aa:	d10d      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	23c0      	movs	r3, #192	; 0xc0
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d034      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4013      	ands	r3, r2
 80025c6:	d02e      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025c8:	4b71      	ldr	r3, [pc, #452]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	4a72      	ldr	r2, [pc, #456]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d2:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025d6:	4b6e      	ldr	r3, [pc, #440]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0309      	lsls	r1, r1, #12
 80025dc:	430a      	orrs	r2, r1
 80025de:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e0:	4b6b      	ldr	r3, [pc, #428]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025e6:	496d      	ldr	r1, [pc, #436]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80025ec:	4b68      	ldr	r3, [pc, #416]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d014      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fc80 	bl	8000f00 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002604:	e009      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe fc7b 	bl	8000f00 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0b6      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800261a:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d0ef      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4013      	ands	r3, r2
 8002630:	d01f      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	401a      	ands	r2, r3
 800263c:	23c0      	movs	r3, #192	; 0xc0
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	429a      	cmp	r2, r3
 8002642:	d10c      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002644:	4b52      	ldr	r3, [pc, #328]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a56      	ldr	r2, [pc, #344]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	23c0      	movs	r3, #192	; 0xc0
 8002654:	039b      	lsls	r3, r3, #14
 8002656:	401a      	ands	r2, r3
 8002658:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b4c      	ldr	r3, [pc, #304]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002660:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	23c0      	movs	r3, #192	; 0xc0
 8002668:	029b      	lsls	r3, r3, #10
 800266a:	401a      	ands	r2, r3
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800266e:	430a      	orrs	r2, r1
 8002670:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2220      	movs	r2, #32
 8002678:	4013      	ands	r3, r2
 800267a:	d01f      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	401a      	ands	r2, r3
 8002686:	23c0      	movs	r3, #192	; 0xc0
 8002688:	029b      	lsls	r3, r3, #10
 800268a:	429a      	cmp	r2, r3
 800268c:	d10c      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800268e:	4b40      	ldr	r3, [pc, #256]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a44      	ldr	r2, [pc, #272]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	23c0      	movs	r3, #192	; 0xc0
 800269e:	039b      	lsls	r3, r3, #14
 80026a0:	401a      	ands	r2, r3
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	401a      	ands	r2, r3
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026bc:	2317      	movs	r3, #23
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026cc:	4936      	ldr	r1, [pc, #216]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	2203      	movs	r2, #3
 80026e2:	4393      	bics	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ec:	430a      	orrs	r2, r1
 80026ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	220c      	movs	r2, #12
 8002700:	4393      	bics	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800270a:	430a      	orrs	r2, r1
 800270c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2204      	movs	r2, #4
 8002714:	4013      	ands	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800271e:	4013      	ands	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002728:	430a      	orrs	r2, r1
 800272a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2208      	movs	r2, #8
 8002732:	4013      	ands	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002746:	430a      	orrs	r2, r1
 8002748:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	4013      	ands	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002764:	430a      	orrs	r2, r1
 8002766:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	4013      	ands	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002782:	430a      	orrs	r2, r1
 8002784:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b006      	add	sp, #24
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	fffcffff 	.word	0xfffcffff
 800279c:	fff7ffff 	.word	0xfff7ffff
 80027a0:	00001388 	.word	0x00001388
 80027a4:	ffcfffff 	.word	0xffcfffff
 80027a8:	efffffff 	.word	0xefffffff
 80027ac:	fffff3ff 	.word	0xfffff3ff
 80027b0:	ffffcfff 	.word	0xffffcfff
 80027b4:	fbffffff 	.word	0xfbffffff
 80027b8:	fff3ffff 	.word	0xfff3ffff

080027bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e083      	b.n	80028d6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	2382      	movs	r3, #130	; 0x82
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	429a      	cmp	r2, r3
 80027e0:	d009      	beq.n	80027f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
 80027e8:	e005      	b.n	80027f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2251      	movs	r2, #81	; 0x51
 8002800:	5c9b      	ldrb	r3, [r3, r2]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2250      	movs	r2, #80	; 0x50
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0018      	movs	r0, r3
 8002814:	f7fe f93a 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2251      	movs	r2, #81	; 0x51
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2140      	movs	r1, #64	; 0x40
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	2382      	movs	r3, #130	; 0x82
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	401a      	ands	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	2384      	movs	r3, #132	; 0x84
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	400b      	ands	r3, r1
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68d9      	ldr	r1, [r3, #12]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	400b      	ands	r3, r1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2102      	movs	r1, #2
 8002858:	400b      	ands	r3, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	2101      	movs	r1, #1
 8002862:	400b      	ands	r3, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6999      	ldr	r1, [r3, #24]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	2138      	movs	r1, #56	; 0x38
 8002878:	400b      	ands	r3, r1
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	400b      	ands	r3, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	0011      	movs	r1, r2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	019b      	lsls	r3, r3, #6
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	2204      	movs	r2, #4
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2210      	movs	r2, #16
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <HAL_SPI_Init+0x124>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2251      	movs	r2, #81	; 0x51
 80028d0:	2101      	movs	r1, #1
 80028d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	fffff7ff 	.word	0xfffff7ff

080028e4 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e074      	b.n	80029e0 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	223c      	movs	r2, #60	; 0x3c
 80028fa:	5c9b      	ldrb	r3, [r3, r2]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	223d      	movs	r2, #61	; 0x3d
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f7fe f957 	bl	8000bc0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	223c      	movs	r2, #60	; 0x3c
 8002916:	2102      	movs	r1, #2
 8002918:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002930:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002938:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800293e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002944:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800294a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002950:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002956:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7b1b      	ldrb	r3, [r3, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d108      	bne.n	800297a <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	0249      	lsls	r1, r1, #9
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	43d2      	mvns	r2, r2
 8002990:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029aa:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681c      	ldr	r4, [r3, #0]
 80029b4:	0010      	movs	r0, r2
 80029b6:	f000 f817 	bl	80029e8 <TSC_extract_groups>
 80029ba:	0003      	movs	r3, r0
 80029bc:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2103      	movs	r1, #3
 80029ca:	438a      	bics	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2203      	movs	r2, #3
 80029d4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	223c      	movs	r2, #60	; 0x3c
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b003      	add	sp, #12
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	e011      	b.n	8002a1e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	409a      	lsls	r2, r3
 8002a02:	0013      	movs	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4013      	ands	r3, r2
 8002a08:	d006      	beq.n	8002a18 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b07      	cmp	r3, #7
 8002a22:	d9ea      	bls.n	80029fa <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e044      	b.n	8002acc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2278      	movs	r2, #120	; 0x78
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7fe f94b 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2224      	movs	r2, #36	; 0x24
 8002a5e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 f830 	bl	8002ad8 <UART_SetConfig>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e024      	b.n	8002acc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 faa7 	bl	8002fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	490d      	ldr	r1, [pc, #52]	; (8002ad4 <HAL_UART_Init+0xa4>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	212a      	movs	r1, #42	; 0x2a
 8002aae:	438a      	bics	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 fb3f 	bl	8003148 <UART_CheckIdleState>
 8002aca:	0003      	movs	r3, r0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	ffffb7ff 	.word	0xffffb7ff

08002ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ae0:	231a      	movs	r3, #26
 8002ae2:	2218      	movs	r2, #24
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	19db      	adds	r3, r3, r7
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4ac6      	ldr	r2, [pc, #792]	; (8002e24 <UART_SetConfig+0x34c>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4ac1      	ldr	r2, [pc, #772]	; (8002e28 <UART_SetConfig+0x350>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4abb      	ldr	r2, [pc, #748]	; (8002e2c <UART_SetConfig+0x354>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4ab7      	ldr	r2, [pc, #732]	; (8002e30 <UART_SetConfig+0x358>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4ab3      	ldr	r2, [pc, #716]	; (8002e34 <UART_SetConfig+0x35c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d131      	bne.n	8002bd0 <UART_SetConfig+0xf8>
 8002b6c:	4bb2      	ldr	r3, [pc, #712]	; (8002e38 <UART_SetConfig+0x360>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	2203      	movs	r2, #3
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d01d      	beq.n	8002bb4 <UART_SetConfig+0xdc>
 8002b78:	d823      	bhi.n	8002bc2 <UART_SetConfig+0xea>
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d00c      	beq.n	8002b98 <UART_SetConfig+0xc0>
 8002b7e:	d820      	bhi.n	8002bc2 <UART_SetConfig+0xea>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <UART_SetConfig+0xb2>
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d00e      	beq.n	8002ba6 <UART_SetConfig+0xce>
 8002b88:	e01b      	b.n	8002bc2 <UART_SetConfig+0xea>
 8002b8a:	231b      	movs	r3, #27
 8002b8c:	2218      	movs	r2, #24
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	19db      	adds	r3, r3, r7
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e09c      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2218      	movs	r2, #24
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e095      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002ba6:	231b      	movs	r3, #27
 8002ba8:	2218      	movs	r2, #24
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	19db      	adds	r3, r3, r7
 8002bae:	2204      	movs	r2, #4
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e08e      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002bb4:	231b      	movs	r3, #27
 8002bb6:	2218      	movs	r2, #24
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	19db      	adds	r3, r3, r7
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e087      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002bc2:	231b      	movs	r3, #27
 8002bc4:	2218      	movs	r2, #24
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	19db      	adds	r3, r3, r7
 8002bca:	2210      	movs	r2, #16
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e080      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a99      	ldr	r2, [pc, #612]	; (8002e3c <UART_SetConfig+0x364>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d131      	bne.n	8002c3e <UART_SetConfig+0x166>
 8002bda:	4b97      	ldr	r3, [pc, #604]	; (8002e38 <UART_SetConfig+0x360>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	220c      	movs	r2, #12
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d01d      	beq.n	8002c22 <UART_SetConfig+0x14a>
 8002be6:	d823      	bhi.n	8002c30 <UART_SetConfig+0x158>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d00c      	beq.n	8002c06 <UART_SetConfig+0x12e>
 8002bec:	d820      	bhi.n	8002c30 <UART_SetConfig+0x158>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <UART_SetConfig+0x120>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d00e      	beq.n	8002c14 <UART_SetConfig+0x13c>
 8002bf6:	e01b      	b.n	8002c30 <UART_SetConfig+0x158>
 8002bf8:	231b      	movs	r3, #27
 8002bfa:	2218      	movs	r2, #24
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e065      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2218      	movs	r2, #24
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	2202      	movs	r2, #2
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e05e      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c14:	231b      	movs	r3, #27
 8002c16:	2218      	movs	r2, #24
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e057      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c22:	231b      	movs	r3, #27
 8002c24:	2218      	movs	r2, #24
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	19db      	adds	r3, r3, r7
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e050      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c30:	231b      	movs	r3, #27
 8002c32:	2218      	movs	r2, #24
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	2210      	movs	r2, #16
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e049      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7a      	ldr	r2, [pc, #488]	; (8002e2c <UART_SetConfig+0x354>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d13e      	bne.n	8002cc6 <UART_SetConfig+0x1ee>
 8002c48:	4b7b      	ldr	r3, [pc, #492]	; (8002e38 <UART_SetConfig+0x360>)
 8002c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c4c:	23c0      	movs	r3, #192	; 0xc0
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	22c0      	movs	r2, #192	; 0xc0
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d027      	beq.n	8002caa <UART_SetConfig+0x1d2>
 8002c5a:	22c0      	movs	r2, #192	; 0xc0
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d82a      	bhi.n	8002cb8 <UART_SetConfig+0x1e0>
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0112      	lsls	r2, r2, #4
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d011      	beq.n	8002c8e <UART_SetConfig+0x1b6>
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d822      	bhi.n	8002cb8 <UART_SetConfig+0x1e0>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <UART_SetConfig+0x1a8>
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	00d2      	lsls	r2, r2, #3
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00e      	beq.n	8002c9c <UART_SetConfig+0x1c4>
 8002c7e:	e01b      	b.n	8002cb8 <UART_SetConfig+0x1e0>
 8002c80:	231b      	movs	r3, #27
 8002c82:	2218      	movs	r2, #24
 8002c84:	189b      	adds	r3, r3, r2
 8002c86:	19db      	adds	r3, r3, r7
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e021      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c8e:	231b      	movs	r3, #27
 8002c90:	2218      	movs	r2, #24
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	19db      	adds	r3, r3, r7
 8002c96:	2202      	movs	r2, #2
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e01a      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002c9c:	231b      	movs	r3, #27
 8002c9e:	2218      	movs	r2, #24
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	19db      	adds	r3, r3, r7
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e013      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002caa:	231b      	movs	r3, #27
 8002cac:	2218      	movs	r2, #24
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	19db      	adds	r3, r3, r7
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e00c      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002cb8:	231b      	movs	r3, #27
 8002cba:	2218      	movs	r2, #24
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	19db      	adds	r3, r3, r7
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e005      	b.n	8002cd2 <UART_SetConfig+0x1fa>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2218      	movs	r2, #24
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	2210      	movs	r2, #16
 8002cd0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a55      	ldr	r2, [pc, #340]	; (8002e2c <UART_SetConfig+0x354>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d000      	beq.n	8002cde <UART_SetConfig+0x206>
 8002cdc:	e084      	b.n	8002de8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cde:	231b      	movs	r3, #27
 8002ce0:	2218      	movs	r2, #24
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	19db      	adds	r3, r3, r7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d01d      	beq.n	8002d28 <UART_SetConfig+0x250>
 8002cec:	dc20      	bgt.n	8002d30 <UART_SetConfig+0x258>
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d015      	beq.n	8002d1e <UART_SetConfig+0x246>
 8002cf2:	dc1d      	bgt.n	8002d30 <UART_SetConfig+0x258>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <UART_SetConfig+0x226>
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d005      	beq.n	8002d08 <UART_SetConfig+0x230>
 8002cfc:	e018      	b.n	8002d30 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfe:	f7ff fba3 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8002d02:	0003      	movs	r3, r0
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d06:	e01c      	b.n	8002d42 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <UART_SetConfig+0x360>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d002      	beq.n	8002d18 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d12:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <UART_SetConfig+0x368>)
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d16:	e014      	b.n	8002d42 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <UART_SetConfig+0x36c>)
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d1c:	e011      	b.n	8002d42 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1e:	f7ff fae3 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8002d22:	0003      	movs	r3, r0
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d26:	e00c      	b.n	8002d42 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d2e:	e008      	b.n	8002d42 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d34:	231a      	movs	r3, #26
 8002d36:	2218      	movs	r2, #24
 8002d38:	189b      	adds	r3, r3, r2
 8002d3a:	19db      	adds	r3, r3, r7
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
        break;
 8002d40:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d100      	bne.n	8002d4a <UART_SetConfig+0x272>
 8002d48:	e132      	b.n	8002fb0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	0013      	movs	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d305      	bcc.n	8002d66 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d906      	bls.n	8002d74 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002d66:	231a      	movs	r3, #26
 8002d68:	2218      	movs	r2, #24
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	19db      	adds	r3, r3, r7
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e11d      	b.n	8002fb0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	6939      	ldr	r1, [r7, #16]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	000b      	movs	r3, r1
 8002d82:	0e1b      	lsrs	r3, r3, #24
 8002d84:	0010      	movs	r0, r2
 8002d86:	0205      	lsls	r5, r0, #8
 8002d88:	431d      	orrs	r5, r3
 8002d8a:	000b      	movs	r3, r1
 8002d8c:	021c      	lsls	r4, r3, #8
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	1900      	adds	r0, r0, r4
 8002da0:	4169      	adcs	r1, r5
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f7fd fa36 	bl	8000220 <__aeabi_uldivmod>
 8002db4:	0002      	movs	r2, r0
 8002db6:	000b      	movs	r3, r1
 8002db8:	0013      	movs	r3, r2
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbe:	23c0      	movs	r3, #192	; 0xc0
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d309      	bcc.n	8002dda <UART_SetConfig+0x302>
 8002dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	035b      	lsls	r3, r3, #13
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d204      	bcs.n	8002dda <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	e0ea      	b.n	8002fb0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002dda:	231a      	movs	r3, #26
 8002ddc:	2218      	movs	r2, #24
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	19db      	adds	r3, r3, r7
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e0e3      	b.n	8002fb0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d000      	beq.n	8002df6 <UART_SetConfig+0x31e>
 8002df4:	e085      	b.n	8002f02 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002df6:	231b      	movs	r3, #27
 8002df8:	2218      	movs	r2, #24
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	19db      	adds	r3, r3, r7
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d837      	bhi.n	8002e74 <UART_SetConfig+0x39c>
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <UART_SetConfig+0x370>)
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0e:	f7ff fb1b 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8002e12:	0003      	movs	r3, r0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e16:	e036      	b.n	8002e86 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e18:	f7ff fb2c 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e20:	e031      	b.n	8002e86 <UART_SetConfig+0x3ae>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	efff69f3 	.word	0xefff69f3
 8002e28:	ffffcfff 	.word	0xffffcfff
 8002e2c:	40004800 	.word	0x40004800
 8002e30:	fffff4ff 	.word	0xfffff4ff
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	003d0900 	.word	0x003d0900
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	0800354c 	.word	0x0800354c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e4c:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <UART_SetConfig+0x4f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	4013      	ands	r3, r2
 8002e54:	d002      	beq.n	8002e5c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <UART_SetConfig+0x4fc>)
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e5a:	e014      	b.n	8002e86 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	; (8002fd8 <UART_SetConfig+0x500>)
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e60:	e011      	b.n	8002e86 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e62:	f7ff fa41 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8002e66:	0003      	movs	r3, r0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e6a:	e00c      	b.n	8002e86 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e72:	e008      	b.n	8002e86 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e78:	231a      	movs	r3, #26
 8002e7a:	2218      	movs	r2, #24
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
        break;
 8002e84:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d100      	bne.n	8002e8e <UART_SetConfig+0x3b6>
 8002e8c:	e090      	b.n	8002fb0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	005a      	lsls	r2, r3, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	18d2      	adds	r2, r2, r3
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	0010      	movs	r0, r2
 8002ea2:	f7fd f931 	bl	8000108 <__udivsi3>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d921      	bls.n	8002ef4 <UART_SetConfig+0x41c>
 8002eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	025b      	lsls	r3, r3, #9
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d21c      	bcs.n	8002ef4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	200e      	movs	r0, #14
 8002ec0:	2418      	movs	r4, #24
 8002ec2:	1903      	adds	r3, r0, r4
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	438a      	bics	r2, r1
 8002eca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2207      	movs	r2, #7
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b299      	uxth	r1, r3
 8002ed8:	1903      	adds	r3, r0, r4
 8002eda:	19db      	adds	r3, r3, r7
 8002edc:	1902      	adds	r2, r0, r4
 8002ede:	19d2      	adds	r2, r2, r7
 8002ee0:	8812      	ldrh	r2, [r2, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1902      	adds	r2, r0, r4
 8002eec:	19d2      	adds	r2, r2, r7
 8002eee:	8812      	ldrh	r2, [r2, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	e05d      	b.n	8002fb0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef4:	231a      	movs	r3, #26
 8002ef6:	2218      	movs	r2, #24
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	19db      	adds	r3, r3, r7
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e056      	b.n	8002fb0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f02:	231b      	movs	r3, #27
 8002f04:	2218      	movs	r2, #24
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	19db      	adds	r3, r3, r7
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d822      	bhi.n	8002f56 <UART_SetConfig+0x47e>
 8002f10:	009a      	lsls	r2, r3, #2
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <UART_SetConfig+0x504>)
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1a:	f7ff fa95 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f22:	e021      	b.n	8002f68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7ff faa6 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f2c:	e01c      	b.n	8002f68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f2e:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <UART_SetConfig+0x4f8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	4013      	ands	r3, r2
 8002f36:	d002      	beq.n	8002f3e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <UART_SetConfig+0x4fc>)
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f3c:	e014      	b.n	8002f68 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002f3e:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <UART_SetConfig+0x500>)
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f42:	e011      	b.n	8002f68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f44:	f7ff f9d0 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f4c:	e00c      	b.n	8002f68 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f54:	e008      	b.n	8002f68 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f5a:	231a      	movs	r3, #26
 8002f5c:	2218      	movs	r2, #24
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	19db      	adds	r3, r3, r7
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
        break;
 8002f66:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	085a      	lsrs	r2, r3, #1
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	18d2      	adds	r2, r2, r3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	0010      	movs	r0, r2
 8002f80:	f7fd f8c2 	bl	8000108 <__udivsi3>
 8002f84:	0003      	movs	r3, r0
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d90a      	bls.n	8002fa4 <UART_SetConfig+0x4cc>
 8002f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	025b      	lsls	r3, r3, #9
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d205      	bcs.n	8002fa4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	e005      	b.n	8002fb0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa4:	231a      	movs	r3, #26
 8002fa6:	2218      	movs	r2, #24
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fbc:	231a      	movs	r3, #26
 8002fbe:	2218      	movs	r2, #24
 8002fc0:	189b      	adds	r3, r3, r2
 8002fc2:	19db      	adds	r3, r3, r7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b00e      	add	sp, #56	; 0x38
 8002fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	003d0900 	.word	0x003d0900
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	08003570 	.word	0x08003570

08002fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00b      	beq.n	800300a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <UART_AdvFeatureConfig+0x144>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2202      	movs	r2, #2
 8003010:	4013      	ands	r3, r2
 8003012:	d00b      	beq.n	800302c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a43      	ldr	r2, [pc, #268]	; (8003128 <UART_AdvFeatureConfig+0x148>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2204      	movs	r2, #4
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a3b      	ldr	r2, [pc, #236]	; (800312c <UART_AdvFeatureConfig+0x14c>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2208      	movs	r2, #8
 8003054:	4013      	ands	r3, r2
 8003056:	d00b      	beq.n	8003070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <UART_AdvFeatureConfig+0x150>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2210      	movs	r2, #16
 8003076:	4013      	ands	r3, r2
 8003078:	d00b      	beq.n	8003092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <UART_AdvFeatureConfig+0x154>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2220      	movs	r2, #32
 8003098:	4013      	ands	r3, r2
 800309a:	d00b      	beq.n	80030b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <UART_AdvFeatureConfig+0x158>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2240      	movs	r2, #64	; 0x40
 80030ba:	4013      	ands	r3, r2
 80030bc:	d01d      	beq.n	80030fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <UART_AdvFeatureConfig+0x15c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	035b      	lsls	r3, r3, #13
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10b      	bne.n	80030fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <UART_AdvFeatureConfig+0x160>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	4013      	ands	r3, r2
 8003102:	d00b      	beq.n	800311c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <UART_AdvFeatureConfig+0x164>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fffdffff 	.word	0xfffdffff
 8003128:	fffeffff 	.word	0xfffeffff
 800312c:	fffbffff 	.word	0xfffbffff
 8003130:	ffff7fff 	.word	0xffff7fff
 8003134:	ffffefff 	.word	0xffffefff
 8003138:	ffffdfff 	.word	0xffffdfff
 800313c:	ffefffff 	.word	0xffefffff
 8003140:	ff9fffff 	.word	0xff9fffff
 8003144:	fff7ffff 	.word	0xfff7ffff

08003148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b092      	sub	sp, #72	; 0x48
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2284      	movs	r2, #132	; 0x84
 8003154:	2100      	movs	r1, #0
 8003156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003158:	f7fd fed2 	bl	8000f00 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	4013      	ands	r3, r2
 800316a:	2b08      	cmp	r3, #8
 800316c:	d12c      	bne.n	80031c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	0391      	lsls	r1, r2, #14
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4a46      	ldr	r2, [pc, #280]	; (8003290 <UART_CheckIdleState+0x148>)
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	f000 f88c 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d021      	beq.n	80031c8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
 800318e:	2301      	movs	r3, #1
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2278      	movs	r2, #120	; 0x78
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e05f      	b.n	8003288 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2204      	movs	r2, #4
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d146      	bne.n	8003264 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	03d1      	lsls	r1, r2, #15
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <UART_CheckIdleState+0x148>)
 80031e0:	9200      	str	r2, [sp, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f000 f858 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d03b      	beq.n	8003264 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
 80031f6:	2301      	movs	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4921      	ldr	r1, [pc, #132]	; (8003294 <UART_CheckIdleState+0x14c>)
 800320e:	400a      	ands	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	61bb      	str	r3, [r7, #24]
  return(result);
 8003224:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
 8003228:	2301      	movs	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	438a      	bics	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	2120      	movs	r1, #32
 8003256:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2278      	movs	r2, #120	; 0x78
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e011      	b.n	8003288 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	2120      	movs	r1, #32
 8003270:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2278      	movs	r2, #120	; 0x78
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b010      	add	sp, #64	; 0x40
 800328e:	bd80      	pop	{r7, pc}
 8003290:	01ffffff 	.word	0x01ffffff
 8003294:	fffffedf 	.word	0xfffffedf

08003298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a8:	e04b      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	3301      	adds	r3, #1
 80032ae:	d048      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7fd fe26 	bl	8000f00 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e04b      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d035      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2208      	movs	r2, #8
 80032de:	4013      	ands	r3, r2
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d111      	bne.n	8003308 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2208      	movs	r2, #8
 80032ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f000 f83c 	bl	800336c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2284      	movs	r2, #132	; 0x84
 80032f8:	2108      	movs	r1, #8
 80032fa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2278      	movs	r2, #120	; 0x78
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e02c      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	401a      	ands	r2, r3
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	429a      	cmp	r2, r3
 800331a:	d112      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f81f 	bl	800336c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2284      	movs	r2, #132	; 0x84
 8003332:	2120      	movs	r1, #32
 8003334:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2278      	movs	r2, #120	; 0x78
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e00f      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	425a      	negs	r2, r3
 8003352:	4153      	adcs	r3, r2
 8003354:	b2db      	uxtb	r3, r3
 8003356:	001a      	movs	r2, r3
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d0a4      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	; 0x38
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	617b      	str	r3, [r7, #20]
  return(result);
 800337a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	2301      	movs	r3, #1
 8003380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4926      	ldr	r1, [pc, #152]	; (8003430 <UART_EndRxTransfer+0xc4>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	623b      	str	r3, [r7, #32]
  return(result);
 80033ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
 80033b0:	2301      	movs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	438a      	bics	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d118      	bne.n	8003412 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8310 	mrs	r3, PRIMASK
 80033e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ea:	2301      	movs	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2110      	movs	r1, #16
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	2120      	movs	r1, #32
 8003418:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b00e      	add	sp, #56	; 0x38
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	fffffedf 	.word	0xfffffedf

08003434 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <USB_DisableGlobalInt+0x30>)
 800343e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2240      	movs	r2, #64	; 0x40
 8003444:	5a9b      	ldrh	r3, [r3, r2]
 8003446:	b29b      	uxth	r3, r3
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	b292      	uxth	r2, r2
 800344c:	43d2      	mvns	r2, r2
 800344e:	b292      	uxth	r2, r2
 8003450:	4013      	ands	r3, r2
 8003452:	b299      	uxth	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}
 8003464:	0000bf80 	.word	0x0000bf80

08003468 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003468:	b084      	sub	sp, #16
 800346a:	b590      	push	{r4, r7, lr}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	2004      	movs	r0, #4
 8003474:	2410      	movs	r4, #16
 8003476:	1900      	adds	r0, r0, r4
 8003478:	2408      	movs	r4, #8
 800347a:	46a4      	mov	ip, r4
 800347c:	44bc      	add	ip, r7
 800347e:	4460      	add	r0, ip
 8003480:	6001      	str	r1, [r0, #0]
 8003482:	6042      	str	r2, [r0, #4]
 8003484:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	2101      	movs	r1, #1
 800348c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2240      	movs	r2, #64	; 0x40
 8003492:	2100      	movs	r1, #0
 8003494:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2244      	movs	r2, #68	; 0x44
 800349a:	2100      	movs	r1, #0
 800349c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2250      	movs	r2, #80	; 0x50
 80034a2:	2100      	movs	r1, #0
 80034a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b003      	add	sp, #12
 80034ae:	bc90      	pop	{r4, r7}
 80034b0:	bc08      	pop	{r3}
 80034b2:	b004      	add	sp, #16
 80034b4:	4718      	bx	r3
	...

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2600      	movs	r6, #0
 80034bc:	4d0c      	ldr	r5, [pc, #48]	; (80034f0 <__libc_init_array+0x38>)
 80034be:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	2600      	movs	r6, #0
 80034ca:	f000 f821 	bl	8003510 <_init>
 80034ce:	4d0a      	ldr	r5, [pc, #40]	; (80034f8 <__libc_init_array+0x40>)
 80034d0:	4c0a      	ldr	r4, [pc, #40]	; (80034fc <__libc_init_array+0x44>)
 80034d2:	1b64      	subs	r4, r4, r5
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	00b3      	lsls	r3, r6, #2
 80034de:	58eb      	ldr	r3, [r5, r3]
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	00b3      	lsls	r3, r6, #2
 80034e8:	58eb      	ldr	r3, [r5, r3]
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	0800359c 	.word	0x0800359c
 80034f4:	0800359c 	.word	0x0800359c
 80034f8:	0800359c 	.word	0x0800359c
 80034fc:	080035a0 	.word	0x080035a0

08003500 <memset>:
 8003500:	0003      	movs	r3, r0
 8003502:	1882      	adds	r2, r0, r2
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	7019      	strb	r1, [r3, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
