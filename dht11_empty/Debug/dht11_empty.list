
dht11_empty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002504  0800ac88  0800ac88  0001ac88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d18c  0800d18c  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800d18c  0800d18c  0001d18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d194  0800d194  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d198  0800d198  0001d198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800d19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000224  0800d3c0  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  0800d3c0  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000959f  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc8  00000000  00000000  000297eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015286  00000000  00000000  0002cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b756  00000000  00000000  00041da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007db00  00000000  00000000  0004d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000caffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  000cb04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000224 	.word	0x20000224
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac70 	.word	0x0800ac70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000228 	.word	0x20000228
 8000104:	0800ac70 	.word	0x0800ac70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fded 	bl	800201c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd3d 	bl	8001ecc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fddf 	bl	800201c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdd5 	bl	800201c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd65 	bl	8001f50 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd5b 	bl	8001f50 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdf 	bl	8000e74 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc6b 	bl	8000d9c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcd1 	bl	8000e74 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc7 	bl	8000e74 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc77 	bl	8000de8 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc6d 	bl	8000de8 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a4 	bl	8000698 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fba5 	bl	8002d1c <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f001 ffee 	bl	80025bc <__aeabi_dsub>
 80005e0:	f002 fb9c 	bl	8002d1c <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0005      	movs	r5, r0
 80005f8:	000c      	movs	r4, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	0028      	movs	r0, r5
 8000600:	0021      	movs	r1, r4
 8000602:	f7ff ff29 	bl	8000458 <__aeabi_dcmplt>
 8000606:	2800      	cmp	r0, #0
 8000608:	d108      	bne.n	800061c <__aeabi_d2lz+0x28>
 800060a:	0028      	movs	r0, r5
 800060c:	0021      	movs	r1, r4
 800060e:	f000 f80f 	bl	8000630 <__aeabi_d2ulz>
 8000612:	0002      	movs	r2, r0
 8000614:	000b      	movs	r3, r1
 8000616:	0010      	movs	r0, r2
 8000618:	0019      	movs	r1, r3
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	18e1      	adds	r1, r4, r3
 8000622:	0028      	movs	r0, r5
 8000624:	f000 f804 	bl	8000630 <__aeabi_d2ulz>
 8000628:	2300      	movs	r3, #0
 800062a:	4242      	negs	r2, r0
 800062c:	418b      	sbcs	r3, r1
 800062e:	e7f2      	b.n	8000616 <__aeabi_d2lz+0x22>

08000630 <__aeabi_d2ulz>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	2200      	movs	r2, #0
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <__aeabi_d2ulz+0x34>)
 8000636:	000d      	movs	r5, r1
 8000638:	0004      	movs	r4, r0
 800063a:	f001 fd53 	bl	80020e4 <__aeabi_dmul>
 800063e:	f7ff ffbb 	bl	80005b8 <__aeabi_d2uiz>
 8000642:	0006      	movs	r6, r0
 8000644:	f002 fbd0 	bl	8002de8 <__aeabi_ui2d>
 8000648:	2200      	movs	r2, #0
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <__aeabi_d2ulz+0x38>)
 800064c:	f001 fd4a 	bl	80020e4 <__aeabi_dmul>
 8000650:	0002      	movs	r2, r0
 8000652:	000b      	movs	r3, r1
 8000654:	0020      	movs	r0, r4
 8000656:	0029      	movs	r1, r5
 8000658:	f001 ffb0 	bl	80025bc <__aeabi_dsub>
 800065c:	f7ff ffac 	bl	80005b8 <__aeabi_d2uiz>
 8000660:	0031      	movs	r1, r6
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	3df00000 	.word	0x3df00000
 8000668:	41f00000 	.word	0x41f00000

0800066c <__aeabi_l2d>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	0006      	movs	r6, r0
 8000670:	0008      	movs	r0, r1
 8000672:	f002 fb89 	bl	8002d88 <__aeabi_i2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <__aeabi_l2d+0x28>)
 800067a:	f001 fd33 	bl	80020e4 <__aeabi_dmul>
 800067e:	000d      	movs	r5, r1
 8000680:	0004      	movs	r4, r0
 8000682:	0030      	movs	r0, r6
 8000684:	f002 fbb0 	bl	8002de8 <__aeabi_ui2d>
 8000688:	002b      	movs	r3, r5
 800068a:	0022      	movs	r2, r4
 800068c:	f000 fdec 	bl	8001268 <__aeabi_dadd>
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	41f00000 	.word	0x41f00000

08000698 <__udivmoddi4>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4657      	mov	r7, sl
 800069c:	464e      	mov	r6, r9
 800069e:	4645      	mov	r5, r8
 80006a0:	46de      	mov	lr, fp
 80006a2:	b5e0      	push	{r5, r6, r7, lr}
 80006a4:	0004      	movs	r4, r0
 80006a6:	000d      	movs	r5, r1
 80006a8:	4692      	mov	sl, r2
 80006aa:	4699      	mov	r9, r3
 80006ac:	b083      	sub	sp, #12
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d830      	bhi.n	8000714 <__udivmoddi4+0x7c>
 80006b2:	d02d      	beq.n	8000710 <__udivmoddi4+0x78>
 80006b4:	4649      	mov	r1, r9
 80006b6:	4650      	mov	r0, sl
 80006b8:	f002 fcaa 	bl	8003010 <__clzdi2>
 80006bc:	0029      	movs	r1, r5
 80006be:	0006      	movs	r6, r0
 80006c0:	0020      	movs	r0, r4
 80006c2:	f002 fca5 	bl	8003010 <__clzdi2>
 80006c6:	1a33      	subs	r3, r6, r0
 80006c8:	4698      	mov	r8, r3
 80006ca:	3b20      	subs	r3, #32
 80006cc:	469b      	mov	fp, r3
 80006ce:	d433      	bmi.n	8000738 <__udivmoddi4+0xa0>
 80006d0:	465a      	mov	r2, fp
 80006d2:	4653      	mov	r3, sl
 80006d4:	4093      	lsls	r3, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	001f      	movs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d83a      	bhi.n	800075a <__udivmoddi4+0xc2>
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d100      	bne.n	80006ea <__udivmoddi4+0x52>
 80006e8:	e078      	b.n	80007dc <__udivmoddi4+0x144>
 80006ea:	465b      	mov	r3, fp
 80006ec:	1ba4      	subs	r4, r4, r6
 80006ee:	41bd      	sbcs	r5, r7
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da00      	bge.n	80006f6 <__udivmoddi4+0x5e>
 80006f4:	e075      	b.n	80007e2 <__udivmoddi4+0x14a>
 80006f6:	2200      	movs	r2, #0
 80006f8:	2300      	movs	r3, #0
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	2301      	movs	r3, #1
 8000700:	465a      	mov	r2, fp
 8000702:	4093      	lsls	r3, r2
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2301      	movs	r3, #1
 8000708:	4642      	mov	r2, r8
 800070a:	4093      	lsls	r3, r2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	e028      	b.n	8000762 <__udivmoddi4+0xca>
 8000710:	4282      	cmp	r2, r0
 8000712:	d9cf      	bls.n	80006b4 <__udivmoddi4+0x1c>
 8000714:	2200      	movs	r2, #0
 8000716:	2300      	movs	r3, #0
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <__udivmoddi4+0x8e>
 8000722:	601c      	str	r4, [r3, #0]
 8000724:	605d      	str	r5, [r3, #4]
 8000726:	9800      	ldr	r0, [sp, #0]
 8000728:	9901      	ldr	r1, [sp, #4]
 800072a:	b003      	add	sp, #12
 800072c:	bcf0      	pop	{r4, r5, r6, r7}
 800072e:	46bb      	mov	fp, r7
 8000730:	46b2      	mov	sl, r6
 8000732:	46a9      	mov	r9, r5
 8000734:	46a0      	mov	r8, r4
 8000736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000738:	4642      	mov	r2, r8
 800073a:	2320      	movs	r3, #32
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	4652      	mov	r2, sl
 8000740:	40da      	lsrs	r2, r3
 8000742:	4641      	mov	r1, r8
 8000744:	0013      	movs	r3, r2
 8000746:	464a      	mov	r2, r9
 8000748:	408a      	lsls	r2, r1
 800074a:	0017      	movs	r7, r2
 800074c:	4642      	mov	r2, r8
 800074e:	431f      	orrs	r7, r3
 8000750:	4653      	mov	r3, sl
 8000752:	4093      	lsls	r3, r2
 8000754:	001e      	movs	r6, r3
 8000756:	42af      	cmp	r7, r5
 8000758:	d9c4      	bls.n	80006e4 <__udivmoddi4+0x4c>
 800075a:	2200      	movs	r2, #0
 800075c:	2300      	movs	r3, #0
 800075e:	9200      	str	r2, [sp, #0]
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	4643      	mov	r3, r8
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0d9      	beq.n	800071c <__udivmoddi4+0x84>
 8000768:	07fb      	lsls	r3, r7, #31
 800076a:	0872      	lsrs	r2, r6, #1
 800076c:	431a      	orrs	r2, r3
 800076e:	4646      	mov	r6, r8
 8000770:	087b      	lsrs	r3, r7, #1
 8000772:	e00e      	b.n	8000792 <__udivmoddi4+0xfa>
 8000774:	42ab      	cmp	r3, r5
 8000776:	d101      	bne.n	800077c <__udivmoddi4+0xe4>
 8000778:	42a2      	cmp	r2, r4
 800077a:	d80c      	bhi.n	8000796 <__udivmoddi4+0xfe>
 800077c:	1aa4      	subs	r4, r4, r2
 800077e:	419d      	sbcs	r5, r3
 8000780:	2001      	movs	r0, #1
 8000782:	1924      	adds	r4, r4, r4
 8000784:	416d      	adcs	r5, r5
 8000786:	2100      	movs	r1, #0
 8000788:	3e01      	subs	r6, #1
 800078a:	1824      	adds	r4, r4, r0
 800078c:	414d      	adcs	r5, r1
 800078e:	2e00      	cmp	r6, #0
 8000790:	d006      	beq.n	80007a0 <__udivmoddi4+0x108>
 8000792:	42ab      	cmp	r3, r5
 8000794:	d9ee      	bls.n	8000774 <__udivmoddi4+0xdc>
 8000796:	3e01      	subs	r6, #1
 8000798:	1924      	adds	r4, r4, r4
 800079a:	416d      	adcs	r5, r5
 800079c:	2e00      	cmp	r6, #0
 800079e:	d1f8      	bne.n	8000792 <__udivmoddi4+0xfa>
 80007a0:	9800      	ldr	r0, [sp, #0]
 80007a2:	9901      	ldr	r1, [sp, #4]
 80007a4:	465b      	mov	r3, fp
 80007a6:	1900      	adds	r0, r0, r4
 80007a8:	4169      	adcs	r1, r5
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db24      	blt.n	80007f8 <__udivmoddi4+0x160>
 80007ae:	002b      	movs	r3, r5
 80007b0:	465a      	mov	r2, fp
 80007b2:	4644      	mov	r4, r8
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	002a      	movs	r2, r5
 80007b8:	40e2      	lsrs	r2, r4
 80007ba:	001c      	movs	r4, r3
 80007bc:	465b      	mov	r3, fp
 80007be:	0015      	movs	r5, r2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db2a      	blt.n	800081a <__udivmoddi4+0x182>
 80007c4:	0026      	movs	r6, r4
 80007c6:	409e      	lsls	r6, r3
 80007c8:	0033      	movs	r3, r6
 80007ca:	0026      	movs	r6, r4
 80007cc:	4647      	mov	r7, r8
 80007ce:	40be      	lsls	r6, r7
 80007d0:	0032      	movs	r2, r6
 80007d2:	1a80      	subs	r0, r0, r2
 80007d4:	4199      	sbcs	r1, r3
 80007d6:	9000      	str	r0, [sp, #0]
 80007d8:	9101      	str	r1, [sp, #4]
 80007da:	e79f      	b.n	800071c <__udivmoddi4+0x84>
 80007dc:	42a3      	cmp	r3, r4
 80007de:	d8bc      	bhi.n	800075a <__udivmoddi4+0xc2>
 80007e0:	e783      	b.n	80006ea <__udivmoddi4+0x52>
 80007e2:	4642      	mov	r2, r8
 80007e4:	2320      	movs	r3, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	9100      	str	r1, [sp, #0]
 80007ee:	9201      	str	r2, [sp, #4]
 80007f0:	2201      	movs	r2, #1
 80007f2:	40da      	lsrs	r2, r3
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	e786      	b.n	8000706 <__udivmoddi4+0x6e>
 80007f8:	4642      	mov	r2, r8
 80007fa:	2320      	movs	r3, #32
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	002a      	movs	r2, r5
 8000800:	4646      	mov	r6, r8
 8000802:	409a      	lsls	r2, r3
 8000804:	0023      	movs	r3, r4
 8000806:	40f3      	lsrs	r3, r6
 8000808:	4644      	mov	r4, r8
 800080a:	4313      	orrs	r3, r2
 800080c:	002a      	movs	r2, r5
 800080e:	40e2      	lsrs	r2, r4
 8000810:	001c      	movs	r4, r3
 8000812:	465b      	mov	r3, fp
 8000814:	0015      	movs	r5, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	dad4      	bge.n	80007c4 <__udivmoddi4+0x12c>
 800081a:	4642      	mov	r2, r8
 800081c:	002f      	movs	r7, r5
 800081e:	2320      	movs	r3, #32
 8000820:	0026      	movs	r6, r4
 8000822:	4097      	lsls	r7, r2
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	40de      	lsrs	r6, r3
 8000828:	003b      	movs	r3, r7
 800082a:	4333      	orrs	r3, r6
 800082c:	e7cd      	b.n	80007ca <__udivmoddi4+0x132>
 800082e:	46c0      	nop			; (mov r8, r8)

08000830 <__aeabi_fadd>:
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	46c6      	mov	lr, r8
 8000834:	0243      	lsls	r3, r0, #9
 8000836:	0a5b      	lsrs	r3, r3, #9
 8000838:	024e      	lsls	r6, r1, #9
 800083a:	0045      	lsls	r5, r0, #1
 800083c:	004f      	lsls	r7, r1, #1
 800083e:	00da      	lsls	r2, r3, #3
 8000840:	0fc4      	lsrs	r4, r0, #31
 8000842:	469c      	mov	ip, r3
 8000844:	0a70      	lsrs	r0, r6, #9
 8000846:	4690      	mov	r8, r2
 8000848:	b500      	push	{lr}
 800084a:	0e2d      	lsrs	r5, r5, #24
 800084c:	0e3f      	lsrs	r7, r7, #24
 800084e:	0fc9      	lsrs	r1, r1, #31
 8000850:	09b6      	lsrs	r6, r6, #6
 8000852:	428c      	cmp	r4, r1
 8000854:	d04b      	beq.n	80008ee <__aeabi_fadd+0xbe>
 8000856:	1bea      	subs	r2, r5, r7
 8000858:	2a00      	cmp	r2, #0
 800085a:	dd36      	ble.n	80008ca <__aeabi_fadd+0x9a>
 800085c:	2f00      	cmp	r7, #0
 800085e:	d061      	beq.n	8000924 <__aeabi_fadd+0xf4>
 8000860:	2dff      	cmp	r5, #255	; 0xff
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x36>
 8000864:	e0ad      	b.n	80009c2 <__aeabi_fadd+0x192>
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	04db      	lsls	r3, r3, #19
 800086a:	431e      	orrs	r6, r3
 800086c:	2a1b      	cmp	r2, #27
 800086e:	dc00      	bgt.n	8000872 <__aeabi_fadd+0x42>
 8000870:	e0d3      	b.n	8000a1a <__aeabi_fadd+0x1ea>
 8000872:	2001      	movs	r0, #1
 8000874:	4643      	mov	r3, r8
 8000876:	1a18      	subs	r0, r3, r0
 8000878:	0143      	lsls	r3, r0, #5
 800087a:	d400      	bmi.n	800087e <__aeabi_fadd+0x4e>
 800087c:	e08c      	b.n	8000998 <__aeabi_fadd+0x168>
 800087e:	0180      	lsls	r0, r0, #6
 8000880:	0987      	lsrs	r7, r0, #6
 8000882:	0038      	movs	r0, r7
 8000884:	f002 fba6 	bl	8002fd4 <__clzsi2>
 8000888:	3805      	subs	r0, #5
 800088a:	4087      	lsls	r7, r0
 800088c:	4285      	cmp	r5, r0
 800088e:	dc00      	bgt.n	8000892 <__aeabi_fadd+0x62>
 8000890:	e0b6      	b.n	8000a00 <__aeabi_fadd+0x1d0>
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	48b3      	ldr	r0, [pc, #716]	; (8000b64 <__aeabi_fadd+0x334>)
 8000896:	4038      	ands	r0, r7
 8000898:	0743      	lsls	r3, r0, #29
 800089a:	d004      	beq.n	80008a6 <__aeabi_fadd+0x76>
 800089c:	230f      	movs	r3, #15
 800089e:	4003      	ands	r3, r0
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fadd+0x76>
 80008a4:	3004      	adds	r0, #4
 80008a6:	0143      	lsls	r3, r0, #5
 80008a8:	d400      	bmi.n	80008ac <__aeabi_fadd+0x7c>
 80008aa:	e078      	b.n	800099e <__aeabi_fadd+0x16e>
 80008ac:	1c6a      	adds	r2, r5, #1
 80008ae:	2dfe      	cmp	r5, #254	; 0xfe
 80008b0:	d065      	beq.n	800097e <__aeabi_fadd+0x14e>
 80008b2:	0180      	lsls	r0, r0, #6
 80008b4:	0a43      	lsrs	r3, r0, #9
 80008b6:	469c      	mov	ip, r3
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	4663      	mov	r3, ip
 80008bc:	05d0      	lsls	r0, r2, #23
 80008be:	4318      	orrs	r0, r3
 80008c0:	07e4      	lsls	r4, r4, #31
 80008c2:	4320      	orrs	r0, r4
 80008c4:	bc80      	pop	{r7}
 80008c6:	46b8      	mov	r8, r7
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d035      	beq.n	800093a <__aeabi_fadd+0x10a>
 80008ce:	1b7a      	subs	r2, r7, r5
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fadd+0xa6>
 80008d4:	e0af      	b.n	8000a36 <__aeabi_fadd+0x206>
 80008d6:	4643      	mov	r3, r8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0xae>
 80008dc:	e0a7      	b.n	8000a2e <__aeabi_fadd+0x1fe>
 80008de:	1e53      	subs	r3, r2, #1
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0xb6>
 80008e4:	e12f      	b.n	8000b46 <__aeabi_fadd+0x316>
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d069      	beq.n	80009be <__aeabi_fadd+0x18e>
 80008ea:	001a      	movs	r2, r3
 80008ec:	e0aa      	b.n	8000a44 <__aeabi_fadd+0x214>
 80008ee:	1be9      	subs	r1, r5, r7
 80008f0:	2900      	cmp	r1, #0
 80008f2:	dd70      	ble.n	80009d6 <__aeabi_fadd+0x1a6>
 80008f4:	2f00      	cmp	r7, #0
 80008f6:	d037      	beq.n	8000968 <__aeabi_fadd+0x138>
 80008f8:	2dff      	cmp	r5, #255	; 0xff
 80008fa:	d062      	beq.n	80009c2 <__aeabi_fadd+0x192>
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	04db      	lsls	r3, r3, #19
 8000900:	431e      	orrs	r6, r3
 8000902:	291b      	cmp	r1, #27
 8000904:	dc00      	bgt.n	8000908 <__aeabi_fadd+0xd8>
 8000906:	e0b0      	b.n	8000a6a <__aeabi_fadd+0x23a>
 8000908:	2001      	movs	r0, #1
 800090a:	4440      	add	r0, r8
 800090c:	0143      	lsls	r3, r0, #5
 800090e:	d543      	bpl.n	8000998 <__aeabi_fadd+0x168>
 8000910:	3501      	adds	r5, #1
 8000912:	2dff      	cmp	r5, #255	; 0xff
 8000914:	d033      	beq.n	800097e <__aeabi_fadd+0x14e>
 8000916:	2301      	movs	r3, #1
 8000918:	4a93      	ldr	r2, [pc, #588]	; (8000b68 <__aeabi_fadd+0x338>)
 800091a:	4003      	ands	r3, r0
 800091c:	0840      	lsrs	r0, r0, #1
 800091e:	4010      	ands	r0, r2
 8000920:	4318      	orrs	r0, r3
 8000922:	e7b9      	b.n	8000898 <__aeabi_fadd+0x68>
 8000924:	2e00      	cmp	r6, #0
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0xfa>
 8000928:	e083      	b.n	8000a32 <__aeabi_fadd+0x202>
 800092a:	1e51      	subs	r1, r2, #1
 800092c:	2a01      	cmp	r2, #1
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x102>
 8000930:	e0d8      	b.n	8000ae4 <__aeabi_fadd+0x2b4>
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d045      	beq.n	80009c2 <__aeabi_fadd+0x192>
 8000936:	000a      	movs	r2, r1
 8000938:	e798      	b.n	800086c <__aeabi_fadd+0x3c>
 800093a:	27fe      	movs	r7, #254	; 0xfe
 800093c:	1c6a      	adds	r2, r5, #1
 800093e:	4217      	tst	r7, r2
 8000940:	d000      	beq.n	8000944 <__aeabi_fadd+0x114>
 8000942:	e086      	b.n	8000a52 <__aeabi_fadd+0x222>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x11a>
 8000948:	e0b7      	b.n	8000aba <__aeabi_fadd+0x28a>
 800094a:	4643      	mov	r3, r8
 800094c:	2b00      	cmp	r3, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_fadd+0x122>
 8000950:	e0f3      	b.n	8000b3a <__aeabi_fadd+0x30a>
 8000952:	2200      	movs	r2, #0
 8000954:	2e00      	cmp	r6, #0
 8000956:	d0b0      	beq.n	80008ba <__aeabi_fadd+0x8a>
 8000958:	1b98      	subs	r0, r3, r6
 800095a:	0143      	lsls	r3, r0, #5
 800095c:	d400      	bmi.n	8000960 <__aeabi_fadd+0x130>
 800095e:	e0fa      	b.n	8000b56 <__aeabi_fadd+0x326>
 8000960:	4643      	mov	r3, r8
 8000962:	000c      	movs	r4, r1
 8000964:	1af0      	subs	r0, r6, r3
 8000966:	e797      	b.n	8000898 <__aeabi_fadd+0x68>
 8000968:	2e00      	cmp	r6, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x13e>
 800096c:	e0c8      	b.n	8000b00 <__aeabi_fadd+0x2d0>
 800096e:	1e4a      	subs	r2, r1, #1
 8000970:	2901      	cmp	r1, #1
 8000972:	d100      	bne.n	8000976 <__aeabi_fadd+0x146>
 8000974:	e0ae      	b.n	8000ad4 <__aeabi_fadd+0x2a4>
 8000976:	29ff      	cmp	r1, #255	; 0xff
 8000978:	d023      	beq.n	80009c2 <__aeabi_fadd+0x192>
 800097a:	0011      	movs	r1, r2
 800097c:	e7c1      	b.n	8000902 <__aeabi_fadd+0xd2>
 800097e:	2300      	movs	r3, #0
 8000980:	22ff      	movs	r2, #255	; 0xff
 8000982:	469c      	mov	ip, r3
 8000984:	e799      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000986:	21fe      	movs	r1, #254	; 0xfe
 8000988:	1c6a      	adds	r2, r5, #1
 800098a:	4211      	tst	r1, r2
 800098c:	d077      	beq.n	8000a7e <__aeabi_fadd+0x24e>
 800098e:	2aff      	cmp	r2, #255	; 0xff
 8000990:	d0f5      	beq.n	800097e <__aeabi_fadd+0x14e>
 8000992:	0015      	movs	r5, r2
 8000994:	4446      	add	r6, r8
 8000996:	0870      	lsrs	r0, r6, #1
 8000998:	0743      	lsls	r3, r0, #29
 800099a:	d000      	beq.n	800099e <__aeabi_fadd+0x16e>
 800099c:	e77e      	b.n	800089c <__aeabi_fadd+0x6c>
 800099e:	08c3      	lsrs	r3, r0, #3
 80009a0:	2dff      	cmp	r5, #255	; 0xff
 80009a2:	d00e      	beq.n	80009c2 <__aeabi_fadd+0x192>
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	469c      	mov	ip, r3
 80009aa:	b2ea      	uxtb	r2, r5
 80009ac:	e785      	b.n	80008ba <__aeabi_fadd+0x8a>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d007      	beq.n	80009c2 <__aeabi_fadd+0x192>
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	03d2      	lsls	r2, r2, #15
 80009b6:	4213      	tst	r3, r2
 80009b8:	d003      	beq.n	80009c2 <__aeabi_fadd+0x192>
 80009ba:	4210      	tst	r0, r2
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fadd+0x192>
 80009be:	000c      	movs	r4, r1
 80009c0:	0003      	movs	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0db      	beq.n	800097e <__aeabi_fadd+0x14e>
 80009c6:	2080      	movs	r0, #128	; 0x80
 80009c8:	03c0      	lsls	r0, r0, #15
 80009ca:	4318      	orrs	r0, r3
 80009cc:	0240      	lsls	r0, r0, #9
 80009ce:	0a43      	lsrs	r3, r0, #9
 80009d0:	469c      	mov	ip, r3
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	e771      	b.n	80008ba <__aeabi_fadd+0x8a>
 80009d6:	2900      	cmp	r1, #0
 80009d8:	d0d5      	beq.n	8000986 <__aeabi_fadd+0x156>
 80009da:	1b7a      	subs	r2, r7, r5
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d160      	bne.n	8000aa2 <__aeabi_fadd+0x272>
 80009e0:	4643      	mov	r3, r8
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d024      	beq.n	8000a30 <__aeabi_fadd+0x200>
 80009e6:	1e53      	subs	r3, r2, #1
 80009e8:	2a01      	cmp	r2, #1
 80009ea:	d073      	beq.n	8000ad4 <__aeabi_fadd+0x2a4>
 80009ec:	2aff      	cmp	r2, #255	; 0xff
 80009ee:	d0e7      	beq.n	80009c0 <__aeabi_fadd+0x190>
 80009f0:	001a      	movs	r2, r3
 80009f2:	2a1b      	cmp	r2, #27
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_fadd+0x1c8>
 80009f6:	e085      	b.n	8000b04 <__aeabi_fadd+0x2d4>
 80009f8:	2001      	movs	r0, #1
 80009fa:	003d      	movs	r5, r7
 80009fc:	1980      	adds	r0, r0, r6
 80009fe:	e785      	b.n	800090c <__aeabi_fadd+0xdc>
 8000a00:	2320      	movs	r3, #32
 8000a02:	003a      	movs	r2, r7
 8000a04:	1b45      	subs	r5, r0, r5
 8000a06:	0038      	movs	r0, r7
 8000a08:	3501      	adds	r5, #1
 8000a0a:	40ea      	lsrs	r2, r5
 8000a0c:	1b5d      	subs	r5, r3, r5
 8000a0e:	40a8      	lsls	r0, r5
 8000a10:	1e43      	subs	r3, r0, #1
 8000a12:	4198      	sbcs	r0, r3
 8000a14:	2500      	movs	r5, #0
 8000a16:	4310      	orrs	r0, r2
 8000a18:	e73e      	b.n	8000898 <__aeabi_fadd+0x68>
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	0030      	movs	r0, r6
 8000a1e:	1a9b      	subs	r3, r3, r2
 8000a20:	0031      	movs	r1, r6
 8000a22:	4098      	lsls	r0, r3
 8000a24:	40d1      	lsrs	r1, r2
 8000a26:	1e43      	subs	r3, r0, #1
 8000a28:	4198      	sbcs	r0, r3
 8000a2a:	4308      	orrs	r0, r1
 8000a2c:	e722      	b.n	8000874 <__aeabi_fadd+0x44>
 8000a2e:	000c      	movs	r4, r1
 8000a30:	0003      	movs	r3, r0
 8000a32:	0015      	movs	r5, r2
 8000a34:	e7b4      	b.n	80009a0 <__aeabi_fadd+0x170>
 8000a36:	2fff      	cmp	r7, #255	; 0xff
 8000a38:	d0c1      	beq.n	80009be <__aeabi_fadd+0x18e>
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	4640      	mov	r0, r8
 8000a3e:	04db      	lsls	r3, r3, #19
 8000a40:	4318      	orrs	r0, r3
 8000a42:	4680      	mov	r8, r0
 8000a44:	2a1b      	cmp	r2, #27
 8000a46:	dd51      	ble.n	8000aec <__aeabi_fadd+0x2bc>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	003d      	movs	r5, r7
 8000a4e:	1a30      	subs	r0, r6, r0
 8000a50:	e712      	b.n	8000878 <__aeabi_fadd+0x48>
 8000a52:	4643      	mov	r3, r8
 8000a54:	1b9f      	subs	r7, r3, r6
 8000a56:	017b      	lsls	r3, r7, #5
 8000a58:	d42b      	bmi.n	8000ab2 <__aeabi_fadd+0x282>
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x230>
 8000a5e:	e710      	b.n	8000882 <__aeabi_fadd+0x52>
 8000a60:	2300      	movs	r3, #0
 8000a62:	2400      	movs	r4, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	469c      	mov	ip, r3
 8000a68:	e727      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	0032      	movs	r2, r6
 8000a6e:	0030      	movs	r0, r6
 8000a70:	40ca      	lsrs	r2, r1
 8000a72:	1a59      	subs	r1, r3, r1
 8000a74:	4088      	lsls	r0, r1
 8000a76:	1e43      	subs	r3, r0, #1
 8000a78:	4198      	sbcs	r0, r3
 8000a7a:	4310      	orrs	r0, r2
 8000a7c:	e745      	b.n	800090a <__aeabi_fadd+0xda>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d14a      	bne.n	8000b18 <__aeabi_fadd+0x2e8>
 8000a82:	4643      	mov	r3, r8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d063      	beq.n	8000b50 <__aeabi_fadd+0x320>
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fadd+0x260>
 8000a8e:	e714      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000a90:	0030      	movs	r0, r6
 8000a92:	4440      	add	r0, r8
 8000a94:	0143      	lsls	r3, r0, #5
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_fadd+0x26a>
 8000a98:	e77e      	b.n	8000998 <__aeabi_fadd+0x168>
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <__aeabi_fadd+0x334>)
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	4018      	ands	r0, r3
 8000aa0:	e77a      	b.n	8000998 <__aeabi_fadd+0x168>
 8000aa2:	2fff      	cmp	r7, #255	; 0xff
 8000aa4:	d08c      	beq.n	80009c0 <__aeabi_fadd+0x190>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	4641      	mov	r1, r8
 8000aaa:	04db      	lsls	r3, r3, #19
 8000aac:	4319      	orrs	r1, r3
 8000aae:	4688      	mov	r8, r1
 8000ab0:	e79f      	b.n	80009f2 <__aeabi_fadd+0x1c2>
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	000c      	movs	r4, r1
 8000ab6:	1af7      	subs	r7, r6, r3
 8000ab8:	e6e3      	b.n	8000882 <__aeabi_fadd+0x52>
 8000aba:	4642      	mov	r2, r8
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fadd+0x292>
 8000ac0:	e775      	b.n	80009ae <__aeabi_fadd+0x17e>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fadd+0x298>
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0x18e>
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	03db      	lsls	r3, r3, #15
 8000acc:	2400      	movs	r4, #0
 8000ace:	469c      	mov	ip, r3
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	e6f2      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000ad4:	0030      	movs	r0, r6
 8000ad6:	4440      	add	r0, r8
 8000ad8:	2501      	movs	r5, #1
 8000ada:	0143      	lsls	r3, r0, #5
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_fadd+0x2b0>
 8000ade:	e75b      	b.n	8000998 <__aeabi_fadd+0x168>
 8000ae0:	2502      	movs	r5, #2
 8000ae2:	e718      	b.n	8000916 <__aeabi_fadd+0xe6>
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	2501      	movs	r5, #1
 8000ae8:	1b98      	subs	r0, r3, r6
 8000aea:	e6c5      	b.n	8000878 <__aeabi_fadd+0x48>
 8000aec:	2320      	movs	r3, #32
 8000aee:	4644      	mov	r4, r8
 8000af0:	4640      	mov	r0, r8
 8000af2:	40d4      	lsrs	r4, r2
 8000af4:	1a9a      	subs	r2, r3, r2
 8000af6:	4090      	lsls	r0, r2
 8000af8:	1e43      	subs	r3, r0, #1
 8000afa:	4198      	sbcs	r0, r3
 8000afc:	4320      	orrs	r0, r4
 8000afe:	e7a4      	b.n	8000a4a <__aeabi_fadd+0x21a>
 8000b00:	000d      	movs	r5, r1
 8000b02:	e74d      	b.n	80009a0 <__aeabi_fadd+0x170>
 8000b04:	2320      	movs	r3, #32
 8000b06:	4641      	mov	r1, r8
 8000b08:	4640      	mov	r0, r8
 8000b0a:	40d1      	lsrs	r1, r2
 8000b0c:	1a9a      	subs	r2, r3, r2
 8000b0e:	4090      	lsls	r0, r2
 8000b10:	1e43      	subs	r3, r0, #1
 8000b12:	4198      	sbcs	r0, r3
 8000b14:	4308      	orrs	r0, r1
 8000b16:	e770      	b.n	80009fa <__aeabi_fadd+0x1ca>
 8000b18:	4642      	mov	r2, r8
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fadd+0x2f0>
 8000b1e:	e74f      	b.n	80009c0 <__aeabi_fadd+0x190>
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fadd+0x2f6>
 8000b24:	e74d      	b.n	80009c2 <__aeabi_fadd+0x192>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	03d2      	lsls	r2, r2, #15
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fadd+0x300>
 8000b2e:	e748      	b.n	80009c2 <__aeabi_fadd+0x192>
 8000b30:	4210      	tst	r0, r2
 8000b32:	d000      	beq.n	8000b36 <__aeabi_fadd+0x306>
 8000b34:	e745      	b.n	80009c2 <__aeabi_fadd+0x192>
 8000b36:	0003      	movs	r3, r0
 8000b38:	e743      	b.n	80009c2 <__aeabi_fadd+0x192>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d090      	beq.n	8000a60 <__aeabi_fadd+0x230>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	4684      	mov	ip, r0
 8000b42:	2200      	movs	r2, #0
 8000b44:	e6b9      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000b46:	4643      	mov	r3, r8
 8000b48:	000c      	movs	r4, r1
 8000b4a:	1af0      	subs	r0, r6, r3
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	e693      	b.n	8000878 <__aeabi_fadd+0x48>
 8000b50:	4684      	mov	ip, r0
 8000b52:	2200      	movs	r2, #0
 8000b54:	e6b1      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fadd+0x32c>
 8000b5a:	e71d      	b.n	8000998 <__aeabi_fadd+0x168>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2400      	movs	r4, #0
 8000b60:	469c      	mov	ip, r3
 8000b62:	e6aa      	b.n	80008ba <__aeabi_fadd+0x8a>
 8000b64:	fbffffff 	.word	0xfbffffff
 8000b68:	7dffffff 	.word	0x7dffffff

08000b6c <__aeabi_fdiv>:
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	464f      	mov	r7, r9
 8000b70:	4646      	mov	r6, r8
 8000b72:	46d6      	mov	lr, sl
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	b5c0      	push	{r6, r7, lr}
 8000b78:	0047      	lsls	r7, r0, #1
 8000b7a:	1c0c      	adds	r4, r1, #0
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	0e3f      	lsrs	r7, r7, #24
 8000b80:	0fc6      	lsrs	r6, r0, #31
 8000b82:	2f00      	cmp	r7, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fdiv+0x1c>
 8000b86:	e070      	b.n	8000c6a <__aeabi_fdiv+0xfe>
 8000b88:	2fff      	cmp	r7, #255	; 0xff
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fdiv+0x22>
 8000b8c:	e075      	b.n	8000c7a <__aeabi_fdiv+0x10e>
 8000b8e:	00eb      	lsls	r3, r5, #3
 8000b90:	2580      	movs	r5, #128	; 0x80
 8000b92:	04ed      	lsls	r5, r5, #19
 8000b94:	431d      	orrs	r5, r3
 8000b96:	2300      	movs	r3, #0
 8000b98:	4699      	mov	r9, r3
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	3f7f      	subs	r7, #127	; 0x7f
 8000b9e:	0260      	lsls	r0, r4, #9
 8000ba0:	0a43      	lsrs	r3, r0, #9
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	0063      	lsls	r3, r4, #1
 8000ba6:	0e1b      	lsrs	r3, r3, #24
 8000ba8:	0fe4      	lsrs	r4, r4, #31
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d04e      	beq.n	8000c4c <__aeabi_fdiv+0xe0>
 8000bae:	2bff      	cmp	r3, #255	; 0xff
 8000bb0:	d046      	beq.n	8000c40 <__aeabi_fdiv+0xd4>
 8000bb2:	4642      	mov	r2, r8
 8000bb4:	00d0      	lsls	r0, r2, #3
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4302      	orrs	r2, r0
 8000bbc:	4690      	mov	r8, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	3b7f      	subs	r3, #127	; 0x7f
 8000bc2:	0031      	movs	r1, r6
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	464b      	mov	r3, r9
 8000bc8:	4061      	eors	r1, r4
 8000bca:	b2c9      	uxtb	r1, r1
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d900      	bls.n	8000bd4 <__aeabi_fdiv+0x68>
 8000bd2:	e0b5      	b.n	8000d40 <__aeabi_fdiv+0x1d4>
 8000bd4:	486e      	ldr	r0, [pc, #440]	; (8000d90 <__aeabi_fdiv+0x224>)
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	58c3      	ldr	r3, [r0, r3]
 8000bda:	469f      	mov	pc, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4698      	mov	r8, r3
 8000be0:	0026      	movs	r6, r4
 8000be2:	4645      	mov	r5, r8
 8000be4:	4692      	mov	sl, r2
 8000be6:	4653      	mov	r3, sl
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d100      	bne.n	8000bee <__aeabi_fdiv+0x82>
 8000bec:	e089      	b.n	8000d02 <__aeabi_fdiv+0x196>
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fdiv+0x88>
 8000bf2:	e09e      	b.n	8000d32 <__aeabi_fdiv+0x1c6>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d018      	beq.n	8000c2a <__aeabi_fdiv+0xbe>
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	337f      	adds	r3, #127	; 0x7f
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dd69      	ble.n	8000cd4 <__aeabi_fdiv+0x168>
 8000c00:	076a      	lsls	r2, r5, #29
 8000c02:	d004      	beq.n	8000c0e <__aeabi_fdiv+0xa2>
 8000c04:	220f      	movs	r2, #15
 8000c06:	402a      	ands	r2, r5
 8000c08:	2a04      	cmp	r2, #4
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fdiv+0xa2>
 8000c0c:	3504      	adds	r5, #4
 8000c0e:	012a      	lsls	r2, r5, #4
 8000c10:	d503      	bpl.n	8000c1a <__aeabi_fdiv+0xae>
 8000c12:	4b60      	ldr	r3, [pc, #384]	; (8000d94 <__aeabi_fdiv+0x228>)
 8000c14:	401d      	ands	r5, r3
 8000c16:	003b      	movs	r3, r7
 8000c18:	3380      	adds	r3, #128	; 0x80
 8000c1a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_fdiv+0xb4>
 8000c1e:	e070      	b.n	8000d02 <__aeabi_fdiv+0x196>
 8000c20:	01ad      	lsls	r5, r5, #6
 8000c22:	0a6d      	lsrs	r5, r5, #9
 8000c24:	b2d8      	uxtb	r0, r3
 8000c26:	e002      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000c28:	000e      	movs	r6, r1
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	05c0      	lsls	r0, r0, #23
 8000c30:	4328      	orrs	r0, r5
 8000c32:	07f6      	lsls	r6, r6, #31
 8000c34:	4330      	orrs	r0, r6
 8000c36:	bce0      	pop	{r5, r6, r7}
 8000c38:	46ba      	mov	sl, r7
 8000c3a:	46b1      	mov	r9, r6
 8000c3c:	46a8      	mov	r8, r5
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	4643      	mov	r3, r8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13f      	bne.n	8000cc6 <__aeabi_fdiv+0x15a>
 8000c46:	2202      	movs	r2, #2
 8000c48:	3fff      	subs	r7, #255	; 0xff
 8000c4a:	e003      	b.n	8000c54 <__aeabi_fdiv+0xe8>
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d12d      	bne.n	8000cae <__aeabi_fdiv+0x142>
 8000c52:	2201      	movs	r2, #1
 8000c54:	0031      	movs	r1, r6
 8000c56:	464b      	mov	r3, r9
 8000c58:	4061      	eors	r1, r4
 8000c5a:	b2c9      	uxtb	r1, r1
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d834      	bhi.n	8000ccc <__aeabi_fdiv+0x160>
 8000c62:	484d      	ldr	r0, [pc, #308]	; (8000d98 <__aeabi_fdiv+0x22c>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	58c3      	ldr	r3, [r0, r3]
 8000c68:	469f      	mov	pc, r3
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d113      	bne.n	8000c96 <__aeabi_fdiv+0x12a>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	4699      	mov	r9, r3
 8000c72:	3b03      	subs	r3, #3
 8000c74:	2700      	movs	r7, #0
 8000c76:	469a      	mov	sl, r3
 8000c78:	e791      	b.n	8000b9e <__aeabi_fdiv+0x32>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d105      	bne.n	8000c8a <__aeabi_fdiv+0x11e>
 8000c7e:	2308      	movs	r3, #8
 8000c80:	4699      	mov	r9, r3
 8000c82:	3b06      	subs	r3, #6
 8000c84:	27ff      	movs	r7, #255	; 0xff
 8000c86:	469a      	mov	sl, r3
 8000c88:	e789      	b.n	8000b9e <__aeabi_fdiv+0x32>
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	4699      	mov	r9, r3
 8000c8e:	3b09      	subs	r3, #9
 8000c90:	27ff      	movs	r7, #255	; 0xff
 8000c92:	469a      	mov	sl, r3
 8000c94:	e783      	b.n	8000b9e <__aeabi_fdiv+0x32>
 8000c96:	0028      	movs	r0, r5
 8000c98:	f002 f99c 	bl	8002fd4 <__clzsi2>
 8000c9c:	2776      	movs	r7, #118	; 0x76
 8000c9e:	1f43      	subs	r3, r0, #5
 8000ca0:	409d      	lsls	r5, r3
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	427f      	negs	r7, r7
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	469a      	mov	sl, r3
 8000caa:	1a3f      	subs	r7, r7, r0
 8000cac:	e777      	b.n	8000b9e <__aeabi_fdiv+0x32>
 8000cae:	4640      	mov	r0, r8
 8000cb0:	f002 f990 	bl	8002fd4 <__clzsi2>
 8000cb4:	4642      	mov	r2, r8
 8000cb6:	1f43      	subs	r3, r0, #5
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	2376      	movs	r3, #118	; 0x76
 8000cbc:	425b      	negs	r3, r3
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	1a1b      	subs	r3, r3, r0
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	e77d      	b.n	8000bc2 <__aeabi_fdiv+0x56>
 8000cc6:	23ff      	movs	r3, #255	; 0xff
 8000cc8:	2203      	movs	r2, #3
 8000cca:	e77a      	b.n	8000bc2 <__aeabi_fdiv+0x56>
 8000ccc:	000e      	movs	r6, r1
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	e7ac      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	1ac0      	subs	r0, r0, r3
 8000cd8:	281b      	cmp	r0, #27
 8000cda:	dca6      	bgt.n	8000c2a <__aeabi_fdiv+0xbe>
 8000cdc:	379e      	adds	r7, #158	; 0x9e
 8000cde:	002a      	movs	r2, r5
 8000ce0:	40bd      	lsls	r5, r7
 8000ce2:	40c2      	lsrs	r2, r0
 8000ce4:	1e6b      	subs	r3, r5, #1
 8000ce6:	419d      	sbcs	r5, r3
 8000ce8:	4315      	orrs	r5, r2
 8000cea:	076b      	lsls	r3, r5, #29
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_fdiv+0x18c>
 8000cee:	230f      	movs	r3, #15
 8000cf0:	402b      	ands	r3, r5
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fdiv+0x18c>
 8000cf6:	3504      	adds	r5, #4
 8000cf8:	016b      	lsls	r3, r5, #5
 8000cfa:	d544      	bpl.n	8000d86 <__aeabi_fdiv+0x21a>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	2500      	movs	r5, #0
 8000d00:	e795      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000d02:	20ff      	movs	r0, #255	; 0xff
 8000d04:	2500      	movs	r5, #0
 8000d06:	e792      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000d08:	2580      	movs	r5, #128	; 0x80
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	03ed      	lsls	r5, r5, #15
 8000d10:	e78d      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000d12:	2300      	movs	r3, #0
 8000d14:	4698      	mov	r8, r3
 8000d16:	2080      	movs	r0, #128	; 0x80
 8000d18:	03c0      	lsls	r0, r0, #15
 8000d1a:	4205      	tst	r5, r0
 8000d1c:	d009      	beq.n	8000d32 <__aeabi_fdiv+0x1c6>
 8000d1e:	4643      	mov	r3, r8
 8000d20:	4203      	tst	r3, r0
 8000d22:	d106      	bne.n	8000d32 <__aeabi_fdiv+0x1c6>
 8000d24:	4645      	mov	r5, r8
 8000d26:	4305      	orrs	r5, r0
 8000d28:	026d      	lsls	r5, r5, #9
 8000d2a:	0026      	movs	r6, r4
 8000d2c:	20ff      	movs	r0, #255	; 0xff
 8000d2e:	0a6d      	lsrs	r5, r5, #9
 8000d30:	e77d      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000d32:	2080      	movs	r0, #128	; 0x80
 8000d34:	03c0      	lsls	r0, r0, #15
 8000d36:	4305      	orrs	r5, r0
 8000d38:	026d      	lsls	r5, r5, #9
 8000d3a:	20ff      	movs	r0, #255	; 0xff
 8000d3c:	0a6d      	lsrs	r5, r5, #9
 8000d3e:	e776      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000d40:	4642      	mov	r2, r8
 8000d42:	016b      	lsls	r3, r5, #5
 8000d44:	0150      	lsls	r0, r2, #5
 8000d46:	4283      	cmp	r3, r0
 8000d48:	d219      	bcs.n	8000d7e <__aeabi_fdiv+0x212>
 8000d4a:	221b      	movs	r2, #27
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	3f01      	subs	r7, #1
 8000d50:	2601      	movs	r6, #1
 8000d52:	001c      	movs	r4, r3
 8000d54:	006d      	lsls	r5, r5, #1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	db01      	blt.n	8000d60 <__aeabi_fdiv+0x1f4>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	d801      	bhi.n	8000d64 <__aeabi_fdiv+0x1f8>
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	4335      	orrs	r5, r6
 8000d64:	3a01      	subs	r2, #1
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d1f3      	bne.n	8000d52 <__aeabi_fdiv+0x1e6>
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	4193      	sbcs	r3, r2
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	003b      	movs	r3, r7
 8000d72:	337f      	adds	r3, #127	; 0x7f
 8000d74:	000e      	movs	r6, r1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dd00      	ble.n	8000d7c <__aeabi_fdiv+0x210>
 8000d7a:	e741      	b.n	8000c00 <__aeabi_fdiv+0x94>
 8000d7c:	e7aa      	b.n	8000cd4 <__aeabi_fdiv+0x168>
 8000d7e:	221a      	movs	r2, #26
 8000d80:	2501      	movs	r5, #1
 8000d82:	1a1b      	subs	r3, r3, r0
 8000d84:	e7e4      	b.n	8000d50 <__aeabi_fdiv+0x1e4>
 8000d86:	01ad      	lsls	r5, r5, #6
 8000d88:	2000      	movs	r0, #0
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	e74f      	b.n	8000c2e <__aeabi_fdiv+0xc2>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	0800ad04 	.word	0x0800ad04
 8000d94:	f7ffffff 	.word	0xf7ffffff
 8000d98:	0800ad44 	.word	0x0800ad44

08000d9c <__eqsf2>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0245      	lsls	r5, r0, #9
 8000da2:	024e      	lsls	r6, r1, #9
 8000da4:	004c      	lsls	r4, r1, #1
 8000da6:	0fc3      	lsrs	r3, r0, #31
 8000da8:	0a6d      	lsrs	r5, r5, #9
 8000daa:	2001      	movs	r0, #1
 8000dac:	0e12      	lsrs	r2, r2, #24
 8000dae:	0a76      	lsrs	r6, r6, #9
 8000db0:	0e24      	lsrs	r4, r4, #24
 8000db2:	0fc9      	lsrs	r1, r1, #31
 8000db4:	2aff      	cmp	r2, #255	; 0xff
 8000db6:	d006      	beq.n	8000dc6 <__eqsf2+0x2a>
 8000db8:	2cff      	cmp	r4, #255	; 0xff
 8000dba:	d003      	beq.n	8000dc4 <__eqsf2+0x28>
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	d101      	bne.n	8000dc4 <__eqsf2+0x28>
 8000dc0:	42b5      	cmp	r5, r6
 8000dc2:	d006      	beq.n	8000dd2 <__eqsf2+0x36>
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d1fc      	bne.n	8000dc4 <__eqsf2+0x28>
 8000dca:	2cff      	cmp	r4, #255	; 0xff
 8000dcc:	d1fa      	bne.n	8000dc4 <__eqsf2+0x28>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d1f8      	bne.n	8000dc4 <__eqsf2+0x28>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d006      	beq.n	8000de4 <__eqsf2+0x48>
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d1f3      	bne.n	8000dc4 <__eqsf2+0x28>
 8000ddc:	0028      	movs	r0, r5
 8000dde:	1e43      	subs	r3, r0, #1
 8000de0:	4198      	sbcs	r0, r3
 8000de2:	e7ef      	b.n	8000dc4 <__eqsf2+0x28>
 8000de4:	2000      	movs	r0, #0
 8000de6:	e7ed      	b.n	8000dc4 <__eqsf2+0x28>

08000de8 <__gesf2>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	0042      	lsls	r2, r0, #1
 8000dec:	0245      	lsls	r5, r0, #9
 8000dee:	024e      	lsls	r6, r1, #9
 8000df0:	004c      	lsls	r4, r1, #1
 8000df2:	0fc3      	lsrs	r3, r0, #31
 8000df4:	0a6d      	lsrs	r5, r5, #9
 8000df6:	0e12      	lsrs	r2, r2, #24
 8000df8:	0a76      	lsrs	r6, r6, #9
 8000dfa:	0e24      	lsrs	r4, r4, #24
 8000dfc:	0fc8      	lsrs	r0, r1, #31
 8000dfe:	2aff      	cmp	r2, #255	; 0xff
 8000e00:	d01b      	beq.n	8000e3a <__gesf2+0x52>
 8000e02:	2cff      	cmp	r4, #255	; 0xff
 8000e04:	d00e      	beq.n	8000e24 <__gesf2+0x3c>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d11b      	bne.n	8000e42 <__gesf2+0x5a>
 8000e0a:	2c00      	cmp	r4, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x2a>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d01c      	beq.n	8000e4c <__gesf2+0x64>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d00c      	beq.n	8000e30 <__gesf2+0x48>
 8000e16:	4283      	cmp	r3, r0
 8000e18:	d01c      	beq.n	8000e54 <__gesf2+0x6c>
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	1e58      	subs	r0, r3, #1
 8000e1e:	4008      	ands	r0, r1
 8000e20:	3801      	subs	r0, #1
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d122      	bne.n	8000e6e <__gesf2+0x86>
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d1f4      	bne.n	8000e16 <__gesf2+0x2e>
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d1f2      	bne.n	8000e16 <__gesf2+0x2e>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d1f6      	bne.n	8000e22 <__gesf2+0x3a>
 8000e34:	2001      	movs	r0, #1
 8000e36:	4240      	negs	r0, r0
 8000e38:	e7f3      	b.n	8000e22 <__gesf2+0x3a>
 8000e3a:	2d00      	cmp	r5, #0
 8000e3c:	d117      	bne.n	8000e6e <__gesf2+0x86>
 8000e3e:	2cff      	cmp	r4, #255	; 0xff
 8000e40:	d0f0      	beq.n	8000e24 <__gesf2+0x3c>
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d1e7      	bne.n	8000e16 <__gesf2+0x2e>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d1e5      	bne.n	8000e16 <__gesf2+0x2e>
 8000e4a:	e7e6      	b.n	8000e1a <__gesf2+0x32>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0e7      	beq.n	8000e22 <__gesf2+0x3a>
 8000e52:	e7e2      	b.n	8000e1a <__gesf2+0x32>
 8000e54:	42a2      	cmp	r2, r4
 8000e56:	dc05      	bgt.n	8000e64 <__gesf2+0x7c>
 8000e58:	dbea      	blt.n	8000e30 <__gesf2+0x48>
 8000e5a:	42b5      	cmp	r5, r6
 8000e5c:	d802      	bhi.n	8000e64 <__gesf2+0x7c>
 8000e5e:	d3e7      	bcc.n	8000e30 <__gesf2+0x48>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7de      	b.n	8000e22 <__gesf2+0x3a>
 8000e64:	4243      	negs	r3, r0
 8000e66:	4158      	adcs	r0, r3
 8000e68:	0040      	lsls	r0, r0, #1
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7d9      	b.n	8000e22 <__gesf2+0x3a>
 8000e6e:	2002      	movs	r0, #2
 8000e70:	4240      	negs	r0, r0
 8000e72:	e7d6      	b.n	8000e22 <__gesf2+0x3a>

08000e74 <__lesf2>:
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	0042      	lsls	r2, r0, #1
 8000e78:	0245      	lsls	r5, r0, #9
 8000e7a:	024e      	lsls	r6, r1, #9
 8000e7c:	004c      	lsls	r4, r1, #1
 8000e7e:	0fc3      	lsrs	r3, r0, #31
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e12      	lsrs	r2, r2, #24
 8000e84:	0a76      	lsrs	r6, r6, #9
 8000e86:	0e24      	lsrs	r4, r4, #24
 8000e88:	0fc8      	lsrs	r0, r1, #31
 8000e8a:	2aff      	cmp	r2, #255	; 0xff
 8000e8c:	d00b      	beq.n	8000ea6 <__lesf2+0x32>
 8000e8e:	2cff      	cmp	r4, #255	; 0xff
 8000e90:	d00d      	beq.n	8000eae <__lesf2+0x3a>
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d11f      	bne.n	8000ed6 <__lesf2+0x62>
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	d116      	bne.n	8000ec8 <__lesf2+0x54>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d114      	bne.n	8000ec8 <__lesf2+0x54>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	2d00      	cmp	r5, #0
 8000ea2:	d010      	beq.n	8000ec6 <__lesf2+0x52>
 8000ea4:	e009      	b.n	8000eba <__lesf2+0x46>
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d10c      	bne.n	8000ec4 <__lesf2+0x50>
 8000eaa:	2cff      	cmp	r4, #255	; 0xff
 8000eac:	d113      	bne.n	8000ed6 <__lesf2+0x62>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	d108      	bne.n	8000ec4 <__lesf2+0x50>
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d008      	beq.n	8000ec8 <__lesf2+0x54>
 8000eb6:	4283      	cmp	r3, r0
 8000eb8:	d012      	beq.n	8000ee0 <__lesf2+0x6c>
 8000eba:	2102      	movs	r1, #2
 8000ebc:	1e58      	subs	r0, r3, #1
 8000ebe:	4008      	ands	r0, r1
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e000      	b.n	8000ec6 <__lesf2+0x52>
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	bd70      	pop	{r4, r5, r6, pc}
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d1f4      	bne.n	8000eb6 <__lesf2+0x42>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d1fa      	bne.n	8000ec6 <__lesf2+0x52>
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	4240      	negs	r0, r0
 8000ed4:	e7f7      	b.n	8000ec6 <__lesf2+0x52>
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	d1ed      	bne.n	8000eb6 <__lesf2+0x42>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d1eb      	bne.n	8000eb6 <__lesf2+0x42>
 8000ede:	e7ec      	b.n	8000eba <__lesf2+0x46>
 8000ee0:	42a2      	cmp	r2, r4
 8000ee2:	dc05      	bgt.n	8000ef0 <__lesf2+0x7c>
 8000ee4:	dbf2      	blt.n	8000ecc <__lesf2+0x58>
 8000ee6:	42b5      	cmp	r5, r6
 8000ee8:	d802      	bhi.n	8000ef0 <__lesf2+0x7c>
 8000eea:	d3ef      	bcc.n	8000ecc <__lesf2+0x58>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7ea      	b.n	8000ec6 <__lesf2+0x52>
 8000ef0:	4243      	negs	r3, r0
 8000ef2:	4158      	adcs	r0, r3
 8000ef4:	0040      	lsls	r0, r0, #1
 8000ef6:	3801      	subs	r0, #1
 8000ef8:	e7e5      	b.n	8000ec6 <__lesf2+0x52>
 8000efa:	46c0      	nop			; (mov r8, r8)

08000efc <__aeabi_fmul>:
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	464f      	mov	r7, r9
 8000f00:	4646      	mov	r6, r8
 8000f02:	46d6      	mov	lr, sl
 8000f04:	0244      	lsls	r4, r0, #9
 8000f06:	0045      	lsls	r5, r0, #1
 8000f08:	b5c0      	push	{r6, r7, lr}
 8000f0a:	0a64      	lsrs	r4, r4, #9
 8000f0c:	1c0f      	adds	r7, r1, #0
 8000f0e:	0e2d      	lsrs	r5, r5, #24
 8000f10:	0fc6      	lsrs	r6, r0, #31
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fmul+0x1c>
 8000f16:	e08d      	b.n	8001034 <__aeabi_fmul+0x138>
 8000f18:	2dff      	cmp	r5, #255	; 0xff
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_fmul+0x22>
 8000f1c:	e092      	b.n	8001044 <__aeabi_fmul+0x148>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2080      	movs	r0, #128	; 0x80
 8000f22:	4699      	mov	r9, r3
 8000f24:	469a      	mov	sl, r3
 8000f26:	00e4      	lsls	r4, r4, #3
 8000f28:	04c0      	lsls	r0, r0, #19
 8000f2a:	4304      	orrs	r4, r0
 8000f2c:	3d7f      	subs	r5, #127	; 0x7f
 8000f2e:	0278      	lsls	r0, r7, #9
 8000f30:	0a43      	lsrs	r3, r0, #9
 8000f32:	4698      	mov	r8, r3
 8000f34:	007b      	lsls	r3, r7, #1
 8000f36:	0e1b      	lsrs	r3, r3, #24
 8000f38:	0fff      	lsrs	r7, r7, #31
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fmul+0x44>
 8000f3e:	e070      	b.n	8001022 <__aeabi_fmul+0x126>
 8000f40:	2bff      	cmp	r3, #255	; 0xff
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fmul+0x4a>
 8000f44:	e086      	b.n	8001054 <__aeabi_fmul+0x158>
 8000f46:	4642      	mov	r2, r8
 8000f48:	00d0      	lsls	r0, r2, #3
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	3b7f      	subs	r3, #127	; 0x7f
 8000f4e:	18ed      	adds	r5, r5, r3
 8000f50:	2300      	movs	r3, #0
 8000f52:	04d2      	lsls	r2, r2, #19
 8000f54:	4302      	orrs	r2, r0
 8000f56:	4690      	mov	r8, r2
 8000f58:	469c      	mov	ip, r3
 8000f5a:	0031      	movs	r1, r6
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	4079      	eors	r1, r7
 8000f60:	1c68      	adds	r0, r5, #1
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	d81c      	bhi.n	8000fa0 <__aeabi_fmul+0xa4>
 8000f66:	4a76      	ldr	r2, [pc, #472]	; (8001140 <__aeabi_fmul+0x244>)
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	58d3      	ldr	r3, [r2, r3]
 8000f6c:	469f      	mov	pc, r3
 8000f6e:	0039      	movs	r1, r7
 8000f70:	4644      	mov	r4, r8
 8000f72:	46e2      	mov	sl, ip
 8000f74:	4653      	mov	r3, sl
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d00f      	beq.n	8000f9a <__aeabi_fmul+0x9e>
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fmul+0x84>
 8000f7e:	e0d7      	b.n	8001130 <__aeabi_fmul+0x234>
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d137      	bne.n	8000ff4 <__aeabi_fmul+0xf8>
 8000f84:	2000      	movs	r0, #0
 8000f86:	2400      	movs	r4, #0
 8000f88:	05c0      	lsls	r0, r0, #23
 8000f8a:	4320      	orrs	r0, r4
 8000f8c:	07c9      	lsls	r1, r1, #31
 8000f8e:	4308      	orrs	r0, r1
 8000f90:	bce0      	pop	{r5, r6, r7}
 8000f92:	46ba      	mov	sl, r7
 8000f94:	46b1      	mov	r9, r6
 8000f96:	46a8      	mov	r8, r5
 8000f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9a:	20ff      	movs	r0, #255	; 0xff
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	e7f3      	b.n	8000f88 <__aeabi_fmul+0x8c>
 8000fa0:	0c26      	lsrs	r6, r4, #16
 8000fa2:	0424      	lsls	r4, r4, #16
 8000fa4:	0c22      	lsrs	r2, r4, #16
 8000fa6:	4644      	mov	r4, r8
 8000fa8:	0424      	lsls	r4, r4, #16
 8000faa:	0c24      	lsrs	r4, r4, #16
 8000fac:	4643      	mov	r3, r8
 8000fae:	0027      	movs	r7, r4
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	4357      	muls	r7, r2
 8000fb4:	4374      	muls	r4, r6
 8000fb6:	435a      	muls	r2, r3
 8000fb8:	435e      	muls	r6, r3
 8000fba:	1912      	adds	r2, r2, r4
 8000fbc:	0c3b      	lsrs	r3, r7, #16
 8000fbe:	189b      	adds	r3, r3, r2
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	d903      	bls.n	8000fcc <__aeabi_fmul+0xd0>
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	0252      	lsls	r2, r2, #9
 8000fc8:	4694      	mov	ip, r2
 8000fca:	4466      	add	r6, ip
 8000fcc:	043f      	lsls	r7, r7, #16
 8000fce:	041a      	lsls	r2, r3, #16
 8000fd0:	0c3f      	lsrs	r7, r7, #16
 8000fd2:	19d2      	adds	r2, r2, r7
 8000fd4:	0194      	lsls	r4, r2, #6
 8000fd6:	1e67      	subs	r7, r4, #1
 8000fd8:	41bc      	sbcs	r4, r7
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	0e92      	lsrs	r2, r2, #26
 8000fde:	199b      	adds	r3, r3, r6
 8000fe0:	4314      	orrs	r4, r2
 8000fe2:	019b      	lsls	r3, r3, #6
 8000fe4:	431c      	orrs	r4, r3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	d400      	bmi.n	8000fec <__aeabi_fmul+0xf0>
 8000fea:	e09b      	b.n	8001124 <__aeabi_fmul+0x228>
 8000fec:	2301      	movs	r3, #1
 8000fee:	0862      	lsrs	r2, r4, #1
 8000ff0:	401c      	ands	r4, r3
 8000ff2:	4314      	orrs	r4, r2
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	327f      	adds	r2, #127	; 0x7f
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	dd64      	ble.n	80010c6 <__aeabi_fmul+0x1ca>
 8000ffc:	0763      	lsls	r3, r4, #29
 8000ffe:	d004      	beq.n	800100a <__aeabi_fmul+0x10e>
 8001000:	230f      	movs	r3, #15
 8001002:	4023      	ands	r3, r4
 8001004:	2b04      	cmp	r3, #4
 8001006:	d000      	beq.n	800100a <__aeabi_fmul+0x10e>
 8001008:	3404      	adds	r4, #4
 800100a:	0123      	lsls	r3, r4, #4
 800100c:	d503      	bpl.n	8001016 <__aeabi_fmul+0x11a>
 800100e:	0002      	movs	r2, r0
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <__aeabi_fmul+0x248>)
 8001012:	3280      	adds	r2, #128	; 0x80
 8001014:	401c      	ands	r4, r3
 8001016:	2afe      	cmp	r2, #254	; 0xfe
 8001018:	dcbf      	bgt.n	8000f9a <__aeabi_fmul+0x9e>
 800101a:	01a4      	lsls	r4, r4, #6
 800101c:	0a64      	lsrs	r4, r4, #9
 800101e:	b2d0      	uxtb	r0, r2
 8001020:	e7b2      	b.n	8000f88 <__aeabi_fmul+0x8c>
 8001022:	4643      	mov	r3, r8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d13d      	bne.n	80010a4 <__aeabi_fmul+0x1a8>
 8001028:	464a      	mov	r2, r9
 800102a:	3301      	adds	r3, #1
 800102c:	431a      	orrs	r2, r3
 800102e:	4691      	mov	r9, r2
 8001030:	469c      	mov	ip, r3
 8001032:	e792      	b.n	8000f5a <__aeabi_fmul+0x5e>
 8001034:	2c00      	cmp	r4, #0
 8001036:	d129      	bne.n	800108c <__aeabi_fmul+0x190>
 8001038:	2304      	movs	r3, #4
 800103a:	4699      	mov	r9, r3
 800103c:	3b03      	subs	r3, #3
 800103e:	2500      	movs	r5, #0
 8001040:	469a      	mov	sl, r3
 8001042:	e774      	b.n	8000f2e <__aeabi_fmul+0x32>
 8001044:	2c00      	cmp	r4, #0
 8001046:	d11b      	bne.n	8001080 <__aeabi_fmul+0x184>
 8001048:	2308      	movs	r3, #8
 800104a:	4699      	mov	r9, r3
 800104c:	3b06      	subs	r3, #6
 800104e:	25ff      	movs	r5, #255	; 0xff
 8001050:	469a      	mov	sl, r3
 8001052:	e76c      	b.n	8000f2e <__aeabi_fmul+0x32>
 8001054:	4643      	mov	r3, r8
 8001056:	35ff      	adds	r5, #255	; 0xff
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10b      	bne.n	8001074 <__aeabi_fmul+0x178>
 800105c:	2302      	movs	r3, #2
 800105e:	464a      	mov	r2, r9
 8001060:	431a      	orrs	r2, r3
 8001062:	4691      	mov	r9, r2
 8001064:	469c      	mov	ip, r3
 8001066:	e778      	b.n	8000f5a <__aeabi_fmul+0x5e>
 8001068:	4653      	mov	r3, sl
 800106a:	0031      	movs	r1, r6
 800106c:	2b02      	cmp	r3, #2
 800106e:	d000      	beq.n	8001072 <__aeabi_fmul+0x176>
 8001070:	e783      	b.n	8000f7a <__aeabi_fmul+0x7e>
 8001072:	e792      	b.n	8000f9a <__aeabi_fmul+0x9e>
 8001074:	2303      	movs	r3, #3
 8001076:	464a      	mov	r2, r9
 8001078:	431a      	orrs	r2, r3
 800107a:	4691      	mov	r9, r2
 800107c:	469c      	mov	ip, r3
 800107e:	e76c      	b.n	8000f5a <__aeabi_fmul+0x5e>
 8001080:	230c      	movs	r3, #12
 8001082:	4699      	mov	r9, r3
 8001084:	3b09      	subs	r3, #9
 8001086:	25ff      	movs	r5, #255	; 0xff
 8001088:	469a      	mov	sl, r3
 800108a:	e750      	b.n	8000f2e <__aeabi_fmul+0x32>
 800108c:	0020      	movs	r0, r4
 800108e:	f001 ffa1 	bl	8002fd4 <__clzsi2>
 8001092:	2576      	movs	r5, #118	; 0x76
 8001094:	1f43      	subs	r3, r0, #5
 8001096:	409c      	lsls	r4, r3
 8001098:	2300      	movs	r3, #0
 800109a:	426d      	negs	r5, r5
 800109c:	4699      	mov	r9, r3
 800109e:	469a      	mov	sl, r3
 80010a0:	1a2d      	subs	r5, r5, r0
 80010a2:	e744      	b.n	8000f2e <__aeabi_fmul+0x32>
 80010a4:	4640      	mov	r0, r8
 80010a6:	f001 ff95 	bl	8002fd4 <__clzsi2>
 80010aa:	4642      	mov	r2, r8
 80010ac:	1f43      	subs	r3, r0, #5
 80010ae:	409a      	lsls	r2, r3
 80010b0:	2300      	movs	r3, #0
 80010b2:	1a2d      	subs	r5, r5, r0
 80010b4:	4690      	mov	r8, r2
 80010b6:	469c      	mov	ip, r3
 80010b8:	3d76      	subs	r5, #118	; 0x76
 80010ba:	e74e      	b.n	8000f5a <__aeabi_fmul+0x5e>
 80010bc:	2480      	movs	r4, #128	; 0x80
 80010be:	2100      	movs	r1, #0
 80010c0:	20ff      	movs	r0, #255	; 0xff
 80010c2:	03e4      	lsls	r4, r4, #15
 80010c4:	e760      	b.n	8000f88 <__aeabi_fmul+0x8c>
 80010c6:	2301      	movs	r3, #1
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1d4>
 80010ce:	e759      	b.n	8000f84 <__aeabi_fmul+0x88>
 80010d0:	0022      	movs	r2, r4
 80010d2:	309e      	adds	r0, #158	; 0x9e
 80010d4:	40da      	lsrs	r2, r3
 80010d6:	4084      	lsls	r4, r0
 80010d8:	0013      	movs	r3, r2
 80010da:	1e62      	subs	r2, r4, #1
 80010dc:	4194      	sbcs	r4, r2
 80010de:	431c      	orrs	r4, r3
 80010e0:	0763      	lsls	r3, r4, #29
 80010e2:	d004      	beq.n	80010ee <__aeabi_fmul+0x1f2>
 80010e4:	230f      	movs	r3, #15
 80010e6:	4023      	ands	r3, r4
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d000      	beq.n	80010ee <__aeabi_fmul+0x1f2>
 80010ec:	3404      	adds	r4, #4
 80010ee:	0163      	lsls	r3, r4, #5
 80010f0:	d51a      	bpl.n	8001128 <__aeabi_fmul+0x22c>
 80010f2:	2001      	movs	r0, #1
 80010f4:	2400      	movs	r4, #0
 80010f6:	e747      	b.n	8000f88 <__aeabi_fmul+0x8c>
 80010f8:	2080      	movs	r0, #128	; 0x80
 80010fa:	03c0      	lsls	r0, r0, #15
 80010fc:	4204      	tst	r4, r0
 80010fe:	d009      	beq.n	8001114 <__aeabi_fmul+0x218>
 8001100:	4643      	mov	r3, r8
 8001102:	4203      	tst	r3, r0
 8001104:	d106      	bne.n	8001114 <__aeabi_fmul+0x218>
 8001106:	4644      	mov	r4, r8
 8001108:	4304      	orrs	r4, r0
 800110a:	0264      	lsls	r4, r4, #9
 800110c:	0039      	movs	r1, r7
 800110e:	20ff      	movs	r0, #255	; 0xff
 8001110:	0a64      	lsrs	r4, r4, #9
 8001112:	e739      	b.n	8000f88 <__aeabi_fmul+0x8c>
 8001114:	2080      	movs	r0, #128	; 0x80
 8001116:	03c0      	lsls	r0, r0, #15
 8001118:	4304      	orrs	r4, r0
 800111a:	0264      	lsls	r4, r4, #9
 800111c:	0031      	movs	r1, r6
 800111e:	20ff      	movs	r0, #255	; 0xff
 8001120:	0a64      	lsrs	r4, r4, #9
 8001122:	e731      	b.n	8000f88 <__aeabi_fmul+0x8c>
 8001124:	0028      	movs	r0, r5
 8001126:	e765      	b.n	8000ff4 <__aeabi_fmul+0xf8>
 8001128:	01a4      	lsls	r4, r4, #6
 800112a:	2000      	movs	r0, #0
 800112c:	0a64      	lsrs	r4, r4, #9
 800112e:	e72b      	b.n	8000f88 <__aeabi_fmul+0x8c>
 8001130:	2080      	movs	r0, #128	; 0x80
 8001132:	03c0      	lsls	r0, r0, #15
 8001134:	4304      	orrs	r4, r0
 8001136:	0264      	lsls	r4, r4, #9
 8001138:	20ff      	movs	r0, #255	; 0xff
 800113a:	0a64      	lsrs	r4, r4, #9
 800113c:	e724      	b.n	8000f88 <__aeabi_fmul+0x8c>
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	0800ad84 	.word	0x0800ad84
 8001144:	f7ffffff 	.word	0xf7ffffff

08001148 <__aeabi_i2f>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	2800      	cmp	r0, #0
 800114c:	d013      	beq.n	8001176 <__aeabi_i2f+0x2e>
 800114e:	17c3      	asrs	r3, r0, #31
 8001150:	18c6      	adds	r6, r0, r3
 8001152:	405e      	eors	r6, r3
 8001154:	0fc4      	lsrs	r4, r0, #31
 8001156:	0030      	movs	r0, r6
 8001158:	f001 ff3c 	bl	8002fd4 <__clzsi2>
 800115c:	239e      	movs	r3, #158	; 0x9e
 800115e:	0005      	movs	r5, r0
 8001160:	1a1b      	subs	r3, r3, r0
 8001162:	2b96      	cmp	r3, #150	; 0x96
 8001164:	dc0f      	bgt.n	8001186 <__aeabi_i2f+0x3e>
 8001166:	2808      	cmp	r0, #8
 8001168:	dd01      	ble.n	800116e <__aeabi_i2f+0x26>
 800116a:	3d08      	subs	r5, #8
 800116c:	40ae      	lsls	r6, r5
 800116e:	0276      	lsls	r6, r6, #9
 8001170:	0a76      	lsrs	r6, r6, #9
 8001172:	b2d8      	uxtb	r0, r3
 8001174:	e002      	b.n	800117c <__aeabi_i2f+0x34>
 8001176:	2400      	movs	r4, #0
 8001178:	2000      	movs	r0, #0
 800117a:	2600      	movs	r6, #0
 800117c:	05c0      	lsls	r0, r0, #23
 800117e:	4330      	orrs	r0, r6
 8001180:	07e4      	lsls	r4, r4, #31
 8001182:	4320      	orrs	r0, r4
 8001184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001186:	2b99      	cmp	r3, #153	; 0x99
 8001188:	dd0c      	ble.n	80011a4 <__aeabi_i2f+0x5c>
 800118a:	2205      	movs	r2, #5
 800118c:	0031      	movs	r1, r6
 800118e:	1a12      	subs	r2, r2, r0
 8001190:	40d1      	lsrs	r1, r2
 8001192:	000a      	movs	r2, r1
 8001194:	0001      	movs	r1, r0
 8001196:	0030      	movs	r0, r6
 8001198:	311b      	adds	r1, #27
 800119a:	4088      	lsls	r0, r1
 800119c:	1e41      	subs	r1, r0, #1
 800119e:	4188      	sbcs	r0, r1
 80011a0:	4302      	orrs	r2, r0
 80011a2:	0016      	movs	r6, r2
 80011a4:	2d05      	cmp	r5, #5
 80011a6:	dc12      	bgt.n	80011ce <__aeabi_i2f+0x86>
 80011a8:	0031      	movs	r1, r6
 80011aa:	4f0d      	ldr	r7, [pc, #52]	; (80011e0 <__aeabi_i2f+0x98>)
 80011ac:	4039      	ands	r1, r7
 80011ae:	0772      	lsls	r2, r6, #29
 80011b0:	d009      	beq.n	80011c6 <__aeabi_i2f+0x7e>
 80011b2:	200f      	movs	r0, #15
 80011b4:	4030      	ands	r0, r6
 80011b6:	2804      	cmp	r0, #4
 80011b8:	d005      	beq.n	80011c6 <__aeabi_i2f+0x7e>
 80011ba:	3104      	adds	r1, #4
 80011bc:	014a      	lsls	r2, r1, #5
 80011be:	d502      	bpl.n	80011c6 <__aeabi_i2f+0x7e>
 80011c0:	239f      	movs	r3, #159	; 0x9f
 80011c2:	4039      	ands	r1, r7
 80011c4:	1b5b      	subs	r3, r3, r5
 80011c6:	0189      	lsls	r1, r1, #6
 80011c8:	0a4e      	lsrs	r6, r1, #9
 80011ca:	b2d8      	uxtb	r0, r3
 80011cc:	e7d6      	b.n	800117c <__aeabi_i2f+0x34>
 80011ce:	1f6a      	subs	r2, r5, #5
 80011d0:	4096      	lsls	r6, r2
 80011d2:	0031      	movs	r1, r6
 80011d4:	4f02      	ldr	r7, [pc, #8]	; (80011e0 <__aeabi_i2f+0x98>)
 80011d6:	4039      	ands	r1, r7
 80011d8:	0772      	lsls	r2, r6, #29
 80011da:	d0f4      	beq.n	80011c6 <__aeabi_i2f+0x7e>
 80011dc:	e7e9      	b.n	80011b2 <__aeabi_i2f+0x6a>
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	fbffffff 	.word	0xfbffffff

080011e4 <__aeabi_ui2f>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	1e05      	subs	r5, r0, #0
 80011e8:	d00e      	beq.n	8001208 <__aeabi_ui2f+0x24>
 80011ea:	f001 fef3 	bl	8002fd4 <__clzsi2>
 80011ee:	239e      	movs	r3, #158	; 0x9e
 80011f0:	0004      	movs	r4, r0
 80011f2:	1a1b      	subs	r3, r3, r0
 80011f4:	2b96      	cmp	r3, #150	; 0x96
 80011f6:	dc0c      	bgt.n	8001212 <__aeabi_ui2f+0x2e>
 80011f8:	2808      	cmp	r0, #8
 80011fa:	dd01      	ble.n	8001200 <__aeabi_ui2f+0x1c>
 80011fc:	3c08      	subs	r4, #8
 80011fe:	40a5      	lsls	r5, r4
 8001200:	026d      	lsls	r5, r5, #9
 8001202:	0a6d      	lsrs	r5, r5, #9
 8001204:	b2d8      	uxtb	r0, r3
 8001206:	e001      	b.n	800120c <__aeabi_ui2f+0x28>
 8001208:	2000      	movs	r0, #0
 800120a:	2500      	movs	r5, #0
 800120c:	05c0      	lsls	r0, r0, #23
 800120e:	4328      	orrs	r0, r5
 8001210:	bd70      	pop	{r4, r5, r6, pc}
 8001212:	2b99      	cmp	r3, #153	; 0x99
 8001214:	dd09      	ble.n	800122a <__aeabi_ui2f+0x46>
 8001216:	0002      	movs	r2, r0
 8001218:	0029      	movs	r1, r5
 800121a:	321b      	adds	r2, #27
 800121c:	4091      	lsls	r1, r2
 800121e:	1e4a      	subs	r2, r1, #1
 8001220:	4191      	sbcs	r1, r2
 8001222:	2205      	movs	r2, #5
 8001224:	1a12      	subs	r2, r2, r0
 8001226:	40d5      	lsrs	r5, r2
 8001228:	430d      	orrs	r5, r1
 800122a:	2c05      	cmp	r4, #5
 800122c:	dc12      	bgt.n	8001254 <__aeabi_ui2f+0x70>
 800122e:	0029      	movs	r1, r5
 8001230:	4e0c      	ldr	r6, [pc, #48]	; (8001264 <__aeabi_ui2f+0x80>)
 8001232:	4031      	ands	r1, r6
 8001234:	076a      	lsls	r2, r5, #29
 8001236:	d009      	beq.n	800124c <__aeabi_ui2f+0x68>
 8001238:	200f      	movs	r0, #15
 800123a:	4028      	ands	r0, r5
 800123c:	2804      	cmp	r0, #4
 800123e:	d005      	beq.n	800124c <__aeabi_ui2f+0x68>
 8001240:	3104      	adds	r1, #4
 8001242:	014a      	lsls	r2, r1, #5
 8001244:	d502      	bpl.n	800124c <__aeabi_ui2f+0x68>
 8001246:	239f      	movs	r3, #159	; 0x9f
 8001248:	4031      	ands	r1, r6
 800124a:	1b1b      	subs	r3, r3, r4
 800124c:	0189      	lsls	r1, r1, #6
 800124e:	0a4d      	lsrs	r5, r1, #9
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	e7db      	b.n	800120c <__aeabi_ui2f+0x28>
 8001254:	1f62      	subs	r2, r4, #5
 8001256:	4095      	lsls	r5, r2
 8001258:	0029      	movs	r1, r5
 800125a:	4e02      	ldr	r6, [pc, #8]	; (8001264 <__aeabi_ui2f+0x80>)
 800125c:	4031      	ands	r1, r6
 800125e:	076a      	lsls	r2, r5, #29
 8001260:	d0f4      	beq.n	800124c <__aeabi_ui2f+0x68>
 8001262:	e7e9      	b.n	8001238 <__aeabi_ui2f+0x54>
 8001264:	fbffffff 	.word	0xfbffffff

08001268 <__aeabi_dadd>:
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	464f      	mov	r7, r9
 800126c:	4646      	mov	r6, r8
 800126e:	46d6      	mov	lr, sl
 8001270:	000d      	movs	r5, r1
 8001272:	0004      	movs	r4, r0
 8001274:	b5c0      	push	{r6, r7, lr}
 8001276:	001f      	movs	r7, r3
 8001278:	0011      	movs	r1, r2
 800127a:	0328      	lsls	r0, r5, #12
 800127c:	0f62      	lsrs	r2, r4, #29
 800127e:	0a40      	lsrs	r0, r0, #9
 8001280:	4310      	orrs	r0, r2
 8001282:	007a      	lsls	r2, r7, #1
 8001284:	0d52      	lsrs	r2, r2, #21
 8001286:	00e3      	lsls	r3, r4, #3
 8001288:	033c      	lsls	r4, r7, #12
 800128a:	4691      	mov	r9, r2
 800128c:	0a64      	lsrs	r4, r4, #9
 800128e:	0ffa      	lsrs	r2, r7, #31
 8001290:	0f4f      	lsrs	r7, r1, #29
 8001292:	006e      	lsls	r6, r5, #1
 8001294:	4327      	orrs	r7, r4
 8001296:	4692      	mov	sl, r2
 8001298:	46b8      	mov	r8, r7
 800129a:	0d76      	lsrs	r6, r6, #21
 800129c:	0fed      	lsrs	r5, r5, #31
 800129e:	00c9      	lsls	r1, r1, #3
 80012a0:	4295      	cmp	r5, r2
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x3e>
 80012a4:	e099      	b.n	80013da <__aeabi_dadd+0x172>
 80012a6:	464c      	mov	r4, r9
 80012a8:	1b34      	subs	r4, r6, r4
 80012aa:	46a4      	mov	ip, r4
 80012ac:	2c00      	cmp	r4, #0
 80012ae:	dc00      	bgt.n	80012b2 <__aeabi_dadd+0x4a>
 80012b0:	e07c      	b.n	80013ac <__aeabi_dadd+0x144>
 80012b2:	464a      	mov	r2, r9
 80012b4:	2a00      	cmp	r2, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x52>
 80012b8:	e0b8      	b.n	800142c <__aeabi_dadd+0x1c4>
 80012ba:	4ac5      	ldr	r2, [pc, #788]	; (80015d0 <__aeabi_dadd+0x368>)
 80012bc:	4296      	cmp	r6, r2
 80012be:	d100      	bne.n	80012c2 <__aeabi_dadd+0x5a>
 80012c0:	e11c      	b.n	80014fc <__aeabi_dadd+0x294>
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	003c      	movs	r4, r7
 80012c6:	0412      	lsls	r2, r2, #16
 80012c8:	4314      	orrs	r4, r2
 80012ca:	46a0      	mov	r8, r4
 80012cc:	4662      	mov	r2, ip
 80012ce:	2a38      	cmp	r2, #56	; 0x38
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_dadd+0x6c>
 80012d2:	e161      	b.n	8001598 <__aeabi_dadd+0x330>
 80012d4:	2a1f      	cmp	r2, #31
 80012d6:	dd00      	ble.n	80012da <__aeabi_dadd+0x72>
 80012d8:	e1cc      	b.n	8001674 <__aeabi_dadd+0x40c>
 80012da:	4664      	mov	r4, ip
 80012dc:	2220      	movs	r2, #32
 80012de:	1b12      	subs	r2, r2, r4
 80012e0:	4644      	mov	r4, r8
 80012e2:	4094      	lsls	r4, r2
 80012e4:	000f      	movs	r7, r1
 80012e6:	46a1      	mov	r9, r4
 80012e8:	4664      	mov	r4, ip
 80012ea:	4091      	lsls	r1, r2
 80012ec:	40e7      	lsrs	r7, r4
 80012ee:	464c      	mov	r4, r9
 80012f0:	1e4a      	subs	r2, r1, #1
 80012f2:	4191      	sbcs	r1, r2
 80012f4:	433c      	orrs	r4, r7
 80012f6:	4642      	mov	r2, r8
 80012f8:	4321      	orrs	r1, r4
 80012fa:	4664      	mov	r4, ip
 80012fc:	40e2      	lsrs	r2, r4
 80012fe:	1a80      	subs	r0, r0, r2
 8001300:	1a5c      	subs	r4, r3, r1
 8001302:	42a3      	cmp	r3, r4
 8001304:	419b      	sbcs	r3, r3
 8001306:	425f      	negs	r7, r3
 8001308:	1bc7      	subs	r7, r0, r7
 800130a:	023b      	lsls	r3, r7, #8
 800130c:	d400      	bmi.n	8001310 <__aeabi_dadd+0xa8>
 800130e:	e0d0      	b.n	80014b2 <__aeabi_dadd+0x24a>
 8001310:	027f      	lsls	r7, r7, #9
 8001312:	0a7f      	lsrs	r7, r7, #9
 8001314:	2f00      	cmp	r7, #0
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0xb2>
 8001318:	e0ff      	b.n	800151a <__aeabi_dadd+0x2b2>
 800131a:	0038      	movs	r0, r7
 800131c:	f001 fe5a 	bl	8002fd4 <__clzsi2>
 8001320:	0001      	movs	r1, r0
 8001322:	3908      	subs	r1, #8
 8001324:	2320      	movs	r3, #32
 8001326:	0022      	movs	r2, r4
 8001328:	1a5b      	subs	r3, r3, r1
 800132a:	408f      	lsls	r7, r1
 800132c:	40da      	lsrs	r2, r3
 800132e:	408c      	lsls	r4, r1
 8001330:	4317      	orrs	r7, r2
 8001332:	42b1      	cmp	r1, r6
 8001334:	da00      	bge.n	8001338 <__aeabi_dadd+0xd0>
 8001336:	e0ff      	b.n	8001538 <__aeabi_dadd+0x2d0>
 8001338:	1b89      	subs	r1, r1, r6
 800133a:	1c4b      	adds	r3, r1, #1
 800133c:	2b1f      	cmp	r3, #31
 800133e:	dd00      	ble.n	8001342 <__aeabi_dadd+0xda>
 8001340:	e0a8      	b.n	8001494 <__aeabi_dadd+0x22c>
 8001342:	2220      	movs	r2, #32
 8001344:	0039      	movs	r1, r7
 8001346:	1ad2      	subs	r2, r2, r3
 8001348:	0020      	movs	r0, r4
 800134a:	4094      	lsls	r4, r2
 800134c:	4091      	lsls	r1, r2
 800134e:	40d8      	lsrs	r0, r3
 8001350:	1e62      	subs	r2, r4, #1
 8001352:	4194      	sbcs	r4, r2
 8001354:	40df      	lsrs	r7, r3
 8001356:	2600      	movs	r6, #0
 8001358:	4301      	orrs	r1, r0
 800135a:	430c      	orrs	r4, r1
 800135c:	0763      	lsls	r3, r4, #29
 800135e:	d009      	beq.n	8001374 <__aeabi_dadd+0x10c>
 8001360:	230f      	movs	r3, #15
 8001362:	4023      	ands	r3, r4
 8001364:	2b04      	cmp	r3, #4
 8001366:	d005      	beq.n	8001374 <__aeabi_dadd+0x10c>
 8001368:	1d23      	adds	r3, r4, #4
 800136a:	42a3      	cmp	r3, r4
 800136c:	41a4      	sbcs	r4, r4
 800136e:	4264      	negs	r4, r4
 8001370:	193f      	adds	r7, r7, r4
 8001372:	001c      	movs	r4, r3
 8001374:	023b      	lsls	r3, r7, #8
 8001376:	d400      	bmi.n	800137a <__aeabi_dadd+0x112>
 8001378:	e09e      	b.n	80014b8 <__aeabi_dadd+0x250>
 800137a:	4b95      	ldr	r3, [pc, #596]	; (80015d0 <__aeabi_dadd+0x368>)
 800137c:	3601      	adds	r6, #1
 800137e:	429e      	cmp	r6, r3
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x11c>
 8001382:	e0b7      	b.n	80014f4 <__aeabi_dadd+0x28c>
 8001384:	4a93      	ldr	r2, [pc, #588]	; (80015d4 <__aeabi_dadd+0x36c>)
 8001386:	08e4      	lsrs	r4, r4, #3
 8001388:	4017      	ands	r7, r2
 800138a:	077b      	lsls	r3, r7, #29
 800138c:	0571      	lsls	r1, r6, #21
 800138e:	027f      	lsls	r7, r7, #9
 8001390:	4323      	orrs	r3, r4
 8001392:	0b3f      	lsrs	r7, r7, #12
 8001394:	0d4a      	lsrs	r2, r1, #21
 8001396:	0512      	lsls	r2, r2, #20
 8001398:	433a      	orrs	r2, r7
 800139a:	07ed      	lsls	r5, r5, #31
 800139c:	432a      	orrs	r2, r5
 800139e:	0018      	movs	r0, r3
 80013a0:	0011      	movs	r1, r2
 80013a2:	bce0      	pop	{r5, r6, r7}
 80013a4:	46ba      	mov	sl, r7
 80013a6:	46b1      	mov	r9, r6
 80013a8:	46a8      	mov	r8, r5
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d04b      	beq.n	8001448 <__aeabi_dadd+0x1e0>
 80013b0:	464c      	mov	r4, r9
 80013b2:	1ba4      	subs	r4, r4, r6
 80013b4:	46a4      	mov	ip, r4
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x154>
 80013ba:	e123      	b.n	8001604 <__aeabi_dadd+0x39c>
 80013bc:	0004      	movs	r4, r0
 80013be:	431c      	orrs	r4, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0x15c>
 80013c2:	e1af      	b.n	8001724 <__aeabi_dadd+0x4bc>
 80013c4:	4662      	mov	r2, ip
 80013c6:	1e54      	subs	r4, r2, #1
 80013c8:	2a01      	cmp	r2, #1
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x166>
 80013cc:	e215      	b.n	80017fa <__aeabi_dadd+0x592>
 80013ce:	4d80      	ldr	r5, [pc, #512]	; (80015d0 <__aeabi_dadd+0x368>)
 80013d0:	45ac      	cmp	ip, r5
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x16e>
 80013d4:	e1c8      	b.n	8001768 <__aeabi_dadd+0x500>
 80013d6:	46a4      	mov	ip, r4
 80013d8:	e11b      	b.n	8001612 <__aeabi_dadd+0x3aa>
 80013da:	464a      	mov	r2, r9
 80013dc:	1ab2      	subs	r2, r6, r2
 80013de:	4694      	mov	ip, r2
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	dc00      	bgt.n	80013e6 <__aeabi_dadd+0x17e>
 80013e4:	e0ac      	b.n	8001540 <__aeabi_dadd+0x2d8>
 80013e6:	464a      	mov	r2, r9
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d043      	beq.n	8001474 <__aeabi_dadd+0x20c>
 80013ec:	4a78      	ldr	r2, [pc, #480]	; (80015d0 <__aeabi_dadd+0x368>)
 80013ee:	4296      	cmp	r6, r2
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x18c>
 80013f2:	e1af      	b.n	8001754 <__aeabi_dadd+0x4ec>
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	003c      	movs	r4, r7
 80013f8:	0412      	lsls	r2, r2, #16
 80013fa:	4314      	orrs	r4, r2
 80013fc:	46a0      	mov	r8, r4
 80013fe:	4662      	mov	r2, ip
 8001400:	2a38      	cmp	r2, #56	; 0x38
 8001402:	dc67      	bgt.n	80014d4 <__aeabi_dadd+0x26c>
 8001404:	2a1f      	cmp	r2, #31
 8001406:	dc00      	bgt.n	800140a <__aeabi_dadd+0x1a2>
 8001408:	e15f      	b.n	80016ca <__aeabi_dadd+0x462>
 800140a:	4647      	mov	r7, r8
 800140c:	3a20      	subs	r2, #32
 800140e:	40d7      	lsrs	r7, r2
 8001410:	4662      	mov	r2, ip
 8001412:	2a20      	cmp	r2, #32
 8001414:	d005      	beq.n	8001422 <__aeabi_dadd+0x1ba>
 8001416:	4664      	mov	r4, ip
 8001418:	2240      	movs	r2, #64	; 0x40
 800141a:	1b12      	subs	r2, r2, r4
 800141c:	4644      	mov	r4, r8
 800141e:	4094      	lsls	r4, r2
 8001420:	4321      	orrs	r1, r4
 8001422:	1e4a      	subs	r2, r1, #1
 8001424:	4191      	sbcs	r1, r2
 8001426:	000c      	movs	r4, r1
 8001428:	433c      	orrs	r4, r7
 800142a:	e057      	b.n	80014dc <__aeabi_dadd+0x274>
 800142c:	003a      	movs	r2, r7
 800142e:	430a      	orrs	r2, r1
 8001430:	d100      	bne.n	8001434 <__aeabi_dadd+0x1cc>
 8001432:	e105      	b.n	8001640 <__aeabi_dadd+0x3d8>
 8001434:	0022      	movs	r2, r4
 8001436:	3a01      	subs	r2, #1
 8001438:	2c01      	cmp	r4, #1
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x1d6>
 800143c:	e182      	b.n	8001744 <__aeabi_dadd+0x4dc>
 800143e:	4c64      	ldr	r4, [pc, #400]	; (80015d0 <__aeabi_dadd+0x368>)
 8001440:	45a4      	cmp	ip, r4
 8001442:	d05b      	beq.n	80014fc <__aeabi_dadd+0x294>
 8001444:	4694      	mov	ip, r2
 8001446:	e741      	b.n	80012cc <__aeabi_dadd+0x64>
 8001448:	4c63      	ldr	r4, [pc, #396]	; (80015d8 <__aeabi_dadd+0x370>)
 800144a:	1c77      	adds	r7, r6, #1
 800144c:	4227      	tst	r7, r4
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x1ea>
 8001450:	e0c4      	b.n	80015dc <__aeabi_dadd+0x374>
 8001452:	0004      	movs	r4, r0
 8001454:	431c      	orrs	r4, r3
 8001456:	2e00      	cmp	r6, #0
 8001458:	d000      	beq.n	800145c <__aeabi_dadd+0x1f4>
 800145a:	e169      	b.n	8001730 <__aeabi_dadd+0x4c8>
 800145c:	2c00      	cmp	r4, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x1fa>
 8001460:	e1bf      	b.n	80017e2 <__aeabi_dadd+0x57a>
 8001462:	4644      	mov	r4, r8
 8001464:	430c      	orrs	r4, r1
 8001466:	d000      	beq.n	800146a <__aeabi_dadd+0x202>
 8001468:	e1d0      	b.n	800180c <__aeabi_dadd+0x5a4>
 800146a:	0742      	lsls	r2, r0, #29
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	4313      	orrs	r3, r2
 8001470:	08c0      	lsrs	r0, r0, #3
 8001472:	e029      	b.n	80014c8 <__aeabi_dadd+0x260>
 8001474:	003a      	movs	r2, r7
 8001476:	430a      	orrs	r2, r1
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x214>
 800147a:	e170      	b.n	800175e <__aeabi_dadd+0x4f6>
 800147c:	4662      	mov	r2, ip
 800147e:	4664      	mov	r4, ip
 8001480:	3a01      	subs	r2, #1
 8001482:	2c01      	cmp	r4, #1
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x220>
 8001486:	e0e0      	b.n	800164a <__aeabi_dadd+0x3e2>
 8001488:	4c51      	ldr	r4, [pc, #324]	; (80015d0 <__aeabi_dadd+0x368>)
 800148a:	45a4      	cmp	ip, r4
 800148c:	d100      	bne.n	8001490 <__aeabi_dadd+0x228>
 800148e:	e161      	b.n	8001754 <__aeabi_dadd+0x4ec>
 8001490:	4694      	mov	ip, r2
 8001492:	e7b4      	b.n	80013fe <__aeabi_dadd+0x196>
 8001494:	003a      	movs	r2, r7
 8001496:	391f      	subs	r1, #31
 8001498:	40ca      	lsrs	r2, r1
 800149a:	0011      	movs	r1, r2
 800149c:	2b20      	cmp	r3, #32
 800149e:	d003      	beq.n	80014a8 <__aeabi_dadd+0x240>
 80014a0:	2240      	movs	r2, #64	; 0x40
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	409f      	lsls	r7, r3
 80014a6:	433c      	orrs	r4, r7
 80014a8:	1e63      	subs	r3, r4, #1
 80014aa:	419c      	sbcs	r4, r3
 80014ac:	2700      	movs	r7, #0
 80014ae:	2600      	movs	r6, #0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	0763      	lsls	r3, r4, #29
 80014b4:	d000      	beq.n	80014b8 <__aeabi_dadd+0x250>
 80014b6:	e753      	b.n	8001360 <__aeabi_dadd+0xf8>
 80014b8:	46b4      	mov	ip, r6
 80014ba:	08e4      	lsrs	r4, r4, #3
 80014bc:	077b      	lsls	r3, r7, #29
 80014be:	4323      	orrs	r3, r4
 80014c0:	08f8      	lsrs	r0, r7, #3
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <__aeabi_dadd+0x368>)
 80014c4:	4594      	cmp	ip, r2
 80014c6:	d01d      	beq.n	8001504 <__aeabi_dadd+0x29c>
 80014c8:	4662      	mov	r2, ip
 80014ca:	0307      	lsls	r7, r0, #12
 80014cc:	0552      	lsls	r2, r2, #21
 80014ce:	0b3f      	lsrs	r7, r7, #12
 80014d0:	0d52      	lsrs	r2, r2, #21
 80014d2:	e760      	b.n	8001396 <__aeabi_dadd+0x12e>
 80014d4:	4644      	mov	r4, r8
 80014d6:	430c      	orrs	r4, r1
 80014d8:	1e62      	subs	r2, r4, #1
 80014da:	4194      	sbcs	r4, r2
 80014dc:	18e4      	adds	r4, r4, r3
 80014de:	429c      	cmp	r4, r3
 80014e0:	419b      	sbcs	r3, r3
 80014e2:	425f      	negs	r7, r3
 80014e4:	183f      	adds	r7, r7, r0
 80014e6:	023b      	lsls	r3, r7, #8
 80014e8:	d5e3      	bpl.n	80014b2 <__aeabi_dadd+0x24a>
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <__aeabi_dadd+0x368>)
 80014ec:	3601      	adds	r6, #1
 80014ee:	429e      	cmp	r6, r3
 80014f0:	d000      	beq.n	80014f4 <__aeabi_dadd+0x28c>
 80014f2:	e0b5      	b.n	8001660 <__aeabi_dadd+0x3f8>
 80014f4:	0032      	movs	r2, r6
 80014f6:	2700      	movs	r7, #0
 80014f8:	2300      	movs	r3, #0
 80014fa:	e74c      	b.n	8001396 <__aeabi_dadd+0x12e>
 80014fc:	0742      	lsls	r2, r0, #29
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	4313      	orrs	r3, r2
 8001502:	08c0      	lsrs	r0, r0, #3
 8001504:	001a      	movs	r2, r3
 8001506:	4302      	orrs	r2, r0
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x2a4>
 800150a:	e1e1      	b.n	80018d0 <__aeabi_dadd+0x668>
 800150c:	2780      	movs	r7, #128	; 0x80
 800150e:	033f      	lsls	r7, r7, #12
 8001510:	4307      	orrs	r7, r0
 8001512:	033f      	lsls	r7, r7, #12
 8001514:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <__aeabi_dadd+0x368>)
 8001516:	0b3f      	lsrs	r7, r7, #12
 8001518:	e73d      	b.n	8001396 <__aeabi_dadd+0x12e>
 800151a:	0020      	movs	r0, r4
 800151c:	f001 fd5a 	bl	8002fd4 <__clzsi2>
 8001520:	0001      	movs	r1, r0
 8001522:	3118      	adds	r1, #24
 8001524:	291f      	cmp	r1, #31
 8001526:	dc00      	bgt.n	800152a <__aeabi_dadd+0x2c2>
 8001528:	e6fc      	b.n	8001324 <__aeabi_dadd+0xbc>
 800152a:	3808      	subs	r0, #8
 800152c:	4084      	lsls	r4, r0
 800152e:	0027      	movs	r7, r4
 8001530:	2400      	movs	r4, #0
 8001532:	42b1      	cmp	r1, r6
 8001534:	db00      	blt.n	8001538 <__aeabi_dadd+0x2d0>
 8001536:	e6ff      	b.n	8001338 <__aeabi_dadd+0xd0>
 8001538:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <__aeabi_dadd+0x36c>)
 800153a:	1a76      	subs	r6, r6, r1
 800153c:	4017      	ands	r7, r2
 800153e:	e70d      	b.n	800135c <__aeabi_dadd+0xf4>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d02f      	beq.n	80015a4 <__aeabi_dadd+0x33c>
 8001544:	464a      	mov	r2, r9
 8001546:	1b92      	subs	r2, r2, r6
 8001548:	4694      	mov	ip, r2
 800154a:	2e00      	cmp	r6, #0
 800154c:	d100      	bne.n	8001550 <__aeabi_dadd+0x2e8>
 800154e:	e0ad      	b.n	80016ac <__aeabi_dadd+0x444>
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <__aeabi_dadd+0x368>)
 8001552:	4591      	cmp	r9, r2
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x2f0>
 8001556:	e10f      	b.n	8001778 <__aeabi_dadd+0x510>
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	0412      	lsls	r2, r2, #16
 800155c:	4310      	orrs	r0, r2
 800155e:	4662      	mov	r2, ip
 8001560:	2a38      	cmp	r2, #56	; 0x38
 8001562:	dd00      	ble.n	8001566 <__aeabi_dadd+0x2fe>
 8001564:	e10f      	b.n	8001786 <__aeabi_dadd+0x51e>
 8001566:	2a1f      	cmp	r2, #31
 8001568:	dd00      	ble.n	800156c <__aeabi_dadd+0x304>
 800156a:	e180      	b.n	800186e <__aeabi_dadd+0x606>
 800156c:	4664      	mov	r4, ip
 800156e:	2220      	movs	r2, #32
 8001570:	001e      	movs	r6, r3
 8001572:	1b12      	subs	r2, r2, r4
 8001574:	4667      	mov	r7, ip
 8001576:	0004      	movs	r4, r0
 8001578:	4093      	lsls	r3, r2
 800157a:	4094      	lsls	r4, r2
 800157c:	40fe      	lsrs	r6, r7
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	4193      	sbcs	r3, r2
 8001582:	40f8      	lsrs	r0, r7
 8001584:	4334      	orrs	r4, r6
 8001586:	431c      	orrs	r4, r3
 8001588:	4480      	add	r8, r0
 800158a:	1864      	adds	r4, r4, r1
 800158c:	428c      	cmp	r4, r1
 800158e:	41bf      	sbcs	r7, r7
 8001590:	427f      	negs	r7, r7
 8001592:	464e      	mov	r6, r9
 8001594:	4447      	add	r7, r8
 8001596:	e7a6      	b.n	80014e6 <__aeabi_dadd+0x27e>
 8001598:	4642      	mov	r2, r8
 800159a:	430a      	orrs	r2, r1
 800159c:	0011      	movs	r1, r2
 800159e:	1e4a      	subs	r2, r1, #1
 80015a0:	4191      	sbcs	r1, r2
 80015a2:	e6ad      	b.n	8001300 <__aeabi_dadd+0x98>
 80015a4:	4c0c      	ldr	r4, [pc, #48]	; (80015d8 <__aeabi_dadd+0x370>)
 80015a6:	1c72      	adds	r2, r6, #1
 80015a8:	4222      	tst	r2, r4
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x346>
 80015ac:	e0a1      	b.n	80016f2 <__aeabi_dadd+0x48a>
 80015ae:	0002      	movs	r2, r0
 80015b0:	431a      	orrs	r2, r3
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dadd+0x350>
 80015b6:	e0fa      	b.n	80017ae <__aeabi_dadd+0x546>
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x356>
 80015bc:	e145      	b.n	800184a <__aeabi_dadd+0x5e2>
 80015be:	003a      	movs	r2, r7
 80015c0:	430a      	orrs	r2, r1
 80015c2:	d000      	beq.n	80015c6 <__aeabi_dadd+0x35e>
 80015c4:	e146      	b.n	8001854 <__aeabi_dadd+0x5ec>
 80015c6:	0742      	lsls	r2, r0, #29
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	08c0      	lsrs	r0, r0, #3
 80015ce:	e77b      	b.n	80014c8 <__aeabi_dadd+0x260>
 80015d0:	000007ff 	.word	0x000007ff
 80015d4:	ff7fffff 	.word	0xff7fffff
 80015d8:	000007fe 	.word	0x000007fe
 80015dc:	4647      	mov	r7, r8
 80015de:	1a5c      	subs	r4, r3, r1
 80015e0:	1bc2      	subs	r2, r0, r7
 80015e2:	42a3      	cmp	r3, r4
 80015e4:	41bf      	sbcs	r7, r7
 80015e6:	427f      	negs	r7, r7
 80015e8:	46b9      	mov	r9, r7
 80015ea:	0017      	movs	r7, r2
 80015ec:	464a      	mov	r2, r9
 80015ee:	1abf      	subs	r7, r7, r2
 80015f0:	023a      	lsls	r2, r7, #8
 80015f2:	d500      	bpl.n	80015f6 <__aeabi_dadd+0x38e>
 80015f4:	e08d      	b.n	8001712 <__aeabi_dadd+0x4aa>
 80015f6:	0023      	movs	r3, r4
 80015f8:	433b      	orrs	r3, r7
 80015fa:	d000      	beq.n	80015fe <__aeabi_dadd+0x396>
 80015fc:	e68a      	b.n	8001314 <__aeabi_dadd+0xac>
 80015fe:	2000      	movs	r0, #0
 8001600:	2500      	movs	r5, #0
 8001602:	e761      	b.n	80014c8 <__aeabi_dadd+0x260>
 8001604:	4cb4      	ldr	r4, [pc, #720]	; (80018d8 <__aeabi_dadd+0x670>)
 8001606:	45a1      	cmp	r9, r4
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0x3a4>
 800160a:	e0ad      	b.n	8001768 <__aeabi_dadd+0x500>
 800160c:	2480      	movs	r4, #128	; 0x80
 800160e:	0424      	lsls	r4, r4, #16
 8001610:	4320      	orrs	r0, r4
 8001612:	4664      	mov	r4, ip
 8001614:	2c38      	cmp	r4, #56	; 0x38
 8001616:	dc3d      	bgt.n	8001694 <__aeabi_dadd+0x42c>
 8001618:	4662      	mov	r2, ip
 800161a:	2c1f      	cmp	r4, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dadd+0x3b8>
 800161e:	e0b7      	b.n	8001790 <__aeabi_dadd+0x528>
 8001620:	2520      	movs	r5, #32
 8001622:	001e      	movs	r6, r3
 8001624:	1b2d      	subs	r5, r5, r4
 8001626:	0004      	movs	r4, r0
 8001628:	40ab      	lsls	r3, r5
 800162a:	40ac      	lsls	r4, r5
 800162c:	40d6      	lsrs	r6, r2
 800162e:	40d0      	lsrs	r0, r2
 8001630:	4642      	mov	r2, r8
 8001632:	1e5d      	subs	r5, r3, #1
 8001634:	41ab      	sbcs	r3, r5
 8001636:	4334      	orrs	r4, r6
 8001638:	1a12      	subs	r2, r2, r0
 800163a:	4690      	mov	r8, r2
 800163c:	4323      	orrs	r3, r4
 800163e:	e02c      	b.n	800169a <__aeabi_dadd+0x432>
 8001640:	0742      	lsls	r2, r0, #29
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	08c0      	lsrs	r0, r0, #3
 8001648:	e73b      	b.n	80014c2 <__aeabi_dadd+0x25a>
 800164a:	185c      	adds	r4, r3, r1
 800164c:	429c      	cmp	r4, r3
 800164e:	419b      	sbcs	r3, r3
 8001650:	4440      	add	r0, r8
 8001652:	425b      	negs	r3, r3
 8001654:	18c7      	adds	r7, r0, r3
 8001656:	2601      	movs	r6, #1
 8001658:	023b      	lsls	r3, r7, #8
 800165a:	d400      	bmi.n	800165e <__aeabi_dadd+0x3f6>
 800165c:	e729      	b.n	80014b2 <__aeabi_dadd+0x24a>
 800165e:	2602      	movs	r6, #2
 8001660:	4a9e      	ldr	r2, [pc, #632]	; (80018dc <__aeabi_dadd+0x674>)
 8001662:	0863      	lsrs	r3, r4, #1
 8001664:	4017      	ands	r7, r2
 8001666:	2201      	movs	r2, #1
 8001668:	4014      	ands	r4, r2
 800166a:	431c      	orrs	r4, r3
 800166c:	07fb      	lsls	r3, r7, #31
 800166e:	431c      	orrs	r4, r3
 8001670:	087f      	lsrs	r7, r7, #1
 8001672:	e673      	b.n	800135c <__aeabi_dadd+0xf4>
 8001674:	4644      	mov	r4, r8
 8001676:	3a20      	subs	r2, #32
 8001678:	40d4      	lsrs	r4, r2
 800167a:	4662      	mov	r2, ip
 800167c:	2a20      	cmp	r2, #32
 800167e:	d005      	beq.n	800168c <__aeabi_dadd+0x424>
 8001680:	4667      	mov	r7, ip
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	1bd2      	subs	r2, r2, r7
 8001686:	4647      	mov	r7, r8
 8001688:	4097      	lsls	r7, r2
 800168a:	4339      	orrs	r1, r7
 800168c:	1e4a      	subs	r2, r1, #1
 800168e:	4191      	sbcs	r1, r2
 8001690:	4321      	orrs	r1, r4
 8001692:	e635      	b.n	8001300 <__aeabi_dadd+0x98>
 8001694:	4303      	orrs	r3, r0
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	4183      	sbcs	r3, r0
 800169a:	1acc      	subs	r4, r1, r3
 800169c:	42a1      	cmp	r1, r4
 800169e:	41bf      	sbcs	r7, r7
 80016a0:	4643      	mov	r3, r8
 80016a2:	427f      	negs	r7, r7
 80016a4:	4655      	mov	r5, sl
 80016a6:	464e      	mov	r6, r9
 80016a8:	1bdf      	subs	r7, r3, r7
 80016aa:	e62e      	b.n	800130a <__aeabi_dadd+0xa2>
 80016ac:	0002      	movs	r2, r0
 80016ae:	431a      	orrs	r2, r3
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dadd+0x44c>
 80016b2:	e0bd      	b.n	8001830 <__aeabi_dadd+0x5c8>
 80016b4:	4662      	mov	r2, ip
 80016b6:	4664      	mov	r4, ip
 80016b8:	3a01      	subs	r2, #1
 80016ba:	2c01      	cmp	r4, #1
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x458>
 80016be:	e0e5      	b.n	800188c <__aeabi_dadd+0x624>
 80016c0:	4c85      	ldr	r4, [pc, #532]	; (80018d8 <__aeabi_dadd+0x670>)
 80016c2:	45a4      	cmp	ip, r4
 80016c4:	d058      	beq.n	8001778 <__aeabi_dadd+0x510>
 80016c6:	4694      	mov	ip, r2
 80016c8:	e749      	b.n	800155e <__aeabi_dadd+0x2f6>
 80016ca:	4664      	mov	r4, ip
 80016cc:	2220      	movs	r2, #32
 80016ce:	1b12      	subs	r2, r2, r4
 80016d0:	4644      	mov	r4, r8
 80016d2:	4094      	lsls	r4, r2
 80016d4:	000f      	movs	r7, r1
 80016d6:	46a1      	mov	r9, r4
 80016d8:	4664      	mov	r4, ip
 80016da:	4091      	lsls	r1, r2
 80016dc:	40e7      	lsrs	r7, r4
 80016de:	464c      	mov	r4, r9
 80016e0:	1e4a      	subs	r2, r1, #1
 80016e2:	4191      	sbcs	r1, r2
 80016e4:	433c      	orrs	r4, r7
 80016e6:	4642      	mov	r2, r8
 80016e8:	430c      	orrs	r4, r1
 80016ea:	4661      	mov	r1, ip
 80016ec:	40ca      	lsrs	r2, r1
 80016ee:	1880      	adds	r0, r0, r2
 80016f0:	e6f4      	b.n	80014dc <__aeabi_dadd+0x274>
 80016f2:	4c79      	ldr	r4, [pc, #484]	; (80018d8 <__aeabi_dadd+0x670>)
 80016f4:	42a2      	cmp	r2, r4
 80016f6:	d100      	bne.n	80016fa <__aeabi_dadd+0x492>
 80016f8:	e6fd      	b.n	80014f6 <__aeabi_dadd+0x28e>
 80016fa:	1859      	adds	r1, r3, r1
 80016fc:	4299      	cmp	r1, r3
 80016fe:	419b      	sbcs	r3, r3
 8001700:	4440      	add	r0, r8
 8001702:	425f      	negs	r7, r3
 8001704:	19c7      	adds	r7, r0, r7
 8001706:	07fc      	lsls	r4, r7, #31
 8001708:	0849      	lsrs	r1, r1, #1
 800170a:	0016      	movs	r6, r2
 800170c:	430c      	orrs	r4, r1
 800170e:	087f      	lsrs	r7, r7, #1
 8001710:	e6cf      	b.n	80014b2 <__aeabi_dadd+0x24a>
 8001712:	1acc      	subs	r4, r1, r3
 8001714:	42a1      	cmp	r1, r4
 8001716:	41bf      	sbcs	r7, r7
 8001718:	4643      	mov	r3, r8
 800171a:	427f      	negs	r7, r7
 800171c:	1a18      	subs	r0, r3, r0
 800171e:	4655      	mov	r5, sl
 8001720:	1bc7      	subs	r7, r0, r7
 8001722:	e5f7      	b.n	8001314 <__aeabi_dadd+0xac>
 8001724:	08c9      	lsrs	r1, r1, #3
 8001726:	077b      	lsls	r3, r7, #29
 8001728:	4655      	mov	r5, sl
 800172a:	430b      	orrs	r3, r1
 800172c:	08f8      	lsrs	r0, r7, #3
 800172e:	e6c8      	b.n	80014c2 <__aeabi_dadd+0x25a>
 8001730:	2c00      	cmp	r4, #0
 8001732:	d000      	beq.n	8001736 <__aeabi_dadd+0x4ce>
 8001734:	e081      	b.n	800183a <__aeabi_dadd+0x5d2>
 8001736:	4643      	mov	r3, r8
 8001738:	430b      	orrs	r3, r1
 800173a:	d115      	bne.n	8001768 <__aeabi_dadd+0x500>
 800173c:	2080      	movs	r0, #128	; 0x80
 800173e:	2500      	movs	r5, #0
 8001740:	0300      	lsls	r0, r0, #12
 8001742:	e6e3      	b.n	800150c <__aeabi_dadd+0x2a4>
 8001744:	1a5c      	subs	r4, r3, r1
 8001746:	42a3      	cmp	r3, r4
 8001748:	419b      	sbcs	r3, r3
 800174a:	1bc7      	subs	r7, r0, r7
 800174c:	425b      	negs	r3, r3
 800174e:	2601      	movs	r6, #1
 8001750:	1aff      	subs	r7, r7, r3
 8001752:	e5da      	b.n	800130a <__aeabi_dadd+0xa2>
 8001754:	0742      	lsls	r2, r0, #29
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	4313      	orrs	r3, r2
 800175a:	08c0      	lsrs	r0, r0, #3
 800175c:	e6d2      	b.n	8001504 <__aeabi_dadd+0x29c>
 800175e:	0742      	lsls	r2, r0, #29
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	4313      	orrs	r3, r2
 8001764:	08c0      	lsrs	r0, r0, #3
 8001766:	e6ac      	b.n	80014c2 <__aeabi_dadd+0x25a>
 8001768:	4643      	mov	r3, r8
 800176a:	4642      	mov	r2, r8
 800176c:	08c9      	lsrs	r1, r1, #3
 800176e:	075b      	lsls	r3, r3, #29
 8001770:	4655      	mov	r5, sl
 8001772:	430b      	orrs	r3, r1
 8001774:	08d0      	lsrs	r0, r2, #3
 8001776:	e6c5      	b.n	8001504 <__aeabi_dadd+0x29c>
 8001778:	4643      	mov	r3, r8
 800177a:	4642      	mov	r2, r8
 800177c:	075b      	lsls	r3, r3, #29
 800177e:	08c9      	lsrs	r1, r1, #3
 8001780:	430b      	orrs	r3, r1
 8001782:	08d0      	lsrs	r0, r2, #3
 8001784:	e6be      	b.n	8001504 <__aeabi_dadd+0x29c>
 8001786:	4303      	orrs	r3, r0
 8001788:	001c      	movs	r4, r3
 800178a:	1e63      	subs	r3, r4, #1
 800178c:	419c      	sbcs	r4, r3
 800178e:	e6fc      	b.n	800158a <__aeabi_dadd+0x322>
 8001790:	0002      	movs	r2, r0
 8001792:	3c20      	subs	r4, #32
 8001794:	40e2      	lsrs	r2, r4
 8001796:	0014      	movs	r4, r2
 8001798:	4662      	mov	r2, ip
 800179a:	2a20      	cmp	r2, #32
 800179c:	d003      	beq.n	80017a6 <__aeabi_dadd+0x53e>
 800179e:	2540      	movs	r5, #64	; 0x40
 80017a0:	1aad      	subs	r5, r5, r2
 80017a2:	40a8      	lsls	r0, r5
 80017a4:	4303      	orrs	r3, r0
 80017a6:	1e58      	subs	r0, r3, #1
 80017a8:	4183      	sbcs	r3, r0
 80017aa:	4323      	orrs	r3, r4
 80017ac:	e775      	b.n	800169a <__aeabi_dadd+0x432>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d0e2      	beq.n	8001778 <__aeabi_dadd+0x510>
 80017b2:	003a      	movs	r2, r7
 80017b4:	430a      	orrs	r2, r1
 80017b6:	d0cd      	beq.n	8001754 <__aeabi_dadd+0x4ec>
 80017b8:	0742      	lsls	r2, r0, #29
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	4313      	orrs	r3, r2
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	08c0      	lsrs	r0, r0, #3
 80017c2:	0312      	lsls	r2, r2, #12
 80017c4:	4210      	tst	r0, r2
 80017c6:	d006      	beq.n	80017d6 <__aeabi_dadd+0x56e>
 80017c8:	08fc      	lsrs	r4, r7, #3
 80017ca:	4214      	tst	r4, r2
 80017cc:	d103      	bne.n	80017d6 <__aeabi_dadd+0x56e>
 80017ce:	0020      	movs	r0, r4
 80017d0:	08cb      	lsrs	r3, r1, #3
 80017d2:	077a      	lsls	r2, r7, #29
 80017d4:	4313      	orrs	r3, r2
 80017d6:	0f5a      	lsrs	r2, r3, #29
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	0752      	lsls	r2, r2, #29
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4313      	orrs	r3, r2
 80017e0:	e690      	b.n	8001504 <__aeabi_dadd+0x29c>
 80017e2:	4643      	mov	r3, r8
 80017e4:	430b      	orrs	r3, r1
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x582>
 80017e8:	e709      	b.n	80015fe <__aeabi_dadd+0x396>
 80017ea:	4643      	mov	r3, r8
 80017ec:	4642      	mov	r2, r8
 80017ee:	08c9      	lsrs	r1, r1, #3
 80017f0:	075b      	lsls	r3, r3, #29
 80017f2:	4655      	mov	r5, sl
 80017f4:	430b      	orrs	r3, r1
 80017f6:	08d0      	lsrs	r0, r2, #3
 80017f8:	e666      	b.n	80014c8 <__aeabi_dadd+0x260>
 80017fa:	1acc      	subs	r4, r1, r3
 80017fc:	42a1      	cmp	r1, r4
 80017fe:	4189      	sbcs	r1, r1
 8001800:	1a3f      	subs	r7, r7, r0
 8001802:	4249      	negs	r1, r1
 8001804:	4655      	mov	r5, sl
 8001806:	2601      	movs	r6, #1
 8001808:	1a7f      	subs	r7, r7, r1
 800180a:	e57e      	b.n	800130a <__aeabi_dadd+0xa2>
 800180c:	4642      	mov	r2, r8
 800180e:	1a5c      	subs	r4, r3, r1
 8001810:	1a87      	subs	r7, r0, r2
 8001812:	42a3      	cmp	r3, r4
 8001814:	4192      	sbcs	r2, r2
 8001816:	4252      	negs	r2, r2
 8001818:	1abf      	subs	r7, r7, r2
 800181a:	023a      	lsls	r2, r7, #8
 800181c:	d53d      	bpl.n	800189a <__aeabi_dadd+0x632>
 800181e:	1acc      	subs	r4, r1, r3
 8001820:	42a1      	cmp	r1, r4
 8001822:	4189      	sbcs	r1, r1
 8001824:	4643      	mov	r3, r8
 8001826:	4249      	negs	r1, r1
 8001828:	1a1f      	subs	r7, r3, r0
 800182a:	4655      	mov	r5, sl
 800182c:	1a7f      	subs	r7, r7, r1
 800182e:	e595      	b.n	800135c <__aeabi_dadd+0xf4>
 8001830:	077b      	lsls	r3, r7, #29
 8001832:	08c9      	lsrs	r1, r1, #3
 8001834:	430b      	orrs	r3, r1
 8001836:	08f8      	lsrs	r0, r7, #3
 8001838:	e643      	b.n	80014c2 <__aeabi_dadd+0x25a>
 800183a:	4644      	mov	r4, r8
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	430c      	orrs	r4, r1
 8001840:	d130      	bne.n	80018a4 <__aeabi_dadd+0x63c>
 8001842:	0742      	lsls	r2, r0, #29
 8001844:	4313      	orrs	r3, r2
 8001846:	08c0      	lsrs	r0, r0, #3
 8001848:	e65c      	b.n	8001504 <__aeabi_dadd+0x29c>
 800184a:	077b      	lsls	r3, r7, #29
 800184c:	08c9      	lsrs	r1, r1, #3
 800184e:	430b      	orrs	r3, r1
 8001850:	08f8      	lsrs	r0, r7, #3
 8001852:	e639      	b.n	80014c8 <__aeabi_dadd+0x260>
 8001854:	185c      	adds	r4, r3, r1
 8001856:	429c      	cmp	r4, r3
 8001858:	419b      	sbcs	r3, r3
 800185a:	4440      	add	r0, r8
 800185c:	425b      	negs	r3, r3
 800185e:	18c7      	adds	r7, r0, r3
 8001860:	023b      	lsls	r3, r7, #8
 8001862:	d400      	bmi.n	8001866 <__aeabi_dadd+0x5fe>
 8001864:	e625      	b.n	80014b2 <__aeabi_dadd+0x24a>
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <__aeabi_dadd+0x674>)
 8001868:	2601      	movs	r6, #1
 800186a:	401f      	ands	r7, r3
 800186c:	e621      	b.n	80014b2 <__aeabi_dadd+0x24a>
 800186e:	0004      	movs	r4, r0
 8001870:	3a20      	subs	r2, #32
 8001872:	40d4      	lsrs	r4, r2
 8001874:	4662      	mov	r2, ip
 8001876:	2a20      	cmp	r2, #32
 8001878:	d004      	beq.n	8001884 <__aeabi_dadd+0x61c>
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	4666      	mov	r6, ip
 800187e:	1b92      	subs	r2, r2, r6
 8001880:	4090      	lsls	r0, r2
 8001882:	4303      	orrs	r3, r0
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	4193      	sbcs	r3, r2
 8001888:	431c      	orrs	r4, r3
 800188a:	e67e      	b.n	800158a <__aeabi_dadd+0x322>
 800188c:	185c      	adds	r4, r3, r1
 800188e:	428c      	cmp	r4, r1
 8001890:	4189      	sbcs	r1, r1
 8001892:	4440      	add	r0, r8
 8001894:	4249      	negs	r1, r1
 8001896:	1847      	adds	r7, r0, r1
 8001898:	e6dd      	b.n	8001656 <__aeabi_dadd+0x3ee>
 800189a:	0023      	movs	r3, r4
 800189c:	433b      	orrs	r3, r7
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x63a>
 80018a0:	e6ad      	b.n	80015fe <__aeabi_dadd+0x396>
 80018a2:	e606      	b.n	80014b2 <__aeabi_dadd+0x24a>
 80018a4:	0744      	lsls	r4, r0, #29
 80018a6:	4323      	orrs	r3, r4
 80018a8:	2480      	movs	r4, #128	; 0x80
 80018aa:	08c0      	lsrs	r0, r0, #3
 80018ac:	0324      	lsls	r4, r4, #12
 80018ae:	4220      	tst	r0, r4
 80018b0:	d008      	beq.n	80018c4 <__aeabi_dadd+0x65c>
 80018b2:	4642      	mov	r2, r8
 80018b4:	08d6      	lsrs	r6, r2, #3
 80018b6:	4226      	tst	r6, r4
 80018b8:	d104      	bne.n	80018c4 <__aeabi_dadd+0x65c>
 80018ba:	4655      	mov	r5, sl
 80018bc:	0030      	movs	r0, r6
 80018be:	08cb      	lsrs	r3, r1, #3
 80018c0:	0751      	lsls	r1, r2, #29
 80018c2:	430b      	orrs	r3, r1
 80018c4:	0f5a      	lsrs	r2, r3, #29
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	0752      	lsls	r2, r2, #29
 80018cc:	4313      	orrs	r3, r2
 80018ce:	e619      	b.n	8001504 <__aeabi_dadd+0x29c>
 80018d0:	2300      	movs	r3, #0
 80018d2:	4a01      	ldr	r2, [pc, #4]	; (80018d8 <__aeabi_dadd+0x670>)
 80018d4:	001f      	movs	r7, r3
 80018d6:	e55e      	b.n	8001396 <__aeabi_dadd+0x12e>
 80018d8:	000007ff 	.word	0x000007ff
 80018dc:	ff7fffff 	.word	0xff7fffff

080018e0 <__aeabi_ddiv>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	4657      	mov	r7, sl
 80018e4:	464e      	mov	r6, r9
 80018e6:	4645      	mov	r5, r8
 80018e8:	46de      	mov	lr, fp
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	4681      	mov	r9, r0
 80018ee:	0005      	movs	r5, r0
 80018f0:	030c      	lsls	r4, r1, #12
 80018f2:	0048      	lsls	r0, r1, #1
 80018f4:	4692      	mov	sl, r2
 80018f6:	001f      	movs	r7, r3
 80018f8:	b085      	sub	sp, #20
 80018fa:	0b24      	lsrs	r4, r4, #12
 80018fc:	0d40      	lsrs	r0, r0, #21
 80018fe:	0fce      	lsrs	r6, r1, #31
 8001900:	2800      	cmp	r0, #0
 8001902:	d100      	bne.n	8001906 <__aeabi_ddiv+0x26>
 8001904:	e156      	b.n	8001bb4 <__aeabi_ddiv+0x2d4>
 8001906:	4bd4      	ldr	r3, [pc, #848]	; (8001c58 <__aeabi_ddiv+0x378>)
 8001908:	4298      	cmp	r0, r3
 800190a:	d100      	bne.n	800190e <__aeabi_ddiv+0x2e>
 800190c:	e172      	b.n	8001bf4 <__aeabi_ddiv+0x314>
 800190e:	0f6b      	lsrs	r3, r5, #29
 8001910:	00e4      	lsls	r4, r4, #3
 8001912:	431c      	orrs	r4, r3
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	4323      	orrs	r3, r4
 800191a:	4698      	mov	r8, r3
 800191c:	4bcf      	ldr	r3, [pc, #828]	; (8001c5c <__aeabi_ddiv+0x37c>)
 800191e:	00ed      	lsls	r5, r5, #3
 8001920:	469b      	mov	fp, r3
 8001922:	2300      	movs	r3, #0
 8001924:	4699      	mov	r9, r3
 8001926:	4483      	add	fp, r0
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	033c      	lsls	r4, r7, #12
 800192c:	007b      	lsls	r3, r7, #1
 800192e:	4650      	mov	r0, sl
 8001930:	0b24      	lsrs	r4, r4, #12
 8001932:	0d5b      	lsrs	r3, r3, #21
 8001934:	0fff      	lsrs	r7, r7, #31
 8001936:	2b00      	cmp	r3, #0
 8001938:	d100      	bne.n	800193c <__aeabi_ddiv+0x5c>
 800193a:	e11f      	b.n	8001b7c <__aeabi_ddiv+0x29c>
 800193c:	4ac6      	ldr	r2, [pc, #792]	; (8001c58 <__aeabi_ddiv+0x378>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d100      	bne.n	8001944 <__aeabi_ddiv+0x64>
 8001942:	e162      	b.n	8001c0a <__aeabi_ddiv+0x32a>
 8001944:	49c5      	ldr	r1, [pc, #788]	; (8001c5c <__aeabi_ddiv+0x37c>)
 8001946:	0f42      	lsrs	r2, r0, #29
 8001948:	468c      	mov	ip, r1
 800194a:	00e4      	lsls	r4, r4, #3
 800194c:	4659      	mov	r1, fp
 800194e:	4314      	orrs	r4, r2
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	4463      	add	r3, ip
 8001954:	0412      	lsls	r2, r2, #16
 8001956:	1acb      	subs	r3, r1, r3
 8001958:	4314      	orrs	r4, r2
 800195a:	469b      	mov	fp, r3
 800195c:	00c2      	lsls	r2, r0, #3
 800195e:	2000      	movs	r0, #0
 8001960:	0033      	movs	r3, r6
 8001962:	407b      	eors	r3, r7
 8001964:	469a      	mov	sl, r3
 8001966:	464b      	mov	r3, r9
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d827      	bhi.n	80019bc <__aeabi_ddiv+0xdc>
 800196c:	49bc      	ldr	r1, [pc, #752]	; (8001c60 <__aeabi_ddiv+0x380>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	58cb      	ldr	r3, [r1, r3]
 8001972:	469f      	mov	pc, r3
 8001974:	46b2      	mov	sl, r6
 8001976:	9b00      	ldr	r3, [sp, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d016      	beq.n	80019aa <__aeabi_ddiv+0xca>
 800197c:	2b03      	cmp	r3, #3
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0xa2>
 8001980:	e28e      	b.n	8001ea0 <__aeabi_ddiv+0x5c0>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d000      	beq.n	8001988 <__aeabi_ddiv+0xa8>
 8001986:	e0d9      	b.n	8001b3c <__aeabi_ddiv+0x25c>
 8001988:	2300      	movs	r3, #0
 800198a:	2400      	movs	r4, #0
 800198c:	2500      	movs	r5, #0
 800198e:	4652      	mov	r2, sl
 8001990:	051b      	lsls	r3, r3, #20
 8001992:	4323      	orrs	r3, r4
 8001994:	07d2      	lsls	r2, r2, #31
 8001996:	4313      	orrs	r3, r2
 8001998:	0028      	movs	r0, r5
 800199a:	0019      	movs	r1, r3
 800199c:	b005      	add	sp, #20
 800199e:	bcf0      	pop	{r4, r5, r6, r7}
 80019a0:	46bb      	mov	fp, r7
 80019a2:	46b2      	mov	sl, r6
 80019a4:	46a9      	mov	r9, r5
 80019a6:	46a0      	mov	r8, r4
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019aa:	2400      	movs	r4, #0
 80019ac:	2500      	movs	r5, #0
 80019ae:	4baa      	ldr	r3, [pc, #680]	; (8001c58 <__aeabi_ddiv+0x378>)
 80019b0:	e7ed      	b.n	800198e <__aeabi_ddiv+0xae>
 80019b2:	46ba      	mov	sl, r7
 80019b4:	46a0      	mov	r8, r4
 80019b6:	0015      	movs	r5, r2
 80019b8:	9000      	str	r0, [sp, #0]
 80019ba:	e7dc      	b.n	8001976 <__aeabi_ddiv+0x96>
 80019bc:	4544      	cmp	r4, r8
 80019be:	d200      	bcs.n	80019c2 <__aeabi_ddiv+0xe2>
 80019c0:	e1c7      	b.n	8001d52 <__aeabi_ddiv+0x472>
 80019c2:	d100      	bne.n	80019c6 <__aeabi_ddiv+0xe6>
 80019c4:	e1c2      	b.n	8001d4c <__aeabi_ddiv+0x46c>
 80019c6:	2301      	movs	r3, #1
 80019c8:	425b      	negs	r3, r3
 80019ca:	469c      	mov	ip, r3
 80019cc:	002e      	movs	r6, r5
 80019ce:	4640      	mov	r0, r8
 80019d0:	2500      	movs	r5, #0
 80019d2:	44e3      	add	fp, ip
 80019d4:	0223      	lsls	r3, r4, #8
 80019d6:	0e14      	lsrs	r4, r2, #24
 80019d8:	431c      	orrs	r4, r3
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	4699      	mov	r9, r3
 80019de:	0423      	lsls	r3, r4, #16
 80019e0:	0c1f      	lsrs	r7, r3, #16
 80019e2:	0212      	lsls	r2, r2, #8
 80019e4:	4649      	mov	r1, r9
 80019e6:	9200      	str	r2, [sp, #0]
 80019e8:	9701      	str	r7, [sp, #4]
 80019ea:	f7fe fc2f 	bl	800024c <__aeabi_uidivmod>
 80019ee:	0002      	movs	r2, r0
 80019f0:	437a      	muls	r2, r7
 80019f2:	040b      	lsls	r3, r1, #16
 80019f4:	0c31      	lsrs	r1, r6, #16
 80019f6:	4680      	mov	r8, r0
 80019f8:	4319      	orrs	r1, r3
 80019fa:	428a      	cmp	r2, r1
 80019fc:	d907      	bls.n	8001a0e <__aeabi_ddiv+0x12e>
 80019fe:	2301      	movs	r3, #1
 8001a00:	425b      	negs	r3, r3
 8001a02:	469c      	mov	ip, r3
 8001a04:	1909      	adds	r1, r1, r4
 8001a06:	44e0      	add	r8, ip
 8001a08:	428c      	cmp	r4, r1
 8001a0a:	d800      	bhi.n	8001a0e <__aeabi_ddiv+0x12e>
 8001a0c:	e207      	b.n	8001e1e <__aeabi_ddiv+0x53e>
 8001a0e:	1a88      	subs	r0, r1, r2
 8001a10:	4649      	mov	r1, r9
 8001a12:	f7fe fc1b 	bl	800024c <__aeabi_uidivmod>
 8001a16:	0409      	lsls	r1, r1, #16
 8001a18:	468c      	mov	ip, r1
 8001a1a:	0431      	lsls	r1, r6, #16
 8001a1c:	4666      	mov	r6, ip
 8001a1e:	9a01      	ldr	r2, [sp, #4]
 8001a20:	0c09      	lsrs	r1, r1, #16
 8001a22:	4342      	muls	r2, r0
 8001a24:	0003      	movs	r3, r0
 8001a26:	4331      	orrs	r1, r6
 8001a28:	428a      	cmp	r2, r1
 8001a2a:	d904      	bls.n	8001a36 <__aeabi_ddiv+0x156>
 8001a2c:	1909      	adds	r1, r1, r4
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	428c      	cmp	r4, r1
 8001a32:	d800      	bhi.n	8001a36 <__aeabi_ddiv+0x156>
 8001a34:	e1ed      	b.n	8001e12 <__aeabi_ddiv+0x532>
 8001a36:	1a88      	subs	r0, r1, r2
 8001a38:	4642      	mov	r2, r8
 8001a3a:	0412      	lsls	r2, r2, #16
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	4690      	mov	r8, r2
 8001a40:	4641      	mov	r1, r8
 8001a42:	9b00      	ldr	r3, [sp, #0]
 8001a44:	040e      	lsls	r6, r1, #16
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	001f      	movs	r7, r3
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	9b00      	ldr	r3, [sp, #0]
 8001a4e:	0c36      	lsrs	r6, r6, #16
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c19      	lsrs	r1, r3, #16
 8001a54:	000b      	movs	r3, r1
 8001a56:	4373      	muls	r3, r6
 8001a58:	0c12      	lsrs	r2, r2, #16
 8001a5a:	437e      	muls	r6, r7
 8001a5c:	9103      	str	r1, [sp, #12]
 8001a5e:	4351      	muls	r1, r2
 8001a60:	437a      	muls	r2, r7
 8001a62:	0c1f      	lsrs	r7, r3, #16
 8001a64:	46bc      	mov	ip, r7
 8001a66:	1876      	adds	r6, r6, r1
 8001a68:	4466      	add	r6, ip
 8001a6a:	42b1      	cmp	r1, r6
 8001a6c:	d903      	bls.n	8001a76 <__aeabi_ddiv+0x196>
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0249      	lsls	r1, r1, #9
 8001a72:	468c      	mov	ip, r1
 8001a74:	4462      	add	r2, ip
 8001a76:	0c31      	lsrs	r1, r6, #16
 8001a78:	188a      	adds	r2, r1, r2
 8001a7a:	0431      	lsls	r1, r6, #16
 8001a7c:	041e      	lsls	r6, r3, #16
 8001a7e:	0c36      	lsrs	r6, r6, #16
 8001a80:	198e      	adds	r6, r1, r6
 8001a82:	4290      	cmp	r0, r2
 8001a84:	d302      	bcc.n	8001a8c <__aeabi_ddiv+0x1ac>
 8001a86:	d112      	bne.n	8001aae <__aeabi_ddiv+0x1ce>
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d210      	bcs.n	8001aae <__aeabi_ddiv+0x1ce>
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	1e59      	subs	r1, r3, #1
 8001a90:	9b00      	ldr	r3, [sp, #0]
 8001a92:	469c      	mov	ip, r3
 8001a94:	4465      	add	r5, ip
 8001a96:	001f      	movs	r7, r3
 8001a98:	429d      	cmp	r5, r3
 8001a9a:	419b      	sbcs	r3, r3
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	191b      	adds	r3, r3, r4
 8001aa0:	18c0      	adds	r0, r0, r3
 8001aa2:	4284      	cmp	r4, r0
 8001aa4:	d200      	bcs.n	8001aa8 <__aeabi_ddiv+0x1c8>
 8001aa6:	e1a0      	b.n	8001dea <__aeabi_ddiv+0x50a>
 8001aa8:	d100      	bne.n	8001aac <__aeabi_ddiv+0x1cc>
 8001aaa:	e19b      	b.n	8001de4 <__aeabi_ddiv+0x504>
 8001aac:	4688      	mov	r8, r1
 8001aae:	1bae      	subs	r6, r5, r6
 8001ab0:	42b5      	cmp	r5, r6
 8001ab2:	41ad      	sbcs	r5, r5
 8001ab4:	1a80      	subs	r0, r0, r2
 8001ab6:	426d      	negs	r5, r5
 8001ab8:	1b40      	subs	r0, r0, r5
 8001aba:	4284      	cmp	r4, r0
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_ddiv+0x1e0>
 8001abe:	e1d5      	b.n	8001e6c <__aeabi_ddiv+0x58c>
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	f7fe fbc3 	bl	800024c <__aeabi_uidivmod>
 8001ac6:	9a01      	ldr	r2, [sp, #4]
 8001ac8:	040b      	lsls	r3, r1, #16
 8001aca:	4342      	muls	r2, r0
 8001acc:	0c31      	lsrs	r1, r6, #16
 8001ace:	0005      	movs	r5, r0
 8001ad0:	4319      	orrs	r1, r3
 8001ad2:	428a      	cmp	r2, r1
 8001ad4:	d900      	bls.n	8001ad8 <__aeabi_ddiv+0x1f8>
 8001ad6:	e16c      	b.n	8001db2 <__aeabi_ddiv+0x4d2>
 8001ad8:	1a88      	subs	r0, r1, r2
 8001ada:	4649      	mov	r1, r9
 8001adc:	f7fe fbb6 	bl	800024c <__aeabi_uidivmod>
 8001ae0:	9a01      	ldr	r2, [sp, #4]
 8001ae2:	0436      	lsls	r6, r6, #16
 8001ae4:	4342      	muls	r2, r0
 8001ae6:	0409      	lsls	r1, r1, #16
 8001ae8:	0c36      	lsrs	r6, r6, #16
 8001aea:	0003      	movs	r3, r0
 8001aec:	430e      	orrs	r6, r1
 8001aee:	42b2      	cmp	r2, r6
 8001af0:	d900      	bls.n	8001af4 <__aeabi_ddiv+0x214>
 8001af2:	e153      	b.n	8001d9c <__aeabi_ddiv+0x4bc>
 8001af4:	9803      	ldr	r0, [sp, #12]
 8001af6:	1ab6      	subs	r6, r6, r2
 8001af8:	0002      	movs	r2, r0
 8001afa:	042d      	lsls	r5, r5, #16
 8001afc:	431d      	orrs	r5, r3
 8001afe:	9f02      	ldr	r7, [sp, #8]
 8001b00:	042b      	lsls	r3, r5, #16
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	435a      	muls	r2, r3
 8001b06:	437b      	muls	r3, r7
 8001b08:	469c      	mov	ip, r3
 8001b0a:	0c29      	lsrs	r1, r5, #16
 8001b0c:	4348      	muls	r0, r1
 8001b0e:	0c13      	lsrs	r3, r2, #16
 8001b10:	4484      	add	ip, r0
 8001b12:	4463      	add	r3, ip
 8001b14:	4379      	muls	r1, r7
 8001b16:	4298      	cmp	r0, r3
 8001b18:	d903      	bls.n	8001b22 <__aeabi_ddiv+0x242>
 8001b1a:	2080      	movs	r0, #128	; 0x80
 8001b1c:	0240      	lsls	r0, r0, #9
 8001b1e:	4684      	mov	ip, r0
 8001b20:	4461      	add	r1, ip
 8001b22:	0c18      	lsrs	r0, r3, #16
 8001b24:	0412      	lsls	r2, r2, #16
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	0c12      	lsrs	r2, r2, #16
 8001b2a:	1841      	adds	r1, r0, r1
 8001b2c:	189b      	adds	r3, r3, r2
 8001b2e:	428e      	cmp	r6, r1
 8001b30:	d200      	bcs.n	8001b34 <__aeabi_ddiv+0x254>
 8001b32:	e0ff      	b.n	8001d34 <__aeabi_ddiv+0x454>
 8001b34:	d100      	bne.n	8001b38 <__aeabi_ddiv+0x258>
 8001b36:	e0fa      	b.n	8001d2e <__aeabi_ddiv+0x44e>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <__aeabi_ddiv+0x384>)
 8001b3e:	445a      	add	r2, fp
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_ddiv+0x266>
 8001b44:	e0aa      	b.n	8001c9c <__aeabi_ddiv+0x3bc>
 8001b46:	076b      	lsls	r3, r5, #29
 8001b48:	d000      	beq.n	8001b4c <__aeabi_ddiv+0x26c>
 8001b4a:	e13d      	b.n	8001dc8 <__aeabi_ddiv+0x4e8>
 8001b4c:	08ed      	lsrs	r5, r5, #3
 8001b4e:	4643      	mov	r3, r8
 8001b50:	01db      	lsls	r3, r3, #7
 8001b52:	d506      	bpl.n	8001b62 <__aeabi_ddiv+0x282>
 8001b54:	4642      	mov	r2, r8
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <__aeabi_ddiv+0x388>)
 8001b58:	401a      	ands	r2, r3
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	00d2      	lsls	r2, r2, #3
 8001b60:	445a      	add	r2, fp
 8001b62:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <__aeabi_ddiv+0x38c>)
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_ddiv+0x28a>
 8001b68:	e71f      	b.n	80019aa <__aeabi_ddiv+0xca>
 8001b6a:	4643      	mov	r3, r8
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	431d      	orrs	r5, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	0552      	lsls	r2, r2, #21
 8001b74:	025c      	lsls	r4, r3, #9
 8001b76:	0b24      	lsrs	r4, r4, #12
 8001b78:	0d53      	lsrs	r3, r2, #21
 8001b7a:	e708      	b.n	800198e <__aeabi_ddiv+0xae>
 8001b7c:	4652      	mov	r2, sl
 8001b7e:	4322      	orrs	r2, r4
 8001b80:	d100      	bne.n	8001b84 <__aeabi_ddiv+0x2a4>
 8001b82:	e07b      	b.n	8001c7c <__aeabi_ddiv+0x39c>
 8001b84:	2c00      	cmp	r4, #0
 8001b86:	d100      	bne.n	8001b8a <__aeabi_ddiv+0x2aa>
 8001b88:	e0fa      	b.n	8001d80 <__aeabi_ddiv+0x4a0>
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	f001 fa22 	bl	8002fd4 <__clzsi2>
 8001b90:	0002      	movs	r2, r0
 8001b92:	3a0b      	subs	r2, #11
 8001b94:	231d      	movs	r3, #29
 8001b96:	0001      	movs	r1, r0
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	4652      	mov	r2, sl
 8001b9c:	3908      	subs	r1, #8
 8001b9e:	40da      	lsrs	r2, r3
 8001ba0:	408c      	lsls	r4, r1
 8001ba2:	4314      	orrs	r4, r2
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	408a      	lsls	r2, r1
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <__aeabi_ddiv+0x390>)
 8001baa:	4458      	add	r0, fp
 8001bac:	469b      	mov	fp, r3
 8001bae:	4483      	add	fp, r0
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e6d5      	b.n	8001960 <__aeabi_ddiv+0x80>
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	4698      	mov	r8, r3
 8001bba:	d044      	beq.n	8001c46 <__aeabi_ddiv+0x366>
 8001bbc:	2c00      	cmp	r4, #0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_ddiv+0x2e2>
 8001bc0:	e0ce      	b.n	8001d60 <__aeabi_ddiv+0x480>
 8001bc2:	0020      	movs	r0, r4
 8001bc4:	f001 fa06 	bl	8002fd4 <__clzsi2>
 8001bc8:	0001      	movs	r1, r0
 8001bca:	0002      	movs	r2, r0
 8001bcc:	390b      	subs	r1, #11
 8001bce:	231d      	movs	r3, #29
 8001bd0:	1a5b      	subs	r3, r3, r1
 8001bd2:	4649      	mov	r1, r9
 8001bd4:	0010      	movs	r0, r2
 8001bd6:	40d9      	lsrs	r1, r3
 8001bd8:	3808      	subs	r0, #8
 8001bda:	4084      	lsls	r4, r0
 8001bdc:	000b      	movs	r3, r1
 8001bde:	464d      	mov	r5, r9
 8001be0:	4323      	orrs	r3, r4
 8001be2:	4698      	mov	r8, r3
 8001be4:	4085      	lsls	r5, r0
 8001be6:	4823      	ldr	r0, [pc, #140]	; (8001c74 <__aeabi_ddiv+0x394>)
 8001be8:	1a83      	subs	r3, r0, r2
 8001bea:	469b      	mov	fp, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	4699      	mov	r9, r3
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	e69a      	b.n	800192a <__aeabi_ddiv+0x4a>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	d11d      	bne.n	8001c38 <__aeabi_ddiv+0x358>
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	4699      	mov	r9, r3
 8001c00:	3b06      	subs	r3, #6
 8001c02:	2500      	movs	r5, #0
 8001c04:	4683      	mov	fp, r0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	e68f      	b.n	800192a <__aeabi_ddiv+0x4a>
 8001c0a:	4652      	mov	r2, sl
 8001c0c:	4322      	orrs	r2, r4
 8001c0e:	d109      	bne.n	8001c24 <__aeabi_ddiv+0x344>
 8001c10:	2302      	movs	r3, #2
 8001c12:	4649      	mov	r1, r9
 8001c14:	4319      	orrs	r1, r3
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <__aeabi_ddiv+0x398>)
 8001c18:	4689      	mov	r9, r1
 8001c1a:	469c      	mov	ip, r3
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	2002      	movs	r0, #2
 8001c20:	44e3      	add	fp, ip
 8001c22:	e69d      	b.n	8001960 <__aeabi_ddiv+0x80>
 8001c24:	2303      	movs	r3, #3
 8001c26:	464a      	mov	r2, r9
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <__aeabi_ddiv+0x398>)
 8001c2c:	4691      	mov	r9, r2
 8001c2e:	469c      	mov	ip, r3
 8001c30:	4652      	mov	r2, sl
 8001c32:	2003      	movs	r0, #3
 8001c34:	44e3      	add	fp, ip
 8001c36:	e693      	b.n	8001960 <__aeabi_ddiv+0x80>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	4699      	mov	r9, r3
 8001c3c:	3b09      	subs	r3, #9
 8001c3e:	46a0      	mov	r8, r4
 8001c40:	4683      	mov	fp, r0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	e671      	b.n	800192a <__aeabi_ddiv+0x4a>
 8001c46:	2304      	movs	r3, #4
 8001c48:	4699      	mov	r9, r3
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	469b      	mov	fp, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	2500      	movs	r5, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	e669      	b.n	800192a <__aeabi_ddiv+0x4a>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	fffffc01 	.word	0xfffffc01
 8001c60:	0800adc4 	.word	0x0800adc4
 8001c64:	000003ff 	.word	0x000003ff
 8001c68:	feffffff 	.word	0xfeffffff
 8001c6c:	000007fe 	.word	0x000007fe
 8001c70:	000003f3 	.word	0x000003f3
 8001c74:	fffffc0d 	.word	0xfffffc0d
 8001c78:	fffff801 	.word	0xfffff801
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4319      	orrs	r1, r3
 8001c82:	4689      	mov	r9, r1
 8001c84:	2400      	movs	r4, #0
 8001c86:	2001      	movs	r0, #1
 8001c88:	e66a      	b.n	8001960 <__aeabi_ddiv+0x80>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2480      	movs	r4, #128	; 0x80
 8001c8e:	469a      	mov	sl, r3
 8001c90:	2500      	movs	r5, #0
 8001c92:	4b8a      	ldr	r3, [pc, #552]	; (8001ebc <__aeabi_ddiv+0x5dc>)
 8001c94:	0324      	lsls	r4, r4, #12
 8001c96:	e67a      	b.n	800198e <__aeabi_ddiv+0xae>
 8001c98:	2501      	movs	r5, #1
 8001c9a:	426d      	negs	r5, r5
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	2b38      	cmp	r3, #56	; 0x38
 8001ca2:	dd00      	ble.n	8001ca6 <__aeabi_ddiv+0x3c6>
 8001ca4:	e670      	b.n	8001988 <__aeabi_ddiv+0xa8>
 8001ca6:	2b1f      	cmp	r3, #31
 8001ca8:	dc00      	bgt.n	8001cac <__aeabi_ddiv+0x3cc>
 8001caa:	e0bf      	b.n	8001e2c <__aeabi_ddiv+0x54c>
 8001cac:	211f      	movs	r1, #31
 8001cae:	4249      	negs	r1, r1
 8001cb0:	1a8a      	subs	r2, r1, r2
 8001cb2:	4641      	mov	r1, r8
 8001cb4:	40d1      	lsrs	r1, r2
 8001cb6:	000a      	movs	r2, r1
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d004      	beq.n	8001cc6 <__aeabi_ddiv+0x3e6>
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	4b80      	ldr	r3, [pc, #512]	; (8001ec0 <__aeabi_ddiv+0x5e0>)
 8001cc0:	445b      	add	r3, fp
 8001cc2:	4099      	lsls	r1, r3
 8001cc4:	430d      	orrs	r5, r1
 8001cc6:	1e6b      	subs	r3, r5, #1
 8001cc8:	419d      	sbcs	r5, r3
 8001cca:	2307      	movs	r3, #7
 8001ccc:	432a      	orrs	r2, r5
 8001cce:	001d      	movs	r5, r3
 8001cd0:	2400      	movs	r4, #0
 8001cd2:	4015      	ands	r5, r2
 8001cd4:	4213      	tst	r3, r2
 8001cd6:	d100      	bne.n	8001cda <__aeabi_ddiv+0x3fa>
 8001cd8:	e0d4      	b.n	8001e84 <__aeabi_ddiv+0x5a4>
 8001cda:	210f      	movs	r1, #15
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4011      	ands	r1, r2
 8001ce0:	2904      	cmp	r1, #4
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_ddiv+0x406>
 8001ce4:	e0cb      	b.n	8001e7e <__aeabi_ddiv+0x59e>
 8001ce6:	1d11      	adds	r1, r2, #4
 8001ce8:	4291      	cmp	r1, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	4252      	negs	r2, r2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	000a      	movs	r2, r1
 8001cf2:	0219      	lsls	r1, r3, #8
 8001cf4:	d400      	bmi.n	8001cf8 <__aeabi_ddiv+0x418>
 8001cf6:	e0c2      	b.n	8001e7e <__aeabi_ddiv+0x59e>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2400      	movs	r4, #0
 8001cfc:	2500      	movs	r5, #0
 8001cfe:	e646      	b.n	800198e <__aeabi_ddiv+0xae>
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	4641      	mov	r1, r8
 8001d04:	031b      	lsls	r3, r3, #12
 8001d06:	4219      	tst	r1, r3
 8001d08:	d008      	beq.n	8001d1c <__aeabi_ddiv+0x43c>
 8001d0a:	421c      	tst	r4, r3
 8001d0c:	d106      	bne.n	8001d1c <__aeabi_ddiv+0x43c>
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	46ba      	mov	sl, r7
 8001d14:	0015      	movs	r5, r2
 8001d16:	4b69      	ldr	r3, [pc, #420]	; (8001ebc <__aeabi_ddiv+0x5dc>)
 8001d18:	0b24      	lsrs	r4, r4, #12
 8001d1a:	e638      	b.n	800198e <__aeabi_ddiv+0xae>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	4643      	mov	r3, r8
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	431c      	orrs	r4, r3
 8001d24:	0324      	lsls	r4, r4, #12
 8001d26:	46b2      	mov	sl, r6
 8001d28:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <__aeabi_ddiv+0x5dc>)
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	e62f      	b.n	800198e <__aeabi_ddiv+0xae>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_ddiv+0x454>
 8001d32:	e703      	b.n	8001b3c <__aeabi_ddiv+0x25c>
 8001d34:	19a6      	adds	r6, r4, r6
 8001d36:	1e68      	subs	r0, r5, #1
 8001d38:	42a6      	cmp	r6, r4
 8001d3a:	d200      	bcs.n	8001d3e <__aeabi_ddiv+0x45e>
 8001d3c:	e08d      	b.n	8001e5a <__aeabi_ddiv+0x57a>
 8001d3e:	428e      	cmp	r6, r1
 8001d40:	d200      	bcs.n	8001d44 <__aeabi_ddiv+0x464>
 8001d42:	e0a3      	b.n	8001e8c <__aeabi_ddiv+0x5ac>
 8001d44:	d100      	bne.n	8001d48 <__aeabi_ddiv+0x468>
 8001d46:	e0b3      	b.n	8001eb0 <__aeabi_ddiv+0x5d0>
 8001d48:	0005      	movs	r5, r0
 8001d4a:	e6f5      	b.n	8001b38 <__aeabi_ddiv+0x258>
 8001d4c:	42aa      	cmp	r2, r5
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x472>
 8001d50:	e639      	b.n	80019c6 <__aeabi_ddiv+0xe6>
 8001d52:	4643      	mov	r3, r8
 8001d54:	07de      	lsls	r6, r3, #31
 8001d56:	0858      	lsrs	r0, r3, #1
 8001d58:	086b      	lsrs	r3, r5, #1
 8001d5a:	431e      	orrs	r6, r3
 8001d5c:	07ed      	lsls	r5, r5, #31
 8001d5e:	e639      	b.n	80019d4 <__aeabi_ddiv+0xf4>
 8001d60:	4648      	mov	r0, r9
 8001d62:	f001 f937 	bl	8002fd4 <__clzsi2>
 8001d66:	0001      	movs	r1, r0
 8001d68:	0002      	movs	r2, r0
 8001d6a:	3115      	adds	r1, #21
 8001d6c:	3220      	adds	r2, #32
 8001d6e:	291c      	cmp	r1, #28
 8001d70:	dc00      	bgt.n	8001d74 <__aeabi_ddiv+0x494>
 8001d72:	e72c      	b.n	8001bce <__aeabi_ddiv+0x2ee>
 8001d74:	464b      	mov	r3, r9
 8001d76:	3808      	subs	r0, #8
 8001d78:	4083      	lsls	r3, r0
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	4698      	mov	r8, r3
 8001d7e:	e732      	b.n	8001be6 <__aeabi_ddiv+0x306>
 8001d80:	f001 f928 	bl	8002fd4 <__clzsi2>
 8001d84:	0003      	movs	r3, r0
 8001d86:	001a      	movs	r2, r3
 8001d88:	3215      	adds	r2, #21
 8001d8a:	3020      	adds	r0, #32
 8001d8c:	2a1c      	cmp	r2, #28
 8001d8e:	dc00      	bgt.n	8001d92 <__aeabi_ddiv+0x4b2>
 8001d90:	e700      	b.n	8001b94 <__aeabi_ddiv+0x2b4>
 8001d92:	4654      	mov	r4, sl
 8001d94:	3b08      	subs	r3, #8
 8001d96:	2200      	movs	r2, #0
 8001d98:	409c      	lsls	r4, r3
 8001d9a:	e705      	b.n	8001ba8 <__aeabi_ddiv+0x2c8>
 8001d9c:	1936      	adds	r6, r6, r4
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	42b4      	cmp	r4, r6
 8001da2:	d900      	bls.n	8001da6 <__aeabi_ddiv+0x4c6>
 8001da4:	e6a6      	b.n	8001af4 <__aeabi_ddiv+0x214>
 8001da6:	42b2      	cmp	r2, r6
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x4cc>
 8001daa:	e6a3      	b.n	8001af4 <__aeabi_ddiv+0x214>
 8001dac:	1e83      	subs	r3, r0, #2
 8001dae:	1936      	adds	r6, r6, r4
 8001db0:	e6a0      	b.n	8001af4 <__aeabi_ddiv+0x214>
 8001db2:	1909      	adds	r1, r1, r4
 8001db4:	3d01      	subs	r5, #1
 8001db6:	428c      	cmp	r4, r1
 8001db8:	d900      	bls.n	8001dbc <__aeabi_ddiv+0x4dc>
 8001dba:	e68d      	b.n	8001ad8 <__aeabi_ddiv+0x1f8>
 8001dbc:	428a      	cmp	r2, r1
 8001dbe:	d800      	bhi.n	8001dc2 <__aeabi_ddiv+0x4e2>
 8001dc0:	e68a      	b.n	8001ad8 <__aeabi_ddiv+0x1f8>
 8001dc2:	1e85      	subs	r5, r0, #2
 8001dc4:	1909      	adds	r1, r1, r4
 8001dc6:	e687      	b.n	8001ad8 <__aeabi_ddiv+0x1f8>
 8001dc8:	230f      	movs	r3, #15
 8001dca:	402b      	ands	r3, r5
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_ddiv+0x4f2>
 8001dd0:	e6bc      	b.n	8001b4c <__aeabi_ddiv+0x26c>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	42ab      	cmp	r3, r5
 8001dd8:	419b      	sbcs	r3, r3
 8001dda:	3504      	adds	r5, #4
 8001ddc:	425b      	negs	r3, r3
 8001dde:	08ed      	lsrs	r5, r5, #3
 8001de0:	4498      	add	r8, r3
 8001de2:	e6b4      	b.n	8001b4e <__aeabi_ddiv+0x26e>
 8001de4:	42af      	cmp	r7, r5
 8001de6:	d900      	bls.n	8001dea <__aeabi_ddiv+0x50a>
 8001de8:	e660      	b.n	8001aac <__aeabi_ddiv+0x1cc>
 8001dea:	4282      	cmp	r2, r0
 8001dec:	d804      	bhi.n	8001df8 <__aeabi_ddiv+0x518>
 8001dee:	d000      	beq.n	8001df2 <__aeabi_ddiv+0x512>
 8001df0:	e65c      	b.n	8001aac <__aeabi_ddiv+0x1cc>
 8001df2:	42ae      	cmp	r6, r5
 8001df4:	d800      	bhi.n	8001df8 <__aeabi_ddiv+0x518>
 8001df6:	e659      	b.n	8001aac <__aeabi_ddiv+0x1cc>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	469c      	mov	ip, r3
 8001dfe:	9b00      	ldr	r3, [sp, #0]
 8001e00:	44e0      	add	r8, ip
 8001e02:	469c      	mov	ip, r3
 8001e04:	4465      	add	r5, ip
 8001e06:	429d      	cmp	r5, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	191b      	adds	r3, r3, r4
 8001e0e:	18c0      	adds	r0, r0, r3
 8001e10:	e64d      	b.n	8001aae <__aeabi_ddiv+0x1ce>
 8001e12:	428a      	cmp	r2, r1
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x538>
 8001e16:	e60e      	b.n	8001a36 <__aeabi_ddiv+0x156>
 8001e18:	1e83      	subs	r3, r0, #2
 8001e1a:	1909      	adds	r1, r1, r4
 8001e1c:	e60b      	b.n	8001a36 <__aeabi_ddiv+0x156>
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	d800      	bhi.n	8001e24 <__aeabi_ddiv+0x544>
 8001e22:	e5f4      	b.n	8001a0e <__aeabi_ddiv+0x12e>
 8001e24:	1e83      	subs	r3, r0, #2
 8001e26:	4698      	mov	r8, r3
 8001e28:	1909      	adds	r1, r1, r4
 8001e2a:	e5f0      	b.n	8001a0e <__aeabi_ddiv+0x12e>
 8001e2c:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <__aeabi_ddiv+0x5e4>)
 8001e2e:	0028      	movs	r0, r5
 8001e30:	4459      	add	r1, fp
 8001e32:	408d      	lsls	r5, r1
 8001e34:	4642      	mov	r2, r8
 8001e36:	408a      	lsls	r2, r1
 8001e38:	1e69      	subs	r1, r5, #1
 8001e3a:	418d      	sbcs	r5, r1
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	40d8      	lsrs	r0, r3
 8001e40:	40d9      	lsrs	r1, r3
 8001e42:	4302      	orrs	r2, r0
 8001e44:	432a      	orrs	r2, r5
 8001e46:	000b      	movs	r3, r1
 8001e48:	0751      	lsls	r1, r2, #29
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_ddiv+0x56e>
 8001e4c:	e751      	b.n	8001cf2 <__aeabi_ddiv+0x412>
 8001e4e:	210f      	movs	r1, #15
 8001e50:	4011      	ands	r1, r2
 8001e52:	2904      	cmp	r1, #4
 8001e54:	d000      	beq.n	8001e58 <__aeabi_ddiv+0x578>
 8001e56:	e746      	b.n	8001ce6 <__aeabi_ddiv+0x406>
 8001e58:	e74b      	b.n	8001cf2 <__aeabi_ddiv+0x412>
 8001e5a:	0005      	movs	r5, r0
 8001e5c:	428e      	cmp	r6, r1
 8001e5e:	d000      	beq.n	8001e62 <__aeabi_ddiv+0x582>
 8001e60:	e66a      	b.n	8001b38 <__aeabi_ddiv+0x258>
 8001e62:	9a00      	ldr	r2, [sp, #0]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d000      	beq.n	8001e6a <__aeabi_ddiv+0x58a>
 8001e68:	e666      	b.n	8001b38 <__aeabi_ddiv+0x258>
 8001e6a:	e667      	b.n	8001b3c <__aeabi_ddiv+0x25c>
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <__aeabi_ddiv+0x5e8>)
 8001e6e:	445a      	add	r2, fp
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	dc00      	bgt.n	8001e76 <__aeabi_ddiv+0x596>
 8001e74:	e710      	b.n	8001c98 <__aeabi_ddiv+0x3b8>
 8001e76:	2301      	movs	r3, #1
 8001e78:	2500      	movs	r5, #0
 8001e7a:	4498      	add	r8, r3
 8001e7c:	e667      	b.n	8001b4e <__aeabi_ddiv+0x26e>
 8001e7e:	075d      	lsls	r5, r3, #29
 8001e80:	025b      	lsls	r3, r3, #9
 8001e82:	0b1c      	lsrs	r4, r3, #12
 8001e84:	08d2      	lsrs	r2, r2, #3
 8001e86:	2300      	movs	r3, #0
 8001e88:	4315      	orrs	r5, r2
 8001e8a:	e580      	b.n	800198e <__aeabi_ddiv+0xae>
 8001e8c:	9800      	ldr	r0, [sp, #0]
 8001e8e:	3d02      	subs	r5, #2
 8001e90:	0042      	lsls	r2, r0, #1
 8001e92:	4282      	cmp	r2, r0
 8001e94:	41bf      	sbcs	r7, r7
 8001e96:	427f      	negs	r7, r7
 8001e98:	193c      	adds	r4, r7, r4
 8001e9a:	1936      	adds	r6, r6, r4
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	e7dd      	b.n	8001e5c <__aeabi_ddiv+0x57c>
 8001ea0:	2480      	movs	r4, #128	; 0x80
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	0324      	lsls	r4, r4, #12
 8001ea6:	431c      	orrs	r4, r3
 8001ea8:	0324      	lsls	r4, r4, #12
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__aeabi_ddiv+0x5dc>)
 8001eac:	0b24      	lsrs	r4, r4, #12
 8001eae:	e56e      	b.n	800198e <__aeabi_ddiv+0xae>
 8001eb0:	9a00      	ldr	r2, [sp, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d3ea      	bcc.n	8001e8c <__aeabi_ddiv+0x5ac>
 8001eb6:	0005      	movs	r5, r0
 8001eb8:	e7d3      	b.n	8001e62 <__aeabi_ddiv+0x582>
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	000007ff 	.word	0x000007ff
 8001ec0:	0000043e 	.word	0x0000043e
 8001ec4:	0000041e 	.word	0x0000041e
 8001ec8:	000003ff 	.word	0x000003ff

08001ecc <__eqdf2>:
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	464e      	mov	r6, r9
 8001ed0:	4645      	mov	r5, r8
 8001ed2:	46de      	mov	lr, fp
 8001ed4:	4657      	mov	r7, sl
 8001ed6:	4690      	mov	r8, r2
 8001ed8:	b5e0      	push	{r5, r6, r7, lr}
 8001eda:	0017      	movs	r7, r2
 8001edc:	031a      	lsls	r2, r3, #12
 8001ede:	0b12      	lsrs	r2, r2, #12
 8001ee0:	0005      	movs	r5, r0
 8001ee2:	4684      	mov	ip, r0
 8001ee4:	4819      	ldr	r0, [pc, #100]	; (8001f4c <__eqdf2+0x80>)
 8001ee6:	030e      	lsls	r6, r1, #12
 8001ee8:	004c      	lsls	r4, r1, #1
 8001eea:	4691      	mov	r9, r2
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	0fdb      	lsrs	r3, r3, #31
 8001ef0:	469b      	mov	fp, r3
 8001ef2:	0b36      	lsrs	r6, r6, #12
 8001ef4:	0d64      	lsrs	r4, r4, #21
 8001ef6:	0fc9      	lsrs	r1, r1, #31
 8001ef8:	0d52      	lsrs	r2, r2, #21
 8001efa:	4284      	cmp	r4, r0
 8001efc:	d019      	beq.n	8001f32 <__eqdf2+0x66>
 8001efe:	4282      	cmp	r2, r0
 8001f00:	d010      	beq.n	8001f24 <__eqdf2+0x58>
 8001f02:	2001      	movs	r0, #1
 8001f04:	4294      	cmp	r4, r2
 8001f06:	d10e      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f08:	454e      	cmp	r6, r9
 8001f0a:	d10c      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	45c4      	cmp	ip, r8
 8001f10:	d109      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f12:	4559      	cmp	r1, fp
 8001f14:	d017      	beq.n	8001f46 <__eqdf2+0x7a>
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d105      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f1a:	0030      	movs	r0, r6
 8001f1c:	4328      	orrs	r0, r5
 8001f1e:	1e43      	subs	r3, r0, #1
 8001f20:	4198      	sbcs	r0, r3
 8001f22:	e000      	b.n	8001f26 <__eqdf2+0x5a>
 8001f24:	2001      	movs	r0, #1
 8001f26:	bcf0      	pop	{r4, r5, r6, r7}
 8001f28:	46bb      	mov	fp, r7
 8001f2a:	46b2      	mov	sl, r6
 8001f2c:	46a9      	mov	r9, r5
 8001f2e:	46a0      	mov	r8, r4
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f32:	0033      	movs	r3, r6
 8001f34:	2001      	movs	r0, #1
 8001f36:	432b      	orrs	r3, r5
 8001f38:	d1f5      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f3a:	42a2      	cmp	r2, r4
 8001f3c:	d1f3      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f3e:	464b      	mov	r3, r9
 8001f40:	433b      	orrs	r3, r7
 8001f42:	d1f0      	bne.n	8001f26 <__eqdf2+0x5a>
 8001f44:	e7e2      	b.n	8001f0c <__eqdf2+0x40>
 8001f46:	2000      	movs	r0, #0
 8001f48:	e7ed      	b.n	8001f26 <__eqdf2+0x5a>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000007ff 	.word	0x000007ff

08001f50 <__gedf2>:
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	4647      	mov	r7, r8
 8001f54:	46ce      	mov	lr, r9
 8001f56:	0004      	movs	r4, r0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	0016      	movs	r6, r2
 8001f5c:	031b      	lsls	r3, r3, #12
 8001f5e:	0b1b      	lsrs	r3, r3, #12
 8001f60:	4d2d      	ldr	r5, [pc, #180]	; (8002018 <__gedf2+0xc8>)
 8001f62:	004a      	lsls	r2, r1, #1
 8001f64:	4699      	mov	r9, r3
 8001f66:	b580      	push	{r7, lr}
 8001f68:	0043      	lsls	r3, r0, #1
 8001f6a:	030f      	lsls	r7, r1, #12
 8001f6c:	46a4      	mov	ip, r4
 8001f6e:	46b0      	mov	r8, r6
 8001f70:	0b3f      	lsrs	r7, r7, #12
 8001f72:	0d52      	lsrs	r2, r2, #21
 8001f74:	0fc9      	lsrs	r1, r1, #31
 8001f76:	0d5b      	lsrs	r3, r3, #21
 8001f78:	0fc0      	lsrs	r0, r0, #31
 8001f7a:	42aa      	cmp	r2, r5
 8001f7c:	d021      	beq.n	8001fc2 <__gedf2+0x72>
 8001f7e:	42ab      	cmp	r3, r5
 8001f80:	d013      	beq.n	8001faa <__gedf2+0x5a>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d122      	bne.n	8001fcc <__gedf2+0x7c>
 8001f86:	433c      	orrs	r4, r7
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <__gedf2+0x42>
 8001f8c:	464d      	mov	r5, r9
 8001f8e:	432e      	orrs	r6, r5
 8001f90:	d022      	beq.n	8001fd8 <__gedf2+0x88>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d010      	beq.n	8001fb8 <__gedf2+0x68>
 8001f96:	4281      	cmp	r1, r0
 8001f98:	d022      	beq.n	8001fe0 <__gedf2+0x90>
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	3901      	subs	r1, #1
 8001f9e:	4008      	ands	r0, r1
 8001fa0:	3801      	subs	r0, #1
 8001fa2:	bcc0      	pop	{r6, r7}
 8001fa4:	46b9      	mov	r9, r7
 8001fa6:	46b0      	mov	r8, r6
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001faa:	464d      	mov	r5, r9
 8001fac:	432e      	orrs	r6, r5
 8001fae:	d129      	bne.n	8002004 <__gedf2+0xb4>
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d1f0      	bne.n	8001f96 <__gedf2+0x46>
 8001fb4:	433c      	orrs	r4, r7
 8001fb6:	d1ee      	bne.n	8001f96 <__gedf2+0x46>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d1f2      	bne.n	8001fa2 <__gedf2+0x52>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	e7ef      	b.n	8001fa2 <__gedf2+0x52>
 8001fc2:	003d      	movs	r5, r7
 8001fc4:	4325      	orrs	r5, r4
 8001fc6:	d11d      	bne.n	8002004 <__gedf2+0xb4>
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d0ee      	beq.n	8001faa <__gedf2+0x5a>
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e2      	bne.n	8001f96 <__gedf2+0x46>
 8001fd0:	464c      	mov	r4, r9
 8001fd2:	4326      	orrs	r6, r4
 8001fd4:	d1df      	bne.n	8001f96 <__gedf2+0x46>
 8001fd6:	e7e0      	b.n	8001f9a <__gedf2+0x4a>
 8001fd8:	2000      	movs	r0, #0
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d0e1      	beq.n	8001fa2 <__gedf2+0x52>
 8001fde:	e7dc      	b.n	8001f9a <__gedf2+0x4a>
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dc0a      	bgt.n	8001ffa <__gedf2+0xaa>
 8001fe4:	dbe8      	blt.n	8001fb8 <__gedf2+0x68>
 8001fe6:	454f      	cmp	r7, r9
 8001fe8:	d8d7      	bhi.n	8001f9a <__gedf2+0x4a>
 8001fea:	d00e      	beq.n	800200a <__gedf2+0xba>
 8001fec:	2000      	movs	r0, #0
 8001fee:	454f      	cmp	r7, r9
 8001ff0:	d2d7      	bcs.n	8001fa2 <__gedf2+0x52>
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	d0e2      	beq.n	8001fbc <__gedf2+0x6c>
 8001ff6:	0008      	movs	r0, r1
 8001ff8:	e7d3      	b.n	8001fa2 <__gedf2+0x52>
 8001ffa:	4243      	negs	r3, r0
 8001ffc:	4158      	adcs	r0, r3
 8001ffe:	0040      	lsls	r0, r0, #1
 8002000:	3801      	subs	r0, #1
 8002002:	e7ce      	b.n	8001fa2 <__gedf2+0x52>
 8002004:	2002      	movs	r0, #2
 8002006:	4240      	negs	r0, r0
 8002008:	e7cb      	b.n	8001fa2 <__gedf2+0x52>
 800200a:	45c4      	cmp	ip, r8
 800200c:	d8c5      	bhi.n	8001f9a <__gedf2+0x4a>
 800200e:	2000      	movs	r0, #0
 8002010:	45c4      	cmp	ip, r8
 8002012:	d2c6      	bcs.n	8001fa2 <__gedf2+0x52>
 8002014:	e7ed      	b.n	8001ff2 <__gedf2+0xa2>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	000007ff 	.word	0x000007ff

0800201c <__ledf2>:
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201e:	4647      	mov	r7, r8
 8002020:	46ce      	mov	lr, r9
 8002022:	0004      	movs	r4, r0
 8002024:	0018      	movs	r0, r3
 8002026:	0016      	movs	r6, r2
 8002028:	031b      	lsls	r3, r3, #12
 800202a:	0b1b      	lsrs	r3, r3, #12
 800202c:	4d2c      	ldr	r5, [pc, #176]	; (80020e0 <__ledf2+0xc4>)
 800202e:	004a      	lsls	r2, r1, #1
 8002030:	4699      	mov	r9, r3
 8002032:	b580      	push	{r7, lr}
 8002034:	0043      	lsls	r3, r0, #1
 8002036:	030f      	lsls	r7, r1, #12
 8002038:	46a4      	mov	ip, r4
 800203a:	46b0      	mov	r8, r6
 800203c:	0b3f      	lsrs	r7, r7, #12
 800203e:	0d52      	lsrs	r2, r2, #21
 8002040:	0fc9      	lsrs	r1, r1, #31
 8002042:	0d5b      	lsrs	r3, r3, #21
 8002044:	0fc0      	lsrs	r0, r0, #31
 8002046:	42aa      	cmp	r2, r5
 8002048:	d00d      	beq.n	8002066 <__ledf2+0x4a>
 800204a:	42ab      	cmp	r3, r5
 800204c:	d010      	beq.n	8002070 <__ledf2+0x54>
 800204e:	2a00      	cmp	r2, #0
 8002050:	d127      	bne.n	80020a2 <__ledf2+0x86>
 8002052:	433c      	orrs	r4, r7
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <__ledf2+0x60>
 8002058:	464d      	mov	r5, r9
 800205a:	432e      	orrs	r6, r5
 800205c:	d10e      	bne.n	800207c <__ledf2+0x60>
 800205e:	2000      	movs	r0, #0
 8002060:	2c00      	cmp	r4, #0
 8002062:	d015      	beq.n	8002090 <__ledf2+0x74>
 8002064:	e00e      	b.n	8002084 <__ledf2+0x68>
 8002066:	003d      	movs	r5, r7
 8002068:	4325      	orrs	r5, r4
 800206a:	d110      	bne.n	800208e <__ledf2+0x72>
 800206c:	4293      	cmp	r3, r2
 800206e:	d118      	bne.n	80020a2 <__ledf2+0x86>
 8002070:	464d      	mov	r5, r9
 8002072:	432e      	orrs	r6, r5
 8002074:	d10b      	bne.n	800208e <__ledf2+0x72>
 8002076:	2a00      	cmp	r2, #0
 8002078:	d102      	bne.n	8002080 <__ledf2+0x64>
 800207a:	433c      	orrs	r4, r7
 800207c:	2c00      	cmp	r4, #0
 800207e:	d00b      	beq.n	8002098 <__ledf2+0x7c>
 8002080:	4281      	cmp	r1, r0
 8002082:	d014      	beq.n	80020ae <__ledf2+0x92>
 8002084:	2002      	movs	r0, #2
 8002086:	3901      	subs	r1, #1
 8002088:	4008      	ands	r0, r1
 800208a:	3801      	subs	r0, #1
 800208c:	e000      	b.n	8002090 <__ledf2+0x74>
 800208e:	2002      	movs	r0, #2
 8002090:	bcc0      	pop	{r6, r7}
 8002092:	46b9      	mov	r9, r7
 8002094:	46b0      	mov	r8, r6
 8002096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002098:	2800      	cmp	r0, #0
 800209a:	d1f9      	bne.n	8002090 <__ledf2+0x74>
 800209c:	2001      	movs	r0, #1
 800209e:	4240      	negs	r0, r0
 80020a0:	e7f6      	b.n	8002090 <__ledf2+0x74>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ec      	bne.n	8002080 <__ledf2+0x64>
 80020a6:	464c      	mov	r4, r9
 80020a8:	4326      	orrs	r6, r4
 80020aa:	d1e9      	bne.n	8002080 <__ledf2+0x64>
 80020ac:	e7ea      	b.n	8002084 <__ledf2+0x68>
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dd04      	ble.n	80020bc <__ledf2+0xa0>
 80020b2:	4243      	negs	r3, r0
 80020b4:	4158      	adcs	r0, r3
 80020b6:	0040      	lsls	r0, r0, #1
 80020b8:	3801      	subs	r0, #1
 80020ba:	e7e9      	b.n	8002090 <__ledf2+0x74>
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbeb      	blt.n	8002098 <__ledf2+0x7c>
 80020c0:	454f      	cmp	r7, r9
 80020c2:	d8df      	bhi.n	8002084 <__ledf2+0x68>
 80020c4:	d006      	beq.n	80020d4 <__ledf2+0xb8>
 80020c6:	2000      	movs	r0, #0
 80020c8:	454f      	cmp	r7, r9
 80020ca:	d2e1      	bcs.n	8002090 <__ledf2+0x74>
 80020cc:	2900      	cmp	r1, #0
 80020ce:	d0e5      	beq.n	800209c <__ledf2+0x80>
 80020d0:	0008      	movs	r0, r1
 80020d2:	e7dd      	b.n	8002090 <__ledf2+0x74>
 80020d4:	45c4      	cmp	ip, r8
 80020d6:	d8d5      	bhi.n	8002084 <__ledf2+0x68>
 80020d8:	2000      	movs	r0, #0
 80020da:	45c4      	cmp	ip, r8
 80020dc:	d2d8      	bcs.n	8002090 <__ledf2+0x74>
 80020de:	e7f5      	b.n	80020cc <__ledf2+0xb0>
 80020e0:	000007ff 	.word	0x000007ff

080020e4 <__aeabi_dmul>:
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	4645      	mov	r5, r8
 80020ec:	46de      	mov	lr, fp
 80020ee:	b5e0      	push	{r5, r6, r7, lr}
 80020f0:	4698      	mov	r8, r3
 80020f2:	030c      	lsls	r4, r1, #12
 80020f4:	004b      	lsls	r3, r1, #1
 80020f6:	0006      	movs	r6, r0
 80020f8:	4692      	mov	sl, r2
 80020fa:	b087      	sub	sp, #28
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d5b      	lsrs	r3, r3, #21
 8002100:	0fcf      	lsrs	r7, r1, #31
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <__aeabi_dmul+0x24>
 8002106:	e15c      	b.n	80023c2 <__aeabi_dmul+0x2de>
 8002108:	4ad9      	ldr	r2, [pc, #868]	; (8002470 <__aeabi_dmul+0x38c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d100      	bne.n	8002110 <__aeabi_dmul+0x2c>
 800210e:	e175      	b.n	80023fc <__aeabi_dmul+0x318>
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00e4      	lsls	r4, r4, #3
 8002114:	4314      	orrs	r4, r2
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	0412      	lsls	r2, r2, #16
 800211a:	4314      	orrs	r4, r2
 800211c:	4ad5      	ldr	r2, [pc, #852]	; (8002474 <__aeabi_dmul+0x390>)
 800211e:	00c5      	lsls	r5, r0, #3
 8002120:	4694      	mov	ip, r2
 8002122:	4463      	add	r3, ip
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2300      	movs	r3, #0
 8002128:	4699      	mov	r9, r3
 800212a:	469b      	mov	fp, r3
 800212c:	4643      	mov	r3, r8
 800212e:	4642      	mov	r2, r8
 8002130:	031e      	lsls	r6, r3, #12
 8002132:	0fd2      	lsrs	r2, r2, #31
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4650      	mov	r0, sl
 8002138:	4690      	mov	r8, r2
 800213a:	0b36      	lsrs	r6, r6, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	d100      	bne.n	8002142 <__aeabi_dmul+0x5e>
 8002140:	e120      	b.n	8002384 <__aeabi_dmul+0x2a0>
 8002142:	4acb      	ldr	r2, [pc, #812]	; (8002470 <__aeabi_dmul+0x38c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d100      	bne.n	800214a <__aeabi_dmul+0x66>
 8002148:	e162      	b.n	8002410 <__aeabi_dmul+0x32c>
 800214a:	49ca      	ldr	r1, [pc, #808]	; (8002474 <__aeabi_dmul+0x390>)
 800214c:	0f42      	lsrs	r2, r0, #29
 800214e:	468c      	mov	ip, r1
 8002150:	9900      	ldr	r1, [sp, #0]
 8002152:	4463      	add	r3, ip
 8002154:	00f6      	lsls	r6, r6, #3
 8002156:	468c      	mov	ip, r1
 8002158:	4316      	orrs	r6, r2
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	449c      	add	ip, r3
 800215e:	0412      	lsls	r2, r2, #16
 8002160:	4663      	mov	r3, ip
 8002162:	4316      	orrs	r6, r2
 8002164:	00c2      	lsls	r2, r0, #3
 8002166:	2000      	movs	r0, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	9900      	ldr	r1, [sp, #0]
 800216c:	4643      	mov	r3, r8
 800216e:	3101      	adds	r1, #1
 8002170:	468c      	mov	ip, r1
 8002172:	4649      	mov	r1, r9
 8002174:	407b      	eors	r3, r7
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	290f      	cmp	r1, #15
 800217a:	d826      	bhi.n	80021ca <__aeabi_dmul+0xe6>
 800217c:	4bbe      	ldr	r3, [pc, #760]	; (8002478 <__aeabi_dmul+0x394>)
 800217e:	0089      	lsls	r1, r1, #2
 8002180:	5859      	ldr	r1, [r3, r1]
 8002182:	468f      	mov	pc, r1
 8002184:	4643      	mov	r3, r8
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	0034      	movs	r4, r6
 800218a:	0015      	movs	r5, r2
 800218c:	4683      	mov	fp, r0
 800218e:	465b      	mov	r3, fp
 8002190:	2b02      	cmp	r3, #2
 8002192:	d016      	beq.n	80021c2 <__aeabi_dmul+0xde>
 8002194:	2b03      	cmp	r3, #3
 8002196:	d100      	bne.n	800219a <__aeabi_dmul+0xb6>
 8002198:	e203      	b.n	80025a2 <__aeabi_dmul+0x4be>
 800219a:	2b01      	cmp	r3, #1
 800219c:	d000      	beq.n	80021a0 <__aeabi_dmul+0xbc>
 800219e:	e0cd      	b.n	800233c <__aeabi_dmul+0x258>
 80021a0:	2200      	movs	r2, #0
 80021a2:	2400      	movs	r4, #0
 80021a4:	2500      	movs	r5, #0
 80021a6:	9b01      	ldr	r3, [sp, #4]
 80021a8:	0512      	lsls	r2, r2, #20
 80021aa:	4322      	orrs	r2, r4
 80021ac:	07db      	lsls	r3, r3, #31
 80021ae:	431a      	orrs	r2, r3
 80021b0:	0028      	movs	r0, r5
 80021b2:	0011      	movs	r1, r2
 80021b4:	b007      	add	sp, #28
 80021b6:	bcf0      	pop	{r4, r5, r6, r7}
 80021b8:	46bb      	mov	fp, r7
 80021ba:	46b2      	mov	sl, r6
 80021bc:	46a9      	mov	r9, r5
 80021be:	46a0      	mov	r8, r4
 80021c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c2:	2400      	movs	r4, #0
 80021c4:	2500      	movs	r5, #0
 80021c6:	4aaa      	ldr	r2, [pc, #680]	; (8002470 <__aeabi_dmul+0x38c>)
 80021c8:	e7ed      	b.n	80021a6 <__aeabi_dmul+0xc2>
 80021ca:	0c28      	lsrs	r0, r5, #16
 80021cc:	042d      	lsls	r5, r5, #16
 80021ce:	0c2d      	lsrs	r5, r5, #16
 80021d0:	002b      	movs	r3, r5
 80021d2:	0c11      	lsrs	r1, r2, #16
 80021d4:	0412      	lsls	r2, r2, #16
 80021d6:	0c12      	lsrs	r2, r2, #16
 80021d8:	4353      	muls	r3, r2
 80021da:	4698      	mov	r8, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	002f      	movs	r7, r5
 80021e0:	4343      	muls	r3, r0
 80021e2:	4699      	mov	r9, r3
 80021e4:	434f      	muls	r7, r1
 80021e6:	444f      	add	r7, r9
 80021e8:	46bb      	mov	fp, r7
 80021ea:	4647      	mov	r7, r8
 80021ec:	000b      	movs	r3, r1
 80021ee:	0c3f      	lsrs	r7, r7, #16
 80021f0:	46ba      	mov	sl, r7
 80021f2:	4343      	muls	r3, r0
 80021f4:	44da      	add	sl, fp
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	45d1      	cmp	r9, sl
 80021fa:	d904      	bls.n	8002206 <__aeabi_dmul+0x122>
 80021fc:	2780      	movs	r7, #128	; 0x80
 80021fe:	027f      	lsls	r7, r7, #9
 8002200:	46b9      	mov	r9, r7
 8002202:	444b      	add	r3, r9
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	4653      	mov	r3, sl
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	469b      	mov	fp, r3
 800220c:	4653      	mov	r3, sl
 800220e:	041f      	lsls	r7, r3, #16
 8002210:	4643      	mov	r3, r8
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	4698      	mov	r8, r3
 8002218:	003b      	movs	r3, r7
 800221a:	4443      	add	r3, r8
 800221c:	9304      	str	r3, [sp, #16]
 800221e:	0c33      	lsrs	r3, r6, #16
 8002220:	0436      	lsls	r6, r6, #16
 8002222:	0c36      	lsrs	r6, r6, #16
 8002224:	4698      	mov	r8, r3
 8002226:	0033      	movs	r3, r6
 8002228:	4343      	muls	r3, r0
 800222a:	4699      	mov	r9, r3
 800222c:	4643      	mov	r3, r8
 800222e:	4343      	muls	r3, r0
 8002230:	002f      	movs	r7, r5
 8002232:	469a      	mov	sl, r3
 8002234:	4643      	mov	r3, r8
 8002236:	4377      	muls	r7, r6
 8002238:	435d      	muls	r5, r3
 800223a:	0c38      	lsrs	r0, r7, #16
 800223c:	444d      	add	r5, r9
 800223e:	1945      	adds	r5, r0, r5
 8002240:	45a9      	cmp	r9, r5
 8002242:	d903      	bls.n	800224c <__aeabi_dmul+0x168>
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	4699      	mov	r9, r3
 800224a:	44ca      	add	sl, r9
 800224c:	043f      	lsls	r7, r7, #16
 800224e:	0c28      	lsrs	r0, r5, #16
 8002250:	0c3f      	lsrs	r7, r7, #16
 8002252:	042d      	lsls	r5, r5, #16
 8002254:	19ed      	adds	r5, r5, r7
 8002256:	0c27      	lsrs	r7, r4, #16
 8002258:	0424      	lsls	r4, r4, #16
 800225a:	0c24      	lsrs	r4, r4, #16
 800225c:	0003      	movs	r3, r0
 800225e:	0020      	movs	r0, r4
 8002260:	4350      	muls	r0, r2
 8002262:	437a      	muls	r2, r7
 8002264:	4691      	mov	r9, r2
 8002266:	003a      	movs	r2, r7
 8002268:	4453      	add	r3, sl
 800226a:	9305      	str	r3, [sp, #20]
 800226c:	0c03      	lsrs	r3, r0, #16
 800226e:	469a      	mov	sl, r3
 8002270:	434a      	muls	r2, r1
 8002272:	4361      	muls	r1, r4
 8002274:	4449      	add	r1, r9
 8002276:	4451      	add	r1, sl
 8002278:	44ab      	add	fp, r5
 800227a:	4589      	cmp	r9, r1
 800227c:	d903      	bls.n	8002286 <__aeabi_dmul+0x1a2>
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	4699      	mov	r9, r3
 8002284:	444a      	add	r2, r9
 8002286:	0400      	lsls	r0, r0, #16
 8002288:	0c0b      	lsrs	r3, r1, #16
 800228a:	0c00      	lsrs	r0, r0, #16
 800228c:	0409      	lsls	r1, r1, #16
 800228e:	1809      	adds	r1, r1, r0
 8002290:	0020      	movs	r0, r4
 8002292:	4699      	mov	r9, r3
 8002294:	4643      	mov	r3, r8
 8002296:	4370      	muls	r0, r6
 8002298:	435c      	muls	r4, r3
 800229a:	437e      	muls	r6, r7
 800229c:	435f      	muls	r7, r3
 800229e:	0c03      	lsrs	r3, r0, #16
 80022a0:	4698      	mov	r8, r3
 80022a2:	19a4      	adds	r4, r4, r6
 80022a4:	4444      	add	r4, r8
 80022a6:	444a      	add	r2, r9
 80022a8:	9703      	str	r7, [sp, #12]
 80022aa:	42a6      	cmp	r6, r4
 80022ac:	d904      	bls.n	80022b8 <__aeabi_dmul+0x1d4>
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	4698      	mov	r8, r3
 80022b4:	4447      	add	r7, r8
 80022b6:	9703      	str	r7, [sp, #12]
 80022b8:	0423      	lsls	r3, r4, #16
 80022ba:	9e02      	ldr	r6, [sp, #8]
 80022bc:	469a      	mov	sl, r3
 80022be:	9b05      	ldr	r3, [sp, #20]
 80022c0:	445e      	add	r6, fp
 80022c2:	4698      	mov	r8, r3
 80022c4:	42ae      	cmp	r6, r5
 80022c6:	41ad      	sbcs	r5, r5
 80022c8:	1876      	adds	r6, r6, r1
 80022ca:	428e      	cmp	r6, r1
 80022cc:	4189      	sbcs	r1, r1
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c00      	lsrs	r0, r0, #16
 80022d2:	4450      	add	r0, sl
 80022d4:	4440      	add	r0, r8
 80022d6:	426d      	negs	r5, r5
 80022d8:	1947      	adds	r7, r0, r5
 80022da:	46b8      	mov	r8, r7
 80022dc:	4693      	mov	fp, r2
 80022de:	4249      	negs	r1, r1
 80022e0:	4689      	mov	r9, r1
 80022e2:	44c3      	add	fp, r8
 80022e4:	44d9      	add	r9, fp
 80022e6:	4298      	cmp	r0, r3
 80022e8:	4180      	sbcs	r0, r0
 80022ea:	45a8      	cmp	r8, r5
 80022ec:	41ad      	sbcs	r5, r5
 80022ee:	4593      	cmp	fp, r2
 80022f0:	4192      	sbcs	r2, r2
 80022f2:	4589      	cmp	r9, r1
 80022f4:	4189      	sbcs	r1, r1
 80022f6:	426d      	negs	r5, r5
 80022f8:	4240      	negs	r0, r0
 80022fa:	4328      	orrs	r0, r5
 80022fc:	0c24      	lsrs	r4, r4, #16
 80022fe:	4252      	negs	r2, r2
 8002300:	4249      	negs	r1, r1
 8002302:	430a      	orrs	r2, r1
 8002304:	9b03      	ldr	r3, [sp, #12]
 8002306:	1900      	adds	r0, r0, r4
 8002308:	1880      	adds	r0, r0, r2
 800230a:	18c7      	adds	r7, r0, r3
 800230c:	464b      	mov	r3, r9
 800230e:	0ddc      	lsrs	r4, r3, #23
 8002310:	9b04      	ldr	r3, [sp, #16]
 8002312:	0275      	lsls	r5, r6, #9
 8002314:	431d      	orrs	r5, r3
 8002316:	1e6a      	subs	r2, r5, #1
 8002318:	4195      	sbcs	r5, r2
 800231a:	464b      	mov	r3, r9
 800231c:	0df6      	lsrs	r6, r6, #23
 800231e:	027f      	lsls	r7, r7, #9
 8002320:	4335      	orrs	r5, r6
 8002322:	025a      	lsls	r2, r3, #9
 8002324:	433c      	orrs	r4, r7
 8002326:	4315      	orrs	r5, r2
 8002328:	01fb      	lsls	r3, r7, #7
 800232a:	d400      	bmi.n	800232e <__aeabi_dmul+0x24a>
 800232c:	e11c      	b.n	8002568 <__aeabi_dmul+0x484>
 800232e:	2101      	movs	r1, #1
 8002330:	086a      	lsrs	r2, r5, #1
 8002332:	400d      	ands	r5, r1
 8002334:	4315      	orrs	r5, r2
 8002336:	07e2      	lsls	r2, r4, #31
 8002338:	4315      	orrs	r5, r2
 800233a:	0864      	lsrs	r4, r4, #1
 800233c:	494f      	ldr	r1, [pc, #316]	; (800247c <__aeabi_dmul+0x398>)
 800233e:	4461      	add	r1, ip
 8002340:	2900      	cmp	r1, #0
 8002342:	dc00      	bgt.n	8002346 <__aeabi_dmul+0x262>
 8002344:	e0b0      	b.n	80024a8 <__aeabi_dmul+0x3c4>
 8002346:	076b      	lsls	r3, r5, #29
 8002348:	d009      	beq.n	800235e <__aeabi_dmul+0x27a>
 800234a:	220f      	movs	r2, #15
 800234c:	402a      	ands	r2, r5
 800234e:	2a04      	cmp	r2, #4
 8002350:	d005      	beq.n	800235e <__aeabi_dmul+0x27a>
 8002352:	1d2a      	adds	r2, r5, #4
 8002354:	42aa      	cmp	r2, r5
 8002356:	41ad      	sbcs	r5, r5
 8002358:	426d      	negs	r5, r5
 800235a:	1964      	adds	r4, r4, r5
 800235c:	0015      	movs	r5, r2
 800235e:	01e3      	lsls	r3, r4, #7
 8002360:	d504      	bpl.n	800236c <__aeabi_dmul+0x288>
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <__aeabi_dmul+0x39c>)
 8002366:	00c9      	lsls	r1, r1, #3
 8002368:	4014      	ands	r4, r2
 800236a:	4461      	add	r1, ip
 800236c:	4a45      	ldr	r2, [pc, #276]	; (8002484 <__aeabi_dmul+0x3a0>)
 800236e:	4291      	cmp	r1, r2
 8002370:	dd00      	ble.n	8002374 <__aeabi_dmul+0x290>
 8002372:	e726      	b.n	80021c2 <__aeabi_dmul+0xde>
 8002374:	0762      	lsls	r2, r4, #29
 8002376:	08ed      	lsrs	r5, r5, #3
 8002378:	0264      	lsls	r4, r4, #9
 800237a:	0549      	lsls	r1, r1, #21
 800237c:	4315      	orrs	r5, r2
 800237e:	0b24      	lsrs	r4, r4, #12
 8002380:	0d4a      	lsrs	r2, r1, #21
 8002382:	e710      	b.n	80021a6 <__aeabi_dmul+0xc2>
 8002384:	4652      	mov	r2, sl
 8002386:	4332      	orrs	r2, r6
 8002388:	d100      	bne.n	800238c <__aeabi_dmul+0x2a8>
 800238a:	e07f      	b.n	800248c <__aeabi_dmul+0x3a8>
 800238c:	2e00      	cmp	r6, #0
 800238e:	d100      	bne.n	8002392 <__aeabi_dmul+0x2ae>
 8002390:	e0dc      	b.n	800254c <__aeabi_dmul+0x468>
 8002392:	0030      	movs	r0, r6
 8002394:	f000 fe1e 	bl	8002fd4 <__clzsi2>
 8002398:	0002      	movs	r2, r0
 800239a:	3a0b      	subs	r2, #11
 800239c:	231d      	movs	r3, #29
 800239e:	0001      	movs	r1, r0
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	4652      	mov	r2, sl
 80023a4:	3908      	subs	r1, #8
 80023a6:	40da      	lsrs	r2, r3
 80023a8:	408e      	lsls	r6, r1
 80023aa:	4316      	orrs	r6, r2
 80023ac:	4652      	mov	r2, sl
 80023ae:	408a      	lsls	r2, r1
 80023b0:	9b00      	ldr	r3, [sp, #0]
 80023b2:	4935      	ldr	r1, [pc, #212]	; (8002488 <__aeabi_dmul+0x3a4>)
 80023b4:	1a18      	subs	r0, r3, r0
 80023b6:	0003      	movs	r3, r0
 80023b8:	468c      	mov	ip, r1
 80023ba:	4463      	add	r3, ip
 80023bc:	2000      	movs	r0, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	e6d3      	b.n	800216a <__aeabi_dmul+0x86>
 80023c2:	0025      	movs	r5, r4
 80023c4:	4305      	orrs	r5, r0
 80023c6:	d04a      	beq.n	800245e <__aeabi_dmul+0x37a>
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d100      	bne.n	80023ce <__aeabi_dmul+0x2ea>
 80023cc:	e0b0      	b.n	8002530 <__aeabi_dmul+0x44c>
 80023ce:	0020      	movs	r0, r4
 80023d0:	f000 fe00 	bl	8002fd4 <__clzsi2>
 80023d4:	0001      	movs	r1, r0
 80023d6:	0002      	movs	r2, r0
 80023d8:	390b      	subs	r1, #11
 80023da:	231d      	movs	r3, #29
 80023dc:	0010      	movs	r0, r2
 80023de:	1a5b      	subs	r3, r3, r1
 80023e0:	0031      	movs	r1, r6
 80023e2:	0035      	movs	r5, r6
 80023e4:	3808      	subs	r0, #8
 80023e6:	4084      	lsls	r4, r0
 80023e8:	40d9      	lsrs	r1, r3
 80023ea:	4085      	lsls	r5, r0
 80023ec:	430c      	orrs	r4, r1
 80023ee:	4826      	ldr	r0, [pc, #152]	; (8002488 <__aeabi_dmul+0x3a4>)
 80023f0:	1a83      	subs	r3, r0, r2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	4699      	mov	r9, r3
 80023f8:	469b      	mov	fp, r3
 80023fa:	e697      	b.n	800212c <__aeabi_dmul+0x48>
 80023fc:	0005      	movs	r5, r0
 80023fe:	4325      	orrs	r5, r4
 8002400:	d126      	bne.n	8002450 <__aeabi_dmul+0x36c>
 8002402:	2208      	movs	r2, #8
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2302      	movs	r3, #2
 8002408:	2400      	movs	r4, #0
 800240a:	4691      	mov	r9, r2
 800240c:	469b      	mov	fp, r3
 800240e:	e68d      	b.n	800212c <__aeabi_dmul+0x48>
 8002410:	4652      	mov	r2, sl
 8002412:	9b00      	ldr	r3, [sp, #0]
 8002414:	4332      	orrs	r2, r6
 8002416:	d110      	bne.n	800243a <__aeabi_dmul+0x356>
 8002418:	4915      	ldr	r1, [pc, #84]	; (8002470 <__aeabi_dmul+0x38c>)
 800241a:	2600      	movs	r6, #0
 800241c:	468c      	mov	ip, r1
 800241e:	4463      	add	r3, ip
 8002420:	4649      	mov	r1, r9
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2302      	movs	r3, #2
 8002426:	4319      	orrs	r1, r3
 8002428:	4689      	mov	r9, r1
 800242a:	2002      	movs	r0, #2
 800242c:	e69d      	b.n	800216a <__aeabi_dmul+0x86>
 800242e:	465b      	mov	r3, fp
 8002430:	9701      	str	r7, [sp, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d000      	beq.n	8002438 <__aeabi_dmul+0x354>
 8002436:	e6ad      	b.n	8002194 <__aeabi_dmul+0xb0>
 8002438:	e6c3      	b.n	80021c2 <__aeabi_dmul+0xde>
 800243a:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <__aeabi_dmul+0x38c>)
 800243c:	2003      	movs	r0, #3
 800243e:	4694      	mov	ip, r2
 8002440:	4463      	add	r3, ip
 8002442:	464a      	mov	r2, r9
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2303      	movs	r3, #3
 8002448:	431a      	orrs	r2, r3
 800244a:	4691      	mov	r9, r2
 800244c:	4652      	mov	r2, sl
 800244e:	e68c      	b.n	800216a <__aeabi_dmul+0x86>
 8002450:	220c      	movs	r2, #12
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2303      	movs	r3, #3
 8002456:	0005      	movs	r5, r0
 8002458:	4691      	mov	r9, r2
 800245a:	469b      	mov	fp, r3
 800245c:	e666      	b.n	800212c <__aeabi_dmul+0x48>
 800245e:	2304      	movs	r3, #4
 8002460:	4699      	mov	r9, r3
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	2400      	movs	r4, #0
 800246a:	469b      	mov	fp, r3
 800246c:	e65e      	b.n	800212c <__aeabi_dmul+0x48>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	000007ff 	.word	0x000007ff
 8002474:	fffffc01 	.word	0xfffffc01
 8002478:	0800ae04 	.word	0x0800ae04
 800247c:	000003ff 	.word	0x000003ff
 8002480:	feffffff 	.word	0xfeffffff
 8002484:	000007fe 	.word	0x000007fe
 8002488:	fffffc0d 	.word	0xfffffc0d
 800248c:	4649      	mov	r1, r9
 800248e:	2301      	movs	r3, #1
 8002490:	4319      	orrs	r1, r3
 8002492:	4689      	mov	r9, r1
 8002494:	2600      	movs	r6, #0
 8002496:	2001      	movs	r0, #1
 8002498:	e667      	b.n	800216a <__aeabi_dmul+0x86>
 800249a:	2300      	movs	r3, #0
 800249c:	2480      	movs	r4, #128	; 0x80
 800249e:	2500      	movs	r5, #0
 80024a0:	4a43      	ldr	r2, [pc, #268]	; (80025b0 <__aeabi_dmul+0x4cc>)
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	0324      	lsls	r4, r4, #12
 80024a6:	e67e      	b.n	80021a6 <__aeabi_dmul+0xc2>
 80024a8:	2001      	movs	r0, #1
 80024aa:	1a40      	subs	r0, r0, r1
 80024ac:	2838      	cmp	r0, #56	; 0x38
 80024ae:	dd00      	ble.n	80024b2 <__aeabi_dmul+0x3ce>
 80024b0:	e676      	b.n	80021a0 <__aeabi_dmul+0xbc>
 80024b2:	281f      	cmp	r0, #31
 80024b4:	dd5b      	ble.n	800256e <__aeabi_dmul+0x48a>
 80024b6:	221f      	movs	r2, #31
 80024b8:	0023      	movs	r3, r4
 80024ba:	4252      	negs	r2, r2
 80024bc:	1a51      	subs	r1, r2, r1
 80024be:	40cb      	lsrs	r3, r1
 80024c0:	0019      	movs	r1, r3
 80024c2:	2820      	cmp	r0, #32
 80024c4:	d003      	beq.n	80024ce <__aeabi_dmul+0x3ea>
 80024c6:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <__aeabi_dmul+0x4d0>)
 80024c8:	4462      	add	r2, ip
 80024ca:	4094      	lsls	r4, r2
 80024cc:	4325      	orrs	r5, r4
 80024ce:	1e6a      	subs	r2, r5, #1
 80024d0:	4195      	sbcs	r5, r2
 80024d2:	002a      	movs	r2, r5
 80024d4:	430a      	orrs	r2, r1
 80024d6:	2107      	movs	r1, #7
 80024d8:	000d      	movs	r5, r1
 80024da:	2400      	movs	r4, #0
 80024dc:	4015      	ands	r5, r2
 80024de:	4211      	tst	r1, r2
 80024e0:	d05b      	beq.n	800259a <__aeabi_dmul+0x4b6>
 80024e2:	210f      	movs	r1, #15
 80024e4:	2400      	movs	r4, #0
 80024e6:	4011      	ands	r1, r2
 80024e8:	2904      	cmp	r1, #4
 80024ea:	d053      	beq.n	8002594 <__aeabi_dmul+0x4b0>
 80024ec:	1d11      	adds	r1, r2, #4
 80024ee:	4291      	cmp	r1, r2
 80024f0:	4192      	sbcs	r2, r2
 80024f2:	4252      	negs	r2, r2
 80024f4:	18a4      	adds	r4, r4, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	0223      	lsls	r3, r4, #8
 80024fa:	d54b      	bpl.n	8002594 <__aeabi_dmul+0x4b0>
 80024fc:	2201      	movs	r2, #1
 80024fe:	2400      	movs	r4, #0
 8002500:	2500      	movs	r5, #0
 8002502:	e650      	b.n	80021a6 <__aeabi_dmul+0xc2>
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	031b      	lsls	r3, r3, #12
 8002508:	421c      	tst	r4, r3
 800250a:	d009      	beq.n	8002520 <__aeabi_dmul+0x43c>
 800250c:	421e      	tst	r6, r3
 800250e:	d107      	bne.n	8002520 <__aeabi_dmul+0x43c>
 8002510:	4333      	orrs	r3, r6
 8002512:	031c      	lsls	r4, r3, #12
 8002514:	4643      	mov	r3, r8
 8002516:	0015      	movs	r5, r2
 8002518:	0b24      	lsrs	r4, r4, #12
 800251a:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <__aeabi_dmul+0x4cc>)
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	e642      	b.n	80021a6 <__aeabi_dmul+0xc2>
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0312      	lsls	r2, r2, #12
 8002524:	4314      	orrs	r4, r2
 8002526:	0324      	lsls	r4, r4, #12
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <__aeabi_dmul+0x4cc>)
 800252a:	0b24      	lsrs	r4, r4, #12
 800252c:	9701      	str	r7, [sp, #4]
 800252e:	e63a      	b.n	80021a6 <__aeabi_dmul+0xc2>
 8002530:	f000 fd50 	bl	8002fd4 <__clzsi2>
 8002534:	0001      	movs	r1, r0
 8002536:	0002      	movs	r2, r0
 8002538:	3115      	adds	r1, #21
 800253a:	3220      	adds	r2, #32
 800253c:	291c      	cmp	r1, #28
 800253e:	dc00      	bgt.n	8002542 <__aeabi_dmul+0x45e>
 8002540:	e74b      	b.n	80023da <__aeabi_dmul+0x2f6>
 8002542:	0034      	movs	r4, r6
 8002544:	3808      	subs	r0, #8
 8002546:	2500      	movs	r5, #0
 8002548:	4084      	lsls	r4, r0
 800254a:	e750      	b.n	80023ee <__aeabi_dmul+0x30a>
 800254c:	f000 fd42 	bl	8002fd4 <__clzsi2>
 8002550:	0003      	movs	r3, r0
 8002552:	001a      	movs	r2, r3
 8002554:	3215      	adds	r2, #21
 8002556:	3020      	adds	r0, #32
 8002558:	2a1c      	cmp	r2, #28
 800255a:	dc00      	bgt.n	800255e <__aeabi_dmul+0x47a>
 800255c:	e71e      	b.n	800239c <__aeabi_dmul+0x2b8>
 800255e:	4656      	mov	r6, sl
 8002560:	3b08      	subs	r3, #8
 8002562:	2200      	movs	r2, #0
 8002564:	409e      	lsls	r6, r3
 8002566:	e723      	b.n	80023b0 <__aeabi_dmul+0x2cc>
 8002568:	9b00      	ldr	r3, [sp, #0]
 800256a:	469c      	mov	ip, r3
 800256c:	e6e6      	b.n	800233c <__aeabi_dmul+0x258>
 800256e:	4912      	ldr	r1, [pc, #72]	; (80025b8 <__aeabi_dmul+0x4d4>)
 8002570:	0022      	movs	r2, r4
 8002572:	4461      	add	r1, ip
 8002574:	002e      	movs	r6, r5
 8002576:	408d      	lsls	r5, r1
 8002578:	408a      	lsls	r2, r1
 800257a:	40c6      	lsrs	r6, r0
 800257c:	1e69      	subs	r1, r5, #1
 800257e:	418d      	sbcs	r5, r1
 8002580:	4332      	orrs	r2, r6
 8002582:	432a      	orrs	r2, r5
 8002584:	40c4      	lsrs	r4, r0
 8002586:	0753      	lsls	r3, r2, #29
 8002588:	d0b6      	beq.n	80024f8 <__aeabi_dmul+0x414>
 800258a:	210f      	movs	r1, #15
 800258c:	4011      	ands	r1, r2
 800258e:	2904      	cmp	r1, #4
 8002590:	d1ac      	bne.n	80024ec <__aeabi_dmul+0x408>
 8002592:	e7b1      	b.n	80024f8 <__aeabi_dmul+0x414>
 8002594:	0765      	lsls	r5, r4, #29
 8002596:	0264      	lsls	r4, r4, #9
 8002598:	0b24      	lsrs	r4, r4, #12
 800259a:	08d2      	lsrs	r2, r2, #3
 800259c:	4315      	orrs	r5, r2
 800259e:	2200      	movs	r2, #0
 80025a0:	e601      	b.n	80021a6 <__aeabi_dmul+0xc2>
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	0312      	lsls	r2, r2, #12
 80025a6:	4314      	orrs	r4, r2
 80025a8:	0324      	lsls	r4, r4, #12
 80025aa:	4a01      	ldr	r2, [pc, #4]	; (80025b0 <__aeabi_dmul+0x4cc>)
 80025ac:	0b24      	lsrs	r4, r4, #12
 80025ae:	e5fa      	b.n	80021a6 <__aeabi_dmul+0xc2>
 80025b0:	000007ff 	.word	0x000007ff
 80025b4:	0000043e 	.word	0x0000043e
 80025b8:	0000041e 	.word	0x0000041e

080025bc <__aeabi_dsub>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	4657      	mov	r7, sl
 80025c0:	464e      	mov	r6, r9
 80025c2:	4645      	mov	r5, r8
 80025c4:	46de      	mov	lr, fp
 80025c6:	b5e0      	push	{r5, r6, r7, lr}
 80025c8:	001e      	movs	r6, r3
 80025ca:	0017      	movs	r7, r2
 80025cc:	004a      	lsls	r2, r1, #1
 80025ce:	030b      	lsls	r3, r1, #12
 80025d0:	0d52      	lsrs	r2, r2, #21
 80025d2:	0a5b      	lsrs	r3, r3, #9
 80025d4:	4690      	mov	r8, r2
 80025d6:	0f42      	lsrs	r2, r0, #29
 80025d8:	431a      	orrs	r2, r3
 80025da:	0fcd      	lsrs	r5, r1, #31
 80025dc:	4ccd      	ldr	r4, [pc, #820]	; (8002914 <__aeabi_dsub+0x358>)
 80025de:	0331      	lsls	r1, r6, #12
 80025e0:	00c3      	lsls	r3, r0, #3
 80025e2:	4694      	mov	ip, r2
 80025e4:	0070      	lsls	r0, r6, #1
 80025e6:	0f7a      	lsrs	r2, r7, #29
 80025e8:	0a49      	lsrs	r1, r1, #9
 80025ea:	00ff      	lsls	r7, r7, #3
 80025ec:	469a      	mov	sl, r3
 80025ee:	46b9      	mov	r9, r7
 80025f0:	0d40      	lsrs	r0, r0, #21
 80025f2:	0ff6      	lsrs	r6, r6, #31
 80025f4:	4311      	orrs	r1, r2
 80025f6:	42a0      	cmp	r0, r4
 80025f8:	d100      	bne.n	80025fc <__aeabi_dsub+0x40>
 80025fa:	e0b1      	b.n	8002760 <__aeabi_dsub+0x1a4>
 80025fc:	2201      	movs	r2, #1
 80025fe:	4056      	eors	r6, r2
 8002600:	46b3      	mov	fp, r6
 8002602:	42b5      	cmp	r5, r6
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x4c>
 8002606:	e088      	b.n	800271a <__aeabi_dsub+0x15e>
 8002608:	4642      	mov	r2, r8
 800260a:	1a12      	subs	r2, r2, r0
 800260c:	2a00      	cmp	r2, #0
 800260e:	dc00      	bgt.n	8002612 <__aeabi_dsub+0x56>
 8002610:	e0ae      	b.n	8002770 <__aeabi_dsub+0x1b4>
 8002612:	2800      	cmp	r0, #0
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x5c>
 8002616:	e0c1      	b.n	800279c <__aeabi_dsub+0x1e0>
 8002618:	48be      	ldr	r0, [pc, #760]	; (8002914 <__aeabi_dsub+0x358>)
 800261a:	4580      	cmp	r8, r0
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x64>
 800261e:	e151      	b.n	80028c4 <__aeabi_dsub+0x308>
 8002620:	2080      	movs	r0, #128	; 0x80
 8002622:	0400      	lsls	r0, r0, #16
 8002624:	4301      	orrs	r1, r0
 8002626:	2a38      	cmp	r2, #56	; 0x38
 8002628:	dd00      	ble.n	800262c <__aeabi_dsub+0x70>
 800262a:	e17b      	b.n	8002924 <__aeabi_dsub+0x368>
 800262c:	2a1f      	cmp	r2, #31
 800262e:	dd00      	ble.n	8002632 <__aeabi_dsub+0x76>
 8002630:	e1ee      	b.n	8002a10 <__aeabi_dsub+0x454>
 8002632:	2020      	movs	r0, #32
 8002634:	003e      	movs	r6, r7
 8002636:	1a80      	subs	r0, r0, r2
 8002638:	000c      	movs	r4, r1
 800263a:	40d6      	lsrs	r6, r2
 800263c:	40d1      	lsrs	r1, r2
 800263e:	4087      	lsls	r7, r0
 8002640:	4662      	mov	r2, ip
 8002642:	4084      	lsls	r4, r0
 8002644:	1a52      	subs	r2, r2, r1
 8002646:	1e78      	subs	r0, r7, #1
 8002648:	4187      	sbcs	r7, r0
 800264a:	4694      	mov	ip, r2
 800264c:	4334      	orrs	r4, r6
 800264e:	4327      	orrs	r7, r4
 8002650:	1bdc      	subs	r4, r3, r7
 8002652:	42a3      	cmp	r3, r4
 8002654:	419b      	sbcs	r3, r3
 8002656:	4662      	mov	r2, ip
 8002658:	425b      	negs	r3, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	4699      	mov	r9, r3
 800265e:	464b      	mov	r3, r9
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	d400      	bmi.n	8002666 <__aeabi_dsub+0xaa>
 8002664:	e118      	b.n	8002898 <__aeabi_dsub+0x2dc>
 8002666:	464b      	mov	r3, r9
 8002668:	0258      	lsls	r0, r3, #9
 800266a:	0a43      	lsrs	r3, r0, #9
 800266c:	4699      	mov	r9, r3
 800266e:	464b      	mov	r3, r9
 8002670:	2b00      	cmp	r3, #0
 8002672:	d100      	bne.n	8002676 <__aeabi_dsub+0xba>
 8002674:	e137      	b.n	80028e6 <__aeabi_dsub+0x32a>
 8002676:	4648      	mov	r0, r9
 8002678:	f000 fcac 	bl	8002fd4 <__clzsi2>
 800267c:	0001      	movs	r1, r0
 800267e:	3908      	subs	r1, #8
 8002680:	2320      	movs	r3, #32
 8002682:	0022      	movs	r2, r4
 8002684:	4648      	mov	r0, r9
 8002686:	1a5b      	subs	r3, r3, r1
 8002688:	40da      	lsrs	r2, r3
 800268a:	4088      	lsls	r0, r1
 800268c:	408c      	lsls	r4, r1
 800268e:	4643      	mov	r3, r8
 8002690:	4310      	orrs	r0, r2
 8002692:	4588      	cmp	r8, r1
 8002694:	dd00      	ble.n	8002698 <__aeabi_dsub+0xdc>
 8002696:	e136      	b.n	8002906 <__aeabi_dsub+0x34a>
 8002698:	1ac9      	subs	r1, r1, r3
 800269a:	1c4b      	adds	r3, r1, #1
 800269c:	2b1f      	cmp	r3, #31
 800269e:	dd00      	ble.n	80026a2 <__aeabi_dsub+0xe6>
 80026a0:	e0ea      	b.n	8002878 <__aeabi_dsub+0x2bc>
 80026a2:	2220      	movs	r2, #32
 80026a4:	0026      	movs	r6, r4
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	0001      	movs	r1, r0
 80026aa:	4094      	lsls	r4, r2
 80026ac:	40de      	lsrs	r6, r3
 80026ae:	40d8      	lsrs	r0, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	4091      	lsls	r1, r2
 80026b4:	1e62      	subs	r2, r4, #1
 80026b6:	4194      	sbcs	r4, r2
 80026b8:	4681      	mov	r9, r0
 80026ba:	4698      	mov	r8, r3
 80026bc:	4331      	orrs	r1, r6
 80026be:	430c      	orrs	r4, r1
 80026c0:	0763      	lsls	r3, r4, #29
 80026c2:	d009      	beq.n	80026d8 <__aeabi_dsub+0x11c>
 80026c4:	230f      	movs	r3, #15
 80026c6:	4023      	ands	r3, r4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d005      	beq.n	80026d8 <__aeabi_dsub+0x11c>
 80026cc:	1d23      	adds	r3, r4, #4
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	41a4      	sbcs	r4, r4
 80026d2:	4264      	negs	r4, r4
 80026d4:	44a1      	add	r9, r4
 80026d6:	001c      	movs	r4, r3
 80026d8:	464b      	mov	r3, r9
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	d400      	bmi.n	80026e0 <__aeabi_dsub+0x124>
 80026de:	e0de      	b.n	800289e <__aeabi_dsub+0x2e2>
 80026e0:	4641      	mov	r1, r8
 80026e2:	4b8c      	ldr	r3, [pc, #560]	; (8002914 <__aeabi_dsub+0x358>)
 80026e4:	3101      	adds	r1, #1
 80026e6:	4299      	cmp	r1, r3
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x130>
 80026ea:	e0e7      	b.n	80028bc <__aeabi_dsub+0x300>
 80026ec:	464b      	mov	r3, r9
 80026ee:	488a      	ldr	r0, [pc, #552]	; (8002918 <__aeabi_dsub+0x35c>)
 80026f0:	08e4      	lsrs	r4, r4, #3
 80026f2:	4003      	ands	r3, r0
 80026f4:	0018      	movs	r0, r3
 80026f6:	0549      	lsls	r1, r1, #21
 80026f8:	075b      	lsls	r3, r3, #29
 80026fa:	0240      	lsls	r0, r0, #9
 80026fc:	4323      	orrs	r3, r4
 80026fe:	0d4a      	lsrs	r2, r1, #21
 8002700:	0b04      	lsrs	r4, r0, #12
 8002702:	0512      	lsls	r2, r2, #20
 8002704:	07ed      	lsls	r5, r5, #31
 8002706:	4322      	orrs	r2, r4
 8002708:	432a      	orrs	r2, r5
 800270a:	0018      	movs	r0, r3
 800270c:	0011      	movs	r1, r2
 800270e:	bcf0      	pop	{r4, r5, r6, r7}
 8002710:	46bb      	mov	fp, r7
 8002712:	46b2      	mov	sl, r6
 8002714:	46a9      	mov	r9, r5
 8002716:	46a0      	mov	r8, r4
 8002718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271a:	4642      	mov	r2, r8
 800271c:	1a12      	subs	r2, r2, r0
 800271e:	2a00      	cmp	r2, #0
 8002720:	dd52      	ble.n	80027c8 <__aeabi_dsub+0x20c>
 8002722:	2800      	cmp	r0, #0
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x16c>
 8002726:	e09c      	b.n	8002862 <__aeabi_dsub+0x2a6>
 8002728:	45a0      	cmp	r8, r4
 800272a:	d100      	bne.n	800272e <__aeabi_dsub+0x172>
 800272c:	e0ca      	b.n	80028c4 <__aeabi_dsub+0x308>
 800272e:	2080      	movs	r0, #128	; 0x80
 8002730:	0400      	lsls	r0, r0, #16
 8002732:	4301      	orrs	r1, r0
 8002734:	2a38      	cmp	r2, #56	; 0x38
 8002736:	dd00      	ble.n	800273a <__aeabi_dsub+0x17e>
 8002738:	e149      	b.n	80029ce <__aeabi_dsub+0x412>
 800273a:	2a1f      	cmp	r2, #31
 800273c:	dc00      	bgt.n	8002740 <__aeabi_dsub+0x184>
 800273e:	e197      	b.n	8002a70 <__aeabi_dsub+0x4b4>
 8002740:	0010      	movs	r0, r2
 8002742:	000e      	movs	r6, r1
 8002744:	3820      	subs	r0, #32
 8002746:	40c6      	lsrs	r6, r0
 8002748:	2a20      	cmp	r2, #32
 800274a:	d004      	beq.n	8002756 <__aeabi_dsub+0x19a>
 800274c:	2040      	movs	r0, #64	; 0x40
 800274e:	1a82      	subs	r2, r0, r2
 8002750:	4091      	lsls	r1, r2
 8002752:	430f      	orrs	r7, r1
 8002754:	46b9      	mov	r9, r7
 8002756:	464c      	mov	r4, r9
 8002758:	1e62      	subs	r2, r4, #1
 800275a:	4194      	sbcs	r4, r2
 800275c:	4334      	orrs	r4, r6
 800275e:	e13a      	b.n	80029d6 <__aeabi_dsub+0x41a>
 8002760:	000a      	movs	r2, r1
 8002762:	433a      	orrs	r2, r7
 8002764:	d028      	beq.n	80027b8 <__aeabi_dsub+0x1fc>
 8002766:	46b3      	mov	fp, r6
 8002768:	42b5      	cmp	r5, r6
 800276a:	d02b      	beq.n	80027c4 <__aeabi_dsub+0x208>
 800276c:	4a6b      	ldr	r2, [pc, #428]	; (800291c <__aeabi_dsub+0x360>)
 800276e:	4442      	add	r2, r8
 8002770:	2a00      	cmp	r2, #0
 8002772:	d05d      	beq.n	8002830 <__aeabi_dsub+0x274>
 8002774:	4642      	mov	r2, r8
 8002776:	4644      	mov	r4, r8
 8002778:	1a82      	subs	r2, r0, r2
 800277a:	2c00      	cmp	r4, #0
 800277c:	d000      	beq.n	8002780 <__aeabi_dsub+0x1c4>
 800277e:	e0f5      	b.n	800296c <__aeabi_dsub+0x3b0>
 8002780:	4665      	mov	r5, ip
 8002782:	431d      	orrs	r5, r3
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x1cc>
 8002786:	e19c      	b.n	8002ac2 <__aeabi_dsub+0x506>
 8002788:	1e55      	subs	r5, r2, #1
 800278a:	2a01      	cmp	r2, #1
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x1d4>
 800278e:	e1fb      	b.n	8002b88 <__aeabi_dsub+0x5cc>
 8002790:	4c60      	ldr	r4, [pc, #384]	; (8002914 <__aeabi_dsub+0x358>)
 8002792:	42a2      	cmp	r2, r4
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x1dc>
 8002796:	e1bd      	b.n	8002b14 <__aeabi_dsub+0x558>
 8002798:	002a      	movs	r2, r5
 800279a:	e0f0      	b.n	800297e <__aeabi_dsub+0x3c2>
 800279c:	0008      	movs	r0, r1
 800279e:	4338      	orrs	r0, r7
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x1e8>
 80027a2:	e0c3      	b.n	800292c <__aeabi_dsub+0x370>
 80027a4:	1e50      	subs	r0, r2, #1
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x1f0>
 80027aa:	e1a8      	b.n	8002afe <__aeabi_dsub+0x542>
 80027ac:	4c59      	ldr	r4, [pc, #356]	; (8002914 <__aeabi_dsub+0x358>)
 80027ae:	42a2      	cmp	r2, r4
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x1f8>
 80027b2:	e087      	b.n	80028c4 <__aeabi_dsub+0x308>
 80027b4:	0002      	movs	r2, r0
 80027b6:	e736      	b.n	8002626 <__aeabi_dsub+0x6a>
 80027b8:	2201      	movs	r2, #1
 80027ba:	4056      	eors	r6, r2
 80027bc:	46b3      	mov	fp, r6
 80027be:	42b5      	cmp	r5, r6
 80027c0:	d000      	beq.n	80027c4 <__aeabi_dsub+0x208>
 80027c2:	e721      	b.n	8002608 <__aeabi_dsub+0x4c>
 80027c4:	4a55      	ldr	r2, [pc, #340]	; (800291c <__aeabi_dsub+0x360>)
 80027c6:	4442      	add	r2, r8
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	d100      	bne.n	80027ce <__aeabi_dsub+0x212>
 80027cc:	e0b5      	b.n	800293a <__aeabi_dsub+0x37e>
 80027ce:	4642      	mov	r2, r8
 80027d0:	4644      	mov	r4, r8
 80027d2:	1a82      	subs	r2, r0, r2
 80027d4:	2c00      	cmp	r4, #0
 80027d6:	d100      	bne.n	80027da <__aeabi_dsub+0x21e>
 80027d8:	e138      	b.n	8002a4c <__aeabi_dsub+0x490>
 80027da:	4e4e      	ldr	r6, [pc, #312]	; (8002914 <__aeabi_dsub+0x358>)
 80027dc:	42b0      	cmp	r0, r6
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x226>
 80027e0:	e1de      	b.n	8002ba0 <__aeabi_dsub+0x5e4>
 80027e2:	2680      	movs	r6, #128	; 0x80
 80027e4:	4664      	mov	r4, ip
 80027e6:	0436      	lsls	r6, r6, #16
 80027e8:	4334      	orrs	r4, r6
 80027ea:	46a4      	mov	ip, r4
 80027ec:	2a38      	cmp	r2, #56	; 0x38
 80027ee:	dd00      	ble.n	80027f2 <__aeabi_dsub+0x236>
 80027f0:	e196      	b.n	8002b20 <__aeabi_dsub+0x564>
 80027f2:	2a1f      	cmp	r2, #31
 80027f4:	dd00      	ble.n	80027f8 <__aeabi_dsub+0x23c>
 80027f6:	e224      	b.n	8002c42 <__aeabi_dsub+0x686>
 80027f8:	2620      	movs	r6, #32
 80027fa:	1ab4      	subs	r4, r6, r2
 80027fc:	46a2      	mov	sl, r4
 80027fe:	4664      	mov	r4, ip
 8002800:	4656      	mov	r6, sl
 8002802:	40b4      	lsls	r4, r6
 8002804:	46a1      	mov	r9, r4
 8002806:	001c      	movs	r4, r3
 8002808:	464e      	mov	r6, r9
 800280a:	40d4      	lsrs	r4, r2
 800280c:	4326      	orrs	r6, r4
 800280e:	0034      	movs	r4, r6
 8002810:	4656      	mov	r6, sl
 8002812:	40b3      	lsls	r3, r6
 8002814:	1e5e      	subs	r6, r3, #1
 8002816:	41b3      	sbcs	r3, r6
 8002818:	431c      	orrs	r4, r3
 800281a:	4663      	mov	r3, ip
 800281c:	40d3      	lsrs	r3, r2
 800281e:	18c9      	adds	r1, r1, r3
 8002820:	19e4      	adds	r4, r4, r7
 8002822:	42bc      	cmp	r4, r7
 8002824:	41bf      	sbcs	r7, r7
 8002826:	427f      	negs	r7, r7
 8002828:	46b9      	mov	r9, r7
 800282a:	4680      	mov	r8, r0
 800282c:	4489      	add	r9, r1
 800282e:	e0d8      	b.n	80029e2 <__aeabi_dsub+0x426>
 8002830:	4640      	mov	r0, r8
 8002832:	4c3b      	ldr	r4, [pc, #236]	; (8002920 <__aeabi_dsub+0x364>)
 8002834:	3001      	adds	r0, #1
 8002836:	4220      	tst	r0, r4
 8002838:	d000      	beq.n	800283c <__aeabi_dsub+0x280>
 800283a:	e0b4      	b.n	80029a6 <__aeabi_dsub+0x3ea>
 800283c:	4640      	mov	r0, r8
 800283e:	2800      	cmp	r0, #0
 8002840:	d000      	beq.n	8002844 <__aeabi_dsub+0x288>
 8002842:	e144      	b.n	8002ace <__aeabi_dsub+0x512>
 8002844:	4660      	mov	r0, ip
 8002846:	4318      	orrs	r0, r3
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x290>
 800284a:	e190      	b.n	8002b6e <__aeabi_dsub+0x5b2>
 800284c:	0008      	movs	r0, r1
 800284e:	4338      	orrs	r0, r7
 8002850:	d000      	beq.n	8002854 <__aeabi_dsub+0x298>
 8002852:	e1aa      	b.n	8002baa <__aeabi_dsub+0x5ee>
 8002854:	4661      	mov	r1, ip
 8002856:	08db      	lsrs	r3, r3, #3
 8002858:	0749      	lsls	r1, r1, #29
 800285a:	430b      	orrs	r3, r1
 800285c:	4661      	mov	r1, ip
 800285e:	08cc      	lsrs	r4, r1, #3
 8002860:	e027      	b.n	80028b2 <__aeabi_dsub+0x2f6>
 8002862:	0008      	movs	r0, r1
 8002864:	4338      	orrs	r0, r7
 8002866:	d061      	beq.n	800292c <__aeabi_dsub+0x370>
 8002868:	1e50      	subs	r0, r2, #1
 800286a:	2a01      	cmp	r2, #1
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x2b4>
 800286e:	e139      	b.n	8002ae4 <__aeabi_dsub+0x528>
 8002870:	42a2      	cmp	r2, r4
 8002872:	d027      	beq.n	80028c4 <__aeabi_dsub+0x308>
 8002874:	0002      	movs	r2, r0
 8002876:	e75d      	b.n	8002734 <__aeabi_dsub+0x178>
 8002878:	0002      	movs	r2, r0
 800287a:	391f      	subs	r1, #31
 800287c:	40ca      	lsrs	r2, r1
 800287e:	0011      	movs	r1, r2
 8002880:	2b20      	cmp	r3, #32
 8002882:	d003      	beq.n	800288c <__aeabi_dsub+0x2d0>
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	4098      	lsls	r0, r3
 800288a:	4304      	orrs	r4, r0
 800288c:	1e63      	subs	r3, r4, #1
 800288e:	419c      	sbcs	r4, r3
 8002890:	2300      	movs	r3, #0
 8002892:	4699      	mov	r9, r3
 8002894:	4698      	mov	r8, r3
 8002896:	430c      	orrs	r4, r1
 8002898:	0763      	lsls	r3, r4, #29
 800289a:	d000      	beq.n	800289e <__aeabi_dsub+0x2e2>
 800289c:	e712      	b.n	80026c4 <__aeabi_dsub+0x108>
 800289e:	464b      	mov	r3, r9
 80028a0:	464a      	mov	r2, r9
 80028a2:	08e4      	lsrs	r4, r4, #3
 80028a4:	075b      	lsls	r3, r3, #29
 80028a6:	4323      	orrs	r3, r4
 80028a8:	08d4      	lsrs	r4, r2, #3
 80028aa:	4642      	mov	r2, r8
 80028ac:	4919      	ldr	r1, [pc, #100]	; (8002914 <__aeabi_dsub+0x358>)
 80028ae:	428a      	cmp	r2, r1
 80028b0:	d00e      	beq.n	80028d0 <__aeabi_dsub+0x314>
 80028b2:	0324      	lsls	r4, r4, #12
 80028b4:	0552      	lsls	r2, r2, #21
 80028b6:	0b24      	lsrs	r4, r4, #12
 80028b8:	0d52      	lsrs	r2, r2, #21
 80028ba:	e722      	b.n	8002702 <__aeabi_dsub+0x146>
 80028bc:	000a      	movs	r2, r1
 80028be:	2400      	movs	r4, #0
 80028c0:	2300      	movs	r3, #0
 80028c2:	e71e      	b.n	8002702 <__aeabi_dsub+0x146>
 80028c4:	08db      	lsrs	r3, r3, #3
 80028c6:	4662      	mov	r2, ip
 80028c8:	0752      	lsls	r2, r2, #29
 80028ca:	4313      	orrs	r3, r2
 80028cc:	4662      	mov	r2, ip
 80028ce:	08d4      	lsrs	r4, r2, #3
 80028d0:	001a      	movs	r2, r3
 80028d2:	4322      	orrs	r2, r4
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x31c>
 80028d6:	e1fc      	b.n	8002cd2 <__aeabi_dsub+0x716>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0312      	lsls	r2, r2, #12
 80028dc:	4314      	orrs	r4, r2
 80028de:	0324      	lsls	r4, r4, #12
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <__aeabi_dsub+0x358>)
 80028e2:	0b24      	lsrs	r4, r4, #12
 80028e4:	e70d      	b.n	8002702 <__aeabi_dsub+0x146>
 80028e6:	0020      	movs	r0, r4
 80028e8:	f000 fb74 	bl	8002fd4 <__clzsi2>
 80028ec:	0001      	movs	r1, r0
 80028ee:	3118      	adds	r1, #24
 80028f0:	291f      	cmp	r1, #31
 80028f2:	dc00      	bgt.n	80028f6 <__aeabi_dsub+0x33a>
 80028f4:	e6c4      	b.n	8002680 <__aeabi_dsub+0xc4>
 80028f6:	3808      	subs	r0, #8
 80028f8:	4084      	lsls	r4, r0
 80028fa:	4643      	mov	r3, r8
 80028fc:	0020      	movs	r0, r4
 80028fe:	2400      	movs	r4, #0
 8002900:	4588      	cmp	r8, r1
 8002902:	dc00      	bgt.n	8002906 <__aeabi_dsub+0x34a>
 8002904:	e6c8      	b.n	8002698 <__aeabi_dsub+0xdc>
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__aeabi_dsub+0x35c>)
 8002908:	1a5b      	subs	r3, r3, r1
 800290a:	4010      	ands	r0, r2
 800290c:	4698      	mov	r8, r3
 800290e:	4681      	mov	r9, r0
 8002910:	e6d6      	b.n	80026c0 <__aeabi_dsub+0x104>
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	000007ff 	.word	0x000007ff
 8002918:	ff7fffff 	.word	0xff7fffff
 800291c:	fffff801 	.word	0xfffff801
 8002920:	000007fe 	.word	0x000007fe
 8002924:	430f      	orrs	r7, r1
 8002926:	1e7a      	subs	r2, r7, #1
 8002928:	4197      	sbcs	r7, r2
 800292a:	e691      	b.n	8002650 <__aeabi_dsub+0x94>
 800292c:	4661      	mov	r1, ip
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	0749      	lsls	r1, r1, #29
 8002932:	430b      	orrs	r3, r1
 8002934:	4661      	mov	r1, ip
 8002936:	08cc      	lsrs	r4, r1, #3
 8002938:	e7b8      	b.n	80028ac <__aeabi_dsub+0x2f0>
 800293a:	4640      	mov	r0, r8
 800293c:	4cd3      	ldr	r4, [pc, #844]	; (8002c8c <__aeabi_dsub+0x6d0>)
 800293e:	3001      	adds	r0, #1
 8002940:	4220      	tst	r0, r4
 8002942:	d000      	beq.n	8002946 <__aeabi_dsub+0x38a>
 8002944:	e0a2      	b.n	8002a8c <__aeabi_dsub+0x4d0>
 8002946:	4640      	mov	r0, r8
 8002948:	2800      	cmp	r0, #0
 800294a:	d000      	beq.n	800294e <__aeabi_dsub+0x392>
 800294c:	e101      	b.n	8002b52 <__aeabi_dsub+0x596>
 800294e:	4660      	mov	r0, ip
 8002950:	4318      	orrs	r0, r3
 8002952:	d100      	bne.n	8002956 <__aeabi_dsub+0x39a>
 8002954:	e15e      	b.n	8002c14 <__aeabi_dsub+0x658>
 8002956:	0008      	movs	r0, r1
 8002958:	4338      	orrs	r0, r7
 800295a:	d000      	beq.n	800295e <__aeabi_dsub+0x3a2>
 800295c:	e15f      	b.n	8002c1e <__aeabi_dsub+0x662>
 800295e:	4661      	mov	r1, ip
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	0749      	lsls	r1, r1, #29
 8002964:	430b      	orrs	r3, r1
 8002966:	4661      	mov	r1, ip
 8002968:	08cc      	lsrs	r4, r1, #3
 800296a:	e7a2      	b.n	80028b2 <__aeabi_dsub+0x2f6>
 800296c:	4dc8      	ldr	r5, [pc, #800]	; (8002c90 <__aeabi_dsub+0x6d4>)
 800296e:	42a8      	cmp	r0, r5
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x3b8>
 8002972:	e0cf      	b.n	8002b14 <__aeabi_dsub+0x558>
 8002974:	2580      	movs	r5, #128	; 0x80
 8002976:	4664      	mov	r4, ip
 8002978:	042d      	lsls	r5, r5, #16
 800297a:	432c      	orrs	r4, r5
 800297c:	46a4      	mov	ip, r4
 800297e:	2a38      	cmp	r2, #56	; 0x38
 8002980:	dc56      	bgt.n	8002a30 <__aeabi_dsub+0x474>
 8002982:	2a1f      	cmp	r2, #31
 8002984:	dd00      	ble.n	8002988 <__aeabi_dsub+0x3cc>
 8002986:	e0d1      	b.n	8002b2c <__aeabi_dsub+0x570>
 8002988:	2520      	movs	r5, #32
 800298a:	001e      	movs	r6, r3
 800298c:	1aad      	subs	r5, r5, r2
 800298e:	4664      	mov	r4, ip
 8002990:	40ab      	lsls	r3, r5
 8002992:	40ac      	lsls	r4, r5
 8002994:	40d6      	lsrs	r6, r2
 8002996:	1e5d      	subs	r5, r3, #1
 8002998:	41ab      	sbcs	r3, r5
 800299a:	4334      	orrs	r4, r6
 800299c:	4323      	orrs	r3, r4
 800299e:	4664      	mov	r4, ip
 80029a0:	40d4      	lsrs	r4, r2
 80029a2:	1b09      	subs	r1, r1, r4
 80029a4:	e049      	b.n	8002a3a <__aeabi_dsub+0x47e>
 80029a6:	4660      	mov	r0, ip
 80029a8:	1bdc      	subs	r4, r3, r7
 80029aa:	1a46      	subs	r6, r0, r1
 80029ac:	42a3      	cmp	r3, r4
 80029ae:	4180      	sbcs	r0, r0
 80029b0:	4240      	negs	r0, r0
 80029b2:	4681      	mov	r9, r0
 80029b4:	0030      	movs	r0, r6
 80029b6:	464e      	mov	r6, r9
 80029b8:	1b80      	subs	r0, r0, r6
 80029ba:	4681      	mov	r9, r0
 80029bc:	0200      	lsls	r0, r0, #8
 80029be:	d476      	bmi.n	8002aae <__aeabi_dsub+0x4f2>
 80029c0:	464b      	mov	r3, r9
 80029c2:	4323      	orrs	r3, r4
 80029c4:	d000      	beq.n	80029c8 <__aeabi_dsub+0x40c>
 80029c6:	e652      	b.n	800266e <__aeabi_dsub+0xb2>
 80029c8:	2400      	movs	r4, #0
 80029ca:	2500      	movs	r5, #0
 80029cc:	e771      	b.n	80028b2 <__aeabi_dsub+0x2f6>
 80029ce:	4339      	orrs	r1, r7
 80029d0:	000c      	movs	r4, r1
 80029d2:	1e62      	subs	r2, r4, #1
 80029d4:	4194      	sbcs	r4, r2
 80029d6:	18e4      	adds	r4, r4, r3
 80029d8:	429c      	cmp	r4, r3
 80029da:	419b      	sbcs	r3, r3
 80029dc:	425b      	negs	r3, r3
 80029de:	4463      	add	r3, ip
 80029e0:	4699      	mov	r9, r3
 80029e2:	464b      	mov	r3, r9
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	d400      	bmi.n	80029ea <__aeabi_dsub+0x42e>
 80029e8:	e756      	b.n	8002898 <__aeabi_dsub+0x2dc>
 80029ea:	2301      	movs	r3, #1
 80029ec:	469c      	mov	ip, r3
 80029ee:	4ba8      	ldr	r3, [pc, #672]	; (8002c90 <__aeabi_dsub+0x6d4>)
 80029f0:	44e0      	add	r8, ip
 80029f2:	4598      	cmp	r8, r3
 80029f4:	d038      	beq.n	8002a68 <__aeabi_dsub+0x4ac>
 80029f6:	464b      	mov	r3, r9
 80029f8:	48a6      	ldr	r0, [pc, #664]	; (8002c94 <__aeabi_dsub+0x6d8>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	4003      	ands	r3, r0
 80029fe:	0018      	movs	r0, r3
 8002a00:	0863      	lsrs	r3, r4, #1
 8002a02:	4014      	ands	r4, r2
 8002a04:	431c      	orrs	r4, r3
 8002a06:	07c3      	lsls	r3, r0, #31
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	0843      	lsrs	r3, r0, #1
 8002a0c:	4699      	mov	r9, r3
 8002a0e:	e657      	b.n	80026c0 <__aeabi_dsub+0x104>
 8002a10:	0010      	movs	r0, r2
 8002a12:	000e      	movs	r6, r1
 8002a14:	3820      	subs	r0, #32
 8002a16:	40c6      	lsrs	r6, r0
 8002a18:	2a20      	cmp	r2, #32
 8002a1a:	d004      	beq.n	8002a26 <__aeabi_dsub+0x46a>
 8002a1c:	2040      	movs	r0, #64	; 0x40
 8002a1e:	1a82      	subs	r2, r0, r2
 8002a20:	4091      	lsls	r1, r2
 8002a22:	430f      	orrs	r7, r1
 8002a24:	46b9      	mov	r9, r7
 8002a26:	464f      	mov	r7, r9
 8002a28:	1e7a      	subs	r2, r7, #1
 8002a2a:	4197      	sbcs	r7, r2
 8002a2c:	4337      	orrs	r7, r6
 8002a2e:	e60f      	b.n	8002650 <__aeabi_dsub+0x94>
 8002a30:	4662      	mov	r2, ip
 8002a32:	431a      	orrs	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	4193      	sbcs	r3, r2
 8002a3a:	1afc      	subs	r4, r7, r3
 8002a3c:	42a7      	cmp	r7, r4
 8002a3e:	41bf      	sbcs	r7, r7
 8002a40:	427f      	negs	r7, r7
 8002a42:	1bcb      	subs	r3, r1, r7
 8002a44:	4699      	mov	r9, r3
 8002a46:	465d      	mov	r5, fp
 8002a48:	4680      	mov	r8, r0
 8002a4a:	e608      	b.n	800265e <__aeabi_dsub+0xa2>
 8002a4c:	4666      	mov	r6, ip
 8002a4e:	431e      	orrs	r6, r3
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x498>
 8002a52:	e0be      	b.n	8002bd2 <__aeabi_dsub+0x616>
 8002a54:	1e56      	subs	r6, r2, #1
 8002a56:	2a01      	cmp	r2, #1
 8002a58:	d100      	bne.n	8002a5c <__aeabi_dsub+0x4a0>
 8002a5a:	e109      	b.n	8002c70 <__aeabi_dsub+0x6b4>
 8002a5c:	4c8c      	ldr	r4, [pc, #560]	; (8002c90 <__aeabi_dsub+0x6d4>)
 8002a5e:	42a2      	cmp	r2, r4
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x4a8>
 8002a62:	e119      	b.n	8002c98 <__aeabi_dsub+0x6dc>
 8002a64:	0032      	movs	r2, r6
 8002a66:	e6c1      	b.n	80027ec <__aeabi_dsub+0x230>
 8002a68:	4642      	mov	r2, r8
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e648      	b.n	8002702 <__aeabi_dsub+0x146>
 8002a70:	2020      	movs	r0, #32
 8002a72:	000c      	movs	r4, r1
 8002a74:	1a80      	subs	r0, r0, r2
 8002a76:	003e      	movs	r6, r7
 8002a78:	4087      	lsls	r7, r0
 8002a7a:	4084      	lsls	r4, r0
 8002a7c:	40d6      	lsrs	r6, r2
 8002a7e:	1e78      	subs	r0, r7, #1
 8002a80:	4187      	sbcs	r7, r0
 8002a82:	40d1      	lsrs	r1, r2
 8002a84:	4334      	orrs	r4, r6
 8002a86:	433c      	orrs	r4, r7
 8002a88:	448c      	add	ip, r1
 8002a8a:	e7a4      	b.n	80029d6 <__aeabi_dsub+0x41a>
 8002a8c:	4a80      	ldr	r2, [pc, #512]	; (8002c90 <__aeabi_dsub+0x6d4>)
 8002a8e:	4290      	cmp	r0, r2
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x4d8>
 8002a92:	e0e9      	b.n	8002c68 <__aeabi_dsub+0x6ac>
 8002a94:	19df      	adds	r7, r3, r7
 8002a96:	429f      	cmp	r7, r3
 8002a98:	419b      	sbcs	r3, r3
 8002a9a:	4461      	add	r1, ip
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	18c9      	adds	r1, r1, r3
 8002aa0:	07cc      	lsls	r4, r1, #31
 8002aa2:	087f      	lsrs	r7, r7, #1
 8002aa4:	084b      	lsrs	r3, r1, #1
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	4680      	mov	r8, r0
 8002aaa:	433c      	orrs	r4, r7
 8002aac:	e6f4      	b.n	8002898 <__aeabi_dsub+0x2dc>
 8002aae:	1afc      	subs	r4, r7, r3
 8002ab0:	42a7      	cmp	r7, r4
 8002ab2:	41bf      	sbcs	r7, r7
 8002ab4:	4663      	mov	r3, ip
 8002ab6:	427f      	negs	r7, r7
 8002ab8:	1ac9      	subs	r1, r1, r3
 8002aba:	1bcb      	subs	r3, r1, r7
 8002abc:	4699      	mov	r9, r3
 8002abe:	465d      	mov	r5, fp
 8002ac0:	e5d5      	b.n	800266e <__aeabi_dsub+0xb2>
 8002ac2:	08ff      	lsrs	r7, r7, #3
 8002ac4:	074b      	lsls	r3, r1, #29
 8002ac6:	465d      	mov	r5, fp
 8002ac8:	433b      	orrs	r3, r7
 8002aca:	08cc      	lsrs	r4, r1, #3
 8002acc:	e6ee      	b.n	80028ac <__aeabi_dsub+0x2f0>
 8002ace:	4662      	mov	r2, ip
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x51a>
 8002ad4:	e082      	b.n	8002bdc <__aeabi_dsub+0x620>
 8002ad6:	000b      	movs	r3, r1
 8002ad8:	433b      	orrs	r3, r7
 8002ada:	d11b      	bne.n	8002b14 <__aeabi_dsub+0x558>
 8002adc:	2480      	movs	r4, #128	; 0x80
 8002ade:	2500      	movs	r5, #0
 8002ae0:	0324      	lsls	r4, r4, #12
 8002ae2:	e6f9      	b.n	80028d8 <__aeabi_dsub+0x31c>
 8002ae4:	19dc      	adds	r4, r3, r7
 8002ae6:	429c      	cmp	r4, r3
 8002ae8:	419b      	sbcs	r3, r3
 8002aea:	4461      	add	r1, ip
 8002aec:	4689      	mov	r9, r1
 8002aee:	425b      	negs	r3, r3
 8002af0:	4499      	add	r9, r3
 8002af2:	464b      	mov	r3, r9
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	d444      	bmi.n	8002b82 <__aeabi_dsub+0x5c6>
 8002af8:	2301      	movs	r3, #1
 8002afa:	4698      	mov	r8, r3
 8002afc:	e6cc      	b.n	8002898 <__aeabi_dsub+0x2dc>
 8002afe:	1bdc      	subs	r4, r3, r7
 8002b00:	4662      	mov	r2, ip
 8002b02:	42a3      	cmp	r3, r4
 8002b04:	419b      	sbcs	r3, r3
 8002b06:	1a51      	subs	r1, r2, r1
 8002b08:	425b      	negs	r3, r3
 8002b0a:	1acb      	subs	r3, r1, r3
 8002b0c:	4699      	mov	r9, r3
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4698      	mov	r8, r3
 8002b12:	e5a4      	b.n	800265e <__aeabi_dsub+0xa2>
 8002b14:	08ff      	lsrs	r7, r7, #3
 8002b16:	074b      	lsls	r3, r1, #29
 8002b18:	465d      	mov	r5, fp
 8002b1a:	433b      	orrs	r3, r7
 8002b1c:	08cc      	lsrs	r4, r1, #3
 8002b1e:	e6d7      	b.n	80028d0 <__aeabi_dsub+0x314>
 8002b20:	4662      	mov	r2, ip
 8002b22:	431a      	orrs	r2, r3
 8002b24:	0014      	movs	r4, r2
 8002b26:	1e63      	subs	r3, r4, #1
 8002b28:	419c      	sbcs	r4, r3
 8002b2a:	e679      	b.n	8002820 <__aeabi_dsub+0x264>
 8002b2c:	0015      	movs	r5, r2
 8002b2e:	4664      	mov	r4, ip
 8002b30:	3d20      	subs	r5, #32
 8002b32:	40ec      	lsrs	r4, r5
 8002b34:	46a0      	mov	r8, r4
 8002b36:	2a20      	cmp	r2, #32
 8002b38:	d005      	beq.n	8002b46 <__aeabi_dsub+0x58a>
 8002b3a:	2540      	movs	r5, #64	; 0x40
 8002b3c:	4664      	mov	r4, ip
 8002b3e:	1aaa      	subs	r2, r5, r2
 8002b40:	4094      	lsls	r4, r2
 8002b42:	4323      	orrs	r3, r4
 8002b44:	469a      	mov	sl, r3
 8002b46:	4654      	mov	r4, sl
 8002b48:	1e63      	subs	r3, r4, #1
 8002b4a:	419c      	sbcs	r4, r3
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	4323      	orrs	r3, r4
 8002b50:	e773      	b.n	8002a3a <__aeabi_dsub+0x47e>
 8002b52:	4662      	mov	r2, ip
 8002b54:	431a      	orrs	r2, r3
 8002b56:	d023      	beq.n	8002ba0 <__aeabi_dsub+0x5e4>
 8002b58:	000a      	movs	r2, r1
 8002b5a:	433a      	orrs	r2, r7
 8002b5c:	d000      	beq.n	8002b60 <__aeabi_dsub+0x5a4>
 8002b5e:	e0a0      	b.n	8002ca2 <__aeabi_dsub+0x6e6>
 8002b60:	4662      	mov	r2, ip
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	0752      	lsls	r2, r2, #29
 8002b66:	4313      	orrs	r3, r2
 8002b68:	4662      	mov	r2, ip
 8002b6a:	08d4      	lsrs	r4, r2, #3
 8002b6c:	e6b0      	b.n	80028d0 <__aeabi_dsub+0x314>
 8002b6e:	000b      	movs	r3, r1
 8002b70:	433b      	orrs	r3, r7
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x5ba>
 8002b74:	e728      	b.n	80029c8 <__aeabi_dsub+0x40c>
 8002b76:	08ff      	lsrs	r7, r7, #3
 8002b78:	074b      	lsls	r3, r1, #29
 8002b7a:	465d      	mov	r5, fp
 8002b7c:	433b      	orrs	r3, r7
 8002b7e:	08cc      	lsrs	r4, r1, #3
 8002b80:	e697      	b.n	80028b2 <__aeabi_dsub+0x2f6>
 8002b82:	2302      	movs	r3, #2
 8002b84:	4698      	mov	r8, r3
 8002b86:	e736      	b.n	80029f6 <__aeabi_dsub+0x43a>
 8002b88:	1afc      	subs	r4, r7, r3
 8002b8a:	42a7      	cmp	r7, r4
 8002b8c:	41bf      	sbcs	r7, r7
 8002b8e:	4663      	mov	r3, ip
 8002b90:	427f      	negs	r7, r7
 8002b92:	1ac9      	subs	r1, r1, r3
 8002b94:	1bcb      	subs	r3, r1, r7
 8002b96:	4699      	mov	r9, r3
 8002b98:	2301      	movs	r3, #1
 8002b9a:	465d      	mov	r5, fp
 8002b9c:	4698      	mov	r8, r3
 8002b9e:	e55e      	b.n	800265e <__aeabi_dsub+0xa2>
 8002ba0:	074b      	lsls	r3, r1, #29
 8002ba2:	08ff      	lsrs	r7, r7, #3
 8002ba4:	433b      	orrs	r3, r7
 8002ba6:	08cc      	lsrs	r4, r1, #3
 8002ba8:	e692      	b.n	80028d0 <__aeabi_dsub+0x314>
 8002baa:	1bdc      	subs	r4, r3, r7
 8002bac:	4660      	mov	r0, ip
 8002bae:	42a3      	cmp	r3, r4
 8002bb0:	41b6      	sbcs	r6, r6
 8002bb2:	1a40      	subs	r0, r0, r1
 8002bb4:	4276      	negs	r6, r6
 8002bb6:	1b80      	subs	r0, r0, r6
 8002bb8:	4681      	mov	r9, r0
 8002bba:	0200      	lsls	r0, r0, #8
 8002bbc:	d560      	bpl.n	8002c80 <__aeabi_dsub+0x6c4>
 8002bbe:	1afc      	subs	r4, r7, r3
 8002bc0:	42a7      	cmp	r7, r4
 8002bc2:	41bf      	sbcs	r7, r7
 8002bc4:	4663      	mov	r3, ip
 8002bc6:	427f      	negs	r7, r7
 8002bc8:	1ac9      	subs	r1, r1, r3
 8002bca:	1bcb      	subs	r3, r1, r7
 8002bcc:	4699      	mov	r9, r3
 8002bce:	465d      	mov	r5, fp
 8002bd0:	e576      	b.n	80026c0 <__aeabi_dsub+0x104>
 8002bd2:	08ff      	lsrs	r7, r7, #3
 8002bd4:	074b      	lsls	r3, r1, #29
 8002bd6:	433b      	orrs	r3, r7
 8002bd8:	08cc      	lsrs	r4, r1, #3
 8002bda:	e667      	b.n	80028ac <__aeabi_dsub+0x2f0>
 8002bdc:	000a      	movs	r2, r1
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	433a      	orrs	r2, r7
 8002be2:	d100      	bne.n	8002be6 <__aeabi_dsub+0x62a>
 8002be4:	e66f      	b.n	80028c6 <__aeabi_dsub+0x30a>
 8002be6:	4662      	mov	r2, ip
 8002be8:	0752      	lsls	r2, r2, #29
 8002bea:	4313      	orrs	r3, r2
 8002bec:	4662      	mov	r2, ip
 8002bee:	08d4      	lsrs	r4, r2, #3
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	0312      	lsls	r2, r2, #12
 8002bf4:	4214      	tst	r4, r2
 8002bf6:	d007      	beq.n	8002c08 <__aeabi_dsub+0x64c>
 8002bf8:	08c8      	lsrs	r0, r1, #3
 8002bfa:	4210      	tst	r0, r2
 8002bfc:	d104      	bne.n	8002c08 <__aeabi_dsub+0x64c>
 8002bfe:	465d      	mov	r5, fp
 8002c00:	0004      	movs	r4, r0
 8002c02:	08fb      	lsrs	r3, r7, #3
 8002c04:	0749      	lsls	r1, r1, #29
 8002c06:	430b      	orrs	r3, r1
 8002c08:	0f5a      	lsrs	r2, r3, #29
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	0752      	lsls	r2, r2, #29
 8002c10:	4313      	orrs	r3, r2
 8002c12:	e65d      	b.n	80028d0 <__aeabi_dsub+0x314>
 8002c14:	074b      	lsls	r3, r1, #29
 8002c16:	08ff      	lsrs	r7, r7, #3
 8002c18:	433b      	orrs	r3, r7
 8002c1a:	08cc      	lsrs	r4, r1, #3
 8002c1c:	e649      	b.n	80028b2 <__aeabi_dsub+0x2f6>
 8002c1e:	19dc      	adds	r4, r3, r7
 8002c20:	429c      	cmp	r4, r3
 8002c22:	419b      	sbcs	r3, r3
 8002c24:	4461      	add	r1, ip
 8002c26:	4689      	mov	r9, r1
 8002c28:	425b      	negs	r3, r3
 8002c2a:	4499      	add	r9, r3
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	d400      	bmi.n	8002c34 <__aeabi_dsub+0x678>
 8002c32:	e631      	b.n	8002898 <__aeabi_dsub+0x2dc>
 8002c34:	464a      	mov	r2, r9
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <__aeabi_dsub+0x6d8>)
 8002c38:	401a      	ands	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	4698      	mov	r8, r3
 8002c40:	e62a      	b.n	8002898 <__aeabi_dsub+0x2dc>
 8002c42:	0016      	movs	r6, r2
 8002c44:	4664      	mov	r4, ip
 8002c46:	3e20      	subs	r6, #32
 8002c48:	40f4      	lsrs	r4, r6
 8002c4a:	46a0      	mov	r8, r4
 8002c4c:	2a20      	cmp	r2, #32
 8002c4e:	d005      	beq.n	8002c5c <__aeabi_dsub+0x6a0>
 8002c50:	2640      	movs	r6, #64	; 0x40
 8002c52:	4664      	mov	r4, ip
 8002c54:	1ab2      	subs	r2, r6, r2
 8002c56:	4094      	lsls	r4, r2
 8002c58:	4323      	orrs	r3, r4
 8002c5a:	469a      	mov	sl, r3
 8002c5c:	4654      	mov	r4, sl
 8002c5e:	1e63      	subs	r3, r4, #1
 8002c60:	419c      	sbcs	r4, r3
 8002c62:	4643      	mov	r3, r8
 8002c64:	431c      	orrs	r4, r3
 8002c66:	e5db      	b.n	8002820 <__aeabi_dsub+0x264>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	2400      	movs	r4, #0
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e548      	b.n	8002702 <__aeabi_dsub+0x146>
 8002c70:	19dc      	adds	r4, r3, r7
 8002c72:	42bc      	cmp	r4, r7
 8002c74:	41bf      	sbcs	r7, r7
 8002c76:	4461      	add	r1, ip
 8002c78:	4689      	mov	r9, r1
 8002c7a:	427f      	negs	r7, r7
 8002c7c:	44b9      	add	r9, r7
 8002c7e:	e738      	b.n	8002af2 <__aeabi_dsub+0x536>
 8002c80:	464b      	mov	r3, r9
 8002c82:	4323      	orrs	r3, r4
 8002c84:	d100      	bne.n	8002c88 <__aeabi_dsub+0x6cc>
 8002c86:	e69f      	b.n	80029c8 <__aeabi_dsub+0x40c>
 8002c88:	e606      	b.n	8002898 <__aeabi_dsub+0x2dc>
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	000007fe 	.word	0x000007fe
 8002c90:	000007ff 	.word	0x000007ff
 8002c94:	ff7fffff 	.word	0xff7fffff
 8002c98:	08ff      	lsrs	r7, r7, #3
 8002c9a:	074b      	lsls	r3, r1, #29
 8002c9c:	433b      	orrs	r3, r7
 8002c9e:	08cc      	lsrs	r4, r1, #3
 8002ca0:	e616      	b.n	80028d0 <__aeabi_dsub+0x314>
 8002ca2:	4662      	mov	r2, ip
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	0752      	lsls	r2, r2, #29
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	4662      	mov	r2, ip
 8002cac:	08d4      	lsrs	r4, r2, #3
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	0312      	lsls	r2, r2, #12
 8002cb2:	4214      	tst	r4, r2
 8002cb4:	d007      	beq.n	8002cc6 <__aeabi_dsub+0x70a>
 8002cb6:	08c8      	lsrs	r0, r1, #3
 8002cb8:	4210      	tst	r0, r2
 8002cba:	d104      	bne.n	8002cc6 <__aeabi_dsub+0x70a>
 8002cbc:	465d      	mov	r5, fp
 8002cbe:	0004      	movs	r4, r0
 8002cc0:	08fb      	lsrs	r3, r7, #3
 8002cc2:	0749      	lsls	r1, r1, #29
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	0f5a      	lsrs	r2, r3, #29
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	0752      	lsls	r2, r2, #29
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	e5fe      	b.n	80028d0 <__aeabi_dsub+0x314>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	4a01      	ldr	r2, [pc, #4]	; (8002cdc <__aeabi_dsub+0x720>)
 8002cd6:	001c      	movs	r4, r3
 8002cd8:	e513      	b.n	8002702 <__aeabi_dsub+0x146>
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	000007ff 	.word	0x000007ff

08002ce0 <__aeabi_dcmpun>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	0005      	movs	r5, r0
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <__aeabi_dcmpun+0x38>)
 8002ce6:	031c      	lsls	r4, r3, #12
 8002ce8:	0016      	movs	r6, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	030a      	lsls	r2, r1, #12
 8002cee:	0049      	lsls	r1, r1, #1
 8002cf0:	0b12      	lsrs	r2, r2, #12
 8002cf2:	0d49      	lsrs	r1, r1, #21
 8002cf4:	0b24      	lsrs	r4, r4, #12
 8002cf6:	0d5b      	lsrs	r3, r3, #21
 8002cf8:	4281      	cmp	r1, r0
 8002cfa:	d008      	beq.n	8002d0e <__aeabi_dcmpun+0x2e>
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <__aeabi_dcmpun+0x38>)
 8002cfe:	2000      	movs	r0, #0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d103      	bne.n	8002d0c <__aeabi_dcmpun+0x2c>
 8002d04:	0020      	movs	r0, r4
 8002d06:	4330      	orrs	r0, r6
 8002d08:	1e43      	subs	r3, r0, #1
 8002d0a:	4198      	sbcs	r0, r3
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	2001      	movs	r0, #1
 8002d10:	432a      	orrs	r2, r5
 8002d12:	d1fb      	bne.n	8002d0c <__aeabi_dcmpun+0x2c>
 8002d14:	e7f2      	b.n	8002cfc <__aeabi_dcmpun+0x1c>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	000007ff 	.word	0x000007ff

08002d1c <__aeabi_d2iz>:
 8002d1c:	000a      	movs	r2, r1
 8002d1e:	b530      	push	{r4, r5, lr}
 8002d20:	4c13      	ldr	r4, [pc, #76]	; (8002d70 <__aeabi_d2iz+0x54>)
 8002d22:	0053      	lsls	r3, r2, #1
 8002d24:	0309      	lsls	r1, r1, #12
 8002d26:	0005      	movs	r5, r0
 8002d28:	0b09      	lsrs	r1, r1, #12
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	0d5b      	lsrs	r3, r3, #21
 8002d2e:	0fd2      	lsrs	r2, r2, #31
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	dd04      	ble.n	8002d3e <__aeabi_d2iz+0x22>
 8002d34:	480f      	ldr	r0, [pc, #60]	; (8002d74 <__aeabi_d2iz+0x58>)
 8002d36:	4283      	cmp	r3, r0
 8002d38:	dd02      	ble.n	8002d40 <__aeabi_d2iz+0x24>
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <__aeabi_d2iz+0x5c>)
 8002d3c:	18d0      	adds	r0, r2, r3
 8002d3e:	bd30      	pop	{r4, r5, pc}
 8002d40:	2080      	movs	r0, #128	; 0x80
 8002d42:	0340      	lsls	r0, r0, #13
 8002d44:	4301      	orrs	r1, r0
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <__aeabi_d2iz+0x60>)
 8002d48:	1ac0      	subs	r0, r0, r3
 8002d4a:	281f      	cmp	r0, #31
 8002d4c:	dd08      	ble.n	8002d60 <__aeabi_d2iz+0x44>
 8002d4e:	480c      	ldr	r0, [pc, #48]	; (8002d80 <__aeabi_d2iz+0x64>)
 8002d50:	1ac3      	subs	r3, r0, r3
 8002d52:	40d9      	lsrs	r1, r3
 8002d54:	000b      	movs	r3, r1
 8002d56:	4258      	negs	r0, r3
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	d1f0      	bne.n	8002d3e <__aeabi_d2iz+0x22>
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	e7ee      	b.n	8002d3e <__aeabi_d2iz+0x22>
 8002d60:	4c08      	ldr	r4, [pc, #32]	; (8002d84 <__aeabi_d2iz+0x68>)
 8002d62:	40c5      	lsrs	r5, r0
 8002d64:	46a4      	mov	ip, r4
 8002d66:	4463      	add	r3, ip
 8002d68:	4099      	lsls	r1, r3
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	432b      	orrs	r3, r5
 8002d6e:	e7f2      	b.n	8002d56 <__aeabi_d2iz+0x3a>
 8002d70:	000003fe 	.word	0x000003fe
 8002d74:	0000041d 	.word	0x0000041d
 8002d78:	7fffffff 	.word	0x7fffffff
 8002d7c:	00000433 	.word	0x00000433
 8002d80:	00000413 	.word	0x00000413
 8002d84:	fffffbed 	.word	0xfffffbed

08002d88 <__aeabi_i2d>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d016      	beq.n	8002dbc <__aeabi_i2d+0x34>
 8002d8e:	17c3      	asrs	r3, r0, #31
 8002d90:	18c5      	adds	r5, r0, r3
 8002d92:	405d      	eors	r5, r3
 8002d94:	0fc4      	lsrs	r4, r0, #31
 8002d96:	0028      	movs	r0, r5
 8002d98:	f000 f91c 	bl	8002fd4 <__clzsi2>
 8002d9c:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <__aeabi_i2d+0x5c>)
 8002d9e:	1a12      	subs	r2, r2, r0
 8002da0:	280a      	cmp	r0, #10
 8002da2:	dc16      	bgt.n	8002dd2 <__aeabi_i2d+0x4a>
 8002da4:	0003      	movs	r3, r0
 8002da6:	002e      	movs	r6, r5
 8002da8:	3315      	adds	r3, #21
 8002daa:	409e      	lsls	r6, r3
 8002dac:	230b      	movs	r3, #11
 8002dae:	1a18      	subs	r0, r3, r0
 8002db0:	40c5      	lsrs	r5, r0
 8002db2:	0552      	lsls	r2, r2, #21
 8002db4:	032d      	lsls	r5, r5, #12
 8002db6:	0b2d      	lsrs	r5, r5, #12
 8002db8:	0d53      	lsrs	r3, r2, #21
 8002dba:	e003      	b.n	8002dc4 <__aeabi_i2d+0x3c>
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2500      	movs	r5, #0
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	051b      	lsls	r3, r3, #20
 8002dc6:	432b      	orrs	r3, r5
 8002dc8:	07e4      	lsls	r4, r4, #31
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	0030      	movs	r0, r6
 8002dce:	0019      	movs	r1, r3
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	380b      	subs	r0, #11
 8002dd4:	4085      	lsls	r5, r0
 8002dd6:	0552      	lsls	r2, r2, #21
 8002dd8:	032d      	lsls	r5, r5, #12
 8002dda:	2600      	movs	r6, #0
 8002ddc:	0b2d      	lsrs	r5, r5, #12
 8002dde:	0d53      	lsrs	r3, r2, #21
 8002de0:	e7f0      	b.n	8002dc4 <__aeabi_i2d+0x3c>
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	0000041e 	.word	0x0000041e

08002de8 <__aeabi_ui2d>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	1e04      	subs	r4, r0, #0
 8002dec:	d010      	beq.n	8002e10 <__aeabi_ui2d+0x28>
 8002dee:	f000 f8f1 	bl	8002fd4 <__clzsi2>
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <__aeabi_ui2d+0x48>)
 8002df4:	1a1b      	subs	r3, r3, r0
 8002df6:	280a      	cmp	r0, #10
 8002df8:	dc11      	bgt.n	8002e1e <__aeabi_ui2d+0x36>
 8002dfa:	220b      	movs	r2, #11
 8002dfc:	0021      	movs	r1, r4
 8002dfe:	1a12      	subs	r2, r2, r0
 8002e00:	40d1      	lsrs	r1, r2
 8002e02:	3015      	adds	r0, #21
 8002e04:	030a      	lsls	r2, r1, #12
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	4084      	lsls	r4, r0
 8002e0a:	0b12      	lsrs	r2, r2, #12
 8002e0c:	0d5b      	lsrs	r3, r3, #21
 8002e0e:	e001      	b.n	8002e14 <__aeabi_ui2d+0x2c>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2200      	movs	r2, #0
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	4313      	orrs	r3, r2
 8002e18:	0020      	movs	r0, r4
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	0022      	movs	r2, r4
 8002e20:	380b      	subs	r0, #11
 8002e22:	4082      	lsls	r2, r0
 8002e24:	055b      	lsls	r3, r3, #21
 8002e26:	0312      	lsls	r2, r2, #12
 8002e28:	2400      	movs	r4, #0
 8002e2a:	0b12      	lsrs	r2, r2, #12
 8002e2c:	0d5b      	lsrs	r3, r3, #21
 8002e2e:	e7f1      	b.n	8002e14 <__aeabi_ui2d+0x2c>
 8002e30:	0000041e 	.word	0x0000041e

08002e34 <__aeabi_f2d>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	0043      	lsls	r3, r0, #1
 8002e38:	0246      	lsls	r6, r0, #9
 8002e3a:	0fc4      	lsrs	r4, r0, #31
 8002e3c:	20fe      	movs	r0, #254	; 0xfe
 8002e3e:	0e1b      	lsrs	r3, r3, #24
 8002e40:	1c59      	adds	r1, r3, #1
 8002e42:	0a75      	lsrs	r5, r6, #9
 8002e44:	4208      	tst	r0, r1
 8002e46:	d00c      	beq.n	8002e62 <__aeabi_f2d+0x2e>
 8002e48:	22e0      	movs	r2, #224	; 0xe0
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	4694      	mov	ip, r2
 8002e4e:	076d      	lsls	r5, r5, #29
 8002e50:	0b36      	lsrs	r6, r6, #12
 8002e52:	4463      	add	r3, ip
 8002e54:	051b      	lsls	r3, r3, #20
 8002e56:	4333      	orrs	r3, r6
 8002e58:	07e4      	lsls	r4, r4, #31
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	0028      	movs	r0, r5
 8002e5e:	0019      	movs	r1, r3
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d114      	bne.n	8002e90 <__aeabi_f2d+0x5c>
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	d01b      	beq.n	8002ea2 <__aeabi_f2d+0x6e>
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	f000 f8b2 	bl	8002fd4 <__clzsi2>
 8002e70:	280a      	cmp	r0, #10
 8002e72:	dc1c      	bgt.n	8002eae <__aeabi_f2d+0x7a>
 8002e74:	230b      	movs	r3, #11
 8002e76:	002e      	movs	r6, r5
 8002e78:	1a1b      	subs	r3, r3, r0
 8002e7a:	40de      	lsrs	r6, r3
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	3315      	adds	r3, #21
 8002e80:	409d      	lsls	r5, r3
 8002e82:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <__aeabi_f2d+0x88>)
 8002e84:	0336      	lsls	r6, r6, #12
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	0552      	lsls	r2, r2, #21
 8002e8a:	0b36      	lsrs	r6, r6, #12
 8002e8c:	0d53      	lsrs	r3, r2, #21
 8002e8e:	e7e1      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	d009      	beq.n	8002ea8 <__aeabi_f2d+0x74>
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0b36      	lsrs	r6, r6, #12
 8002e98:	0312      	lsls	r2, r2, #12
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <__aeabi_f2d+0x8c>)
 8002e9c:	076d      	lsls	r5, r5, #29
 8002e9e:	4316      	orrs	r6, r2
 8002ea0:	e7d8      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	e7d5      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <__aeabi_f2d+0x8c>)
 8002eac:	e7d2      	b.n	8002e54 <__aeabi_f2d+0x20>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	3b0b      	subs	r3, #11
 8002eb2:	409d      	lsls	r5, r3
 8002eb4:	002e      	movs	r6, r5
 8002eb6:	2500      	movs	r5, #0
 8002eb8:	e7e3      	b.n	8002e82 <__aeabi_f2d+0x4e>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	00000389 	.word	0x00000389
 8002ec0:	000007ff 	.word	0x000007ff

08002ec4 <__aeabi_d2f>:
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	004b      	lsls	r3, r1, #1
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	0d5b      	lsrs	r3, r3, #21
 8002ecc:	030c      	lsls	r4, r1, #12
 8002ece:	4e3d      	ldr	r6, [pc, #244]	; (8002fc4 <__aeabi_d2f+0x100>)
 8002ed0:	0a64      	lsrs	r4, r4, #9
 8002ed2:	0f40      	lsrs	r0, r0, #29
 8002ed4:	1c5f      	adds	r7, r3, #1
 8002ed6:	0fc9      	lsrs	r1, r1, #31
 8002ed8:	4304      	orrs	r4, r0
 8002eda:	00d5      	lsls	r5, r2, #3
 8002edc:	4237      	tst	r7, r6
 8002ede:	d00a      	beq.n	8002ef6 <__aeabi_d2f+0x32>
 8002ee0:	4839      	ldr	r0, [pc, #228]	; (8002fc8 <__aeabi_d2f+0x104>)
 8002ee2:	181e      	adds	r6, r3, r0
 8002ee4:	2efe      	cmp	r6, #254	; 0xfe
 8002ee6:	dd16      	ble.n	8002f16 <__aeabi_d2f+0x52>
 8002ee8:	20ff      	movs	r0, #255	; 0xff
 8002eea:	2400      	movs	r4, #0
 8002eec:	05c0      	lsls	r0, r0, #23
 8002eee:	4320      	orrs	r0, r4
 8002ef0:	07c9      	lsls	r1, r1, #31
 8002ef2:	4308      	orrs	r0, r1
 8002ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <__aeabi_d2f+0x44>
 8002efa:	432c      	orrs	r4, r5
 8002efc:	d026      	beq.n	8002f4c <__aeabi_d2f+0x88>
 8002efe:	2205      	movs	r2, #5
 8002f00:	0192      	lsls	r2, r2, #6
 8002f02:	0a54      	lsrs	r4, r2, #9
 8002f04:	b2d8      	uxtb	r0, r3
 8002f06:	e7f1      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f08:	4325      	orrs	r5, r4
 8002f0a:	d0ed      	beq.n	8002ee8 <__aeabi_d2f+0x24>
 8002f0c:	2080      	movs	r0, #128	; 0x80
 8002f0e:	03c0      	lsls	r0, r0, #15
 8002f10:	4304      	orrs	r4, r0
 8002f12:	20ff      	movs	r0, #255	; 0xff
 8002f14:	e7ea      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f16:	2e00      	cmp	r6, #0
 8002f18:	dd1b      	ble.n	8002f52 <__aeabi_d2f+0x8e>
 8002f1a:	0192      	lsls	r2, r2, #6
 8002f1c:	1e53      	subs	r3, r2, #1
 8002f1e:	419a      	sbcs	r2, r3
 8002f20:	00e4      	lsls	r4, r4, #3
 8002f22:	0f6d      	lsrs	r5, r5, #29
 8002f24:	4322      	orrs	r2, r4
 8002f26:	432a      	orrs	r2, r5
 8002f28:	0753      	lsls	r3, r2, #29
 8002f2a:	d048      	beq.n	8002fbe <__aeabi_d2f+0xfa>
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d000      	beq.n	8002f36 <__aeabi_d2f+0x72>
 8002f34:	3204      	adds	r2, #4
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	04db      	lsls	r3, r3, #19
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d03f      	beq.n	8002fbe <__aeabi_d2f+0xfa>
 8002f3e:	1c70      	adds	r0, r6, #1
 8002f40:	2efe      	cmp	r6, #254	; 0xfe
 8002f42:	d0d1      	beq.n	8002ee8 <__aeabi_d2f+0x24>
 8002f44:	0192      	lsls	r2, r2, #6
 8002f46:	0a54      	lsrs	r4, r2, #9
 8002f48:	b2c0      	uxtb	r0, r0
 8002f4a:	e7cf      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	2400      	movs	r4, #0
 8002f50:	e7cc      	b.n	8002eec <__aeabi_d2f+0x28>
 8002f52:	0032      	movs	r2, r6
 8002f54:	3217      	adds	r2, #23
 8002f56:	db22      	blt.n	8002f9e <__aeabi_d2f+0xda>
 8002f58:	2080      	movs	r0, #128	; 0x80
 8002f5a:	0400      	lsls	r0, r0, #16
 8002f5c:	4320      	orrs	r0, r4
 8002f5e:	241e      	movs	r4, #30
 8002f60:	1ba4      	subs	r4, r4, r6
 8002f62:	2c1f      	cmp	r4, #31
 8002f64:	dd1d      	ble.n	8002fa2 <__aeabi_d2f+0xde>
 8002f66:	2202      	movs	r2, #2
 8002f68:	4252      	negs	r2, r2
 8002f6a:	1b96      	subs	r6, r2, r6
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	40f2      	lsrs	r2, r6
 8002f70:	0016      	movs	r6, r2
 8002f72:	2c20      	cmp	r4, #32
 8002f74:	d004      	beq.n	8002f80 <__aeabi_d2f+0xbc>
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <__aeabi_d2f+0x108>)
 8002f78:	4694      	mov	ip, r2
 8002f7a:	4463      	add	r3, ip
 8002f7c:	4098      	lsls	r0, r3
 8002f7e:	4305      	orrs	r5, r0
 8002f80:	002a      	movs	r2, r5
 8002f82:	1e53      	subs	r3, r2, #1
 8002f84:	419a      	sbcs	r2, r3
 8002f86:	4332      	orrs	r2, r6
 8002f88:	2600      	movs	r6, #0
 8002f8a:	0753      	lsls	r3, r2, #29
 8002f8c:	d1ce      	bne.n	8002f2c <__aeabi_d2f+0x68>
 8002f8e:	2480      	movs	r4, #128	; 0x80
 8002f90:	0013      	movs	r3, r2
 8002f92:	04e4      	lsls	r4, r4, #19
 8002f94:	2001      	movs	r0, #1
 8002f96:	4023      	ands	r3, r4
 8002f98:	4222      	tst	r2, r4
 8002f9a:	d1d3      	bne.n	8002f44 <__aeabi_d2f+0x80>
 8002f9c:	e7b0      	b.n	8002f00 <__aeabi_d2f+0x3c>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e7ad      	b.n	8002efe <__aeabi_d2f+0x3a>
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <__aeabi_d2f+0x10c>)
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	002a      	movs	r2, r5
 8002fa8:	40e2      	lsrs	r2, r4
 8002faa:	0014      	movs	r4, r2
 8002fac:	002a      	movs	r2, r5
 8002fae:	4463      	add	r3, ip
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	4098      	lsls	r0, r3
 8002fb4:	1e55      	subs	r5, r2, #1
 8002fb6:	41aa      	sbcs	r2, r5
 8002fb8:	4302      	orrs	r2, r0
 8002fba:	4322      	orrs	r2, r4
 8002fbc:	e7e4      	b.n	8002f88 <__aeabi_d2f+0xc4>
 8002fbe:	0033      	movs	r3, r6
 8002fc0:	e79e      	b.n	8002f00 <__aeabi_d2f+0x3c>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	000007fe 	.word	0x000007fe
 8002fc8:	fffffc80 	.word	0xfffffc80
 8002fcc:	fffffca2 	.word	0xfffffca2
 8002fd0:	fffffc82 	.word	0xfffffc82

08002fd4 <__clzsi2>:
 8002fd4:	211c      	movs	r1, #28
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	4298      	cmp	r0, r3
 8002fdc:	d301      	bcc.n	8002fe2 <__clzsi2+0xe>
 8002fde:	0c00      	lsrs	r0, r0, #16
 8002fe0:	3910      	subs	r1, #16
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	4298      	cmp	r0, r3
 8002fe6:	d301      	bcc.n	8002fec <__clzsi2+0x18>
 8002fe8:	0a00      	lsrs	r0, r0, #8
 8002fea:	3908      	subs	r1, #8
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	4298      	cmp	r0, r3
 8002ff0:	d301      	bcc.n	8002ff6 <__clzsi2+0x22>
 8002ff2:	0900      	lsrs	r0, r0, #4
 8002ff4:	3904      	subs	r1, #4
 8002ff6:	a202      	add	r2, pc, #8	; (adr r2, 8003000 <__clzsi2+0x2c>)
 8002ff8:	5c10      	ldrb	r0, [r2, r0]
 8002ffa:	1840      	adds	r0, r0, r1
 8002ffc:	4770      	bx	lr
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	02020304 	.word	0x02020304
 8003004:	01010101 	.word	0x01010101
	...

08003010 <__clzdi2>:
 8003010:	b510      	push	{r4, lr}
 8003012:	2900      	cmp	r1, #0
 8003014:	d103      	bne.n	800301e <__clzdi2+0xe>
 8003016:	f7ff ffdd 	bl	8002fd4 <__clzsi2>
 800301a:	3020      	adds	r0, #32
 800301c:	e002      	b.n	8003024 <__clzdi2+0x14>
 800301e:	0008      	movs	r0, r1
 8003020:	f7ff ffd8 	bl	8002fd4 <__clzsi2>
 8003024:	bd10      	pop	{r4, pc}
 8003026:	46c0      	nop			; (mov r8, r8)

08003028 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	240c      	movs	r4, #12
 8003032:	193b      	adds	r3, r7, r4
 8003034:	0018      	movs	r0, r3
 8003036:	2314      	movs	r3, #20
 8003038:	001a      	movs	r2, r3
 800303a:	2100      	movs	r1, #0
 800303c:	f003 f8ea 	bl	8006214 <memset>

  //По умолчанию на линии высокий уровень
  lineUp();
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	889b      	ldrh	r3, [r3, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	0019      	movs	r1, r3
 800304c:	f001 ff3b 	bl	8004ec6 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	889b      	ldrh	r3, [r3, #4]
 8003054:	001a      	movs	r2, r3
 8003056:	193b      	adds	r3, r7, r4
 8003058:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2211      	movs	r2, #17
 800305e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	79db      	ldrb	r3, [r3, #7]
 8003064:	001a      	movs	r2, r3
 8003066:	193b      	adds	r3, r7, r4
 8003068:	609a      	str	r2, [r3, #8]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 800306a:	193b      	adds	r3, r7, r4
 800306c:	2202      	movs	r2, #2
 800306e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	193a      	adds	r2, r7, r4
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f001 fd91 	bl	8004ba0 <HAL_GPIO_Init>
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b009      	add	sp, #36	; 0x24
 8003084:	bd90      	pop	{r4, r7, pc}

08003086 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8003086:	b590      	push	{r4, r7, lr}
 8003088:	b089      	sub	sp, #36	; 0x24
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308e:	240c      	movs	r4, #12
 8003090:	193b      	adds	r3, r7, r4
 8003092:	0018      	movs	r0, r3
 8003094:	2314      	movs	r3, #20
 8003096:	001a      	movs	r2, r3
 8003098:	2100      	movs	r1, #0
 800309a:	f003 f8bb 	bl	8006214 <memset>

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	889b      	ldrh	r3, [r3, #4]
 80030a2:	001a      	movs	r2, r3
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	79db      	ldrb	r3, [r3, #7]
 80030b2:	001a      	movs	r2, r3
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	193a      	adds	r2, r7, r4
 80030be:	0011      	movs	r1, r2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f001 fd6d 	bl	8004ba0 <HAL_GPIO_Init>
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b009      	add	sp, #36	; 0x24
 80030cc:	bd90      	pop	{r4, r7, pc}
	...

080030d0 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80030da:	2314      	movs	r3, #20
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	4ac7      	ldr	r2, [pc, #796]	; (80033fc <DHT_getData+0x32c>)
 80030e0:	ca03      	ldmia	r2!, {r0, r1}
 80030e2:	c303      	stmia	r3!, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	799b      	ldrb	r3, [r3, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80030ec:	2326      	movs	r3, #38	; 0x26
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	22fa      	movs	r2, #250	; 0xfa
 80030f2:	00d2      	lsls	r2, r2, #3
 80030f4:	801a      	strh	r2, [r3, #0]
 80030f6:	e004      	b.n	8003102 <DHT_getData+0x32>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80030f8:	2326      	movs	r3, #38	; 0x26
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	22fa      	movs	r2, #250	; 0xfa
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	801a      	strh	r2, [r3, #0]
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8003102:	f001 fc41 	bl	8004988 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	1ad2      	subs	r2, r2, r3
 800310e:	2326      	movs	r3, #38	; 0x26
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d211      	bcs.n	800313c <DHT_getData+0x6c>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <DHT_getData+0x6c>
		data.hum = sensor->lastHum;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	2114      	movs	r1, #20
 8003126:	187b      	adds	r3, r7, r1
 8003128:	601a      	str	r2, [r3, #0]
		data.temp = sensor->lastTemp;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	187b      	adds	r3, r7, r1
 8003130:	605a      	str	r2, [r3, #4]
		return data;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	187a      	adds	r2, r7, r1
 8003136:	ca03      	ldmia	r2!, {r0, r1}
 8003138:	c303      	stmia	r3!, {r0, r1}
 800313a:	e1a8      	b.n	800348e <DHT_getData+0x3be>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800313c:	f001 fc24 	bl	8004988 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff ff6c 	bl	8003028 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	0019      	movs	r1, r3
 800315c:	f001 feb3 	bl	8004ec6 <HAL_GPIO_WritePin>
	Delay(18);
 8003160:	2012      	movs	r0, #18
 8003162:	f001 fc1b 	bl	800499c <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	889b      	ldrh	r3, [r3, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	0019      	movs	r1, r3
 8003172:	f001 fea8 	bl	8004ec6 <HAL_GPIO_WritePin>
	goToInput(sensor);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff ff84 	bl	8003086 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317e:	b672      	cpsid	i
}
 8003180:	46c0      	nop			; (mov r8, r8)
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8003182:	2324      	movs	r3, #36	; 0x24
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2200      	movs	r2, #0
 8003188:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 800318a:	e01a      	b.n	80031c2 <DHT_getData+0xf2>
		timeout++;
 800318c:	2124      	movs	r1, #36	; 0x24
 800318e:	187b      	adds	r3, r7, r1
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	187b      	adds	r3, r7, r1
 8003194:	3201      	adds	r2, #1
 8003196:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 8003198:	187b      	adds	r3, r7, r1
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	4a98      	ldr	r2, [pc, #608]	; (8003400 <DHT_getData+0x330>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d90f      	bls.n	80031c2 <DHT_getData+0xf2>
  __ASM volatile ("cpsie i" : : : "memory");
 80031a2:	b662      	cpsie	i
}
 80031a4:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	22c3      	movs	r2, #195	; 0xc3
 80031aa:	0612      	lsls	r2, r2, #24
 80031ac:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	22c3      	movs	r2, #195	; 0xc3
 80031b2:	0612      	lsls	r2, r2, #24
 80031b4:	60da      	str	r2, [r3, #12]

			return data;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2214      	movs	r2, #20
 80031ba:	18ba      	adds	r2, r7, r2
 80031bc:	ca03      	ldmia	r2!, {r0, r1}
 80031be:	c303      	stmia	r3!, {r0, r1}
 80031c0:	e165      	b.n	800348e <DHT_getData+0x3be>
	while(getLine()) {
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	889b      	ldrh	r3, [r3, #4]
 80031ca:	0019      	movs	r1, r3
 80031cc:	0010      	movs	r0, r2
 80031ce:	f001 fe5d 	bl	8004e8c <HAL_GPIO_ReadPin>
 80031d2:	0003      	movs	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d0d9      	beq.n	800318c <DHT_getData+0xbc>
		}
	}
	timeout = 0;
 80031d8:	2324      	movs	r3, #36	; 0x24
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	801a      	strh	r2, [r3, #0]
	//Ожидание подъёма
	while(!getLine()) {
 80031e0:	e01a      	b.n	8003218 <DHT_getData+0x148>
		timeout++;
 80031e2:	2124      	movs	r1, #36	; 0x24
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	3201      	adds	r2, #1
 80031ec:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	4a83      	ldr	r2, [pc, #524]	; (8003400 <DHT_getData+0x330>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d90f      	bls.n	8003218 <DHT_getData+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 80031f8:	b662      	cpsie	i
}
 80031fa:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	22c3      	movs	r2, #195	; 0xc3
 8003200:	0612      	lsls	r2, r2, #24
 8003202:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	22c3      	movs	r2, #195	; 0xc3
 8003208:	0612      	lsls	r2, r2, #24
 800320a:	60da      	str	r2, [r3, #12]

			return data;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2214      	movs	r2, #20
 8003210:	18ba      	adds	r2, r7, r2
 8003212:	ca03      	ldmia	r2!, {r0, r1}
 8003214:	c303      	stmia	r3!, {r0, r1}
 8003216:	e13a      	b.n	800348e <DHT_getData+0x3be>
	while(!getLine()) {
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	889b      	ldrh	r3, [r3, #4]
 8003220:	0019      	movs	r1, r3
 8003222:	0010      	movs	r0, r2
 8003224:	f001 fe32 	bl	8004e8c <HAL_GPIO_ReadPin>
 8003228:	0003      	movs	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d1d9      	bne.n	80031e2 <DHT_getData+0x112>
		}
	}
	timeout = 0;
 800322e:	2324      	movs	r3, #36	; 0x24
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2200      	movs	r2, #0
 8003234:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8003236:	e012      	b.n	800325e <DHT_getData+0x18e>
		timeout++;
 8003238:	2124      	movs	r1, #36	; 0x24
 800323a:	187b      	adds	r3, r7, r1
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	187b      	adds	r3, r7, r1
 8003240:	3201      	adds	r2, #1
 8003242:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 8003244:	187b      	adds	r3, r7, r1
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	4a6d      	ldr	r2, [pc, #436]	; (8003400 <DHT_getData+0x330>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d907      	bls.n	800325e <DHT_getData+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 800324e:	b662      	cpsie	i
}
 8003250:	46c0      	nop			; (mov r8, r8)
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2214      	movs	r2, #20
 8003256:	18ba      	adds	r2, r7, r2
 8003258:	ca03      	ldmia	r2!, {r0, r1}
 800325a:	c303      	stmia	r3!, {r0, r1}
 800325c:	e117      	b.n	800348e <DHT_getData+0x3be>
	while(getLine()) {
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	0019      	movs	r1, r3
 8003268:	0010      	movs	r0, r2
 800326a:	f001 fe0f 	bl	8004e8c <HAL_GPIO_ReadPin>
 800326e:	0003      	movs	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d0e1      	beq.n	8003238 <DHT_getData+0x168>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8003274:	230c      	movs	r3, #12
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	4a62      	ldr	r2, [pc, #392]	; (8003404 <DHT_getData+0x334>)
 800327a:	6811      	ldr	r1, [r2, #0]
 800327c:	6019      	str	r1, [r3, #0]
 800327e:	7912      	ldrb	r2, [r2, #4]
 8003280:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8003282:	2323      	movs	r3, #35	; 0x23
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e06e      	b.n	800336a <DHT_getData+0x29a>
		for(uint8_t b = 7; b != 255; b--) {
 800328c:	2322      	movs	r3, #34	; 0x22
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2207      	movs	r2, #7
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e05e      	b.n	8003354 <DHT_getData+0x284>
			uint16_t hT = 0, lT = 0;
 8003296:	2320      	movs	r3, #32
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	231e      	movs	r3, #30
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	801a      	strh	r2, [r3, #0]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 80032a6:	e005      	b.n	80032b4 <DHT_getData+0x1e4>
 80032a8:	211e      	movs	r1, #30
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	3201      	adds	r2, #1
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	889b      	ldrh	r3, [r3, #4]
 80032bc:	0019      	movs	r1, r3
 80032be:	0010      	movs	r0, r2
 80032c0:	f001 fde4 	bl	8004e8c <HAL_GPIO_ReadPin>
 80032c4:	0003      	movs	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d005      	beq.n	80032d6 <DHT_getData+0x206>
 80032ca:	231e      	movs	r3, #30
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	4a4d      	ldr	r2, [pc, #308]	; (8003408 <DHT_getData+0x338>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d1e8      	bne.n	80032a8 <DHT_getData+0x1d8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80032d6:	2324      	movs	r3, #36	; 0x24
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	801a      	strh	r2, [r3, #0]
			while(getLine()&& hT != 65535) hT++;
 80032de:	e005      	b.n	80032ec <DHT_getData+0x21c>
 80032e0:	2120      	movs	r1, #32
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	3201      	adds	r2, #1
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	889b      	ldrh	r3, [r3, #4]
 80032f4:	0019      	movs	r1, r3
 80032f6:	0010      	movs	r0, r2
 80032f8:	f001 fdc8 	bl	8004e8c <HAL_GPIO_ReadPin>
 80032fc:	0003      	movs	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <DHT_getData+0x23e>
 8003302:	2320      	movs	r3, #32
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <DHT_getData+0x338>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d1e8      	bne.n	80032e0 <DHT_getData+0x210>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 800330e:	2320      	movs	r3, #32
 8003310:	18fa      	adds	r2, r7, r3
 8003312:	231e      	movs	r3, #30
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d914      	bls.n	8003348 <DHT_getData+0x278>
 800331e:	2023      	movs	r0, #35	; 0x23
 8003320:	183b      	adds	r3, r7, r0
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	240c      	movs	r4, #12
 8003326:	193a      	adds	r2, r7, r4
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	b25a      	sxtb	r2, r3
 800332c:	2322      	movs	r3, #34	; 0x22
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2101      	movs	r1, #1
 8003334:	4099      	lsls	r1, r3
 8003336:	000b      	movs	r3, r1
 8003338:	b25b      	sxtb	r3, r3
 800333a:	4313      	orrs	r3, r2
 800333c:	b25a      	sxtb	r2, r3
 800333e:	183b      	adds	r3, r7, r0
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b2d1      	uxtb	r1, r2
 8003344:	193a      	adds	r2, r7, r4
 8003346:	54d1      	strb	r1, [r2, r3]
		for(uint8_t b = 7; b != 255; b--) {
 8003348:	2122      	movs	r1, #34	; 0x22
 800334a:	187b      	adds	r3, r7, r1
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	187b      	adds	r3, r7, r1
 8003350:	3a01      	subs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	2322      	movs	r3, #34	; 0x22
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2bff      	cmp	r3, #255	; 0xff
 800335c:	d19b      	bne.n	8003296 <DHT_getData+0x1c6>
	for(uint8_t a = 0; a < 5; a++) {
 800335e:	2123      	movs	r1, #35	; 0x23
 8003360:	187b      	adds	r3, r7, r1
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	187b      	adds	r3, r7, r1
 8003366:	3201      	adds	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	2323      	movs	r3, #35	; 0x23
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d98b      	bls.n	800328c <DHT_getData+0x1bc>
  __ASM volatile ("cpsie i" : : : "memory");
 8003374:	b662      	cpsie	i
}
 8003376:	46c0      	nop			; (mov r8, r8)
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8003378:	240c      	movs	r4, #12
 800337a:	193b      	adds	r3, r7, r4
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	193b      	adds	r3, r7, r4
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	18d3      	adds	r3, r2, r3
 8003384:	b2da      	uxtb	r2, r3
 8003386:	193b      	adds	r3, r7, r4
 8003388:	789b      	ldrb	r3, [r3, #2]
 800338a:	18d3      	adds	r3, r2, r3
 800338c:	b2da      	uxtb	r2, r3
 800338e:	193b      	adds	r3, r7, r4
 8003390:	78db      	ldrb	r3, [r3, #3]
 8003392:	18d3      	adds	r3, r2, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	193b      	adds	r3, r7, r4
 8003398:	791b      	ldrb	r3, [r3, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d16a      	bne.n	8003474 <DHT_getData+0x3a4>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	799b      	ldrb	r3, [r3, #6]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d150      	bne.n	8003448 <DHT_getData+0x378>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	193a      	adds	r2, r7, r4
 80033ae:	7852      	ldrb	r2, [r2, #1]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fd fec8 	bl	8001148 <__aeabi_i2f>
 80033b8:	1c03      	adds	r3, r0, #0
 80033ba:	4914      	ldr	r1, [pc, #80]	; (800340c <DHT_getData+0x33c>)
 80033bc:	1c18      	adds	r0, r3, #0
 80033be:	f7fd fd9d 	bl	8000efc <__aeabi_fmul>
 80033c2:	1c03      	adds	r3, r0, #0
 80033c4:	1c1a      	adds	r2, r3, #0
 80033c6:	2514      	movs	r5, #20
 80033c8:	197b      	adds	r3, r7, r5
 80033ca:	601a      	str	r2, [r3, #0]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	789b      	ldrb	r3, [r3, #2]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db1c      	blt.n	8003410 <DHT_getData+0x340>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	789b      	ldrb	r3, [r3, #2]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	193a      	adds	r2, r7, r4
 80033de:	78d2      	ldrb	r2, [r2, #3]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd feb0 	bl	8001148 <__aeabi_i2f>
 80033e8:	1c03      	adds	r3, r0, #0
 80033ea:	4908      	ldr	r1, [pc, #32]	; (800340c <DHT_getData+0x33c>)
 80033ec:	1c18      	adds	r0, r3, #0
 80033ee:	f7fd fd85 	bl	8000efc <__aeabi_fmul>
 80033f2:	1c03      	adds	r3, r0, #0
 80033f4:	1c1a      	adds	r2, r3, #0
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e025      	b.n	8003448 <DHT_getData+0x378>
 80033fc:	0800ac88 	.word	0x0800ac88
 8003400:	00002710 	.word	0x00002710
 8003404:	0800ac90 	.word	0x0800ac90
 8003408:	0000ffff 	.word	0x0000ffff
 800340c:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 8003410:	210c      	movs	r1, #12
 8003412:	187b      	adds	r3, r7, r1
 8003414:	789b      	ldrb	r3, [r3, #2]
 8003416:	227f      	movs	r2, #127	; 0x7f
 8003418:	4013      	ands	r3, r2
 800341a:	b2da      	uxtb	r2, r3
 800341c:	187b      	adds	r3, r7, r1
 800341e:	709a      	strb	r2, [r3, #2]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8003420:	000a      	movs	r2, r1
 8003422:	187b      	adds	r3, r7, r1
 8003424:	789b      	ldrb	r3, [r3, #2]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	18ba      	adds	r2, r7, r2
 800342a:	78d2      	ldrb	r2, [r2, #3]
 800342c:	4313      	orrs	r3, r2
 800342e:	0018      	movs	r0, r3
 8003430:	f7fd fe8a 	bl	8001148 <__aeabi_i2f>
 8003434:	1c03      	adds	r3, r0, #0
 8003436:	4918      	ldr	r1, [pc, #96]	; (8003498 <DHT_getData+0x3c8>)
 8003438:	1c18      	adds	r0, r3, #0
 800343a:	f7fd fd5f 	bl	8000efc <__aeabi_fmul>
 800343e:	1c03      	adds	r3, r0, #0
 8003440:	1c1a      	adds	r2, r3, #0
 8003442:	2314      	movs	r3, #20
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	605a      	str	r2, [r3, #4]
			}
		}
		if (sensor->type == DHT11) {
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	799b      	ldrb	r3, [r3, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <DHT_getData+0x3a4>
			data.hum = (float)rawData[0];
 8003450:	240c      	movs	r4, #12
 8003452:	193b      	adds	r3, r7, r4
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	0018      	movs	r0, r3
 8003458:	f7fd fec4 	bl	80011e4 <__aeabi_ui2f>
 800345c:	1c02      	adds	r2, r0, #0
 800345e:	2514      	movs	r5, #20
 8003460:	197b      	adds	r3, r7, r5
 8003462:	601a      	str	r2, [r3, #0]
			data.temp = (float)rawData[2];
 8003464:	193b      	adds	r3, r7, r4
 8003466:	789b      	ldrb	r3, [r3, #2]
 8003468:	0018      	movs	r0, r3
 800346a:	f7fd febb 	bl	80011e4 <__aeabi_ui2f>
 800346e:	1c02      	adds	r2, r0, #0
 8003470:	197b      	adds	r3, r7, r5
 8003472:	605a      	str	r2, [r3, #4]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8003474:	2114      	movs	r1, #20
 8003476:	187b      	adds	r3, r7, r1
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	187a      	adds	r2, r7, r1
 800348a:	ca03      	ldmia	r2!, {r0, r1}
 800348c:	c303      	stmia	r3!, {r0, r1}
}
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	46bd      	mov	sp, r7
 8003492:	b00a      	add	sp, #40	; 0x28
 8003494:	bdb0      	pop	{r4, r5, r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	bdcccccd 	.word	0xbdcccccd

0800349c <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 80034a8:	f000 fae0 	bl	8003a6c <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 80034ac:	2010      	movs	r0, #16
 80034ae:	f000 fb1d 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f000 fafa 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 80034b8:	2011      	movs	r0, #17
 80034ba:	f000 fb17 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80034be:	2003      	movs	r0, #3
 80034c0:	f000 faf4 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 80034c4:	2044      	movs	r0, #68	; 0x44
 80034c6:	f000 fb11 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 80034ca:	2000      	movs	r0, #0
 80034cc:	f000 faee 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 80034d0:	2011      	movs	r0, #17
 80034d2:	f000 faeb 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 80034d6:	2045      	movs	r0, #69	; 0x45
 80034d8:	f000 fb08 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 80034dc:	2000      	movs	r0, #0
 80034de:	f000 fae5 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 80034e2:	20ab      	movs	r0, #171	; 0xab
 80034e4:	f000 fae2 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 80034e8:	204e      	movs	r0, #78	; 0x4e
 80034ea:	f000 faff 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80034ee:	2000      	movs	r0, #0
 80034f0:	f000 fadc 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 80034f4:	204f      	movs	r0, #79	; 0x4f
 80034f6:	f000 faf9 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80034fa:	2000      	movs	r0, #0
 80034fc:	f000 fad6 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8003500:	20f0      	movs	r0, #240	; 0xf0
 8003502:	f000 faf3 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8003506:	201f      	movs	r0, #31
 8003508:	f000 fad0 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 800350c:	2021      	movs	r0, #33	; 0x21
 800350e:	f000 faed 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8003512:	2003      	movs	r0, #3
 8003514:	f000 faca 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8003518:	202c      	movs	r0, #44	; 0x2c
 800351a:	f000 fae7 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 800351e:	20a0      	movs	r0, #160	; 0xa0
 8003520:	f000 fac4 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8003524:	203c      	movs	r0, #60	; 0x3c
 8003526:	f000 fae1 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 800352a:	2064      	movs	r0, #100	; 0x64
 800352c:	f000 fabe 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 8003530:	2032      	movs	r0, #50	; 0x32
 8003532:	f000 fadb 	bl	8003aec <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e00c      	b.n	8003558 <gde021a1_Init+0xbc>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <gde021a1_Init+0xd0>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
 8003546:	b29b      	uxth	r3, r3
 8003548:	0018      	movs	r0, r3
 800354a:	f000 faaf 	bl	8003aac <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	3201      	adds	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b59      	cmp	r3, #89	; 0x59
 800355e:	d9ee      	bls.n	800353e <gde021a1_Init+0xa2>
  }
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	0800c664 	.word	0x0800c664

08003570 <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	0002      	movs	r2, r0
 8003578:	1dfb      	adds	r3, r7, #7
 800357a:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 800357c:	2024      	movs	r0, #36	; 0x24
 800357e:	f000 fab5 	bl	8003aec <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	0018      	movs	r0, r3
 800358a:	f000 fa8f 	bl	8003aac <EPD_IO_WriteData>
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}

08003596 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003596:	b5b0      	push	{r4, r5, r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	0005      	movs	r5, r0
 800359e:	000c      	movs	r4, r1
 80035a0:	0010      	movs	r0, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	1dbb      	adds	r3, r7, #6
 80035a6:	1c2a      	adds	r2, r5, #0
 80035a8:	801a      	strh	r2, [r3, #0]
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	1c22      	adds	r2, r4, #0
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	1cbb      	adds	r3, r7, #2
 80035b2:	1c02      	adds	r2, r0, #0
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	003b      	movs	r3, r7
 80035b8:	1c0a      	adds	r2, r1, #0
 80035ba:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 80035bc:	2044      	movs	r0, #68	; 0x44
 80035be:	f000 fa95 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 fa70 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 80035cc:	003b      	movs	r3, r7
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fa6b 	bl	8003aac <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 80035d6:	2045      	movs	r0, #69	; 0x45
 80035d8:	f000 fa88 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fa63 	bl	8003aac <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 80035e6:	1cbb      	adds	r3, r7, #2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fa5e 	bl	8003aac <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 80035f0:	204e      	movs	r0, #78	; 0x4e
 80035f2:	f000 fa7b 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 fa56 	bl	8003aac <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 8003600:	204f      	movs	r0, #79	; 0x4f
 8003602:	f000 fa73 	bl	8003aec <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8003606:	1dbb      	adds	r3, r7, #6
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	0018      	movs	r0, r3
 800360c:	f000 fa4e 	bl	8003aac <EPD_IO_WriteData>
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bdb0      	pop	{r4, r5, r7, pc}

08003618 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 800361c:	23ac      	movs	r3, #172	; 0xac
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 8003628:	2312      	movs	r3, #18
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8003634:	2022      	movs	r0, #34	; 0x22
 8003636:	f000 fa59 	bl	8003aec <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 800363a:	20c4      	movs	r0, #196	; 0xc4
 800363c:	f000 fa36 	bl	8003aac <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 8003640:	2020      	movs	r0, #32
 8003642:	f000 fa53 	bl	8003aec <EPD_IO_WriteReg>
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8003650:	2022      	movs	r0, #34	; 0x22
 8003652:	f000 fa4b 	bl	8003aec <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 8003656:	2003      	movs	r0, #3
 8003658:	f000 fa28 	bl	8003aac <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800365c:	2020      	movs	r0, #32
 800365e:	f000 fa45 	bl	8003aec <EPD_IO_WriteReg>
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	0005      	movs	r5, r0
 8003670:	000c      	movs	r4, r1
 8003672:	0010      	movs	r0, r2
 8003674:	0019      	movs	r1, r3
 8003676:	1dbb      	adds	r3, r7, #6
 8003678:	1c2a      	adds	r2, r5, #0
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	1c22      	adds	r2, r4, #0
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	1c02      	adds	r2, r0, #0
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	003b      	movs	r3, r7
 800368a:	1c0a      	adds	r2, r1, #0
 800368c:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 8003692:	230f      	movs	r3, #15
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4] = {0};
 800369a:	2308      	movs	r3, #8
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
  uint8_t nb_4_pixels, data_res = 0;
 80036a2:	230d      	movs	r3, #13
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80036aa:	2024      	movs	r0, #36	; 0x24
 80036ac:	f000 fa1e 	bl	8003aec <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 80036b0:	1cbb      	adds	r3, r7, #2
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d000      	beq.n	80036c0 <gde021a1_DrawImage+0x58>
 80036be:	e087      	b.n	80037d0 <gde021a1_DrawImage+0x168>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e073      	b.n	80037ae <gde021a1_DrawImage+0x146>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 80036c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	18d2      	adds	r2, r2, r3
 80036cc:	210f      	movs	r1, #15
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d05f      	beq.n	800379c <gde021a1_DrawImage+0x134>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80036dc:	230e      	movs	r3, #14
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e054      	b.n	8003790 <gde021a1_DrawImage+0x128>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	e029      	b.n	8003740 <gde021a1_DrawImage+0xd8>
          {
            if (((pixels_4) & 0x01) == 1)
 80036ec:	230f      	movs	r3, #15
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d00d      	beq.n	8003714 <gde021a1_DrawImage+0xac>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 80036f8:	2008      	movs	r0, #8
 80036fa:	183a      	adds	r2, r7, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	18d3      	adds	r3, r2, r3
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2203      	movs	r2, #3
 8003704:	4393      	bics	r3, r2
 8003706:	b2d9      	uxtb	r1, r3
 8003708:	183a      	adds	r2, r7, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	1c0a      	adds	r2, r1, #0
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e00c      	b.n	800372e <gde021a1_DrawImage+0xc6>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8003714:	2008      	movs	r0, #8
 8003716:	183a      	adds	r2, r7, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	18d3      	adds	r3, r2, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2203      	movs	r2, #3
 8003720:	4313      	orrs	r3, r2
 8003722:	b2d9      	uxtb	r1, r3
 8003724:	183a      	adds	r2, r7, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	1c0a      	adds	r2, r1, #0
 800372c:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 800372e:	220f      	movs	r2, #15
 8003730:	18bb      	adds	r3, r7, r2
 8003732:	18ba      	adds	r2, r7, r2
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3301      	adds	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d9d2      	bls.n	80036ec <gde021a1_DrawImage+0x84>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8003746:	2108      	movs	r1, #8
 8003748:	187b      	adds	r3, r7, r1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	b25a      	sxtb	r2, r3
 8003750:	187b      	adds	r3, r7, r1
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	b25b      	sxtb	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	b25a      	sxtb	r2, r3
 800375c:	187b      	adds	r3, r7, r1
 800375e:	789b      	ldrb	r3, [r3, #2]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	b25b      	sxtb	r3, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	b25a      	sxtb	r2, r3
 8003768:	187b      	adds	r3, r7, r1
 800376a:	78db      	ldrb	r3, [r3, #3]
 800376c:	b25b      	sxtb	r3, r3
 800376e:	4313      	orrs	r3, r2
 8003770:	b25a      	sxtb	r2, r3
 8003772:	210d      	movs	r1, #13
 8003774:	187b      	adds	r3, r7, r1
 8003776:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 8003778:	187b      	adds	r3, r7, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f994 	bl	8003aac <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8003784:	210e      	movs	r1, #14
 8003786:	187b      	adds	r3, r7, r1
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	187b      	adds	r3, r7, r1
 800378c:	3201      	adds	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	230e      	movs	r3, #14
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d9a5      	bls.n	80036e6 <gde021a1_DrawImage+0x7e>
 800379a:	e005      	b.n	80037a8 <gde021a1_DrawImage+0x140>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 800379c:	20ff      	movs	r0, #255	; 0xff
 800379e:	f000 f985 	bl	8003aac <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 80037a2:	20ff      	movs	r0, #255	; 0xff
 80037a4:	f000 f982 	bl	8003aac <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	003b      	movs	r3, r7
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	1cba      	adds	r2, r7, #2
 80037b4:	8812      	ldrh	r2, [r2, #0]
 80037b6:	0892      	lsrs	r2, r2, #2
 80037b8:	b292      	uxth	r2, r2
 80037ba:	4353      	muls	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da00      	bge.n	80037c2 <gde021a1_DrawImage+0x15a>
 80037c0:	3301      	adds	r3, #1
 80037c2:	105b      	asrs	r3, r3, #1
 80037c4:	001a      	movs	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d200      	bcs.n	80037ce <gde021a1_DrawImage+0x166>
 80037cc:	e77b      	b.n	80036c6 <gde021a1_DrawImage+0x5e>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 80037ce:	e10f      	b.n	80039f0 <gde021a1_DrawImage+0x388>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e0fb      	b.n	80039ce <gde021a1_DrawImage+0x366>
      pixels_4 = pdata[i];
 80037d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	18d2      	adds	r2, r2, r3
 80037dc:	230f      	movs	r3, #15
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	1cbb      	adds	r3, r7, #2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da00      	bge.n	80037f8 <gde021a1_DrawImage+0x190>
 80037f6:	3301      	adds	r3, #1
 80037f8:	105b      	asrs	r3, r3, #1
 80037fa:	0019      	movs	r1, r3
 80037fc:	0010      	movs	r0, r2
 80037fe:	f7fc fd25 	bl	800024c <__aeabi_uidivmod>
 8003802:	1e0b      	subs	r3, r1, #0
 8003804:	d100      	bne.n	8003808 <gde021a1_DrawImage+0x1a0>
 8003806:	e071      	b.n	80038ec <gde021a1_DrawImage+0x284>
        if (pixels_4 !=0)
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d05f      	beq.n	80038d2 <gde021a1_DrawImage+0x26a>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8003812:	230e      	movs	r3, #14
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e054      	b.n	80038c6 <gde021a1_DrawImage+0x25e>
            for (j= 0; j<4; j++)
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e029      	b.n	8003876 <gde021a1_DrawImage+0x20e>
              if (((pixels_4) & 0x01) == 1)
 8003822:	230f      	movs	r3, #15
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	4013      	ands	r3, r2
 800382c:	d00d      	beq.n	800384a <gde021a1_DrawImage+0x1e2>
                pixels_4_grey[j] &= 0xFC;
 800382e:	2008      	movs	r0, #8
 8003830:	183a      	adds	r2, r7, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	18d3      	adds	r3, r2, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2203      	movs	r2, #3
 800383a:	4393      	bics	r3, r2
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	183a      	adds	r2, r7, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	18d3      	adds	r3, r2, r3
 8003844:	1c0a      	adds	r2, r1, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e00c      	b.n	8003864 <gde021a1_DrawImage+0x1fc>
                pixels_4_grey[j] |= 0x03;
 800384a:	2008      	movs	r0, #8
 800384c:	183a      	adds	r2, r7, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2203      	movs	r2, #3
 8003856:	4313      	orrs	r3, r2
 8003858:	b2d9      	uxtb	r1, r3
 800385a:	183a      	adds	r2, r7, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	18d3      	adds	r3, r2, r3
 8003860:	1c0a      	adds	r2, r1, #0
 8003862:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8003864:	220f      	movs	r2, #15
 8003866:	18bb      	adds	r3, r7, r2
 8003868:	18ba      	adds	r2, r7, r2
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	0852      	lsrs	r2, r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d9d2      	bls.n	8003822 <gde021a1_DrawImage+0x1ba>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 800387c:	2108      	movs	r1, #8
 800387e:	187b      	adds	r3, r7, r1
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	019b      	lsls	r3, r3, #6
 8003884:	b25a      	sxtb	r2, r3
 8003886:	187b      	adds	r3, r7, r1
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	b25b      	sxtb	r3, r3
 800388e:	4313      	orrs	r3, r2
 8003890:	b25a      	sxtb	r2, r3
 8003892:	187b      	adds	r3, r7, r1
 8003894:	789b      	ldrb	r3, [r3, #2]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	b25b      	sxtb	r3, r3
 800389a:	4313      	orrs	r3, r2
 800389c:	b25a      	sxtb	r2, r3
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	78db      	ldrb	r3, [r3, #3]
 80038a2:	b25b      	sxtb	r3, r3
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b25a      	sxtb	r2, r3
 80038a8:	210d      	movs	r1, #13
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f8f9 	bl	8003aac <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80038ba:	210e      	movs	r1, #14
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	3201      	adds	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	230e      	movs	r3, #14
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d9a5      	bls.n	800381c <gde021a1_DrawImage+0x1b4>
 80038d0:	e07a      	b.n	80039c8 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0)
 80038d2:	230f      	movs	r3, #15
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d000      	beq.n	80038de <gde021a1_DrawImage+0x276>
 80038dc:	e074      	b.n	80039c8 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80038de:	20ff      	movs	r0, #255	; 0xff
 80038e0:	f000 f8e4 	bl	8003aac <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 80038e4:	20ff      	movs	r0, #255	; 0xff
 80038e6:	f000 f8e1 	bl	8003aac <EPD_IO_WriteData>
 80038ea:	e06d      	b.n	80039c8 <gde021a1_DrawImage+0x360>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	1cbb      	adds	r3, r7, #2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da00      	bge.n	8003900 <gde021a1_DrawImage+0x298>
 80038fe:	3301      	adds	r3, #1
 8003900:	105b      	asrs	r3, r3, #1
 8003902:	0019      	movs	r1, r3
 8003904:	0010      	movs	r0, r2
 8003906:	f7fc fca1 	bl	800024c <__aeabi_uidivmod>
 800390a:	1e0b      	subs	r3, r1, #0
 800390c:	d15c      	bne.n	80039c8 <gde021a1_DrawImage+0x360>
        if (pixels_4 !=0xf0)
 800390e:	230f      	movs	r3, #15
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2bf0      	cmp	r3, #240	; 0xf0
 8003916:	d04f      	beq.n	80039b8 <gde021a1_DrawImage+0x350>
          for (j= 0; j<4; j++)
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e029      	b.n	8003972 <gde021a1_DrawImage+0x30a>
            if (((pixels_4) & 0x01) == 1)
 800391e:	230f      	movs	r3, #15
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	d00d      	beq.n	8003946 <gde021a1_DrawImage+0x2de>
              pixels_4_grey[j] &= 0xFC;
 800392a:	2008      	movs	r0, #8
 800392c:	183a      	adds	r2, r7, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2203      	movs	r2, #3
 8003936:	4393      	bics	r3, r2
 8003938:	b2d9      	uxtb	r1, r3
 800393a:	183a      	adds	r2, r7, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	1c0a      	adds	r2, r1, #0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e00c      	b.n	8003960 <gde021a1_DrawImage+0x2f8>
              pixels_4_grey[j] |= 0x03;
 8003946:	2008      	movs	r0, #8
 8003948:	183a      	adds	r2, r7, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	18d3      	adds	r3, r2, r3
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2203      	movs	r2, #3
 8003952:	4313      	orrs	r3, r2
 8003954:	b2d9      	uxtb	r1, r3
 8003956:	183a      	adds	r2, r7, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	18d3      	adds	r3, r2, r3
 800395c:	1c0a      	adds	r2, r1, #0
 800395e:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 8003960:	220f      	movs	r2, #15
 8003962:	18bb      	adds	r3, r7, r2
 8003964:	18ba      	adds	r2, r7, r2
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	0852      	lsrs	r2, r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3301      	adds	r3, #1
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d9d2      	bls.n	800391e <gde021a1_DrawImage+0x2b6>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8003978:	2108      	movs	r1, #8
 800397a:	187b      	adds	r3, r7, r1
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	019b      	lsls	r3, r3, #6
 8003980:	b25a      	sxtb	r2, r3
 8003982:	187b      	adds	r3, r7, r1
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	b25b      	sxtb	r3, r3
 800398a:	4313      	orrs	r3, r2
 800398c:	b25a      	sxtb	r2, r3
 800398e:	187b      	adds	r3, r7, r1
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	b25b      	sxtb	r3, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	b25a      	sxtb	r2, r3
 800399a:	187b      	adds	r3, r7, r1
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b25a      	sxtb	r2, r3
 80039a4:	210d      	movs	r1, #13
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 f87b 	bl	8003aac <EPD_IO_WriteData>
 80039b6:	e007      	b.n	80039c8 <gde021a1_DrawImage+0x360>
        else if (pixels_4 == 0xf0)
 80039b8:	230f      	movs	r3, #15
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2bf0      	cmp	r3, #240	; 0xf0
 80039c0:	d102      	bne.n	80039c8 <gde021a1_DrawImage+0x360>
          EPD_IO_WriteData(0xFF);
 80039c2:	20ff      	movs	r0, #255	; 0xff
 80039c4:	f000 f872 	bl	8003aac <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3301      	adds	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	003b      	movs	r3, r7
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	1cba      	adds	r2, r7, #2
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	0892      	lsrs	r2, r2, #2
 80039d8:	b292      	uxth	r2, r2
 80039da:	3201      	adds	r2, #1
 80039dc:	4353      	muls	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da00      	bge.n	80039e4 <gde021a1_DrawImage+0x37c>
 80039e2:	3301      	adds	r3, #1
 80039e4:	105b      	asrs	r3, r3, #1
 80039e6:	001a      	movs	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d200      	bcs.n	80039f0 <gde021a1_DrawImage+0x388>
 80039ee:	e6f2      	b.n	80037d6 <gde021a1_DrawImage+0x16e>
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}

080039f8 <LoopDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LoopDelay(volatile uint32_t n) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 8003a00:	e002      	b.n	8003a08 <LoopDelay+0x10>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f9      	bne.n	8003a02 <LoopDelay+0xa>
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <SPIx_Init>:

static void SPIx_Init(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0

    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
  DISCOVERY_SPIx->CR1 = 0
 8003a1c:	4b02      	ldr	r3, [pc, #8]	; (8003a28 <SPIx_Init+0x10>)
 8003a1e:	4a03      	ldr	r2, [pc, #12]	; (8003a2c <SPIx_Init+0x14>)
 8003a20:	601a      	str	r2, [r3, #0]
    | ( 0 * SPI_CR1_CRCNEXT  )         // Transmit CRC next
    | ( 0 * SPI_CR1_CRCEN    )         // Hardware CRC calculation enable
    | ( 0 * SPI_CR1_BIDIOE   )         // Output enable in bidirectional mode
    | ( 0 * SPI_CR1_BIDIMODE )         // Bidirectional data mode enable
  ;
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40013000 	.word	0x40013000
 8003a2c:	00000357 	.word	0x00000357

08003a30 <SPIx_Write>:
// won't be used anyway, as there is no MISO from the display
static uint32_t SPIx_Read(void) {
  return 0;
}

static void SPIx_Write(uint8_t n) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	0002      	movs	r2, r0
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	701a      	strb	r2, [r3, #0]
  DISCOVERY_SPIx->DR = n;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <SPIx_Write+0x38>)
 8003a3e:	1dfa      	adds	r2, r7, #7
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	60da      	str	r2, [r3, #12]
  while (!(DISCOVERY_SPIx->SR & SPI_SR_TXE)) {
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <SPIx_Write+0x38>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d0fa      	beq.n	8003a46 <SPIx_Write+0x16>
    // wait until empty
  }
  while ((DISCOVERY_SPIx->SR & SPI_SR_BSY)) {
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SPIx_Write+0x38>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d1fa      	bne.n	8003a52 <SPIx_Write+0x22>
    // wait until not busy
  }
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	40013000 	.word	0x40013000

08003a6c <EPD_IO_Init>:

void EPD_IO_Init(void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  // pins pinit - see gpio-clock init and gpio pins init in main()

  /* Enable Display */
  PIN_CLR(EPD_PWR);
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <EPD_IO_Init+0x3c>)
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	04d2      	lsls	r2, r2, #19
 8003a76:	619a      	str	r2, [r3, #24]

  /* Set or Reset the control line */
  PIN_CLR(EPD_CS);
 8003a78:	23a0      	movs	r3, #160	; 0xa0
 8003a7a:	05db      	lsls	r3, r3, #23
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	0612      	lsls	r2, r2, #24
 8003a80:	619a      	str	r2, [r3, #24]
  PIN_SET(EPD_CS);
 8003a82:	23a0      	movs	r3, #160	; 0xa0
 8003a84:	05db      	lsls	r3, r3, #23
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	0212      	lsls	r2, r2, #8
 8003a8a:	619a      	str	r2, [r3, #24]

  /* EPD reset pin mamagement */
  PIN_SET(EPD_RESET);
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <EPD_IO_Init+0x3c>)
 8003a8e:	2204      	movs	r2, #4
 8003a90:	619a      	str	r2, [r3, #24]
  EPD_Delay(10);
 8003a92:	200a      	movs	r0, #10
 8003a94:	f000 f84a 	bl	8003b2c <EPD_Delay>

  PIN_SET(DISCOVERY_SPIx_SCK);
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <EPD_IO_Init+0x3c>)
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	619a      	str	r2, [r3, #24]
  /* SPI Configuration */
  SPIx_Init();
 8003a9e:	f7ff ffbb 	bl	8003a18 <SPIx_Init>
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	50000400 	.word	0x50000400

08003aac <EPD_IO_WriteData>:

void EPD_IO_WriteData(uint16_t n) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	1dbb      	adds	r3, r7, #6
 8003ab6:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8003ab8:	23a0      	movs	r3, #160	; 0xa0
 8003aba:	05db      	lsls	r3, r3, #23
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0612      	lsls	r2, r2, #24
 8003ac0:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to High */
  PIN_SET(EPD_DC);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <EPD_IO_WriteData+0x3c>)
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	619a      	str	r2, [r3, #24]
  /* Send Data */
  SPIx_Write(n);
 8003aca:	1dbb      	adds	r3, r7, #6
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7ff ffad 	bl	8003a30 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8003ad6:	23a0      	movs	r3, #160	; 0xa0
 8003ad8:	05db      	lsls	r3, r3, #23
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	0212      	lsls	r2, r2, #8
 8003ade:	619a      	str	r2, [r3, #24]
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	50000400 	.word	0x50000400

08003aec <EPD_IO_WriteReg>:
/**
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t n) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	0002      	movs	r2, r0
 8003af4:	1dfb      	adds	r3, r7, #7
 8003af6:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  PIN_CLR(EPD_CS);
 8003af8:	23a0      	movs	r3, #160	; 0xa0
 8003afa:	05db      	lsls	r3, r3, #23
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	0612      	lsls	r2, r2, #24
 8003b00:	619a      	str	r2, [r3, #24]
  /* Set EPD data/command line DC to Low */
  PIN_CLR(EPD_DC);
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <EPD_IO_WriteReg+0x3c>)
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	0512      	lsls	r2, r2, #20
 8003b08:	619a      	str	r2, [r3, #24]
  /* Send Command */
  SPIx_Write(n);
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff ff8e 	bl	8003a30 <SPIx_Write>
  /* Deselect: Chip Select high */
  PIN_SET(EPD_CS);
 8003b14:	23a0      	movs	r3, #160	; 0xa0
 8003b16:	05db      	lsls	r3, r3, #23
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	0212      	lsls	r2, r2, #8
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	50000400 	.word	0x50000400

08003b2c <EPD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t n) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  LoopDelay(n * 3000);  // some fancy factor to get it roughly in ms
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <EPD_Delay+0x1c>)
 8003b38:	4353      	muls	r3, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff ff5c 	bl	80039f8 <LoopDelay>
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00000bb8 	.word	0x00000bb8

08003b4c <moving_avg_temp>:

void moving_avg_temp(float *avg_temp)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	if(i < n)
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <moving_avg_temp+0x110>)
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <moving_avg_temp+0x114>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d22a      	bcs.n	8003bb6 <moving_avg_temp+0x6a>
	{
		temp_sum += temp;
 8003b60:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <moving_avg_temp+0x118>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <moving_avg_temp+0x11c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c19      	adds	r1, r3, #0
 8003b6a:	1c10      	adds	r0, r2, #0
 8003b6c:	f7fc fe60 	bl	8000830 <__aeabi_fadd>
 8003b70:	1c03      	adds	r3, r0, #0
 8003b72:	1c1a      	adds	r2, r3, #0
 8003b74:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <moving_avg_temp+0x118>)
 8003b76:	601a      	str	r2, [r3, #0]
		input[i] = temp;
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <moving_avg_temp+0x110>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <moving_avg_temp+0x11c>)
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <moving_avg_temp+0x120>)
 8003b84:	0092      	lsls	r2, r2, #2
 8003b86:	50d1      	str	r1, [r2, r3]
		i++;
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <moving_avg_temp+0x110>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <moving_avg_temp+0x110>)
 8003b92:	701a      	strb	r2, [r3, #0]
		*avg_temp = temp_sum / i;
 8003b94:	4b33      	ldr	r3, [pc, #204]	; (8003c64 <moving_avg_temp+0x118>)
 8003b96:	681c      	ldr	r4, [r3, #0]
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <moving_avg_temp+0x110>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7fd fad3 	bl	8001148 <__aeabi_i2f>
 8003ba2:	1c03      	adds	r3, r0, #0
 8003ba4:	1c19      	adds	r1, r3, #0
 8003ba6:	1c20      	adds	r0, r4, #0
 8003ba8:	f7fc ffe0 	bl	8000b6c <__aeabi_fdiv>
 8003bac:	1c03      	adds	r3, r0, #0
 8003bae:	1c1a      	adds	r2, r3, #0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
		input[0] = temp;

		temp_sum += temp;
		*avg_temp = temp_sum / n;
	}
}
 8003bb4:	e04e      	b.n	8003c54 <moving_avg_temp+0x108>
		temp_sum = 0;
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <moving_avg_temp+0x118>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
		for (uint8_t j = n - 1; j > 0; j--) {
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <moving_avg_temp+0x114>)
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e01f      	b.n	8003c0a <moving_avg_temp+0xbe>
			input[j] = input[j - 1];
 8003bca:	240f      	movs	r4, #15
 8003bcc:	193b      	adds	r3, r7, r4
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	1e59      	subs	r1, r3, #1
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <moving_avg_temp+0x120>)
 8003bd8:	0089      	lsls	r1, r1, #2
 8003bda:	58c9      	ldr	r1, [r1, r3]
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <moving_avg_temp+0x120>)
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	50d1      	str	r1, [r2, r3]
			temp_sum += input[j];
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <moving_avg_temp+0x120>)
 8003be8:	0092      	lsls	r2, r2, #2
 8003bea:	58d2      	ldr	r2, [r2, r3]
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <moving_avg_temp+0x118>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c19      	adds	r1, r3, #0
 8003bf2:	1c10      	adds	r0, r2, #0
 8003bf4:	f7fc fe1c 	bl	8000830 <__aeabi_fadd>
 8003bf8:	1c03      	adds	r3, r0, #0
 8003bfa:	1c1a      	adds	r2, r3, #0
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <moving_avg_temp+0x118>)
 8003bfe:	601a      	str	r2, [r3, #0]
		for (uint8_t j = n - 1; j > 0; j--) {
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	3a01      	subs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	230f      	movs	r3, #15
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1da      	bne.n	8003bca <moving_avg_temp+0x7e>
		input[0] = temp;
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <moving_avg_temp+0x11c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <moving_avg_temp+0x120>)
 8003c1a:	601a      	str	r2, [r3, #0]
		temp_sum += temp;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <moving_avg_temp+0x118>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <moving_avg_temp+0x11c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1c19      	adds	r1, r3, #0
 8003c26:	1c10      	adds	r0, r2, #0
 8003c28:	f7fc fe02 	bl	8000830 <__aeabi_fadd>
 8003c2c:	1c03      	adds	r3, r0, #0
 8003c2e:	1c1a      	adds	r2, r3, #0
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <moving_avg_temp+0x118>)
 8003c32:	601a      	str	r2, [r3, #0]
		*avg_temp = temp_sum / n;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <moving_avg_temp+0x118>)
 8003c36:	681c      	ldr	r4, [r3, #0]
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <moving_avg_temp+0x114>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fd fa83 	bl	8001148 <__aeabi_i2f>
 8003c42:	1c03      	adds	r3, r0, #0
 8003c44:	1c19      	adds	r1, r3, #0
 8003c46:	1c20      	adds	r0, r4, #0
 8003c48:	f7fc ff90 	bl	8000b6c <__aeabi_fdiv>
 8003c4c:	1c03      	adds	r3, r0, #0
 8003c4e:	1c1a      	adds	r2, r3, #0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b005      	add	sp, #20
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	200002c0 	.word	0x200002c0
 8003c60:	200002c1 	.word	0x200002c1
 8003c64:	200002bc 	.word	0x200002bc
 8003c68:	200002b0 	.word	0x200002b0
 8003c6c:	200002c4 	.word	0x200002c4

08003c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c76:	f000 fe21 	bl	80048bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c7a:	f000 f8b7 	bl	8003dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c7e:	f000 f967 	bl	8003f50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003c82:	f000 f90f 	bl	8003ea4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  BSP_EPD_Init();	// Initting the EPD display
 8003c86:	f000 fa3f 	bl	8004108 <BSP_EPD_Init>

  // Showcasing
  BSP_EPD_DrawImage(0, 0, 72, 172, (uint8_t*) picture_1);
 8003c8a:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <main+0x130>)
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	23ac      	movs	r3, #172	; 0xac
 8003c90:	2248      	movs	r2, #72	; 0x48
 8003c92:	2100      	movs	r1, #0
 8003c94:	2000      	movs	r0, #0
 8003c96:	f000 fbf5 	bl	8004484 <BSP_EPD_DrawImage>
  BSP_EPD_RefreshDisplay();
 8003c9a:	f000 fc4b 	bl	8004534 <BSP_EPD_RefreshDisplay>
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8003c9e:	20ff      	movs	r0, #255	; 0xff
 8003ca0:	f000 fae2 	bl	8004268 <BSP_EPD_Clear>
  HAL_Delay(1500);
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	; (8003da4 <main+0x134>)
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fe78 	bl	800499c <HAL_Delay>

  // My signature, not neccessary though
  BSP_EPD_DisplayStringAt(0, 42, (unsigned char *)"Embedded system", CENTER_MODE);
 8003cac:	4a3e      	ldr	r2, [pc, #248]	; (8003da8 <main+0x138>)
 8003cae:	2301      	movs	r3, #1
 8003cb0:	212a      	movs	r1, #42	; 0x2a
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f000 fb34 	bl	8004320 <BSP_EPD_DisplayStringAt>
  BSP_EPD_DisplayStringAt(0, 39, (unsigned char *)"programming", CENTER_MODE);
 8003cb8:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <main+0x13c>)
 8003cba:	2301      	movs	r3, #1
 8003cbc:	2127      	movs	r1, #39	; 0x27
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f000 fb2e 	bl	8004320 <BSP_EPD_DisplayStringAt>
  BSP_EPD_DisplayStringAt(0, 35, (unsigned char *)"student Yiman A.u.", CENTER_MODE);
 8003cc4:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <main+0x140>)
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	2123      	movs	r1, #35	; 0x23
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f000 fb28 	bl	8004320 <BSP_EPD_DisplayStringAt>
  BSP_EPD_RefreshDisplay();
 8003cd0:	f000 fc30 	bl	8004534 <BSP_EPD_RefreshDisplay>
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8003cd4:	20ff      	movs	r0, #255	; 0xff
 8003cd6:	f000 fac7 	bl	8004268 <BSP_EPD_Clear>
  HAL_Delay(3000);
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <main+0x144>)
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 fe5d 	bl	800499c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(msg, "Initializing...");
 8003ce2:	4a35      	ldr	r2, [pc, #212]	; (8003db8 <main+0x148>)
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <main+0x14c>)
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f003 f915 	bl	8006f18 <siprintf>

  // Timer interrupt every 10 seconds
  HAL_TIM_Base_Start_IT(&htim2);
 8003cee:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <main+0x150>)
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f001 fef7 	bl	8005ae4 <HAL_TIM_Base_Start_IT>

  // Initialize global variables
  temp_sum = 0;
 8003cf6:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <main+0x154>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
  i = 0, n = 5;
 8003cfc:	4b32      	ldr	r3, [pc, #200]	; (8003dc8 <main+0x158>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <main+0x15c>)
 8003d04:	2205      	movs	r2, #5
 8003d06:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	// Reading data fromt the sensor
	d = DHT_getData(&sensor);
 8003d08:	4c31      	ldr	r4, [pc, #196]	; (8003dd0 <main+0x160>)
 8003d0a:	003b      	movs	r3, r7
 8003d0c:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <main+0x164>)
 8003d0e:	0011      	movs	r1, r2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7ff f9dd 	bl	80030d0 <DHT_getData>
 8003d16:	003a      	movs	r2, r7
 8003d18:	0023      	movs	r3, r4
 8003d1a:	ca03      	ldmia	r2!, {r0, r1}
 8003d1c:	c303      	stmia	r3!, {r0, r1}

	temp = d.temp;
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <main+0x160>)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <main+0x168>)
 8003d24:	601a      	str	r2, [r3, #0]
	hum = d.hum;
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <main+0x160>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <main+0x16c>)
 8003d2c:	601a      	str	r2, [r3, #0]

	// Check for error
	if(d.temp == -128 && d.temp == -128)
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <main+0x160>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	21c3      	movs	r1, #195	; 0xc3
 8003d34:	0609      	lsls	r1, r1, #24
 8003d36:	1c18      	adds	r0, r3, #0
 8003d38:	f7fc fbc2 	bl	80004c0 <__aeabi_fcmpeq>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d00f      	beq.n	8003d60 <main+0xf0>
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <main+0x160>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	21c3      	movs	r1, #195	; 0xc3
 8003d46:	0609      	lsls	r1, r1, #24
 8003d48:	1c18      	adds	r0, r3, #0
 8003d4a:	f7fc fbb9 	bl	80004c0 <__aeabi_fcmpeq>
 8003d4e:	1e03      	subs	r3, r0, #0
 8003d50:	d006      	beq.n	8003d60 <main+0xf0>
	{
		sprintf(msg, "SENSOR ERROR!");
 8003d52:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <main+0x170>)
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <main+0x14c>)
 8003d56:	0011      	movs	r1, r2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f003 f8dd 	bl	8006f18 <siprintf>
 8003d5e:	e019      	b.n	8003d94 <main+0x124>
	}
	// Proceeds normally
	else
	{
		moving_avg_temp(&avg_temp);
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <main+0x174>)
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7ff fef2 	bl	8003b4c <moving_avg_temp>
	    sprintf(msg, "temp: %2.1fC, hum: %2.1f%%", avg_temp, hum);
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <main+0x174>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	1c18      	adds	r0, r3, #0
 8003d6e:	f7ff f861 	bl	8002e34 <__aeabi_f2d>
 8003d72:	0004      	movs	r4, r0
 8003d74:	000d      	movs	r5, r1
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <main+0x16c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1c18      	adds	r0, r3, #0
 8003d7c:	f7ff f85a 	bl	8002e34 <__aeabi_f2d>
 8003d80:	0002      	movs	r2, r0
 8003d82:	000b      	movs	r3, r1
 8003d84:	4918      	ldr	r1, [pc, #96]	; (8003de8 <main+0x178>)
 8003d86:	480d      	ldr	r0, [pc, #52]	; (8003dbc <main+0x14c>)
 8003d88:	9200      	str	r2, [sp, #0]
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	0022      	movs	r2, r4
 8003d8e:	002b      	movs	r3, r5
 8003d90:	f003 f8c2 	bl	8006f18 <siprintf>
	}

    HAL_Delay(2000);
 8003d94:	23fa      	movs	r3, #250	; 0xfa
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fdff 	bl	800499c <HAL_Delay>
	d = DHT_getData(&sensor);
 8003d9e:	e7b3      	b.n	8003d08 <main+0x98>
 8003da0:	0800c6c0 	.word	0x0800c6c0
 8003da4:	000005dc 	.word	0x000005dc
 8003da8:	0800ac98 	.word	0x0800ac98
 8003dac:	0800aca8 	.word	0x0800aca8
 8003db0:	0800acb4 	.word	0x0800acb4
 8003db4:	00000bb8 	.word	0x00000bb8
 8003db8:	0800acc8 	.word	0x0800acc8
 8003dbc:	20000280 	.word	0x20000280
 8003dc0:	20000240 	.word	0x20000240
 8003dc4:	200002bc 	.word	0x200002bc
 8003dc8:	200002c0 	.word	0x200002c0
 8003dcc:	200002c1 	.word	0x200002c1
 8003dd0:	200002a8 	.word	0x200002a8
 8003dd4:	20000030 	.word	0x20000030
 8003dd8:	200002b0 	.word	0x200002b0
 8003ddc:	200002b4 	.word	0x200002b4
 8003de0:	0800acd8 	.word	0x0800acd8
 8003de4:	200002b8 	.word	0x200002b8
 8003de8:	0800ace8 	.word	0x0800ace8

08003dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	b095      	sub	sp, #84	; 0x54
 8003df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003df2:	2418      	movs	r4, #24
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	0018      	movs	r0, r3
 8003df8:	2338      	movs	r3, #56	; 0x38
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f002 fa09 	bl	8006214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	0018      	movs	r0, r3
 8003e06:	2314      	movs	r3, #20
 8003e08:	001a      	movs	r2, r3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f002 fa02 	bl	8006214 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e10:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <SystemClock_Config+0xb0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <SystemClock_Config+0xb4>)
 8003e16:	401a      	ands	r2, r3
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <SystemClock_Config+0xb0>)
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	0109      	lsls	r1, r1, #4
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e22:	0021      	movs	r1, r4
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2202      	movs	r2, #2
 8003e28:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	2210      	movs	r2, #16
 8003e34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	2202      	movs	r2, #2
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	0412      	lsls	r2, r2, #16
 8003e4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	0018      	movs	r0, r3
 8003e54:	f001 f854 	bl	8004f00 <HAL_RCC_OscConfig>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d001      	beq.n	8003e60 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003e5c:	f000 f94e 	bl	80040fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	220f      	movs	r2, #15
 8003e64:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	2203      	movs	r2, #3
 8003e6a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	00d2      	lsls	r2, r2, #3
 8003e80:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	2100      	movs	r1, #0
 8003e86:	0018      	movs	r0, r3
 8003e88:	f001 fbfe 	bl	8005688 <HAL_RCC_ClockConfig>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d001      	beq.n	8003e94 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003e90:	f000 f934 	bl	80040fc <Error_Handler>
  }
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b015      	add	sp, #84	; 0x54
 8003e9a:	bd90      	pop	{r4, r7, pc}
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	ffffe7ff 	.word	0xffffe7ff

08003ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eaa:	2308      	movs	r3, #8
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	0018      	movs	r0, r3
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f002 f9ad 	bl	8006214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eba:	003b      	movs	r3, r7
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f002 f9a6 	bl	8006214 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	05d2      	lsls	r2, r2, #23
 8003ece:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003ed2:	22fa      	movs	r2, #250	; 0xfa
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <MX_TIM2_Init+0xa8>)
 8003ee2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f001 fdb6 	bl	8005a64 <HAL_TIM_Base_Init>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003efc:	f000 f8fe 	bl	80040fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f00:	2108      	movs	r1, #8
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	0152      	lsls	r2, r2, #5
 8003f08:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f0a:	187a      	adds	r2, r7, r1
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003f0e:	0011      	movs	r1, r2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f001 ff1b 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8003f16:	1e03      	subs	r3, r0, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003f1a:	f000 f8ef 	bl	80040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f1e:	003b      	movs	r3, r7
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f24:	003b      	movs	r3, r7
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f2a:	003a      	movs	r2, r7
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <MX_TIM2_Init+0xa4>)
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f002 f8ed 	bl	8006110 <HAL_TIMEx_MasterConfigSynchronization>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003f3a:	f000 f8df 	bl	80040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b006      	add	sp, #24
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000240 	.word	0x20000240
 8003f4c:	00009c40 	.word	0x00009c40

08003f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b08b      	sub	sp, #44	; 0x2c
 8003f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f56:	2414      	movs	r4, #20
 8003f58:	193b      	adds	r3, r7, r4
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	2314      	movs	r3, #20
 8003f5e:	001a      	movs	r2, r3
 8003f60:	2100      	movs	r1, #0
 8003f62:	f002 f957 	bl	8006214 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f66:	4b55      	ldr	r3, [pc, #340]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4b54      	ldr	r3, [pc, #336]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f72:	4b52      	ldr	r3, [pc, #328]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	2204      	movs	r2, #4
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f7e:	4b4f      	ldr	r3, [pc, #316]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	430a      	orrs	r2, r1
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f8a:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	4b49      	ldr	r3, [pc, #292]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4b48      	ldr	r3, [pc, #288]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fa2:	4b46      	ldr	r3, [pc, #280]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	4b42      	ldr	r3, [pc, #264]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <MX_GPIO_Init+0x16c>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003fc6:	23a0      	movs	r3, #160	; 0xa0
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2110      	movs	r1, #16
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 ff79 	bl	8004ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fd4:	193b      	adds	r3, r7, r4
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	2201      	movs	r2, #1
 8003fde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	193b      	adds	r3, r7, r4
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	193b      	adds	r3, r7, r4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fec:	193a      	adds	r2, r7, r4
 8003fee:	23a0      	movs	r3, #160	; 0xa0
 8003ff0:	05db      	lsls	r3, r3, #23
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fdd3 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_MISO_Pin NFC_MOSI_Pin */
  GPIO_InitStruct.Pin = NFC_MISO_Pin|NFC_MOSI_Pin;
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	22c0      	movs	r2, #192	; 0xc0
 8004000:	0212      	lsls	r2, r2, #8
 8004002:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	000c      	movs	r4, r1
 8004006:	193b      	adds	r3, r7, r4
 8004008:	2202      	movs	r2, #2
 800400a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	193b      	adds	r3, r7, r4
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	193b      	adds	r3, r7, r4
 8004014:	2203      	movs	r2, #3
 8004016:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004018:	193b      	adds	r3, r7, r4
 800401a:	2200      	movs	r2, #0
 800401c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401e:	193b      	adds	r3, r7, r4
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <MX_GPIO_Init+0x170>)
 8004022:	0019      	movs	r1, r3
 8004024:	0010      	movs	r0, r2
 8004026:	f000 fdbb 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 800402a:	0021      	movs	r1, r4
 800402c:	187b      	adds	r3, r7, r1
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	00d2      	lsls	r2, r2, #3
 8004032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	000c      	movs	r4, r1
 8004036:	193b      	adds	r3, r7, r4
 8004038:	2202      	movs	r2, #2
 800403a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	193b      	adds	r3, r7, r4
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004042:	193b      	adds	r3, r7, r4
 8004044:	2203      	movs	r2, #3
 8004046:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004048:	193b      	adds	r3, r7, r4
 800404a:	2204      	movs	r2, #4
 800404c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800404e:	193a      	adds	r2, r7, r4
 8004050:	23a0      	movs	r3, #160	; 0xa0
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f000 fda2 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ePD1_MOSI_Pin */
  GPIO_InitStruct.Pin = ePD1_MOSI_Pin;
 800405c:	193b      	adds	r3, r7, r4
 800405e:	2220      	movs	r2, #32
 8004060:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004062:	193b      	adds	r3, r7, r4
 8004064:	2202      	movs	r2, #2
 8004066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	193b      	adds	r3, r7, r4
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	193b      	adds	r3, r7, r4
 8004070:	2200      	movs	r2, #0
 8004072:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004074:	193b      	adds	r3, r7, r4
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(ePD1_MOSI_GPIO_Port, &GPIO_InitStruct);
 800407a:	193b      	adds	r3, r7, r4
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <MX_GPIO_Init+0x170>)
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f000 fd8d 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SDA_Pin;
 8004086:	0021      	movs	r1, r4
 8004088:	187b      	adds	r3, r7, r1
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2212      	movs	r2, #18
 8004094:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004096:	187b      	adds	r3, r7, r1
 8004098:	2201      	movs	r2, #1
 800409a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2203      	movs	r2, #3
 80040a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	2204      	movs	r2, #4
 80040a6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(MFX_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <MX_GPIO_Init+0x170>)
 80040ac:	0019      	movs	r1, r3
 80040ae:	0010      	movs	r0, r2
 80040b0:	f000 fd76 	bl	8004ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b00b      	add	sp, #44	; 0x2c
 80040ba:	bd90      	pop	{r4, r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	50000400 	.word	0x50000400

080040c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	05db      	lsls	r3, r3, #23
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d10a      	bne.n	80040ee <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		BSP_EPD_DisplayStringAt(0, 40, (unsigned char *)msg, CENTER_MODE);
 80040d8:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80040da:	2301      	movs	r3, #1
 80040dc:	2128      	movs	r1, #40	; 0x28
 80040de:	2000      	movs	r0, #0
 80040e0:	f000 f91e 	bl	8004320 <BSP_EPD_DisplayStringAt>
		BSP_EPD_RefreshDisplay();
 80040e4:	f000 fa26 	bl	8004534 <BSP_EPD_RefreshDisplay>
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 80040e8:	20ff      	movs	r0, #255	; 0xff
 80040ea:	f000 f8bd 	bl	8004268 <BSP_EPD_Clear>
	}
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b002      	add	sp, #8
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	20000280 	.word	0x20000280

080040fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004100:	b672      	cpsid	i
}
 8004102:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004104:	e7fe      	b.n	8004104 <Error_Handler+0x8>
	...

08004108 <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0

	!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits
	RCC->CFGR &= (uint32_t)0xFF02FFFF;*/

	/*!< Disable all interrupts */
	RCC->CIER = 0x00000000;
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <BSP_EPD_Init+0xd8>)
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]

	RCC->IOPENR |= 0
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <BSP_EPD_Init+0xd8>)
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <BSP_EPD_Init+0xd8>)
 800411a:	2103      	movs	r1, #3
 800411c:	430a      	orrs	r2, r1
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
			| RCC_IOPENR_GPIOAEN
			| RCC_IOPENR_GPIOBEN
			;
	RCC->APB2ENR |= 0
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <BSP_EPD_Init+0xd8>)
 8004122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004124:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <BSP_EPD_Init+0xd8>)
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	0149      	lsls	r1, r1, #5
 800412a:	430a      	orrs	r2, r1
 800412c:	635a      	str	r2, [r3, #52]	; 0x34
			| RCC_APB2ENR_SPI1EN
			;

	GPIOA->MODER = (GPIOA->MODER
 800412e:	23a0      	movs	r3, #160	; 0xa0
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE5)      // RED LED
			& (~GPIO_MODER_MODE8)      // EPD_BUSY
			& (~GPIO_MODER_MODE15)     // EPD_CS
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <BSP_EPD_Init+0xdc>)
 8004136:	401a      	ands	r2, r3
	GPIOA->MODER = (GPIOA->MODER
 8004138:	23a0      	movs	r3, #160	; 0xa0
 800413a:	05db      	lsls	r3, r3, #23
	) | (0
 800413c:	492a      	ldr	r1, [pc, #168]	; (80041e8 <BSP_EPD_Init+0xe0>)
 800413e:	430a      	orrs	r2, r1
	GPIOA->MODER = (GPIOA->MODER
 8004140:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE5_0)   // RED LED
			| (GPIO_Mode_In  * GPIO_MODER_MODE8_0)   // EPD_BUSY
			| (GPIO_Mode_Out * GPIO_MODER_MODE15_0)  // EPD_CS
	);

	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	05db      	lsls	r3, r3, #23
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	23a0      	movs	r3, #160	; 0xa0
 800414a:	05db      	lsls	r3, r3, #23
			& (~GPIO_OSPEEDER_OSPEED15)    // EPD_CS
	) | (0
 800414c:	21c0      	movs	r1, #192	; 0xc0
 800414e:	0609      	lsls	r1, r1, #24
 8004150:	430a      	orrs	r2, r1
	GPIOA->OSPEEDR = (GPIOA->OSPEEDR
 8004152:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED15_0)  // EPD_CS
	);
	GPIOA->PUPDR = (GPIOA->PUPDR
 8004154:	23a0      	movs	r3, #160	; 0xa0
 8004156:	05db      	lsls	r3, r3, #23
 8004158:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD8)    // EPD_BUSY
 800415a:	4a24      	ldr	r2, [pc, #144]	; (80041ec <BSP_EPD_Init+0xe4>)
 800415c:	401a      	ands	r2, r3
	GPIOA->PUPDR = (GPIOA->PUPDR
 800415e:	23a0      	movs	r3, #160	; 0xa0
 8004160:	05db      	lsls	r3, r3, #23
	) | (0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	0289      	lsls	r1, r1, #10
 8004166:	430a      	orrs	r2, r1
	GPIOA->PUPDR = (GPIOA->PUPDR
 8004168:	60da      	str	r2, [r3, #12]
			| (GPIO_PullDown * GPIO_PUPDR_PUPD8_0)  // EPD_BUSY
	);

	GPIOB->MODER = (GPIOB->MODER
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <BSP_EPD_Init+0xe8>)
 800416c:	681b      	ldr	r3, [r3, #0]
			& (~GPIO_MODER_MODE4)      // GREEN LED
			& (~GPIO_MODER_MODE2)      // EPD_RESET
			& (~GPIO_MODER_MODE10)     // EPD_PWR
			& (~GPIO_MODER_MODE11)     // EPD_DC
			& (~GPIO_MODER_MODE3)      // SPIx_SCK
			& (~GPIO_MODER_MODE5)      // SPIx_MOSI
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <BSP_EPD_Init+0xec>)
 8004170:	401a      	ands	r2, r3
	GPIOB->MODER = (GPIOB->MODER
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <BSP_EPD_Init+0xe8>)
	) | (0
 8004174:	4920      	ldr	r1, [pc, #128]	; (80041f8 <BSP_EPD_Init+0xf0>)
 8004176:	430a      	orrs	r2, r1
	GPIOB->MODER = (GPIOB->MODER
 8004178:	601a      	str	r2, [r3, #0]
			| (GPIO_Mode_Out * GPIO_MODER_MODE10_0)  // EPD_PWR
			| (GPIO_Mode_Out * GPIO_MODER_MODE11_0)  // EPD_DC
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE3_0)  // SPIx_SCK
			| (GPIO_Mode_AlternateFunction * GPIO_MODER_MODE5_0)  // SPIx_MOSI
	);
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <BSP_EPD_Init+0xe8>)
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <BSP_EPD_Init+0xe8>)
			& (~GPIO_OSPEEDER_OSPEED2)     // EPD_RESET
			& (~GPIO_OSPEEDER_OSPEED10)    // EPD_PWR
			& (~GPIO_OSPEEDER_OSPEED11)    // EPD_DC
			& (~GPIO_OSPEEDER_OSPEED3)     // SPIx_SCK
			& (~GPIO_OSPEEDER_OSPEED5)     // SPIx_MOSI
	) | (0
 8004180:	491e      	ldr	r1, [pc, #120]	; (80041fc <BSP_EPD_Init+0xf4>)
 8004182:	430a      	orrs	r2, r1
	GPIOB->OSPEEDR = (GPIOB->OSPEEDR
 8004184:	609a      	str	r2, [r3, #8]
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED10_0)  // EPD_PWR
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED11_0)  // EPD_DC
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED3_0)   // SPIx_SCK
			| (GPIO_Speed_High * GPIO_OSPEEDER_OSPEED5_0)   // SPIx_MOSI
	);
	GPIOB->PUPDR = (GPIOB->PUPDR
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <BSP_EPD_Init+0xe8>)
 8004188:	68db      	ldr	r3, [r3, #12]
			& (~GPIO_PUPDR_PUPD3)    // SPIx_SCK
			& (~GPIO_PUPDR_PUPD5)    // SPIx_MOSI
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <BSP_EPD_Init+0xf8>)
 800418c:	401a      	ands	r2, r3
	GPIOB->PUPDR = (GPIOB->PUPDR
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <BSP_EPD_Init+0xe8>)
	) | (0
 8004190:	2184      	movs	r1, #132	; 0x84
 8004192:	0109      	lsls	r1, r1, #4
 8004194:	430a      	orrs	r2, r1
	GPIOB->PUPDR = (GPIOB->PUPDR
 8004196:	60da      	str	r2, [r3, #12]
			| (GPIO_PullUp   * GPIO_PUPDR_PUPD3_0)  // SPIx_SCK
			| (GPIO_PullDown * GPIO_PUPDR_PUPD5_0)  // SPIx_MOSI
	);
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <BSP_EPD_Init+0xe8>)
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <BSP_EPD_Init+0xe8>)
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL3_0))    // SPIx_SCK
								& (~ (GPIO_AFRx * GPIO_AFRL_AFRL5_0))    // SPIx_MOSI
	) | (0
 800419e:	4919      	ldr	r1, [pc, #100]	; (8004204 <BSP_EPD_Init+0xfc>)
 80041a0:	400a      	ands	r2, r1
	GPIOB->AFR[0] = (GPIOB->AFR[0]
 80041a2:	621a      	str	r2, [r3, #32]
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL3_0)  // SPIx_SCK
			| (GPIO_AlternateFunction_SPI1 * GPIO_AFRL_AFRL5_0)  // SPIx_MOSI
	);

	uint8_t ret = EPD_ERROR;
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]

	/* Default value for the Font */
	pFont = &Font16;
 80041aa:	4b17      	ldr	r3, [pc, #92]	; (8004208 <BSP_EPD_Init+0x100>)
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <BSP_EPD_Init+0x104>)
 80041ae:	601a      	str	r2, [r3, #0]

	epd_drv = &gde021a1_drv;
 80041b0:	4b17      	ldr	r3, [pc, #92]	; (8004210 <BSP_EPD_Init+0x108>)
 80041b2:	4a18      	ldr	r2, [pc, #96]	; (8004214 <BSP_EPD_Init+0x10c>)
 80041b4:	601a      	str	r2, [r3, #0]

	/* EPD Init */
	epd_drv->Init();
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <BSP_EPD_Init+0x108>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4798      	blx	r3

	/* Clear the EPD screen */
	BSP_EPD_Clear(EPD_COLOR_WHITE);
 80041be:	20ff      	movs	r0, #255	; 0xff
 80041c0:	f000 f852 	bl	8004268 <BSP_EPD_Clear>

	/* Initialize the font */
	BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <BSP_EPD_Init+0x110>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f840 	bl	800424c <BSP_EPD_SetFont>

	ret = EPD_OK;
 80041cc:	1dfb      	adds	r3, r7, #7
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]

	return ret;
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b002      	add	sp, #8
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	40021000 	.word	0x40021000
 80041e4:	3ffcf3ff 	.word	0x3ffcf3ff
 80041e8:	40000400 	.word	0x40000400
 80041ec:	fffcffff 	.word	0xfffcffff
 80041f0:	50000400 	.word	0x50000400
 80041f4:	ff0ff00f 	.word	0xff0ff00f
 80041f8:	00500990 	.word	0x00500990
 80041fc:	00f00cf0 	.word	0x00f00cf0
 8004200:	fffff33f 	.word	0xfffff33f
 8004204:	ff0f0fff 	.word	0xff0f0fff
 8004208:	200002d8 	.word	0x200002d8
 800420c:	20000008 	.word	0x20000008
 8004210:	200002dc 	.word	0x200002dc
 8004214:	20000010 	.word	0x20000010
 8004218:	20000000 	.word	0x20000000

0800421c <BSP_EPD_GetXSize>:
  * @brief  Gets the EPD X size.
  * @param  None
  * @retval EPD X size
  */
uint32_t BSP_EPD_GetXSize(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelWidth());
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <BSP_EPD_GetXSize+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4798      	blx	r3
 8004228:	0003      	movs	r3, r0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200002dc 	.word	0x200002dc

08004234 <BSP_EPD_GetYSize>:
  * @brief  Gets the EPD Y size.
  * @param  None   
  * @retval EPD Y size
  */
uint32_t BSP_EPD_GetYSize(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  return(epd_drv->GetEpdPixelHeight());
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <BSP_EPD_GetYSize+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	4798      	blx	r3
 8004240:	0003      	movs	r3, r0
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	200002dc 	.word	0x200002dc

0800424c <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <BSP_EPD_SetFont+0x18>)
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b002      	add	sp, #8
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	200002d8 	.word	0x200002d8

08004268 <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	0002      	movs	r2, r0
 8004270:	1dbb      	adds	r3, r7, #6
 8004272:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <BSP_EPD_Clear+0x50>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689c      	ldr	r4, [r3, #8]
 800427e:	2311      	movs	r3, #17
 8004280:	22ab      	movs	r2, #171	; 0xab
 8004282:	2100      	movs	r1, #0
 8004284:	2000      	movs	r0, #0
 8004286:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e00a      	b.n	80042a4 <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <BSP_EPD_Clear+0x50>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	1dba      	adds	r2, r7, #6
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	0010      	movs	r0, r2
 800429c:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <BSP_EPD_Clear+0x54>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d9f0      	bls.n	800428e <BSP_EPD_Clear+0x26>
  }
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b005      	add	sp, #20
 80042b4:	bd90      	pop	{r4, r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	200002dc 	.word	0x200002dc
 80042bc:	00000c17 	.word	0x00000c17

080042c0 <BSP_EPD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void BSP_EPD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	0004      	movs	r4, r0
 80042c8:	0008      	movs	r0, r1
 80042ca:	0011      	movs	r1, r2
 80042cc:	1dbb      	adds	r3, r7, #6
 80042ce:	1c22      	adds	r2, r4, #0
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	1c02      	adds	r2, r0, #0
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	1cfb      	adds	r3, r7, #3
 80042da:	1c0a      	adds	r2, r1, #0
 80042dc:	701a      	strb	r2, [r3, #0]
  Ascii -= 32;
 80042de:	1cfb      	adds	r3, r7, #3
 80042e0:	1cfa      	adds	r2, r7, #3
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	3a20      	subs	r2, #32
 80042e6:	701a      	strb	r2, [r3, #0]
  
  DrawChar(Xpos, Ypos, &pFont->table[Ascii * ((pFont->Height) * (pFont->Width))]);
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <BSP_EPD_DisplayChar+0x5c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	1cfb      	adds	r3, r7, #3
 80042f0:	7819      	ldrb	r1, [r3, #0]
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <BSP_EPD_DisplayChar+0x5c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	88db      	ldrh	r3, [r3, #6]
 80042f8:	0018      	movs	r0, r3
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <BSP_EPD_DisplayChar+0x5c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	889b      	ldrh	r3, [r3, #4]
 8004300:	4343      	muls	r3, r0
 8004302:	434b      	muls	r3, r1
 8004304:	18d2      	adds	r2, r2, r3
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	8819      	ldrh	r1, [r3, #0]
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	0018      	movs	r0, r3
 8004310:	f000 f932 	bl	8004578 <DrawChar>
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b003      	add	sp, #12
 800431a:	bd90      	pop	{r4, r7, pc}
 800431c:	200002d8 	.word	0x200002d8

08004320 <BSP_EPD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE  
  * @retval None
  */
void BSP_EPD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	0004      	movs	r4, r0
 8004328:	0008      	movs	r0, r1
 800432a:	60ba      	str	r2, [r7, #8]
 800432c:	0019      	movs	r1, r3
 800432e:	230e      	movs	r3, #14
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	1c22      	adds	r2, r4, #0
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	230c      	movs	r3, #12
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	1c02      	adds	r2, r0, #0
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	1dfb      	adds	r3, r7, #7
 8004340:	1c0a      	adds	r2, r1, #0
 8004342:	701a      	strb	r2, [r3, #0]
  uint16_t refcolumn = 1, i = 0;
 8004344:	231e      	movs	r3, #30
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	2201      	movs	r2, #1
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	231c      	movs	r3, #28
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2200      	movs	r2, #0
 8004352:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0, xsize = 0; 
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004360:	e002      	b.n	8004368 <BSP_EPD_DisplayStringAt+0x48>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	3301      	adds	r3, #1
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	617a      	str	r2, [r7, #20]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f6      	bne.n	8004362 <BSP_EPD_DisplayStringAt+0x42>
  
  /* Characters number per line */
  xsize = (BSP_EPD_GetXSize()/pFont->Width);
 8004374:	f7ff ff52 	bl	800421c <BSP_EPD_GetXSize>
 8004378:	0002      	movs	r2, r0
 800437a:	4b41      	ldr	r3, [pc, #260]	; (8004480 <BSP_EPD_DisplayStringAt+0x160>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	889b      	ldrh	r3, [r3, #4]
 8004380:	0019      	movs	r1, r3
 8004382:	0010      	movs	r0, r2
 8004384:	f7fb fedc 	bl	8000140 <__udivsi3>
 8004388:	0003      	movs	r3, r0
 800438a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d016      	beq.n	80043c2 <BSP_EPD_DisplayStringAt+0xa2>
 8004394:	dc2d      	bgt.n	80043f2 <BSP_EPD_DisplayStringAt+0xd2>
 8004396:	2b01      	cmp	r3, #1
 8004398:	d002      	beq.n	80043a0 <BSP_EPD_DisplayStringAt+0x80>
 800439a:	2b02      	cmp	r3, #2
 800439c:	d018      	beq.n	80043d0 <BSP_EPD_DisplayStringAt+0xb0>
 800439e:	e028      	b.n	80043f2 <BSP_EPD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* pFont->Width) / 2;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <BSP_EPD_DisplayStringAt+0x160>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	889b      	ldrh	r3, [r3, #4]
 80043ac:	4353      	muls	r3, r2
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	b299      	uxth	r1, r3
 80043b2:	231e      	movs	r3, #30
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	220e      	movs	r2, #14
 80043b8:	18ba      	adds	r2, r7, r2
 80043ba:	8812      	ldrh	r2, [r2, #0]
 80043bc:	188a      	adds	r2, r1, r2
 80043be:	801a      	strh	r2, [r3, #0]
      break;
 80043c0:	e01e      	b.n	8004400 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80043c2:	231e      	movs	r3, #30
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	220e      	movs	r2, #14
 80043c8:	18ba      	adds	r2, r7, r2
 80043ca:	8812      	ldrh	r2, [r2, #0]
 80043cc:	801a      	strh	r2, [r3, #0]
      break;
 80043ce:	e017      	b.n	8004400 <BSP_EPD_DisplayStringAt+0xe0>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*pFont->Width);
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	4b29      	ldr	r3, [pc, #164]	; (8004480 <BSP_EPD_DisplayStringAt+0x160>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	889b      	ldrh	r3, [r3, #4]
 80043de:	4353      	muls	r3, r2
 80043e0:	b299      	uxth	r1, r3
 80043e2:	231e      	movs	r3, #30
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	220e      	movs	r2, #14
 80043e8:	18ba      	adds	r2, r7, r2
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	1a8a      	subs	r2, r1, r2
 80043ee:	801a      	strh	r2, [r3, #0]
      break;
 80043f0:	e006      	b.n	8004400 <BSP_EPD_DisplayStringAt+0xe0>
    }    
  default:
    {
      refcolumn = Xpos;
 80043f2:	231e      	movs	r3, #30
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	220e      	movs	r2, #14
 80043f8:	18ba      	adds	r2, r7, r2
 80043fa:	8812      	ldrh	r2, [r2, #0]
 80043fc:	801a      	strh	r2, [r3, #0]
      break;
 80043fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Send the string character by character on EPD */
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004400:	e01b      	b.n	800443a <BSP_EPD_DisplayStringAt+0x11a>
  {
    /* Display one character on EPD */
    BSP_EPD_DisplayChar(refcolumn, Ypos, *Text);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	230c      	movs	r3, #12
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	8819      	ldrh	r1, [r3, #0]
 800440c:	241e      	movs	r4, #30
 800440e:	193b      	adds	r3, r7, r4
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff ff54 	bl	80042c0 <BSP_EPD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += pFont->Width;
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <BSP_EPD_DisplayStringAt+0x160>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	8899      	ldrh	r1, [r3, #4]
 800441e:	193b      	adds	r3, r7, r4
 8004420:	193a      	adds	r2, r7, r4
 8004422:	8812      	ldrh	r2, [r2, #0]
 8004424:	188a      	adds	r2, r1, r2
 8004426:	801a      	strh	r2, [r3, #0]
    /* Point on the next character */
    Text++;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3301      	adds	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
    i++;
 800442e:	211c      	movs	r1, #28
 8004430:	187b      	adds	r3, r7, r1
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	187b      	adds	r3, r7, r1
 8004436:	3201      	adds	r2, #1
 8004438:	801a      	strh	r2, [r3, #0]
  while ((*Text != 0) & (((BSP_EPD_GetXSize() - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	4193      	sbcs	r3, r2
 8004442:	b2dc      	uxtb	r4, r3
 8004444:	f7ff feea 	bl	800421c <BSP_EPD_GetXSize>
 8004448:	0001      	movs	r1, r0
 800444a:	231c      	movs	r3, #28
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <BSP_EPD_DisplayStringAt+0x160>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	889b      	ldrh	r3, [r3, #4]
 8004456:	4353      	muls	r3, r2
 8004458:	1acb      	subs	r3, r1, r3
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	0c1a      	lsrs	r2, r3, #16
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <BSP_EPD_DisplayStringAt+0x160>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	889b      	ldrh	r3, [r3, #4]
 8004464:	0019      	movs	r1, r3
 8004466:	2300      	movs	r3, #0
 8004468:	428a      	cmp	r2, r1
 800446a:	415b      	adcs	r3, r3
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4023      	ands	r3, r4
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1c5      	bne.n	8004402 <BSP_EPD_DisplayStringAt+0xe2>
  }
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46c0      	nop			; (mov r8, r8)
 800447a:	46bd      	mov	sp, r7
 800447c:	b009      	add	sp, #36	; 0x24
 800447e:	bd90      	pop	{r4, r7, pc}
 8004480:	200002d8 	.word	0x200002d8

08004484 <BSP_EPD_DrawImage>:
  * @param  Ysize: Y size in the EPD
  * @param  pdata: Pointer to the Image address
  * @retval None
  */
void BSP_EPD_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004484:	b5b0      	push	{r4, r5, r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af02      	add	r7, sp, #8
 800448a:	0005      	movs	r5, r0
 800448c:	000c      	movs	r4, r1
 800448e:	0010      	movs	r0, r2
 8004490:	0019      	movs	r1, r3
 8004492:	1dbb      	adds	r3, r7, #6
 8004494:	1c2a      	adds	r2, r5, #0
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	1c22      	adds	r2, r4, #0
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	1cbb      	adds	r3, r7, #2
 80044a0:	1c02      	adds	r2, r0, #0
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	003b      	movs	r3, r7
 80044a6:	1c0a      	adds	r2, r1, #0
 80044a8:	801a      	strh	r2, [r3, #0]
  /* Set display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos+Ysize-1), (Ypos+(Xsize/4)-1));
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <BSP_EPD_DrawImage+0xac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689c      	ldr	r4, [r3, #8]
 80044b0:	1dba      	adds	r2, r7, #6
 80044b2:	003b      	movs	r3, r7
 80044b4:	8812      	ldrh	r2, [r2, #0]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	18d3      	adds	r3, r2, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29d      	uxth	r5, r3
 80044c0:	1cbb      	adds	r3, r7, #2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	18d3      	adds	r3, r2, r3
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	8819      	ldrh	r1, [r3, #0]
 80044d8:	1dbb      	adds	r3, r7, #6
 80044da:	8818      	ldrh	r0, [r3, #0]
 80044dc:	0013      	movs	r3, r2
 80044de:	002a      	movs	r2, r5
 80044e0:	47a0      	blx	r4
  
  if(epd_drv->DrawImage != NULL)
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <BSP_EPD_DrawImage+0xac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <BSP_EPD_DrawImage+0x86>
  {
    epd_drv->DrawImage(Xpos, Ypos, Xsize, Ysize, pdata);
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <BSP_EPD_DrawImage+0xac>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69dc      	ldr	r4, [r3, #28]
 80044f2:	003b      	movs	r3, r7
 80044f4:	881d      	ldrh	r5, [r3, #0]
 80044f6:	1cbb      	adds	r3, r7, #2
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	8819      	ldrh	r1, [r3, #0]
 80044fe:	1dbb      	adds	r3, r7, #6
 8004500:	8818      	ldrh	r0, [r3, #0]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	002b      	movs	r3, r5
 8004508:	47a0      	blx	r4
  }
  epd_drv->SetDisplayWindow(0, 0, BSP_EPD_GetXSize(), BSP_EPD_GetYSize());
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <BSP_EPD_DrawImage+0xac>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689c      	ldr	r4, [r3, #8]
 8004510:	f7ff fe84 	bl	800421c <BSP_EPD_GetXSize>
 8004514:	0003      	movs	r3, r0
 8004516:	b29d      	uxth	r5, r3
 8004518:	f7ff fe8c 	bl	8004234 <BSP_EPD_GetYSize>
 800451c:	0003      	movs	r3, r0
 800451e:	b29b      	uxth	r3, r3
 8004520:	002a      	movs	r2, r5
 8004522:	2100      	movs	r1, #0
 8004524:	2000      	movs	r0, #0
 8004526:	47a0      	blx	r4
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bdb0      	pop	{r4, r5, r7, pc}
 8004530:	200002dc 	.word	0x200002dc

08004534 <BSP_EPD_RefreshDisplay>:
  * @brief  Updates the display from the data located into the RAM.
  * @param  None
  * @retval None
  */
void BSP_EPD_RefreshDisplay(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Refresh display sequence */
  epd_drv->RefreshDisplay();
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <BSP_EPD_RefreshDisplay+0x3c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4798      	blx	r3

  /* Poll on the BUSY signal and wait for the EPD to be ready */
  while (HAL_GPIO_ReadPin(EPD_BUSY_GPIO_PORT, EPD_BUSY_PIN) != (uint16_t)RESET);
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	005a      	lsls	r2, r3, #1
 8004546:	23a0      	movs	r3, #160	; 0xa0
 8004548:	05db      	lsls	r3, r3, #23
 800454a:	0011      	movs	r1, r2
 800454c:	0018      	movs	r0, r3
 800454e:	f000 fc9d 	bl	8004e8c <HAL_GPIO_ReadPin>
 8004552:	1e03      	subs	r3, r0, #0
 8004554:	d1f5      	bne.n	8004542 <BSP_EPD_RefreshDisplay+0xe>

  /*  EPD reset pin mamagement */
  EPD_RESET_HIGH();
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <BSP_EPD_RefreshDisplay+0x40>)
 8004558:	2201      	movs	r2, #1
 800455a:	2104      	movs	r1, #4
 800455c:	0018      	movs	r0, r3
 800455e:	f000 fcb2 	bl	8004ec6 <HAL_GPIO_WritePin>

  /* Add a 10 ms Delay after EPD pin Reset */
  EPD_Delay(10);
 8004562:	200a      	movs	r0, #10
 8004564:	f7ff fae2 	bl	8003b2c <EPD_Delay>
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	200002dc 	.word	0x200002dc
 8004574:	50000400 	.word	0x50000400

08004578 <DrawChar>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 17
  * @param  c: pointer to the character data
  * @retval None
  */
static void  DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	603a      	str	r2, [r7, #0]
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	1c02      	adds	r2, r0, #0
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	1c0a      	adds	r2, r1, #0
 800458a:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  uint32_t data_length = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  uint16_t height = 0;
 8004594:	210e      	movs	r1, #14
 8004596:	187b      	adds	r3, r7, r1
 8004598:	2200      	movs	r2, #0
 800459a:	801a      	strh	r2, [r3, #0]
  uint16_t width = 0;
 800459c:	200c      	movs	r0, #12
 800459e:	183b      	adds	r3, r7, r0
 80045a0:	2200      	movs	r2, #0
 80045a2:	801a      	strh	r2, [r3, #0]

  width  = pFont->Width;
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <DrawChar+0xb4>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	8892      	ldrh	r2, [r2, #4]
 80045ac:	801a      	strh	r2, [r3, #0]
  height = pFont->Height;
 80045ae:	4b1f      	ldr	r3, [pc, #124]	; (800462c <DrawChar+0xb4>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	88d2      	ldrh	r2, [r2, #6]
 80045b6:	801a      	strh	r2, [r3, #0]
  
  /* Set the Character display window */
  epd_drv->SetDisplayWindow(Xpos, Ypos, (Xpos + width - 1), (Ypos + height - 1));
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <DrawChar+0xb8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689c      	ldr	r4, [r3, #8]
 80045be:	1dba      	adds	r2, r7, #6
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	8812      	ldrh	r2, [r2, #0]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	18d3      	adds	r3, r2, r3
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29d      	uxth	r5, r3
 80045ce:	1d3a      	adds	r2, r7, #4
 80045d0:	000e      	movs	r6, r1
 80045d2:	187b      	adds	r3, r7, r1
 80045d4:	8812      	ldrh	r2, [r2, #0]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	18d3      	adds	r3, r2, r3
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	8819      	ldrh	r1, [r3, #0]
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	8818      	ldrh	r0, [r3, #0]
 80045e8:	0013      	movs	r3, r2
 80045ea:	002a      	movs	r2, r5
 80045ec:	47a0      	blx	r4
  
  data_length = (height * width);
 80045ee:	19bb      	adds	r3, r7, r6
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	200c      	movs	r0, #12
 80045f4:	183a      	adds	r2, r7, r0
 80045f6:	8812      	ldrh	r2, [r2, #0]
 80045f8:	4353      	muls	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    
  for(index = 0; index < data_length; index++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e00b      	b.n	800461a <DrawChar+0xa2>
  {
    epd_drv->WritePixel(c[index]);
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <DrawChar+0xb8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	188a      	adds	r2, r1, r2
 800460e:	7812      	ldrb	r2, [r2, #0]
 8004610:	0010      	movs	r0, r2
 8004612:	4798      	blx	r3
  for(index = 0; index < data_length; index++)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3301      	adds	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	429a      	cmp	r2, r3
 8004620:	d3ef      	bcc.n	8004602 <DrawChar+0x8a>
  }
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b007      	add	sp, #28
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462c:	200002d8 	.word	0x200002d8
 8004630:	200002dc 	.word	0x200002dc

08004634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <HAL_MspInit+0x24>)
 800463a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_MspInit+0x24>)
 800463e:	2101      	movs	r1, #1
 8004640:	430a      	orrs	r2, r1
 8004642:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <HAL_MspInit+0x24>)
 8004646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <HAL_MspInit+0x24>)
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	0549      	lsls	r1, r1, #21
 800464e:	430a      	orrs	r2, r1
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000

0800465c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	05db      	lsls	r3, r3, #23
 800466c:	429a      	cmp	r2, r3
 800466e:	d10d      	bne.n	800468c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_TIM_Base_MspInit+0x38>)
 8004672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <HAL_TIM_Base_MspInit+0x38>)
 8004676:	2101      	movs	r1, #1
 8004678:	430a      	orrs	r2, r1
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	2100      	movs	r1, #0
 8004680:	200f      	movs	r0, #15
 8004682:	f000 fa5b 	bl	8004b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004686:	200f      	movs	r0, #15
 8004688:	f000 fa6d 	bl	8004b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000

08004698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800469c:	e7fe      	b.n	800469c <NMI_Handler+0x4>

0800469e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046a2:	e7fe      	b.n	80046a2 <HardFault_Handler+0x4>

080046a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046bc:	f000 f952 	bl	8004964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <TIM2_IRQHandler+0x14>)
 80046ce:	0018      	movs	r0, r3
 80046d0:	f001 fa54 	bl	8005b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	20000240 	.word	0x20000240

080046e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  return 1;
 80046e4:	2301      	movs	r3, #1
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_kill>:

int _kill(int pid, int sig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046f6:	f001 fd63 	bl	80061c0 <__errno>
 80046fa:	0003      	movs	r3, r0
 80046fc:	2216      	movs	r2, #22
 80046fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004700:	2301      	movs	r3, #1
 8004702:	425b      	negs	r3, r3
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <_exit>:

void _exit (int status)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004714:	2301      	movs	r3, #1
 8004716:	425a      	negs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0011      	movs	r1, r2
 800471c:	0018      	movs	r0, r3
 800471e:	f7ff ffe5 	bl	80046ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8004722:	e7fe      	b.n	8004722 <_exit+0x16>

08004724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e00a      	b.n	800474c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004736:	e000      	b.n	800473a <_read+0x16>
 8004738:	bf00      	nop
 800473a:	0001      	movs	r1, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	60ba      	str	r2, [r7, #8]
 8004742:	b2ca      	uxtb	r2, r1
 8004744:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	3301      	adds	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	dbf0      	blt.n	8004736 <_read+0x12>
  }

  return len;
 8004754:	687b      	ldr	r3, [r7, #4]
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b006      	add	sp, #24
 800475c:	bd80      	pop	{r7, pc}

0800475e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e009      	b.n	8004784 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	60ba      	str	r2, [r7, #8]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	0018      	movs	r0, r3
 800477a:	e000      	b.n	800477e <_write+0x20>
 800477c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3301      	adds	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	dbf1      	blt.n	8004770 <_write+0x12>
  }
  return len;
 800478c:	687b      	ldr	r3, [r7, #4]
}
 800478e:	0018      	movs	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	b006      	add	sp, #24
 8004794:	bd80      	pop	{r7, pc}

08004796 <_close>:

int _close(int file)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800479e:	2301      	movs	r3, #1
 80047a0:	425b      	negs	r3, r3
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2280      	movs	r2, #128	; 0x80
 80047b8:	0192      	lsls	r2, r2, #6
 80047ba:	605a      	str	r2, [r3, #4]
  return 0;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b002      	add	sp, #8
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <_isatty>:

int _isatty(int file)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b004      	add	sp, #16
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <_sbrk+0x5c>)
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <_sbrk+0x60>)
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004804:	4b13      	ldr	r3, [pc, #76]	; (8004854 <_sbrk+0x64>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <_sbrk+0x64>)
 800480e:	4a12      	ldr	r2, [pc, #72]	; (8004858 <_sbrk+0x68>)
 8004810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <_sbrk+0x64>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	18d3      	adds	r3, r2, r3
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d207      	bcs.n	8004830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004820:	f001 fcce 	bl	80061c0 <__errno>
 8004824:	0003      	movs	r3, r0
 8004826:	220c      	movs	r2, #12
 8004828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800482a:	2301      	movs	r3, #1
 800482c:	425b      	negs	r3, r3
 800482e:	e009      	b.n	8004844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <_sbrk+0x64>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004836:	4b07      	ldr	r3, [pc, #28]	; (8004854 <_sbrk+0x64>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	18d2      	adds	r2, r2, r3
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <_sbrk+0x64>)
 8004840:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004842:	68fb      	ldr	r3, [r7, #12]
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b006      	add	sp, #24
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20002000 	.word	0x20002000
 8004850:	00000400 	.word	0x00000400
 8004854:	200002e0 	.word	0x200002e0
 8004858:	200002f8 	.word	0x200002f8

0800485c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8004868:	480d      	ldr	r0, [pc, #52]	; (80048a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800486a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800486c:	f7ff fff6 	bl	800485c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004870:	480c      	ldr	r0, [pc, #48]	; (80048a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004872:	490d      	ldr	r1, [pc, #52]	; (80048a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <LoopForever+0xe>)
  movs r3, #0
 8004876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004878:	e002      	b.n	8004880 <LoopCopyDataInit>

0800487a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800487a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800487c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800487e:	3304      	adds	r3, #4

08004880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004884:	d3f9      	bcc.n	800487a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004888:	4c0a      	ldr	r4, [pc, #40]	; (80048b4 <LoopForever+0x16>)
  movs r3, #0
 800488a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800488c:	e001      	b.n	8004892 <LoopFillZerobss>

0800488e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800488e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004890:	3204      	adds	r2, #4

08004892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004894:	d3fb      	bcc.n	800488e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004896:	f001 fc99 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800489a:	f7ff f9e9 	bl	8003c70 <main>

0800489e <LoopForever>:

LoopForever:
    b LoopForever
 800489e:	e7fe      	b.n	800489e <LoopForever>
  ldr   r0, =_estack
 80048a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80048a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048a8:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80048ac:	0800d19c 	.word	0x0800d19c
  ldr r2, =_sbss
 80048b0:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80048b4:	200002f8 	.word	0x200002f8

080048b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048b8:	e7fe      	b.n	80048b8 <ADC1_COMP_IRQHandler>
	...

080048bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048c2:	1dfb      	adds	r3, r7, #7
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_Init+0x3c>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_Init+0x3c>)
 80048ce:	2140      	movs	r1, #64	; 0x40
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048d4:	2000      	movs	r0, #0
 80048d6:	f000 f811 	bl	80048fc <HAL_InitTick>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80048de:	1dfb      	adds	r3, r7, #7
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e001      	b.n	80048ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048e6:	f7ff fea5 	bl	8004634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	781b      	ldrb	r3, [r3, #0]
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	40022000 	.word	0x40022000

080048fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004904:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_InitTick+0x5c>)
 8004906:	681c      	ldr	r4, [r3, #0]
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <HAL_InitTick+0x60>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	0019      	movs	r1, r3
 800490e:	23fa      	movs	r3, #250	; 0xfa
 8004910:	0098      	lsls	r0, r3, #2
 8004912:	f7fb fc15 	bl	8000140 <__udivsi3>
 8004916:	0003      	movs	r3, r0
 8004918:	0019      	movs	r1, r3
 800491a:	0020      	movs	r0, r4
 800491c:	f7fb fc10 	bl	8000140 <__udivsi3>
 8004920:	0003      	movs	r3, r0
 8004922:	0018      	movs	r0, r3
 8004924:	f000 f92f 	bl	8004b86 <HAL_SYSTICK_Config>
 8004928:	1e03      	subs	r3, r0, #0
 800492a:	d001      	beq.n	8004930 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e00f      	b.n	8004950 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d80b      	bhi.n	800494e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	2301      	movs	r3, #1
 800493a:	425b      	negs	r3, r3
 800493c:	2200      	movs	r2, #0
 800493e:	0018      	movs	r0, r3
 8004940:	f000 f8fc 	bl	8004b3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_InitTick+0x64>)
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b003      	add	sp, #12
 8004956:	bd90      	pop	{r4, r7, pc}
 8004958:	20000044 	.word	0x20000044
 800495c:	2000004c 	.word	0x2000004c
 8004960:	20000048 	.word	0x20000048

08004964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_IncTick+0x1c>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	001a      	movs	r2, r3
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_IncTick+0x20>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	18d2      	adds	r2, r2, r3
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_IncTick+0x20>)
 8004976:	601a      	str	r2, [r3, #0]
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	2000004c 	.word	0x2000004c
 8004984:	200002e4 	.word	0x200002e4

08004988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  return uwTick;
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <HAL_GetTick+0x10>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	200002e4 	.word	0x200002e4

0800499c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049a4:	f7ff fff0 	bl	8004988 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	d005      	beq.n	80049c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_Delay+0x44>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	001a      	movs	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	f7ff ffe0 	bl	8004988 <HAL_GetTick>
 80049c8:	0002      	movs	r2, r0
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d8f7      	bhi.n	80049c4 <HAL_Delay+0x28>
  {
  }
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	2000004c 	.word	0x2000004c

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	0002      	movs	r2, r0
 80049ec:	1dfb      	adds	r3, r7, #7
 80049ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b7f      	cmp	r3, #127	; 0x7f
 80049f6:	d809      	bhi.n	8004a0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	001a      	movs	r2, r3
 80049fe:	231f      	movs	r3, #31
 8004a00:	401a      	ands	r2, r3
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <__NVIC_EnableIRQ+0x30>)
 8004a04:	2101      	movs	r1, #1
 8004a06:	4091      	lsls	r1, r2
 8004a08:	000a      	movs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
  }
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	0002      	movs	r2, r0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a26:	1dfb      	adds	r3, r7, #7
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2c:	d828      	bhi.n	8004a80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a2e:	4a2f      	ldr	r2, [pc, #188]	; (8004aec <__NVIC_SetPriority+0xd4>)
 8004a30:	1dfb      	adds	r3, r7, #7
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b25b      	sxtb	r3, r3
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	33c0      	adds	r3, #192	; 0xc0
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	589b      	ldr	r3, [r3, r2]
 8004a3e:	1dfa      	adds	r2, r7, #7
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	0011      	movs	r1, r2
 8004a44:	2203      	movs	r2, #3
 8004a46:	400a      	ands	r2, r1
 8004a48:	00d2      	lsls	r2, r2, #3
 8004a4a:	21ff      	movs	r1, #255	; 0xff
 8004a4c:	4091      	lsls	r1, r2
 8004a4e:	000a      	movs	r2, r1
 8004a50:	43d2      	mvns	r2, r2
 8004a52:	401a      	ands	r2, r3
 8004a54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	22ff      	movs	r2, #255	; 0xff
 8004a5c:	401a      	ands	r2, r3
 8004a5e:	1dfb      	adds	r3, r7, #7
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	0018      	movs	r0, r3
 8004a64:	2303      	movs	r3, #3
 8004a66:	4003      	ands	r3, r0
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a6c:	481f      	ldr	r0, [pc, #124]	; (8004aec <__NVIC_SetPriority+0xd4>)
 8004a6e:	1dfb      	adds	r3, r7, #7
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b25b      	sxtb	r3, r3
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	430a      	orrs	r2, r1
 8004a78:	33c0      	adds	r3, #192	; 0xc0
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a7e:	e031      	b.n	8004ae4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a80:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <__NVIC_SetPriority+0xd8>)
 8004a82:	1dfb      	adds	r3, r7, #7
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	0019      	movs	r1, r3
 8004a88:	230f      	movs	r3, #15
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	3b08      	subs	r3, #8
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	3306      	adds	r3, #6
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	18d3      	adds	r3, r2, r3
 8004a96:	3304      	adds	r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	1dfa      	adds	r2, r7, #7
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	0011      	movs	r1, r2
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	00d2      	lsls	r2, r2, #3
 8004aa6:	21ff      	movs	r1, #255	; 0xff
 8004aa8:	4091      	lsls	r1, r2
 8004aaa:	000a      	movs	r2, r1
 8004aac:	43d2      	mvns	r2, r2
 8004aae:	401a      	ands	r2, r3
 8004ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	401a      	ands	r2, r3
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	0018      	movs	r0, r3
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	4003      	ands	r3, r0
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac8:	4809      	ldr	r0, [pc, #36]	; (8004af0 <__NVIC_SetPriority+0xd8>)
 8004aca:	1dfb      	adds	r3, r7, #7
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	001c      	movs	r4, r3
 8004ad0:	230f      	movs	r3, #15
 8004ad2:	4023      	ands	r3, r4
 8004ad4:	3b08      	subs	r3, #8
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	3306      	adds	r3, #6
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	18c3      	adds	r3, r0, r3
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b003      	add	sp, #12
 8004aea:	bd90      	pop	{r4, r7, pc}
 8004aec:	e000e100 	.word	0xe000e100
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	045b      	lsls	r3, r3, #17
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d301      	bcc.n	8004b0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e010      	b.n	8004b2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <SysTick_Config+0x44>)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	3a01      	subs	r2, #1
 8004b12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b14:	2301      	movs	r3, #1
 8004b16:	425b      	negs	r3, r3
 8004b18:	2103      	movs	r1, #3
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7ff ff7c 	bl	8004a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <SysTick_Config+0x44>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SysTick_Config+0x44>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	0018      	movs	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b002      	add	sp, #8
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	e000e010 	.word	0xe000e010

08004b3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	210f      	movs	r1, #15
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	1c02      	adds	r2, r0, #0
 8004b4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff ff5d 	bl	8004a18 <__NVIC_SetPriority>
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b004      	add	sp, #16
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	1dfb      	adds	r3, r7, #7
 8004b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b72:	1dfb      	adds	r3, r7, #7
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7ff ff33 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b002      	add	sp, #8
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7ff ffaf 	bl	8004af4 <SysTick_Config>
 8004b96:	0003      	movs	r3, r0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004bb6:	e14f      	b.n	8004e58 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4091      	lsls	r1, r2
 8004bc2:	000a      	movs	r2, r1
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d100      	bne.n	8004bd0 <HAL_GPIO_Init+0x30>
 8004bce:	e140      	b.n	8004e52 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d005      	beq.n	8004be8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d130      	bne.n	8004c4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	0013      	movs	r3, r2
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	0013      	movs	r3, r2
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c1e:	2201      	movs	r2, #1
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	43da      	mvns	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	2201      	movs	r2, #1
 8004c36:	401a      	ands	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d017      	beq.n	8004c86 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2203      	movs	r2, #3
 8004c62:	409a      	lsls	r2, r3
 8004c64:	0013      	movs	r3, r2
 8004c66:	43da      	mvns	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	0013      	movs	r3, r2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d123      	bne.n	8004cda <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	08da      	lsrs	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3208      	adds	r2, #8
 8004c9a:	0092      	lsls	r2, r2, #2
 8004c9c:	58d3      	ldr	r3, [r2, r3]
 8004c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	220f      	movs	r2, #15
 8004caa:	409a      	lsls	r2, r3
 8004cac:	0013      	movs	r3, r2
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2107      	movs	r1, #7
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	0013      	movs	r3, r2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	08da      	lsrs	r2, r3, #3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3208      	adds	r2, #8
 8004cd4:	0092      	lsls	r2, r2, #2
 8004cd6:	6939      	ldr	r1, [r7, #16]
 8004cd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	0013      	movs	r3, r2
 8004cea:	43da      	mvns	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	0013      	movs	r3, r2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	23c0      	movs	r3, #192	; 0xc0
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	4013      	ands	r3, r2
 8004d18:	d100      	bne.n	8004d1c <HAL_GPIO_Init+0x17c>
 8004d1a:	e09a      	b.n	8004e52 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1c:	4b54      	ldr	r3, [pc, #336]	; (8004e70 <HAL_GPIO_Init+0x2d0>)
 8004d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d20:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <HAL_GPIO_Init+0x2d0>)
 8004d22:	2101      	movs	r1, #1
 8004d24:	430a      	orrs	r2, r1
 8004d26:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d28:	4a52      	ldr	r2, [pc, #328]	; (8004e74 <HAL_GPIO_Init+0x2d4>)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3302      	adds	r3, #2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	589b      	ldr	r3, [r3, r2]
 8004d34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	220f      	movs	r2, #15
 8004d40:	409a      	lsls	r2, r3
 8004d42:	0013      	movs	r3, r2
 8004d44:	43da      	mvns	r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	23a0      	movs	r3, #160	; 0xa0
 8004d50:	05db      	lsls	r3, r3, #23
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d019      	beq.n	8004d8a <HAL_GPIO_Init+0x1ea>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a47      	ldr	r2, [pc, #284]	; (8004e78 <HAL_GPIO_Init+0x2d8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_GPIO_Init+0x1e6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a46      	ldr	r2, [pc, #280]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00d      	beq.n	8004d82 <HAL_GPIO_Init+0x1e2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a45      	ldr	r2, [pc, #276]	; (8004e80 <HAL_GPIO_Init+0x2e0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <HAL_GPIO_Init+0x1de>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a44      	ldr	r2, [pc, #272]	; (8004e84 <HAL_GPIO_Init+0x2e4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d101      	bne.n	8004d7a <HAL_GPIO_Init+0x1da>
 8004d76:	2305      	movs	r3, #5
 8004d78:	e008      	b.n	8004d8c <HAL_GPIO_Init+0x1ec>
 8004d7a:	2306      	movs	r3, #6
 8004d7c:	e006      	b.n	8004d8c <HAL_GPIO_Init+0x1ec>
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e004      	b.n	8004d8c <HAL_GPIO_Init+0x1ec>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e002      	b.n	8004d8c <HAL_GPIO_Init+0x1ec>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_GPIO_Init+0x1ec>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	2103      	movs	r1, #3
 8004d90:	400a      	ands	r2, r1
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	4093      	lsls	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d9c:	4935      	ldr	r1, [pc, #212]	; (8004e74 <HAL_GPIO_Init+0x2d4>)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	3302      	adds	r3, #2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004daa:	4b37      	ldr	r3, [pc, #220]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	43da      	mvns	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	035b      	lsls	r3, r3, #13
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004dce:	4b2e      	ldr	r3, [pc, #184]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	43da      	mvns	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	039b      	lsls	r3, r3, #14
 8004dec:	4013      	ands	r3, r2
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	43da      	mvns	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	4013      	ands	r3, r2
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e28:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	43da      	mvns	r2, r3
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	025b      	lsls	r3, r3, #9
 8004e40:	4013      	ands	r3, r2
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <HAL_GPIO_Init+0x2e8>)
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	40da      	lsrs	r2, r3
 8004e60:	1e13      	subs	r3, r2, #0
 8004e62:	d000      	beq.n	8004e66 <HAL_GPIO_Init+0x2c6>
 8004e64:	e6a8      	b.n	8004bb8 <HAL_GPIO_Init+0x18>
  }
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b006      	add	sp, #24
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40010000 	.word	0x40010000
 8004e78:	50000400 	.word	0x50000400
 8004e7c:	50000800 	.word	0x50000800
 8004e80:	50000c00 	.word	0x50000c00
 8004e84:	50001c00 	.word	0x50001c00
 8004e88:	40010400 	.word	0x40010400

08004e8c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	000a      	movs	r2, r1
 8004e96:	1cbb      	adds	r3, r7, #2
 8004e98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	1cba      	adds	r2, r7, #2
 8004ea0:	8812      	ldrh	r2, [r2, #0]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004ea6:	230f      	movs	r3, #15
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e003      	b.n	8004eb8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	781b      	ldrb	r3, [r3, #0]
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	0008      	movs	r0, r1
 8004ed0:	0011      	movs	r1, r2
 8004ed2:	1cbb      	adds	r3, r7, #2
 8004ed4:	1c02      	adds	r2, r0, #0
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	1c7b      	adds	r3, r7, #1
 8004eda:	1c0a      	adds	r2, r1, #0
 8004edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ede:	1c7b      	adds	r3, r7, #1
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ee6:	1cbb      	adds	r3, r7, #2
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004eee:	e003      	b.n	8004ef8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004ef0:	1cbb      	adds	r3, r7, #2
 8004ef2:	881a      	ldrh	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f000 fbaf 	bl	8005672 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f14:	4bcf      	ldr	r3, [pc, #828]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	220c      	movs	r2, #12
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f1e:	4bcd      	ldr	r3, [pc, #820]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	4013      	ands	r3, r2
 8004f28:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4013      	ands	r3, r2
 8004f32:	d100      	bne.n	8004f36 <HAL_RCC_OscConfig+0x36>
 8004f34:	e07e      	b.n	8005034 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d007      	beq.n	8004f4c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d112      	bne.n	8004f68 <HAL_RCC_OscConfig+0x68>
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	025b      	lsls	r3, r3, #9
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d10d      	bne.n	8004f68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	4bc1      	ldr	r3, [pc, #772]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	4013      	ands	r3, r2
 8004f56:	d100      	bne.n	8004f5a <HAL_RCC_OscConfig+0x5a>
 8004f58:	e06b      	b.n	8005032 <HAL_RCC_OscConfig+0x132>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d167      	bne.n	8005032 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f000 fb85 	bl	8005672 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	025b      	lsls	r3, r3, #9
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_OscConfig+0x84>
 8004f74:	4bb7      	ldr	r3, [pc, #732]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4bb6      	ldr	r3, [pc, #728]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	0249      	lsls	r1, r1, #9
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e027      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	23a0      	movs	r3, #160	; 0xa0
 8004f8a:	02db      	lsls	r3, r3, #11
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d10e      	bne.n	8004fae <HAL_RCC_OscConfig+0xae>
 8004f90:	4bb0      	ldr	r3, [pc, #704]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4baf      	ldr	r3, [pc, #700]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	02c9      	lsls	r1, r1, #11
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	4bad      	ldr	r3, [pc, #692]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4bac      	ldr	r3, [pc, #688]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fa4:	2180      	movs	r1, #128	; 0x80
 8004fa6:	0249      	lsls	r1, r1, #9
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e012      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004fae:	4ba9      	ldr	r3, [pc, #676]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4ba8      	ldr	r3, [pc, #672]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fb4:	49a8      	ldr	r1, [pc, #672]	; (8005258 <HAL_RCC_OscConfig+0x358>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	4ba6      	ldr	r3, [pc, #664]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	025b      	lsls	r3, r3, #9
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4ba2      	ldr	r3, [pc, #648]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4ba1      	ldr	r3, [pc, #644]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004fce:	49a3      	ldr	r1, [pc, #652]	; (800525c <HAL_RCC_OscConfig+0x35c>)
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d015      	beq.n	8005008 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7ff fcd4 	bl	8004988 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fe4:	e009      	b.n	8004ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe6:	f7ff fccf 	bl	8004988 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d902      	bls.n	8004ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	f000 fb3c 	bl	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ffa:	4b96      	ldr	r3, [pc, #600]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	4013      	ands	r3, r2
 8005004:	d0ef      	beq.n	8004fe6 <HAL_RCC_OscConfig+0xe6>
 8005006:	e015      	b.n	8005034 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7ff fcbe 	bl	8004988 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005012:	f7ff fcb9 	bl	8004988 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e326      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005024:	4b8b      	ldr	r3, [pc, #556]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	029b      	lsls	r3, r3, #10
 800502c:	4013      	ands	r3, r2
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x112>
 8005030:	e000      	b.n	8005034 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005032:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2202      	movs	r2, #2
 800503a:	4013      	ands	r3, r2
 800503c:	d100      	bne.n	8005040 <HAL_RCC_OscConfig+0x140>
 800503e:	e08b      	b.n	8005158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d005      	beq.n	8005058 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d13e      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1d0>
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d13b      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005058:	4b7e      	ldr	r3, [pc, #504]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2204      	movs	r2, #4
 800505e:	4013      	ands	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_RCC_OscConfig+0x16c>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e302      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506c:	4b79      	ldr	r3, [pc, #484]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a7b      	ldr	r2, [pc, #492]	; (8005260 <HAL_RCC_OscConfig+0x360>)
 8005072:	4013      	ands	r3, r2
 8005074:	0019      	movs	r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	4b75      	ldr	r3, [pc, #468]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005082:	4b74      	ldr	r3, [pc, #464]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2209      	movs	r2, #9
 8005088:	4393      	bics	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	4b71      	ldr	r3, [pc, #452]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	430a      	orrs	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005094:	f000 fc40 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8005098:	0001      	movs	r1, r0
 800509a:	4b6e      	ldr	r3, [pc, #440]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	220f      	movs	r2, #15
 80050a2:	4013      	ands	r3, r2
 80050a4:	4a6f      	ldr	r2, [pc, #444]	; (8005264 <HAL_RCC_OscConfig+0x364>)
 80050a6:	5cd3      	ldrb	r3, [r2, r3]
 80050a8:	000a      	movs	r2, r1
 80050aa:	40da      	lsrs	r2, r3
 80050ac:	4b6e      	ldr	r3, [pc, #440]	; (8005268 <HAL_RCC_OscConfig+0x368>)
 80050ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80050b0:	4b6e      	ldr	r3, [pc, #440]	; (800526c <HAL_RCC_OscConfig+0x36c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2513      	movs	r5, #19
 80050b6:	197c      	adds	r4, r7, r5
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7ff fc1f 	bl	80048fc <HAL_InitTick>
 80050be:	0003      	movs	r3, r0
 80050c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80050c2:	197b      	adds	r3, r7, r5
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d046      	beq.n	8005158 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80050ca:	197b      	adds	r3, r7, r5
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	e2d0      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d027      	beq.n	8005126 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80050d6:	4b5f      	ldr	r3, [pc, #380]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2209      	movs	r2, #9
 80050dc:	4393      	bics	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	4b5c      	ldr	r3, [pc, #368]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7ff fc4e 	bl	8004988 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f2:	f7ff fc49 	bl	8004988 <HAL_GetTick>
 80050f6:	0002      	movs	r2, r0
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e2b6      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005104:	4b53      	ldr	r3, [pc, #332]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2204      	movs	r2, #4
 800510a:	4013      	ands	r3, r2
 800510c:	d0f1      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b51      	ldr	r3, [pc, #324]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4a53      	ldr	r2, [pc, #332]	; (8005260 <HAL_RCC_OscConfig+0x360>)
 8005114:	4013      	ands	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	021a      	lsls	r2, r3, #8
 800511e:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	e018      	b.n	8005158 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005126:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b4a      	ldr	r3, [pc, #296]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800512c:	2101      	movs	r1, #1
 800512e:	438a      	bics	r2, r1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7ff fc29 	bl	8004988 <HAL_GetTick>
 8005136:	0003      	movs	r3, r0
 8005138:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513c:	f7ff fc24 	bl	8004988 <HAL_GetTick>
 8005140:	0002      	movs	r2, r0
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e291      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2204      	movs	r2, #4
 8005154:	4013      	ands	r3, r2
 8005156:	d1f1      	bne.n	800513c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2210      	movs	r2, #16
 800515e:	4013      	ands	r3, r2
 8005160:	d100      	bne.n	8005164 <HAL_RCC_OscConfig+0x264>
 8005162:	e0a1      	b.n	80052a8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d140      	bne.n	80051ec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800516a:	4b3a      	ldr	r3, [pc, #232]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4013      	ands	r3, r2
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x282>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e277      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005182:	4b34      	ldr	r3, [pc, #208]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4a3a      	ldr	r2, [pc, #232]	; (8005270 <HAL_RCC_OscConfig+0x370>)
 8005188:	4013      	ands	r3, r2
 800518a:	0019      	movs	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005190:	4b30      	ldr	r3, [pc, #192]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	0a19      	lsrs	r1, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	061a      	lsls	r2, r3, #24
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	3301      	adds	r3, #1
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	0212      	lsls	r2, r2, #8
 80051b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80051b8:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	210f      	movs	r1, #15
 80051c0:	400b      	ands	r3, r1
 80051c2:	4928      	ldr	r1, [pc, #160]	; (8005264 <HAL_RCC_OscConfig+0x364>)
 80051c4:	5ccb      	ldrb	r3, [r1, r3]
 80051c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_RCC_OscConfig+0x368>)
 80051ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RCC_OscConfig+0x36c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2513      	movs	r5, #19
 80051d2:	197c      	adds	r4, r7, r5
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff fb91 	bl	80048fc <HAL_InitTick>
 80051da:	0003      	movs	r3, r0
 80051dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80051de:	197b      	adds	r3, r7, r5
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d060      	beq.n	80052a8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80051e6:	197b      	adds	r3, r7, r5
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	e242      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d03f      	beq.n	8005274 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051f4:	4b17      	ldr	r3, [pc, #92]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b16      	ldr	r3, [pc, #88]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 80051fa:	2180      	movs	r1, #128	; 0x80
 80051fc:	0049      	lsls	r1, r1, #1
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7ff fbc1 	bl	8004988 <HAL_GetTick>
 8005206:	0003      	movs	r3, r0
 8005208:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800520c:	f7ff fbbc 	bl	8004988 <HAL_GetTick>
 8005210:	0002      	movs	r2, r0
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e229      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4013      	ands	r3, r2
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4a10      	ldr	r2, [pc, #64]	; (8005270 <HAL_RCC_OscConfig+0x370>)
 8005230:	4013      	ands	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	0a19      	lsrs	r1, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	061a      	lsls	r2, r3, #24
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <HAL_RCC_OscConfig+0x354>)
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e029      	b.n	80052a8 <HAL_RCC_OscConfig+0x3a8>
 8005254:	40021000 	.word	0x40021000
 8005258:	fffeffff 	.word	0xfffeffff
 800525c:	fffbffff 	.word	0xfffbffff
 8005260:	ffffe0ff 	.word	0xffffe0ff
 8005264:	0800cccc 	.word	0x0800cccc
 8005268:	20000044 	.word	0x20000044
 800526c:	20000048 	.word	0x20000048
 8005270:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005274:	4bbd      	ldr	r3, [pc, #756]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4bbc      	ldr	r3, [pc, #752]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 800527a:	49bd      	ldr	r1, [pc, #756]	; (8005570 <HAL_RCC_OscConfig+0x670>)
 800527c:	400a      	ands	r2, r1
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7ff fb82 	bl	8004988 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800528a:	f7ff fb7d 	bl	8004988 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e1ea      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800529c:	4bb3      	ldr	r3, [pc, #716]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4013      	ands	r3, r2
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2208      	movs	r2, #8
 80052ae:	4013      	ands	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d019      	beq.n	80052ee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	4bac      	ldr	r3, [pc, #688]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80052bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052be:	4bab      	ldr	r3, [pc, #684]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80052c0:	2101      	movs	r1, #1
 80052c2:	430a      	orrs	r2, r1
 80052c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7ff fb5f 	bl	8004988 <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d0:	f7ff fb5a 	bl	8004988 <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e1c7      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052e2:	4ba2      	ldr	r3, [pc, #648]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	2202      	movs	r2, #2
 80052e8:	4013      	ands	r3, r2
 80052ea:	d0f1      	beq.n	80052d0 <HAL_RCC_OscConfig+0x3d0>
 80052ec:	e018      	b.n	8005320 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ee:	4b9f      	ldr	r3, [pc, #636]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80052f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052f2:	4b9e      	ldr	r3, [pc, #632]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80052f4:	2101      	movs	r1, #1
 80052f6:	438a      	bics	r2, r1
 80052f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fa:	f7ff fb45 	bl	8004988 <HAL_GetTick>
 80052fe:	0003      	movs	r3, r0
 8005300:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005304:	f7ff fb40 	bl	8004988 <HAL_GetTick>
 8005308:	0002      	movs	r2, r0
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e1ad      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005316:	4b95      	ldr	r3, [pc, #596]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531a:	2202      	movs	r2, #2
 800531c:	4013      	ands	r3, r2
 800531e:	d1f1      	bne.n	8005304 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2204      	movs	r2, #4
 8005326:	4013      	ands	r3, r2
 8005328:	d100      	bne.n	800532c <HAL_RCC_OscConfig+0x42c>
 800532a:	e0ae      	b.n	800548a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532c:	2027      	movs	r0, #39	; 0x27
 800532e:	183b      	adds	r3, r7, r0
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005334:	4b8d      	ldr	r3, [pc, #564]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	055b      	lsls	r3, r3, #21
 800533c:	4013      	ands	r3, r2
 800533e:	d109      	bne.n	8005354 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005340:	4b8a      	ldr	r3, [pc, #552]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005344:	4b89      	ldr	r3, [pc, #548]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	0549      	lsls	r1, r1, #21
 800534a:	430a      	orrs	r2, r1
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800534e:	183b      	adds	r3, r7, r0
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	4b87      	ldr	r3, [pc, #540]	; (8005574 <HAL_RCC_OscConfig+0x674>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4013      	ands	r3, r2
 800535e:	d11a      	bne.n	8005396 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005360:	4b84      	ldr	r3, [pc, #528]	; (8005574 <HAL_RCC_OscConfig+0x674>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b83      	ldr	r3, [pc, #524]	; (8005574 <HAL_RCC_OscConfig+0x674>)
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	0049      	lsls	r1, r1, #1
 800536a:	430a      	orrs	r2, r1
 800536c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536e:	f7ff fb0b 	bl	8004988 <HAL_GetTick>
 8005372:	0003      	movs	r3, r0
 8005374:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005378:	f7ff fb06 	bl	8004988 <HAL_GetTick>
 800537c:	0002      	movs	r2, r0
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e173      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b7a      	ldr	r3, [pc, #488]	; (8005574 <HAL_RCC_OscConfig+0x674>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4013      	ands	r3, r2
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	429a      	cmp	r2, r3
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4b2>
 80053a2:	4b72      	ldr	r3, [pc, #456]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a6:	4b71      	ldr	r3, [pc, #452]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	0049      	lsls	r1, r1, #1
 80053ac:	430a      	orrs	r2, r1
 80053ae:	651a      	str	r2, [r3, #80]	; 0x50
 80053b0:	e031      	b.n	8005416 <HAL_RCC_OscConfig+0x516>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x4d4>
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053be:	4b6b      	ldr	r3, [pc, #428]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053c0:	496b      	ldr	r1, [pc, #428]	; (8005570 <HAL_RCC_OscConfig+0x670>)
 80053c2:	400a      	ands	r2, r1
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50
 80053c6:	4b69      	ldr	r3, [pc, #420]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ca:	4b68      	ldr	r3, [pc, #416]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053cc:	496a      	ldr	r1, [pc, #424]	; (8005578 <HAL_RCC_OscConfig+0x678>)
 80053ce:	400a      	ands	r2, r1
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50
 80053d2:	e020      	b.n	8005416 <HAL_RCC_OscConfig+0x516>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	23a0      	movs	r3, #160	; 0xa0
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	429a      	cmp	r2, r3
 80053de:	d10e      	bne.n	80053fe <HAL_RCC_OscConfig+0x4fe>
 80053e0:	4b62      	ldr	r3, [pc, #392]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e4:	4b61      	ldr	r3, [pc, #388]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053e6:	2180      	movs	r1, #128	; 0x80
 80053e8:	00c9      	lsls	r1, r1, #3
 80053ea:	430a      	orrs	r2, r1
 80053ec:	651a      	str	r2, [r3, #80]	; 0x50
 80053ee:	4b5f      	ldr	r3, [pc, #380]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053f2:	4b5e      	ldr	r3, [pc, #376]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80053f4:	2180      	movs	r1, #128	; 0x80
 80053f6:	0049      	lsls	r1, r1, #1
 80053f8:	430a      	orrs	r2, r1
 80053fa:	651a      	str	r2, [r3, #80]	; 0x50
 80053fc:	e00b      	b.n	8005416 <HAL_RCC_OscConfig+0x516>
 80053fe:	4b5b      	ldr	r3, [pc, #364]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005402:	4b5a      	ldr	r3, [pc, #360]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005404:	495a      	ldr	r1, [pc, #360]	; (8005570 <HAL_RCC_OscConfig+0x670>)
 8005406:	400a      	ands	r2, r1
 8005408:	651a      	str	r2, [r3, #80]	; 0x50
 800540a:	4b58      	ldr	r3, [pc, #352]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 800540c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800540e:	4b57      	ldr	r3, [pc, #348]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005410:	4959      	ldr	r1, [pc, #356]	; (8005578 <HAL_RCC_OscConfig+0x678>)
 8005412:	400a      	ands	r2, r1
 8005414:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d015      	beq.n	800544a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541e:	f7ff fab3 	bl	8004988 <HAL_GetTick>
 8005422:	0003      	movs	r3, r0
 8005424:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005426:	e009      	b.n	800543c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7ff faae 	bl	8004988 <HAL_GetTick>
 800542c:	0002      	movs	r2, r0
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a52      	ldr	r2, [pc, #328]	; (800557c <HAL_RCC_OscConfig+0x67c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e11a      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800543c:	4b4b      	ldr	r3, [pc, #300]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 800543e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4013      	ands	r3, r2
 8005446:	d0ef      	beq.n	8005428 <HAL_RCC_OscConfig+0x528>
 8005448:	e014      	b.n	8005474 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544a:	f7ff fa9d 	bl	8004988 <HAL_GetTick>
 800544e:	0003      	movs	r3, r0
 8005450:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005452:	e009      	b.n	8005468 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005454:	f7ff fa98 	bl	8004988 <HAL_GetTick>
 8005458:	0002      	movs	r2, r0
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	4a47      	ldr	r2, [pc, #284]	; (800557c <HAL_RCC_OscConfig+0x67c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e104      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005468:	4b40      	ldr	r3, [pc, #256]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 800546a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4013      	ands	r3, r2
 8005472:	d1ef      	bne.n	8005454 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005474:	2327      	movs	r3, #39	; 0x27
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d105      	bne.n	800548a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547e:	4b3b      	ldr	r3, [pc, #236]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005482:	4b3a      	ldr	r3, [pc, #232]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005484:	493e      	ldr	r1, [pc, #248]	; (8005580 <HAL_RCC_OscConfig+0x680>)
 8005486:	400a      	ands	r2, r1
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2220      	movs	r2, #32
 8005490:	4013      	ands	r3, r2
 8005492:	d049      	beq.n	8005528 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d026      	beq.n	80054ea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b32      	ldr	r3, [pc, #200]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80054a2:	2101      	movs	r1, #1
 80054a4:	430a      	orrs	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80054aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80054ae:	2101      	movs	r1, #1
 80054b0:	430a      	orrs	r2, r1
 80054b2:	635a      	str	r2, [r3, #52]	; 0x34
 80054b4:	4b33      	ldr	r3, [pc, #204]	; (8005584 <HAL_RCC_OscConfig+0x684>)
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	4b32      	ldr	r3, [pc, #200]	; (8005584 <HAL_RCC_OscConfig+0x684>)
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	0189      	lsls	r1, r1, #6
 80054be:	430a      	orrs	r2, r1
 80054c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7ff fa61 	bl	8004988 <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054cc:	f7ff fa5c 	bl	8004988 <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0c9      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054de:	4b23      	ldr	r3, [pc, #140]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2202      	movs	r2, #2
 80054e4:	4013      	ands	r3, r2
 80054e6:	d0f1      	beq.n	80054cc <HAL_RCC_OscConfig+0x5cc>
 80054e8:	e01e      	b.n	8005528 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80054ea:	4b20      	ldr	r3, [pc, #128]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 80054f0:	2101      	movs	r1, #1
 80054f2:	438a      	bics	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
 80054f6:	4b23      	ldr	r3, [pc, #140]	; (8005584 <HAL_RCC_OscConfig+0x684>)
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <HAL_RCC_OscConfig+0x684>)
 80054fc:	4922      	ldr	r1, [pc, #136]	; (8005588 <HAL_RCC_OscConfig+0x688>)
 80054fe:	400a      	ands	r2, r1
 8005500:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005502:	f7ff fa41 	bl	8004988 <HAL_GetTick>
 8005506:	0003      	movs	r3, r0
 8005508:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550c:	f7ff fa3c 	bl	8004988 <HAL_GetTick>
 8005510:	0002      	movs	r2, r0
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0a9      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2202      	movs	r2, #2
 8005524:	4013      	ands	r3, r2
 8005526:	d1f1      	bne.n	800550c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d100      	bne.n	8005532 <HAL_RCC_OscConfig+0x632>
 8005530:	e09e      	b.n	8005670 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d100      	bne.n	800553a <HAL_RCC_OscConfig+0x63a>
 8005538:	e077      	b.n	800562a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	2b02      	cmp	r3, #2
 8005540:	d158      	bne.n	80055f4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <HAL_RCC_OscConfig+0x66c>)
 8005548:	4910      	ldr	r1, [pc, #64]	; (800558c <HAL_RCC_OscConfig+0x68c>)
 800554a:	400a      	ands	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7ff fa1b 	bl	8004988 <HAL_GetTick>
 8005552:	0003      	movs	r3, r0
 8005554:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005556:	e01b      	b.n	8005590 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005558:	f7ff fa16 	bl	8004988 <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d914      	bls.n	8005590 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e083      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	40021000 	.word	0x40021000
 8005570:	fffffeff 	.word	0xfffffeff
 8005574:	40007000 	.word	0x40007000
 8005578:	fffffbff 	.word	0xfffffbff
 800557c:	00001388 	.word	0x00001388
 8005580:	efffffff 	.word	0xefffffff
 8005584:	40010000 	.word	0x40010000
 8005588:	ffffdfff 	.word	0xffffdfff
 800558c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005590:	4b3a      	ldr	r3, [pc, #232]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	049b      	lsls	r3, r3, #18
 8005598:	4013      	ands	r3, r2
 800559a:	d1dd      	bne.n	8005558 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559c:	4b37      	ldr	r3, [pc, #220]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a37      	ldr	r2, [pc, #220]	; (8005680 <HAL_RCC_OscConfig+0x780>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	431a      	orrs	r2, r3
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 80055b8:	430a      	orrs	r2, r1
 80055ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b2e      	ldr	r3, [pc, #184]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	0449      	lsls	r1, r1, #17
 80055c6:	430a      	orrs	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7ff f9dd 	bl	8004988 <HAL_GetTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d4:	f7ff f9d8 	bl	8004988 <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e045      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80055e6:	4b25      	ldr	r3, [pc, #148]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	049b      	lsls	r3, r3, #18
 80055ee:	4013      	ands	r3, r2
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x6d4>
 80055f2:	e03d      	b.n	8005670 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 80055fa:	4922      	ldr	r1, [pc, #136]	; (8005684 <HAL_RCC_OscConfig+0x784>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7ff f9c2 	bl	8004988 <HAL_GetTick>
 8005604:	0003      	movs	r3, r0
 8005606:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560a:	f7ff f9bd 	bl	8004988 <HAL_GetTick>
 800560e:	0002      	movs	r2, r0
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e02a      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	049b      	lsls	r3, r3, #18
 8005624:	4013      	ands	r3, r2
 8005626:	d1f0      	bne.n	800560a <HAL_RCC_OscConfig+0x70a>
 8005628:	e022      	b.n	8005670 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e01d      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_RCC_OscConfig+0x77c>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	025b      	lsls	r3, r3, #9
 8005642:	401a      	ands	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d10f      	bne.n	800566c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	23f0      	movs	r3, #240	; 0xf0
 8005650:	039b      	lsls	r3, r3, #14
 8005652:	401a      	ands	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d107      	bne.n	800566c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	23c0      	movs	r3, #192	; 0xc0
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	401a      	ands	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	b00a      	add	sp, #40	; 0x28
 8005678:	bdb0      	pop	{r4, r5, r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	40021000 	.word	0x40021000
 8005680:	ff02ffff 	.word	0xff02ffff
 8005684:	feffffff 	.word	0xfeffffff

08005688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005688:	b5b0      	push	{r4, r5, r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e128      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b96      	ldr	r3, [pc, #600]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d91e      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b93      	ldr	r3, [pc, #588]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2201      	movs	r2, #1
 80056b0:	4393      	bics	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	4b90      	ldr	r3, [pc, #576]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056bc:	f7ff f964 	bl	8004988 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c4:	e009      	b.n	80056da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c6:	f7ff f95f 	bl	8004988 <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	4a8a      	ldr	r2, [pc, #552]	; (80058fc <HAL_RCC_ClockConfig+0x274>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e109      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	4b87      	ldr	r3, [pc, #540]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2201      	movs	r2, #1
 80056e0:	4013      	ands	r3, r2
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d1ee      	bne.n	80056c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2202      	movs	r2, #2
 80056ee:	4013      	ands	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f2:	4b83      	ldr	r3, [pc, #524]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	22f0      	movs	r2, #240	; 0xf0
 80056f8:	4393      	bics	r3, r2
 80056fa:	0019      	movs	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	4b7f      	ldr	r3, [pc, #508]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 8005702:	430a      	orrs	r2, r1
 8005704:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2201      	movs	r2, #1
 800570c:	4013      	ands	r3, r2
 800570e:	d100      	bne.n	8005712 <HAL_RCC_ClockConfig+0x8a>
 8005710:	e089      	b.n	8005826 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d107      	bne.n	800572a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800571a:	4b79      	ldr	r3, [pc, #484]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	4013      	ands	r3, r2
 8005724:	d120      	bne.n	8005768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0e1      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005732:	4b73      	ldr	r3, [pc, #460]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	049b      	lsls	r3, r3, #18
 800573a:	4013      	ands	r3, r2
 800573c:	d114      	bne.n	8005768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e0d5      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d106      	bne.n	8005758 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800574a:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2204      	movs	r2, #4
 8005750:	4013      	ands	r3, r2
 8005752:	d109      	bne.n	8005768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0ca      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005758:	4b69      	ldr	r3, [pc, #420]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4013      	ands	r3, r2
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0c2      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005768:	4b65      	ldr	r3, [pc, #404]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2203      	movs	r2, #3
 800576e:	4393      	bics	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	4b62      	ldr	r3, [pc, #392]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800577c:	f7ff f904 	bl	8004988 <HAL_GetTick>
 8005780:	0003      	movs	r3, r0
 8005782:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d111      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800578c:	e009      	b.n	80057a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578e:	f7ff f8fb 	bl	8004988 <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	4a58      	ldr	r2, [pc, #352]	; (80058fc <HAL_RCC_ClockConfig+0x274>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e0a5      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057a2:	4b57      	ldr	r3, [pc, #348]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	220c      	movs	r2, #12
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d1ef      	bne.n	800578e <HAL_RCC_ClockConfig+0x106>
 80057ae:	e03a      	b.n	8005826 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d111      	bne.n	80057dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b8:	e009      	b.n	80057ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ba:	f7ff f8e5 	bl	8004988 <HAL_GetTick>
 80057be:	0002      	movs	r2, r0
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	4a4d      	ldr	r2, [pc, #308]	; (80058fc <HAL_RCC_ClockConfig+0x274>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e08f      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ce:	4b4c      	ldr	r3, [pc, #304]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	220c      	movs	r2, #12
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d1ef      	bne.n	80057ba <HAL_RCC_ClockConfig+0x132>
 80057da:	e024      	b.n	8005826 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d11b      	bne.n	800581c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057e4:	e009      	b.n	80057fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e6:	f7ff f8cf 	bl	8004988 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	4a42      	ldr	r2, [pc, #264]	; (80058fc <HAL_RCC_ClockConfig+0x274>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e079      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057fa:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	220c      	movs	r2, #12
 8005800:	4013      	ands	r3, r2
 8005802:	2b04      	cmp	r3, #4
 8005804:	d1ef      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x15e>
 8005806:	e00e      	b.n	8005826 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005808:	f7ff f8be 	bl	8004988 <HAL_GetTick>
 800580c:	0002      	movs	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_RCC_ClockConfig+0x274>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e068      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800581c:	4b38      	ldr	r3, [pc, #224]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	220c      	movs	r2, #12
 8005822:	4013      	ands	r3, r2
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005826:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	4013      	ands	r3, r2
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d21e      	bcs.n	8005872 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005834:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2201      	movs	r2, #1
 800583a:	4393      	bics	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005846:	f7ff f89f 	bl	8004988 <HAL_GetTick>
 800584a:	0003      	movs	r3, r0
 800584c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	e009      	b.n	8005864 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7ff f89a 	bl	8004988 <HAL_GetTick>
 8005854:	0002      	movs	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	4a28      	ldr	r2, [pc, #160]	; (80058fc <HAL_RCC_ClockConfig+0x274>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e044      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005864:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_RCC_ClockConfig+0x270>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2201      	movs	r2, #1
 800586a:	4013      	ands	r3, r2
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d1ee      	bne.n	8005850 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2204      	movs	r2, #4
 8005878:	4013      	ands	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800587c:	4b20      	ldr	r3, [pc, #128]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a20      	ldr	r2, [pc, #128]	; (8005904 <HAL_RCC_ClockConfig+0x27c>)
 8005882:	4013      	ands	r3, r2
 8005884:	0019      	movs	r1, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800588c:	430a      	orrs	r2, r1
 800588e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2208      	movs	r2, #8
 8005896:	4013      	ands	r3, r2
 8005898:	d00a      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800589a:	4b19      	ldr	r3, [pc, #100]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <HAL_RCC_ClockConfig+0x280>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	0019      	movs	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	00da      	lsls	r2, r3, #3
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 80058ac:	430a      	orrs	r2, r1
 80058ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058b0:	f000 f832 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058b4:	0001      	movs	r1, r0
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <HAL_RCC_ClockConfig+0x278>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	220f      	movs	r2, #15
 80058be:	4013      	ands	r3, r2
 80058c0:	4a12      	ldr	r2, [pc, #72]	; (800590c <HAL_RCC_ClockConfig+0x284>)
 80058c2:	5cd3      	ldrb	r3, [r2, r3]
 80058c4:	000a      	movs	r2, r1
 80058c6:	40da      	lsrs	r2, r3
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <HAL_RCC_ClockConfig+0x288>)
 80058ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <HAL_RCC_ClockConfig+0x28c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	250b      	movs	r5, #11
 80058d2:	197c      	adds	r4, r7, r5
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7ff f811 	bl	80048fc <HAL_InitTick>
 80058da:	0003      	movs	r3, r0
 80058dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80058de:	197b      	adds	r3, r7, r5
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80058e6:	197b      	adds	r3, r7, r5
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	e000      	b.n	80058ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b004      	add	sp, #16
 80058f4:	bdb0      	pop	{r4, r5, r7, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	40022000 	.word	0x40022000
 80058fc:	00001388 	.word	0x00001388
 8005900:	40021000 	.word	0x40021000
 8005904:	fffff8ff 	.word	0xfffff8ff
 8005908:	ffffc7ff 	.word	0xffffc7ff
 800590c:	0800cccc 	.word	0x0800cccc
 8005910:	20000044 	.word	0x20000044
 8005914:	20000048 	.word	0x20000048

08005918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	b5b0      	push	{r4, r5, r7, lr}
 800591a:	b08e      	sub	sp, #56	; 0x38
 800591c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800591e:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005926:	230c      	movs	r3, #12
 8005928:	4013      	ands	r3, r2
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d014      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x40>
 800592e:	d900      	bls.n	8005932 <HAL_RCC_GetSysClockFreq+0x1a>
 8005930:	e07b      	b.n	8005a2a <HAL_RCC_GetSysClockFreq+0x112>
 8005932:	2b04      	cmp	r3, #4
 8005934:	d002      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x24>
 8005936:	2b08      	cmp	r3, #8
 8005938:	d00b      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x3a>
 800593a:	e076      	b.n	8005a2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800593c:	4b44      	ldr	r3, [pc, #272]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x138>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2210      	movs	r2, #16
 8005942:	4013      	ands	r3, r2
 8005944:	d002      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005946:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800594a:	e07c      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800594c:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x140>)
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005950:	e079      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005952:	4b42      	ldr	r3, [pc, #264]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x144>)
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005956:	e076      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	0c9a      	lsrs	r2, r3, #18
 800595c:	230f      	movs	r3, #15
 800595e:	401a      	ands	r2, r3
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x148>)
 8005962:	5c9b      	ldrb	r3, [r3, r2]
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	0d9a      	lsrs	r2, r3, #22
 800596a:	2303      	movs	r3, #3
 800596c:	4013      	ands	r3, r2
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005972:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	025b      	lsls	r3, r3, #9
 800597a:	4013      	ands	r3, r2
 800597c:	d01a      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	4a35      	ldr	r2, [pc, #212]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x144>)
 8005988:	2300      	movs	r3, #0
 800598a:	69b8      	ldr	r0, [r7, #24]
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	f7fa fde5 	bl	800055c <__aeabi_lmul>
 8005992:	0002      	movs	r2, r0
 8005994:	000b      	movs	r3, r1
 8005996:	0010      	movs	r0, r2
 8005998:	0019      	movs	r1, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f7fa fdb9 	bl	800051c <__aeabi_uldivmod>
 80059aa:	0002      	movs	r2, r0
 80059ac:	000b      	movs	r3, r1
 80059ae:	0013      	movs	r3, r2
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
 80059b2:	e037      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x138>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2210      	movs	r2, #16
 80059ba:	4013      	ands	r3, r2
 80059bc:	d01a      	beq.n	80059f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	f7fa fdc5 	bl	800055c <__aeabi_lmul>
 80059d2:	0002      	movs	r2, r0
 80059d4:	000b      	movs	r3, r1
 80059d6:	0010      	movs	r0, r2
 80059d8:	0019      	movs	r1, r3
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f7fa fd99 	bl	800051c <__aeabi_uldivmod>
 80059ea:	0002      	movs	r2, r0
 80059ec:	000b      	movs	r3, r1
 80059ee:	0013      	movs	r3, r2
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
 80059f2:	e017      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	0018      	movs	r0, r3
 80059f8:	2300      	movs	r3, #0
 80059fa:	0019      	movs	r1, r3
 80059fc:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x140>)
 80059fe:	2300      	movs	r3, #0
 8005a00:	f7fa fdac 	bl	800055c <__aeabi_lmul>
 8005a04:	0002      	movs	r2, r0
 8005a06:	000b      	movs	r3, r1
 8005a08:	0010      	movs	r0, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	001c      	movs	r4, r3
 8005a10:	2300      	movs	r3, #0
 8005a12:	001d      	movs	r5, r3
 8005a14:	0022      	movs	r2, r4
 8005a16:	002b      	movs	r3, r5
 8005a18:	f7fa fd80 	bl	800051c <__aeabi_uldivmod>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	000b      	movs	r3, r1
 8005a20:	0013      	movs	r3, r2
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a28:	e00d      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	0b5b      	lsrs	r3, r3, #13
 8005a30:	2207      	movs	r2, #7
 8005a32:	4013      	ands	r3, r2
 8005a34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	2280      	movs	r2, #128	; 0x80
 8005a3c:	0212      	lsls	r2, r2, #8
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	0013      	movs	r3, r2
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005a48:	0018      	movs	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b00e      	add	sp, #56	; 0x38
 8005a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a50:	40021000 	.word	0x40021000
 8005a54:	003d0900 	.word	0x003d0900
 8005a58:	00f42400 	.word	0x00f42400
 8005a5c:	007a1200 	.word	0x007a1200
 8005a60:	0800ccdc 	.word	0x0800ccdc

08005a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e032      	b.n	8005adc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2239      	movs	r2, #57	; 0x39
 8005a7a:	5c9b      	ldrb	r3, [r3, r2]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2238      	movs	r2, #56	; 0x38
 8005a86:	2100      	movs	r1, #0
 8005a88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7fe fde5 	bl	800465c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2239      	movs	r2, #57	; 0x39
 8005a96:	2102      	movs	r1, #2
 8005a98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	0010      	movs	r0, r2
 8005aa6:	f000 fa45 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	223e      	movs	r2, #62	; 0x3e
 8005aae:	2101      	movs	r1, #1
 8005ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	223a      	movs	r2, #58	; 0x3a
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	5499      	strb	r1, [r3, r2]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	223b      	movs	r2, #59	; 0x3b
 8005abe:	2101      	movs	r1, #1
 8005ac0:	5499      	strb	r1, [r3, r2]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	223c      	movs	r2, #60	; 0x3c
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	5499      	strb	r1, [r3, r2]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	223d      	movs	r2, #61	; 0x3d
 8005ace:	2101      	movs	r1, #1
 8005ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2239      	movs	r2, #57	; 0x39
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	0018      	movs	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2239      	movs	r2, #57	; 0x39
 8005af0:	5c9b      	ldrb	r3, [r3, r2]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d001      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e036      	b.n	8005b6a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2239      	movs	r2, #57	; 0x39
 8005b00:	2102      	movs	r1, #2
 8005b02:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2101      	movs	r1, #1
 8005b10:	430a      	orrs	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	05db      	lsls	r3, r3, #23
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d009      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x50>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <HAL_TIM_Base_Start_IT+0x90>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x50>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a12      	ldr	r2, [pc, #72]	; (8005b78 <HAL_TIM_Base_Start_IT+0x94>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d111      	bne.n	8005b58 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2207      	movs	r2, #7
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d010      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2101      	movs	r1, #1
 8005b52:	430a      	orrs	r2, r1
 8005b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	e007      	b.n	8005b68 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2101      	movs	r1, #1
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	40010800 	.word	0x40010800
 8005b78:	40011400 	.word	0x40011400

08005b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d124      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d11d      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	4252      	negs	r2, r2
 8005ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 f9a0 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e007      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 f993 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f000 f99f 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2204      	movs	r2, #4
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d125      	bne.n	8005c36 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d11e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	4252      	negs	r2, r2
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	23c0      	movs	r3, #192	; 0xc0
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4013      	ands	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 f973 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005c1e:	e007      	b.n	8005c30 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f000 f966 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 f972 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d124      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d11d      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2209      	movs	r2, #9
 8005c58:	4252      	negs	r2, r2
 8005c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 f947 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005c76:	e007      	b.n	8005c88 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 f93a 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	0018      	movs	r0, r3
 8005c84:	f000 f946 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2210      	movs	r2, #16
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d125      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d11e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2211      	movs	r2, #17
 8005cb0:	4252      	negs	r2, r2
 8005cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	23c0      	movs	r3, #192	; 0xc0
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 f91a 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e007      	b.n	8005ce2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 f90d 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 f919 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10f      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d108      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	4252      	negs	r2, r2
 8005d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7fe f9d7 	bl	80040c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2240      	movs	r2, #64	; 0x40
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d10f      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d108      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2241      	movs	r2, #65	; 0x41
 8005d38:	4252      	negs	r2, r2
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 f8f0 	bl	8005f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	230f      	movs	r3, #15
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2238      	movs	r2, #56	; 0x38
 8005d62:	5c9b      	ldrb	r3, [r3, r2]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIM_ConfigClockSource+0x20>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e0bc      	b.n	8005ee6 <HAL_TIM_ConfigClockSource+0x19a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2238      	movs	r2, #56	; 0x38
 8005d70:	2101      	movs	r1, #1
 8005d72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2239      	movs	r2, #57	; 0x39
 8005d78:	2102      	movs	r1, #2
 8005d7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2277      	movs	r2, #119	; 0x77
 8005d88:	4393      	bics	r3, r2
 8005d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4a58      	ldr	r2, [pc, #352]	; (8005ef0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	0192      	lsls	r2, r2, #6
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d040      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0xde>
 8005da8:	2280      	movs	r2, #128	; 0x80
 8005daa:	0192      	lsls	r2, r2, #6
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d900      	bls.n	8005db2 <HAL_TIM_ConfigClockSource+0x66>
 8005db0:	e088      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	0152      	lsls	r2, r2, #5
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d100      	bne.n	8005dbc <HAL_TIM_ConfigClockSource+0x70>
 8005dba:	e088      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x182>
 8005dbc:	2280      	movs	r2, #128	; 0x80
 8005dbe:	0152      	lsls	r2, r2, #5
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d900      	bls.n	8005dc6 <HAL_TIM_ConfigClockSource+0x7a>
 8005dc4:	e07e      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005dc6:	2b70      	cmp	r3, #112	; 0x70
 8005dc8:	d018      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0xb0>
 8005dca:	d900      	bls.n	8005dce <HAL_TIM_ConfigClockSource+0x82>
 8005dcc:	e07a      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005dce:	2b60      	cmp	r3, #96	; 0x60
 8005dd0:	d04f      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x126>
 8005dd2:	d900      	bls.n	8005dd6 <HAL_TIM_ConfigClockSource+0x8a>
 8005dd4:	e076      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005dd6:	2b50      	cmp	r3, #80	; 0x50
 8005dd8:	d03b      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x106>
 8005dda:	d900      	bls.n	8005dde <HAL_TIM_ConfigClockSource+0x92>
 8005ddc:	e072      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d057      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x146>
 8005de2:	d900      	bls.n	8005de6 <HAL_TIM_ConfigClockSource+0x9a>
 8005de4:	e06e      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d063      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x166>
 8005dea:	d86b      	bhi.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d060      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x166>
 8005df0:	d868      	bhi.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d05d      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x166>
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d05b      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x166>
 8005dfa:	e063      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6899      	ldr	r1, [r3, #8]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f000 f960 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2277      	movs	r2, #119	; 0x77
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	609a      	str	r2, [r3, #8]
      break;
 8005e28:	e052      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6899      	ldr	r1, [r3, #8]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f000 f949 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	01c9      	lsls	r1, r1, #7
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
      break;
 8005e50:	e03e      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	001a      	movs	r2, r3
 8005e60:	f000 f8bc 	bl	8005fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2150      	movs	r1, #80	; 0x50
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f000 f916 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005e70:	e02e      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	001a      	movs	r2, r3
 8005e80:	f000 f8da 	bl	8006038 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2160      	movs	r1, #96	; 0x60
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f906 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005e90:	e01e      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	001a      	movs	r2, r3
 8005ea0:	f000 f89c 	bl	8005fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2140      	movs	r1, #64	; 0x40
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 f8f6 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e00e      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	0019      	movs	r1, r3
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	f000 f8ed 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005ec2:	e005      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005ec4:	230f      	movs	r3, #15
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
      break;
 8005ecc:	e000      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005ece:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2239      	movs	r2, #57	; 0x39
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2238      	movs	r2, #56	; 0x38
 8005edc:	2100      	movs	r1, #0
 8005ede:	5499      	strb	r1, [r3, r2]

  return status;
 8005ee0:	230f      	movs	r3, #15
 8005ee2:	18fb      	adds	r3, r7, r3
 8005ee4:	781b      	ldrb	r3, [r3, #0]
}
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b004      	add	sp, #16
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	ffff00ff 	.word	0xffff00ff

08005ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005efc:	46c0      	nop			; (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b002      	add	sp, #8
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f1c:	46c0      	nop			; (mov r8, r8)
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b002      	add	sp, #8
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	05db      	lsls	r3, r3, #23
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d007      	beq.n	8005f5e <TIM_Base_SetConfig+0x2a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <TIM_Base_SetConfig+0x9c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_Base_SetConfig+0x2a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <TIM_Base_SetConfig+0xa0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2270      	movs	r2, #112	; 0x70
 8005f62:	4393      	bics	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	05db      	lsls	r3, r3, #23
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0x56>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <TIM_Base_SetConfig+0x9c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0x56>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <TIM_Base_SetConfig+0xa0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <TIM_Base_SetConfig+0xa4>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	615a      	str	r2, [r3, #20]
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b004      	add	sp, #16
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40010800 	.word	0x40010800
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	fffffcff 	.word	0xfffffcff

08005fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	4393      	bics	r3, r2
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	22f0      	movs	r2, #240	; 0xf0
 8006006:	4393      	bics	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	220a      	movs	r2, #10
 8006018:	4393      	bics	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b006      	add	sp, #24
 8006036:	bd80      	pop	{r7, pc}

08006038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	2210      	movs	r2, #16
 800604a:	4393      	bics	r3, r2
 800604c:	001a      	movs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <TIM_TI2_ConfigInputStage+0x60>)
 8006062:	4013      	ands	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	22a0      	movs	r2, #160	; 0xa0
 8006074:	4393      	bics	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	46bd      	mov	sp, r7
 8006092:	b006      	add	sp, #24
 8006094:	bd80      	pop	{r7, pc}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	ffff0fff 	.word	0xffff0fff

0800609c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2270      	movs	r2, #112	; 0x70
 80060b0:	4393      	bics	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	2207      	movs	r2, #7
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b004      	add	sp, #16
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <TIM_ETR_SetConfig+0x3c>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b006      	add	sp, #24
 800610a:	bd80      	pop	{r7, pc}
 800610c:	ffff00ff 	.word	0xffff00ff

08006110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2238      	movs	r2, #56	; 0x38
 800611e:	5c9b      	ldrb	r3, [r3, r2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e042      	b.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2238      	movs	r2, #56	; 0x38
 800612c:	2101      	movs	r1, #1
 800612e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2239      	movs	r2, #57	; 0x39
 8006134:	2102      	movs	r1, #2
 8006136:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2270      	movs	r2, #112	; 0x70
 800614c:	4393      	bics	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	05db      	lsls	r3, r3, #23
 800616a:	429a      	cmp	r2, r3
 800616c:	d009      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a11      	ldr	r2, [pc, #68]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a0f      	ldr	r2, [pc, #60]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d10c      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	4393      	bics	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4313      	orrs	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2239      	movs	r2, #57	; 0x39
 80061a0:	2101      	movs	r1, #1
 80061a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2238      	movs	r2, #56	; 0x38
 80061a8:	2100      	movs	r1, #0
 80061aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b004      	add	sp, #16
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	40010800 	.word	0x40010800
 80061bc:	40011400 	.word	0x40011400

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	20000050 	.word	0x20000050

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	2600      	movs	r6, #0
 80061d0:	4d0c      	ldr	r5, [pc, #48]	; (8006204 <__libc_init_array+0x38>)
 80061d2:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	2600      	movs	r6, #0
 80061de:	f004 fd47 	bl	800ac70 <_init>
 80061e2:	4d0a      	ldr	r5, [pc, #40]	; (800620c <__libc_init_array+0x40>)
 80061e4:	4c0a      	ldr	r4, [pc, #40]	; (8006210 <__libc_init_array+0x44>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	00b3      	lsls	r3, r6, #2
 80061f2:	58eb      	ldr	r3, [r5, r3]
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	00b3      	lsls	r3, r6, #2
 80061fc:	58eb      	ldr	r3, [r5, r3]
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	0800d194 	.word	0x0800d194
 8006208:	0800d194 	.word	0x0800d194
 800620c:	0800d194 	.word	0x0800d194
 8006210:	0800d198 	.word	0x0800d198

08006214 <memset>:
 8006214:	0003      	movs	r3, r0
 8006216:	1882      	adds	r2, r0, r2
 8006218:	4293      	cmp	r3, r2
 800621a:	d100      	bne.n	800621e <memset+0xa>
 800621c:	4770      	bx	lr
 800621e:	7019      	strb	r1, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	e7f9      	b.n	8006218 <memset+0x4>

08006224 <__cvt>:
 8006224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006226:	001e      	movs	r6, r3
 8006228:	2300      	movs	r3, #0
 800622a:	0014      	movs	r4, r2
 800622c:	b08b      	sub	sp, #44	; 0x2c
 800622e:	429e      	cmp	r6, r3
 8006230:	da04      	bge.n	800623c <__cvt+0x18>
 8006232:	2180      	movs	r1, #128	; 0x80
 8006234:	0609      	lsls	r1, r1, #24
 8006236:	1873      	adds	r3, r6, r1
 8006238:	001e      	movs	r6, r3
 800623a:	232d      	movs	r3, #45	; 0x2d
 800623c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800623e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006240:	7013      	strb	r3, [r2, #0]
 8006242:	2320      	movs	r3, #32
 8006244:	2203      	movs	r2, #3
 8006246:	439f      	bics	r7, r3
 8006248:	2f46      	cmp	r7, #70	; 0x46
 800624a:	d007      	beq.n	800625c <__cvt+0x38>
 800624c:	003b      	movs	r3, r7
 800624e:	3b45      	subs	r3, #69	; 0x45
 8006250:	4259      	negs	r1, r3
 8006252:	414b      	adcs	r3, r1
 8006254:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006256:	3a01      	subs	r2, #1
 8006258:	18cb      	adds	r3, r1, r3
 800625a:	9310      	str	r3, [sp, #64]	; 0x40
 800625c:	ab09      	add	r3, sp, #36	; 0x24
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	ab08      	add	r3, sp, #32
 8006262:	9303      	str	r3, [sp, #12]
 8006264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006266:	9200      	str	r2, [sp, #0]
 8006268:	9302      	str	r3, [sp, #8]
 800626a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800626c:	0022      	movs	r2, r4
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	0033      	movs	r3, r6
 8006272:	f001 fdc3 	bl	8007dfc <_dtoa_r>
 8006276:	0005      	movs	r5, r0
 8006278:	2f47      	cmp	r7, #71	; 0x47
 800627a:	d102      	bne.n	8006282 <__cvt+0x5e>
 800627c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800627e:	07db      	lsls	r3, r3, #31
 8006280:	d528      	bpl.n	80062d4 <__cvt+0xb0>
 8006282:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006284:	18eb      	adds	r3, r5, r3
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	2f46      	cmp	r7, #70	; 0x46
 800628a:	d114      	bne.n	80062b6 <__cvt+0x92>
 800628c:	782b      	ldrb	r3, [r5, #0]
 800628e:	2b30      	cmp	r3, #48	; 0x30
 8006290:	d10c      	bne.n	80062ac <__cvt+0x88>
 8006292:	2200      	movs	r2, #0
 8006294:	2300      	movs	r3, #0
 8006296:	0020      	movs	r0, r4
 8006298:	0031      	movs	r1, r6
 800629a:	f7fa f8d7 	bl	800044c <__aeabi_dcmpeq>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d104      	bne.n	80062ac <__cvt+0x88>
 80062a2:	2301      	movs	r3, #1
 80062a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ae:	9a07      	ldr	r2, [sp, #28]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	9307      	str	r3, [sp, #28]
 80062b6:	2200      	movs	r2, #0
 80062b8:	2300      	movs	r3, #0
 80062ba:	0020      	movs	r0, r4
 80062bc:	0031      	movs	r1, r6
 80062be:	f7fa f8c5 	bl	800044c <__aeabi_dcmpeq>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d001      	beq.n	80062ca <__cvt+0xa6>
 80062c6:	9b07      	ldr	r3, [sp, #28]
 80062c8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ca:	2230      	movs	r2, #48	; 0x30
 80062cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ce:	9907      	ldr	r1, [sp, #28]
 80062d0:	428b      	cmp	r3, r1
 80062d2:	d306      	bcc.n	80062e2 <__cvt+0xbe>
 80062d4:	0028      	movs	r0, r5
 80062d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062da:	1b5b      	subs	r3, r3, r5
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	b00b      	add	sp, #44	; 0x2c
 80062e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	9109      	str	r1, [sp, #36]	; 0x24
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e7f0      	b.n	80062cc <__cvt+0xa8>

080062ea <__exponent>:
 80062ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ec:	1c83      	adds	r3, r0, #2
 80062ee:	b087      	sub	sp, #28
 80062f0:	9303      	str	r3, [sp, #12]
 80062f2:	0005      	movs	r5, r0
 80062f4:	000c      	movs	r4, r1
 80062f6:	232b      	movs	r3, #43	; 0x2b
 80062f8:	7002      	strb	r2, [r0, #0]
 80062fa:	2900      	cmp	r1, #0
 80062fc:	da01      	bge.n	8006302 <__exponent+0x18>
 80062fe:	424c      	negs	r4, r1
 8006300:	3302      	adds	r3, #2
 8006302:	706b      	strb	r3, [r5, #1]
 8006304:	2c09      	cmp	r4, #9
 8006306:	dd31      	ble.n	800636c <__exponent+0x82>
 8006308:	270a      	movs	r7, #10
 800630a:	ab04      	add	r3, sp, #16
 800630c:	1dde      	adds	r6, r3, #7
 800630e:	0020      	movs	r0, r4
 8006310:	0039      	movs	r1, r7
 8006312:	9601      	str	r6, [sp, #4]
 8006314:	f7fa f884 	bl	8000420 <__aeabi_idivmod>
 8006318:	3e01      	subs	r6, #1
 800631a:	3130      	adds	r1, #48	; 0x30
 800631c:	0020      	movs	r0, r4
 800631e:	7031      	strb	r1, [r6, #0]
 8006320:	0039      	movs	r1, r7
 8006322:	9402      	str	r4, [sp, #8]
 8006324:	f7f9 ff96 	bl	8000254 <__divsi3>
 8006328:	9b02      	ldr	r3, [sp, #8]
 800632a:	0004      	movs	r4, r0
 800632c:	2b63      	cmp	r3, #99	; 0x63
 800632e:	dcee      	bgt.n	800630e <__exponent+0x24>
 8006330:	9b01      	ldr	r3, [sp, #4]
 8006332:	3430      	adds	r4, #48	; 0x30
 8006334:	1e9a      	subs	r2, r3, #2
 8006336:	0013      	movs	r3, r2
 8006338:	9903      	ldr	r1, [sp, #12]
 800633a:	7014      	strb	r4, [r2, #0]
 800633c:	a804      	add	r0, sp, #16
 800633e:	3007      	adds	r0, #7
 8006340:	4298      	cmp	r0, r3
 8006342:	d80e      	bhi.n	8006362 <__exponent+0x78>
 8006344:	ab04      	add	r3, sp, #16
 8006346:	3307      	adds	r3, #7
 8006348:	2000      	movs	r0, #0
 800634a:	429a      	cmp	r2, r3
 800634c:	d804      	bhi.n	8006358 <__exponent+0x6e>
 800634e:	ab04      	add	r3, sp, #16
 8006350:	3009      	adds	r0, #9
 8006352:	18c0      	adds	r0, r0, r3
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	1ac0      	subs	r0, r0, r3
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	1818      	adds	r0, r3, r0
 800635c:	1b40      	subs	r0, r0, r5
 800635e:	b007      	add	sp, #28
 8006360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006362:	7818      	ldrb	r0, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	7008      	strb	r0, [r1, #0]
 8006368:	3101      	adds	r1, #1
 800636a:	e7e7      	b.n	800633c <__exponent+0x52>
 800636c:	2330      	movs	r3, #48	; 0x30
 800636e:	18e4      	adds	r4, r4, r3
 8006370:	70ab      	strb	r3, [r5, #2]
 8006372:	1d28      	adds	r0, r5, #4
 8006374:	70ec      	strb	r4, [r5, #3]
 8006376:	e7f1      	b.n	800635c <__exponent+0x72>

08006378 <_printf_float>:
 8006378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637a:	b095      	sub	sp, #84	; 0x54
 800637c:	000c      	movs	r4, r1
 800637e:	9209      	str	r2, [sp, #36]	; 0x24
 8006380:	001e      	movs	r6, r3
 8006382:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006384:	0007      	movs	r7, r0
 8006386:	f002 fec7 	bl	8009118 <_localeconv_r>
 800638a:	6803      	ldr	r3, [r0, #0]
 800638c:	0018      	movs	r0, r3
 800638e:	930c      	str	r3, [sp, #48]	; 0x30
 8006390:	f7f9 feba 	bl	8000108 <strlen>
 8006394:	2300      	movs	r3, #0
 8006396:	9312      	str	r3, [sp, #72]	; 0x48
 8006398:	7e23      	ldrb	r3, [r4, #24]
 800639a:	2207      	movs	r2, #7
 800639c:	930a      	str	r3, [sp, #40]	; 0x28
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	900e      	str	r0, [sp, #56]	; 0x38
 80063a2:	930d      	str	r3, [sp, #52]	; 0x34
 80063a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	05c9      	lsls	r1, r1, #23
 80063aa:	d547      	bpl.n	800643c <_printf_float+0xc4>
 80063ac:	189b      	adds	r3, r3, r2
 80063ae:	4393      	bics	r3, r2
 80063b0:	001a      	movs	r2, r3
 80063b2:	3208      	adds	r2, #8
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	64a2      	str	r2, [r4, #72]	; 0x48
 80063bc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80063be:	2201      	movs	r2, #1
 80063c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063c2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	006b      	lsls	r3, r5, #1
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80063cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063ce:	4ba7      	ldr	r3, [pc, #668]	; (800666c <_printf_float+0x2f4>)
 80063d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063d2:	4252      	negs	r2, r2
 80063d4:	f7fc fc84 	bl	8002ce0 <__aeabi_dcmpun>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d131      	bne.n	8006440 <_printf_float+0xc8>
 80063dc:	2201      	movs	r2, #1
 80063de:	4ba3      	ldr	r3, [pc, #652]	; (800666c <_printf_float+0x2f4>)
 80063e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063e4:	4252      	negs	r2, r2
 80063e6:	f7fa f841 	bl	800046c <__aeabi_dcmple>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d128      	bne.n	8006440 <_printf_float+0xc8>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	0029      	movs	r1, r5
 80063f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063f6:	f7fa f82f 	bl	8000458 <__aeabi_dcmplt>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d003      	beq.n	8006406 <_printf_float+0x8e>
 80063fe:	0023      	movs	r3, r4
 8006400:	222d      	movs	r2, #45	; 0x2d
 8006402:	3343      	adds	r3, #67	; 0x43
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	4d99      	ldr	r5, [pc, #612]	; (8006670 <_printf_float+0x2f8>)
 800640a:	2b47      	cmp	r3, #71	; 0x47
 800640c:	d900      	bls.n	8006410 <_printf_float+0x98>
 800640e:	4d99      	ldr	r5, [pc, #612]	; (8006674 <_printf_float+0x2fc>)
 8006410:	2303      	movs	r3, #3
 8006412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	3301      	adds	r3, #1
 8006418:	439a      	bics	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006422:	0021      	movs	r1, r4
 8006424:	0038      	movs	r0, r7
 8006426:	9600      	str	r6, [sp, #0]
 8006428:	aa13      	add	r2, sp, #76	; 0x4c
 800642a:	f000 f9e7 	bl	80067fc <_printf_common>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d000      	beq.n	8006434 <_printf_float+0xbc>
 8006432:	e0a2      	b.n	800657a <_printf_float+0x202>
 8006434:	2001      	movs	r0, #1
 8006436:	4240      	negs	r0, r0
 8006438:	b015      	add	sp, #84	; 0x54
 800643a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643c:	3307      	adds	r3, #7
 800643e:	e7b6      	b.n	80063ae <_printf_float+0x36>
 8006440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006442:	002b      	movs	r3, r5
 8006444:	0010      	movs	r0, r2
 8006446:	0029      	movs	r1, r5
 8006448:	f7fc fc4a 	bl	8002ce0 <__aeabi_dcmpun>
 800644c:	2800      	cmp	r0, #0
 800644e:	d00b      	beq.n	8006468 <_printf_float+0xf0>
 8006450:	2d00      	cmp	r5, #0
 8006452:	da03      	bge.n	800645c <_printf_float+0xe4>
 8006454:	0023      	movs	r3, r4
 8006456:	222d      	movs	r2, #45	; 0x2d
 8006458:	3343      	adds	r3, #67	; 0x43
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800645e:	4d86      	ldr	r5, [pc, #536]	; (8006678 <_printf_float+0x300>)
 8006460:	2b47      	cmp	r3, #71	; 0x47
 8006462:	d9d5      	bls.n	8006410 <_printf_float+0x98>
 8006464:	4d85      	ldr	r5, [pc, #532]	; (800667c <_printf_float+0x304>)
 8006466:	e7d3      	b.n	8006410 <_printf_float+0x98>
 8006468:	2220      	movs	r2, #32
 800646a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	4391      	bics	r1, r2
 8006470:	910f      	str	r1, [sp, #60]	; 0x3c
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	d149      	bne.n	800650a <_printf_float+0x192>
 8006476:	3307      	adds	r3, #7
 8006478:	6063      	str	r3, [r4, #4]
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4313      	orrs	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	9206      	str	r2, [sp, #24]
 8006486:	aa12      	add	r2, sp, #72	; 0x48
 8006488:	9205      	str	r2, [sp, #20]
 800648a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800648c:	a908      	add	r1, sp, #32
 800648e:	9204      	str	r2, [sp, #16]
 8006490:	aa11      	add	r2, sp, #68	; 0x44
 8006492:	9203      	str	r2, [sp, #12]
 8006494:	2223      	movs	r2, #35	; 0x23
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	6863      	ldr	r3, [r4, #4]
 800649c:	1852      	adds	r2, r2, r1
 800649e:	9202      	str	r2, [sp, #8]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	0038      	movs	r0, r7
 80064a4:	002b      	movs	r3, r5
 80064a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064a8:	f7ff febc 	bl	8006224 <__cvt>
 80064ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ae:	0005      	movs	r5, r0
 80064b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064b2:	2b47      	cmp	r3, #71	; 0x47
 80064b4:	d108      	bne.n	80064c8 <_printf_float+0x150>
 80064b6:	1ccb      	adds	r3, r1, #3
 80064b8:	db02      	blt.n	80064c0 <_printf_float+0x148>
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	4299      	cmp	r1, r3
 80064be:	dd48      	ble.n	8006552 <_printf_float+0x1da>
 80064c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c2:	3b02      	subs	r3, #2
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	930a      	str	r3, [sp, #40]	; 0x28
 80064c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ca:	2b65      	cmp	r3, #101	; 0x65
 80064cc:	d824      	bhi.n	8006518 <_printf_float+0x1a0>
 80064ce:	0020      	movs	r0, r4
 80064d0:	001a      	movs	r2, r3
 80064d2:	3901      	subs	r1, #1
 80064d4:	3050      	adds	r0, #80	; 0x50
 80064d6:	9111      	str	r1, [sp, #68]	; 0x44
 80064d8:	f7ff ff07 	bl	80062ea <__exponent>
 80064dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064de:	900b      	str	r0, [sp, #44]	; 0x2c
 80064e0:	1813      	adds	r3, r2, r0
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	2a01      	cmp	r2, #1
 80064e6:	dc02      	bgt.n	80064ee <_printf_float+0x176>
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	07d2      	lsls	r2, r2, #31
 80064ec:	d501      	bpl.n	80064f2 <_printf_float+0x17a>
 80064ee:	3301      	adds	r3, #1
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	2323      	movs	r3, #35	; 0x23
 80064f4:	aa08      	add	r2, sp, #32
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d100      	bne.n	8006500 <_printf_float+0x188>
 80064fe:	e78f      	b.n	8006420 <_printf_float+0xa8>
 8006500:	0023      	movs	r3, r4
 8006502:	222d      	movs	r2, #45	; 0x2d
 8006504:	3343      	adds	r3, #67	; 0x43
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e78a      	b.n	8006420 <_printf_float+0xa8>
 800650a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800650c:	2a47      	cmp	r2, #71	; 0x47
 800650e:	d1b4      	bne.n	800647a <_printf_float+0x102>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1b2      	bne.n	800647a <_printf_float+0x102>
 8006514:	3301      	adds	r3, #1
 8006516:	e7af      	b.n	8006478 <_printf_float+0x100>
 8006518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651a:	2b66      	cmp	r3, #102	; 0x66
 800651c:	d11b      	bne.n	8006556 <_printf_float+0x1de>
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	2900      	cmp	r1, #0
 8006522:	dd0d      	ble.n	8006540 <_printf_float+0x1c8>
 8006524:	6121      	str	r1, [r4, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <_printf_float+0x1b8>
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	07d2      	lsls	r2, r2, #31
 800652e:	d502      	bpl.n	8006536 <_printf_float+0x1be>
 8006530:	3301      	adds	r3, #1
 8006532:	1859      	adds	r1, r3, r1
 8006534:	6121      	str	r1, [r4, #16]
 8006536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006538:	65a3      	str	r3, [r4, #88]	; 0x58
 800653a:	2300      	movs	r3, #0
 800653c:	930b      	str	r3, [sp, #44]	; 0x2c
 800653e:	e7d8      	b.n	80064f2 <_printf_float+0x17a>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <_printf_float+0x1d4>
 8006544:	2201      	movs	r2, #1
 8006546:	6821      	ldr	r1, [r4, #0]
 8006548:	4211      	tst	r1, r2
 800654a:	d000      	beq.n	800654e <_printf_float+0x1d6>
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	6122      	str	r2, [r4, #16]
 8006550:	e7f1      	b.n	8006536 <_printf_float+0x1be>
 8006552:	2367      	movs	r3, #103	; 0x67
 8006554:	930a      	str	r3, [sp, #40]	; 0x28
 8006556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800655a:	4293      	cmp	r3, r2
 800655c:	db06      	blt.n	800656c <_printf_float+0x1f4>
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	07d2      	lsls	r2, r2, #31
 8006564:	d5e7      	bpl.n	8006536 <_printf_float+0x1be>
 8006566:	3301      	adds	r3, #1
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	e7e4      	b.n	8006536 <_printf_float+0x1be>
 800656c:	2101      	movs	r1, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	dc01      	bgt.n	8006576 <_printf_float+0x1fe>
 8006572:	1849      	adds	r1, r1, r1
 8006574:	1ac9      	subs	r1, r1, r3
 8006576:	1852      	adds	r2, r2, r1
 8006578:	e7e9      	b.n	800654e <_printf_float+0x1d6>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	0553      	lsls	r3, r2, #21
 800657e:	d407      	bmi.n	8006590 <_printf_float+0x218>
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	002a      	movs	r2, r5
 8006584:	0038      	movs	r0, r7
 8006586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006588:	47b0      	blx	r6
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d128      	bne.n	80065e0 <_printf_float+0x268>
 800658e:	e751      	b.n	8006434 <_printf_float+0xbc>
 8006590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006592:	2b65      	cmp	r3, #101	; 0x65
 8006594:	d800      	bhi.n	8006598 <_printf_float+0x220>
 8006596:	e0e1      	b.n	800675c <_printf_float+0x3e4>
 8006598:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800659a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	f7f9 ff54 	bl	800044c <__aeabi_dcmpeq>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d031      	beq.n	800660c <_printf_float+0x294>
 80065a8:	2301      	movs	r3, #1
 80065aa:	0038      	movs	r0, r7
 80065ac:	4a34      	ldr	r2, [pc, #208]	; (8006680 <_printf_float+0x308>)
 80065ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065b0:	47b0      	blx	r6
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d100      	bne.n	80065b8 <_printf_float+0x240>
 80065b6:	e73d      	b.n	8006434 <_printf_float+0xbc>
 80065b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065bc:	4293      	cmp	r3, r2
 80065be:	db02      	blt.n	80065c6 <_printf_float+0x24e>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07db      	lsls	r3, r3, #31
 80065c4:	d50c      	bpl.n	80065e0 <_printf_float+0x268>
 80065c6:	0038      	movs	r0, r7
 80065c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ce:	47b0      	blx	r6
 80065d0:	2500      	movs	r5, #0
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d100      	bne.n	80065d8 <_printf_float+0x260>
 80065d6:	e72d      	b.n	8006434 <_printf_float+0xbc>
 80065d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065da:	3b01      	subs	r3, #1
 80065dc:	42ab      	cmp	r3, r5
 80065de:	dc0a      	bgt.n	80065f6 <_printf_float+0x27e>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	079b      	lsls	r3, r3, #30
 80065e4:	d500      	bpl.n	80065e8 <_printf_float+0x270>
 80065e6:	e106      	b.n	80067f6 <_printf_float+0x47e>
 80065e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ea:	68e0      	ldr	r0, [r4, #12]
 80065ec:	4298      	cmp	r0, r3
 80065ee:	db00      	blt.n	80065f2 <_printf_float+0x27a>
 80065f0:	e722      	b.n	8006438 <_printf_float+0xc0>
 80065f2:	0018      	movs	r0, r3
 80065f4:	e720      	b.n	8006438 <_printf_float+0xc0>
 80065f6:	0022      	movs	r2, r4
 80065f8:	2301      	movs	r3, #1
 80065fa:	0038      	movs	r0, r7
 80065fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065fe:	321a      	adds	r2, #26
 8006600:	47b0      	blx	r6
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	d100      	bne.n	8006608 <_printf_float+0x290>
 8006606:	e715      	b.n	8006434 <_printf_float+0xbc>
 8006608:	3501      	adds	r5, #1
 800660a:	e7e5      	b.n	80065d8 <_printf_float+0x260>
 800660c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800660e:	2b00      	cmp	r3, #0
 8006610:	dc38      	bgt.n	8006684 <_printf_float+0x30c>
 8006612:	2301      	movs	r3, #1
 8006614:	0038      	movs	r0, r7
 8006616:	4a1a      	ldr	r2, [pc, #104]	; (8006680 <_printf_float+0x308>)
 8006618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800661a:	47b0      	blx	r6
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d100      	bne.n	8006622 <_printf_float+0x2aa>
 8006620:	e708      	b.n	8006434 <_printf_float+0xbc>
 8006622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006626:	4313      	orrs	r3, r2
 8006628:	d102      	bne.n	8006630 <_printf_float+0x2b8>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	07db      	lsls	r3, r3, #31
 800662e:	d5d7      	bpl.n	80065e0 <_printf_float+0x268>
 8006630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006632:	0038      	movs	r0, r7
 8006634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006638:	47b0      	blx	r6
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d100      	bne.n	8006640 <_printf_float+0x2c8>
 800663e:	e6f9      	b.n	8006434 <_printf_float+0xbc>
 8006640:	2300      	movs	r3, #0
 8006642:	930a      	str	r3, [sp, #40]	; 0x28
 8006644:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006648:	425b      	negs	r3, r3
 800664a:	4293      	cmp	r3, r2
 800664c:	dc01      	bgt.n	8006652 <_printf_float+0x2da>
 800664e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006650:	e797      	b.n	8006582 <_printf_float+0x20a>
 8006652:	0022      	movs	r2, r4
 8006654:	2301      	movs	r3, #1
 8006656:	0038      	movs	r0, r7
 8006658:	9909      	ldr	r1, [sp, #36]	; 0x24
 800665a:	321a      	adds	r2, #26
 800665c:	47b0      	blx	r6
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d100      	bne.n	8006664 <_printf_float+0x2ec>
 8006662:	e6e7      	b.n	8006434 <_printf_float+0xbc>
 8006664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006666:	3301      	adds	r3, #1
 8006668:	e7eb      	b.n	8006642 <_printf_float+0x2ca>
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	7fefffff 	.word	0x7fefffff
 8006670:	0800ccec 	.word	0x0800ccec
 8006674:	0800ccf0 	.word	0x0800ccf0
 8006678:	0800ccf4 	.word	0x0800ccf4
 800667c:	0800ccf8 	.word	0x0800ccf8
 8006680:	0800ccfc 	.word	0x0800ccfc
 8006684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006688:	920a      	str	r2, [sp, #40]	; 0x28
 800668a:	429a      	cmp	r2, r3
 800668c:	dd00      	ble.n	8006690 <_printf_float+0x318>
 800668e:	930a      	str	r3, [sp, #40]	; 0x28
 8006690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	dc3c      	bgt.n	8006710 <_printf_float+0x398>
 8006696:	2300      	movs	r3, #0
 8006698:	930d      	str	r3, [sp, #52]	; 0x34
 800669a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669c:	43db      	mvns	r3, r3
 800669e:	17db      	asrs	r3, r3, #31
 80066a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80066a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066aa:	4013      	ands	r3, r2
 80066ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b2:	4293      	cmp	r3, r2
 80066b4:	dc34      	bgt.n	8006720 <_printf_float+0x3a8>
 80066b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ba:	4293      	cmp	r3, r2
 80066bc:	db3d      	blt.n	800673a <_printf_float+0x3c2>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	07db      	lsls	r3, r3, #31
 80066c2:	d43a      	bmi.n	800673a <_printf_float+0x3c2>
 80066c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	1a52      	subs	r2, r2, r1
 80066ce:	920a      	str	r2, [sp, #40]	; 0x28
 80066d0:	429a      	cmp	r2, r3
 80066d2:	dd00      	ble.n	80066d6 <_printf_float+0x35e>
 80066d4:	930a      	str	r3, [sp, #40]	; 0x28
 80066d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc36      	bgt.n	800674a <_printf_float+0x3d2>
 80066dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066de:	2500      	movs	r5, #0
 80066e0:	43db      	mvns	r3, r3
 80066e2:	17db      	asrs	r3, r3, #31
 80066e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f0:	400a      	ands	r2, r1
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	42ab      	cmp	r3, r5
 80066f6:	dc00      	bgt.n	80066fa <_printf_float+0x382>
 80066f8:	e772      	b.n	80065e0 <_printf_float+0x268>
 80066fa:	0022      	movs	r2, r4
 80066fc:	2301      	movs	r3, #1
 80066fe:	0038      	movs	r0, r7
 8006700:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006702:	321a      	adds	r2, #26
 8006704:	47b0      	blx	r6
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d100      	bne.n	800670c <_printf_float+0x394>
 800670a:	e693      	b.n	8006434 <_printf_float+0xbc>
 800670c:	3501      	adds	r5, #1
 800670e:	e7ea      	b.n	80066e6 <_printf_float+0x36e>
 8006710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006712:	002a      	movs	r2, r5
 8006714:	0038      	movs	r0, r7
 8006716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006718:	47b0      	blx	r6
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d1bb      	bne.n	8006696 <_printf_float+0x31e>
 800671e:	e689      	b.n	8006434 <_printf_float+0xbc>
 8006720:	0022      	movs	r2, r4
 8006722:	2301      	movs	r3, #1
 8006724:	0038      	movs	r0, r7
 8006726:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006728:	321a      	adds	r2, #26
 800672a:	47b0      	blx	r6
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d100      	bne.n	8006732 <_printf_float+0x3ba>
 8006730:	e680      	b.n	8006434 <_printf_float+0xbc>
 8006732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006734:	3301      	adds	r3, #1
 8006736:	930d      	str	r3, [sp, #52]	; 0x34
 8006738:	e7b3      	b.n	80066a2 <_printf_float+0x32a>
 800673a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800673c:	0038      	movs	r0, r7
 800673e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006742:	47b0      	blx	r6
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d1bd      	bne.n	80066c4 <_printf_float+0x34c>
 8006748:	e674      	b.n	8006434 <_printf_float+0xbc>
 800674a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674c:	0038      	movs	r0, r7
 800674e:	18ea      	adds	r2, r5, r3
 8006750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006754:	47b0      	blx	r6
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d1c0      	bne.n	80066dc <_printf_float+0x364>
 800675a:	e66b      	b.n	8006434 <_printf_float+0xbc>
 800675c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800675e:	2b01      	cmp	r3, #1
 8006760:	dc02      	bgt.n	8006768 <_printf_float+0x3f0>
 8006762:	2301      	movs	r3, #1
 8006764:	421a      	tst	r2, r3
 8006766:	d034      	beq.n	80067d2 <_printf_float+0x45a>
 8006768:	2301      	movs	r3, #1
 800676a:	002a      	movs	r2, r5
 800676c:	0038      	movs	r0, r7
 800676e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006770:	47b0      	blx	r6
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d100      	bne.n	8006778 <_printf_float+0x400>
 8006776:	e65d      	b.n	8006434 <_printf_float+0xbc>
 8006778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800677a:	0038      	movs	r0, r7
 800677c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800677e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006780:	47b0      	blx	r6
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d100      	bne.n	8006788 <_printf_float+0x410>
 8006786:	e655      	b.n	8006434 <_printf_float+0xbc>
 8006788:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800678a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800678c:	2200      	movs	r2, #0
 800678e:	2300      	movs	r3, #0
 8006790:	f7f9 fe5c 	bl	800044c <__aeabi_dcmpeq>
 8006794:	2800      	cmp	r0, #0
 8006796:	d11a      	bne.n	80067ce <_printf_float+0x456>
 8006798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800679a:	1c6a      	adds	r2, r5, #1
 800679c:	3b01      	subs	r3, #1
 800679e:	0038      	movs	r0, r7
 80067a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a2:	47b0      	blx	r6
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d10e      	bne.n	80067c6 <_printf_float+0x44e>
 80067a8:	e644      	b.n	8006434 <_printf_float+0xbc>
 80067aa:	0022      	movs	r2, r4
 80067ac:	2301      	movs	r3, #1
 80067ae:	0038      	movs	r0, r7
 80067b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b2:	321a      	adds	r2, #26
 80067b4:	47b0      	blx	r6
 80067b6:	1c43      	adds	r3, r0, #1
 80067b8:	d100      	bne.n	80067bc <_printf_float+0x444>
 80067ba:	e63b      	b.n	8006434 <_printf_float+0xbc>
 80067bc:	3501      	adds	r5, #1
 80067be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067c0:	3b01      	subs	r3, #1
 80067c2:	42ab      	cmp	r3, r5
 80067c4:	dcf1      	bgt.n	80067aa <_printf_float+0x432>
 80067c6:	0022      	movs	r2, r4
 80067c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ca:	3250      	adds	r2, #80	; 0x50
 80067cc:	e6da      	b.n	8006584 <_printf_float+0x20c>
 80067ce:	2500      	movs	r5, #0
 80067d0:	e7f5      	b.n	80067be <_printf_float+0x446>
 80067d2:	002a      	movs	r2, r5
 80067d4:	e7e3      	b.n	800679e <_printf_float+0x426>
 80067d6:	0022      	movs	r2, r4
 80067d8:	2301      	movs	r3, #1
 80067da:	0038      	movs	r0, r7
 80067dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067de:	3219      	adds	r2, #25
 80067e0:	47b0      	blx	r6
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	d100      	bne.n	80067e8 <_printf_float+0x470>
 80067e6:	e625      	b.n	8006434 <_printf_float+0xbc>
 80067e8:	3501      	adds	r5, #1
 80067ea:	68e3      	ldr	r3, [r4, #12]
 80067ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	42ab      	cmp	r3, r5
 80067f2:	dcf0      	bgt.n	80067d6 <_printf_float+0x45e>
 80067f4:	e6f8      	b.n	80065e8 <_printf_float+0x270>
 80067f6:	2500      	movs	r5, #0
 80067f8:	e7f7      	b.n	80067ea <_printf_float+0x472>
 80067fa:	46c0      	nop			; (mov r8, r8)

080067fc <_printf_common>:
 80067fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067fe:	0015      	movs	r5, r2
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	688a      	ldr	r2, [r1, #8]
 8006804:	690b      	ldr	r3, [r1, #16]
 8006806:	000c      	movs	r4, r1
 8006808:	9000      	str	r0, [sp, #0]
 800680a:	4293      	cmp	r3, r2
 800680c:	da00      	bge.n	8006810 <_printf_common+0x14>
 800680e:	0013      	movs	r3, r2
 8006810:	0022      	movs	r2, r4
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	3243      	adds	r2, #67	; 0x43
 8006816:	7812      	ldrb	r2, [r2, #0]
 8006818:	2a00      	cmp	r2, #0
 800681a:	d001      	beq.n	8006820 <_printf_common+0x24>
 800681c:	3301      	adds	r3, #1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	069b      	lsls	r3, r3, #26
 8006824:	d502      	bpl.n	800682c <_printf_common+0x30>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	3302      	adds	r3, #2
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	2306      	movs	r3, #6
 8006830:	0017      	movs	r7, r2
 8006832:	401f      	ands	r7, r3
 8006834:	421a      	tst	r2, r3
 8006836:	d027      	beq.n	8006888 <_printf_common+0x8c>
 8006838:	0023      	movs	r3, r4
 800683a:	3343      	adds	r3, #67	; 0x43
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	1e5a      	subs	r2, r3, #1
 8006840:	4193      	sbcs	r3, r2
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	0692      	lsls	r2, r2, #26
 8006846:	d430      	bmi.n	80068aa <_printf_common+0xae>
 8006848:	0022      	movs	r2, r4
 800684a:	9901      	ldr	r1, [sp, #4]
 800684c:	9800      	ldr	r0, [sp, #0]
 800684e:	9e08      	ldr	r6, [sp, #32]
 8006850:	3243      	adds	r2, #67	; 0x43
 8006852:	47b0      	blx	r6
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d025      	beq.n	80068a4 <_printf_common+0xa8>
 8006858:	2306      	movs	r3, #6
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	682a      	ldr	r2, [r5, #0]
 800685e:	68e1      	ldr	r1, [r4, #12]
 8006860:	2500      	movs	r5, #0
 8006862:	4003      	ands	r3, r0
 8006864:	2b04      	cmp	r3, #4
 8006866:	d103      	bne.n	8006870 <_printf_common+0x74>
 8006868:	1a8d      	subs	r5, r1, r2
 800686a:	43eb      	mvns	r3, r5
 800686c:	17db      	asrs	r3, r3, #31
 800686e:	401d      	ands	r5, r3
 8006870:	68a3      	ldr	r3, [r4, #8]
 8006872:	6922      	ldr	r2, [r4, #16]
 8006874:	4293      	cmp	r3, r2
 8006876:	dd01      	ble.n	800687c <_printf_common+0x80>
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	18ed      	adds	r5, r5, r3
 800687c:	2700      	movs	r7, #0
 800687e:	42bd      	cmp	r5, r7
 8006880:	d120      	bne.n	80068c4 <_printf_common+0xc8>
 8006882:	2000      	movs	r0, #0
 8006884:	e010      	b.n	80068a8 <_printf_common+0xac>
 8006886:	3701      	adds	r7, #1
 8006888:	68e3      	ldr	r3, [r4, #12]
 800688a:	682a      	ldr	r2, [r5, #0]
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	42bb      	cmp	r3, r7
 8006890:	ddd2      	ble.n	8006838 <_printf_common+0x3c>
 8006892:	0022      	movs	r2, r4
 8006894:	2301      	movs	r3, #1
 8006896:	9901      	ldr	r1, [sp, #4]
 8006898:	9800      	ldr	r0, [sp, #0]
 800689a:	9e08      	ldr	r6, [sp, #32]
 800689c:	3219      	adds	r2, #25
 800689e:	47b0      	blx	r6
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d1f0      	bne.n	8006886 <_printf_common+0x8a>
 80068a4:	2001      	movs	r0, #1
 80068a6:	4240      	negs	r0, r0
 80068a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068aa:	2030      	movs	r0, #48	; 0x30
 80068ac:	18e1      	adds	r1, r4, r3
 80068ae:	3143      	adds	r1, #67	; 0x43
 80068b0:	7008      	strb	r0, [r1, #0]
 80068b2:	0021      	movs	r1, r4
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	3145      	adds	r1, #69	; 0x45
 80068b8:	7809      	ldrb	r1, [r1, #0]
 80068ba:	18a2      	adds	r2, r4, r2
 80068bc:	3243      	adds	r2, #67	; 0x43
 80068be:	3302      	adds	r3, #2
 80068c0:	7011      	strb	r1, [r2, #0]
 80068c2:	e7c1      	b.n	8006848 <_printf_common+0x4c>
 80068c4:	0022      	movs	r2, r4
 80068c6:	2301      	movs	r3, #1
 80068c8:	9901      	ldr	r1, [sp, #4]
 80068ca:	9800      	ldr	r0, [sp, #0]
 80068cc:	9e08      	ldr	r6, [sp, #32]
 80068ce:	321a      	adds	r2, #26
 80068d0:	47b0      	blx	r6
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	d0e6      	beq.n	80068a4 <_printf_common+0xa8>
 80068d6:	3701      	adds	r7, #1
 80068d8:	e7d1      	b.n	800687e <_printf_common+0x82>
	...

080068dc <_printf_i>:
 80068dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068de:	b08b      	sub	sp, #44	; 0x2c
 80068e0:	9206      	str	r2, [sp, #24]
 80068e2:	000a      	movs	r2, r1
 80068e4:	3243      	adds	r2, #67	; 0x43
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	9005      	str	r0, [sp, #20]
 80068ea:	9204      	str	r2, [sp, #16]
 80068ec:	7e0a      	ldrb	r2, [r1, #24]
 80068ee:	000c      	movs	r4, r1
 80068f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068f2:	2a78      	cmp	r2, #120	; 0x78
 80068f4:	d807      	bhi.n	8006906 <_printf_i+0x2a>
 80068f6:	2a62      	cmp	r2, #98	; 0x62
 80068f8:	d809      	bhi.n	800690e <_printf_i+0x32>
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	d100      	bne.n	8006900 <_printf_i+0x24>
 80068fe:	e0c1      	b.n	8006a84 <_printf_i+0x1a8>
 8006900:	2a58      	cmp	r2, #88	; 0x58
 8006902:	d100      	bne.n	8006906 <_printf_i+0x2a>
 8006904:	e08c      	b.n	8006a20 <_printf_i+0x144>
 8006906:	0026      	movs	r6, r4
 8006908:	3642      	adds	r6, #66	; 0x42
 800690a:	7032      	strb	r2, [r6, #0]
 800690c:	e022      	b.n	8006954 <_printf_i+0x78>
 800690e:	0010      	movs	r0, r2
 8006910:	3863      	subs	r0, #99	; 0x63
 8006912:	2815      	cmp	r0, #21
 8006914:	d8f7      	bhi.n	8006906 <_printf_i+0x2a>
 8006916:	f7f9 fc09 	bl	800012c <__gnu_thumb1_case_shi>
 800691a:	0016      	.short	0x0016
 800691c:	fff6001f 	.word	0xfff6001f
 8006920:	fff6fff6 	.word	0xfff6fff6
 8006924:	001ffff6 	.word	0x001ffff6
 8006928:	fff6fff6 	.word	0xfff6fff6
 800692c:	fff6fff6 	.word	0xfff6fff6
 8006930:	003600a8 	.word	0x003600a8
 8006934:	fff6009a 	.word	0xfff6009a
 8006938:	00b9fff6 	.word	0x00b9fff6
 800693c:	0036fff6 	.word	0x0036fff6
 8006940:	fff6fff6 	.word	0xfff6fff6
 8006944:	009e      	.short	0x009e
 8006946:	0026      	movs	r6, r4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	3642      	adds	r6, #66	; 0x42
 800694c:	1d11      	adds	r1, r2, #4
 800694e:	6019      	str	r1, [r3, #0]
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	7033      	strb	r3, [r6, #0]
 8006954:	2301      	movs	r3, #1
 8006956:	e0a7      	b.n	8006aa8 <_printf_i+0x1cc>
 8006958:	6808      	ldr	r0, [r1, #0]
 800695a:	6819      	ldr	r1, [r3, #0]
 800695c:	1d0a      	adds	r2, r1, #4
 800695e:	0605      	lsls	r5, r0, #24
 8006960:	d50b      	bpl.n	800697a <_printf_i+0x9e>
 8006962:	680d      	ldr	r5, [r1, #0]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	2d00      	cmp	r5, #0
 8006968:	da03      	bge.n	8006972 <_printf_i+0x96>
 800696a:	232d      	movs	r3, #45	; 0x2d
 800696c:	9a04      	ldr	r2, [sp, #16]
 800696e:	426d      	negs	r5, r5
 8006970:	7013      	strb	r3, [r2, #0]
 8006972:	4b61      	ldr	r3, [pc, #388]	; (8006af8 <_printf_i+0x21c>)
 8006974:	270a      	movs	r7, #10
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	e01b      	b.n	80069b2 <_printf_i+0xd6>
 800697a:	680d      	ldr	r5, [r1, #0]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	0641      	lsls	r1, r0, #25
 8006980:	d5f1      	bpl.n	8006966 <_printf_i+0x8a>
 8006982:	b22d      	sxth	r5, r5
 8006984:	e7ef      	b.n	8006966 <_printf_i+0x8a>
 8006986:	680d      	ldr	r5, [r1, #0]
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	1d08      	adds	r0, r1, #4
 800698c:	6018      	str	r0, [r3, #0]
 800698e:	062e      	lsls	r6, r5, #24
 8006990:	d501      	bpl.n	8006996 <_printf_i+0xba>
 8006992:	680d      	ldr	r5, [r1, #0]
 8006994:	e003      	b.n	800699e <_printf_i+0xc2>
 8006996:	066d      	lsls	r5, r5, #25
 8006998:	d5fb      	bpl.n	8006992 <_printf_i+0xb6>
 800699a:	680d      	ldr	r5, [r1, #0]
 800699c:	b2ad      	uxth	r5, r5
 800699e:	4b56      	ldr	r3, [pc, #344]	; (8006af8 <_printf_i+0x21c>)
 80069a0:	2708      	movs	r7, #8
 80069a2:	9303      	str	r3, [sp, #12]
 80069a4:	2a6f      	cmp	r2, #111	; 0x6f
 80069a6:	d000      	beq.n	80069aa <_printf_i+0xce>
 80069a8:	3702      	adds	r7, #2
 80069aa:	0023      	movs	r3, r4
 80069ac:	2200      	movs	r2, #0
 80069ae:	3343      	adds	r3, #67	; 0x43
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	db03      	blt.n	80069c2 <_printf_i+0xe6>
 80069ba:	2204      	movs	r2, #4
 80069bc:	6821      	ldr	r1, [r4, #0]
 80069be:	4391      	bics	r1, r2
 80069c0:	6021      	str	r1, [r4, #0]
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	d102      	bne.n	80069cc <_printf_i+0xf0>
 80069c6:	9e04      	ldr	r6, [sp, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <_printf_i+0x10a>
 80069cc:	9e04      	ldr	r6, [sp, #16]
 80069ce:	0028      	movs	r0, r5
 80069d0:	0039      	movs	r1, r7
 80069d2:	f7f9 fc3b 	bl	800024c <__aeabi_uidivmod>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	3e01      	subs	r6, #1
 80069da:	5c5b      	ldrb	r3, [r3, r1]
 80069dc:	7033      	strb	r3, [r6, #0]
 80069de:	002b      	movs	r3, r5
 80069e0:	0005      	movs	r5, r0
 80069e2:	429f      	cmp	r7, r3
 80069e4:	d9f3      	bls.n	80069ce <_printf_i+0xf2>
 80069e6:	2f08      	cmp	r7, #8
 80069e8:	d109      	bne.n	80069fe <_printf_i+0x122>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	07db      	lsls	r3, r3, #31
 80069ee:	d506      	bpl.n	80069fe <_printf_i+0x122>
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	6922      	ldr	r2, [r4, #16]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	dc02      	bgt.n	80069fe <_printf_i+0x122>
 80069f8:	2330      	movs	r3, #48	; 0x30
 80069fa:	3e01      	subs	r6, #1
 80069fc:	7033      	strb	r3, [r6, #0]
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	1b9b      	subs	r3, r3, r6
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	0021      	movs	r1, r4
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	9805      	ldr	r0, [sp, #20]
 8006a0c:	9b06      	ldr	r3, [sp, #24]
 8006a0e:	aa09      	add	r2, sp, #36	; 0x24
 8006a10:	f7ff fef4 	bl	80067fc <_printf_common>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d14c      	bne.n	8006ab2 <_printf_i+0x1d6>
 8006a18:	2001      	movs	r0, #1
 8006a1a:	4240      	negs	r0, r0
 8006a1c:	b00b      	add	sp, #44	; 0x2c
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a20:	3145      	adds	r1, #69	; 0x45
 8006a22:	700a      	strb	r2, [r1, #0]
 8006a24:	4a34      	ldr	r2, [pc, #208]	; (8006af8 <_printf_i+0x21c>)
 8006a26:	9203      	str	r2, [sp, #12]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	6821      	ldr	r1, [r4, #0]
 8006a2c:	ca20      	ldmia	r2!, {r5}
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	0608      	lsls	r0, r1, #24
 8006a32:	d516      	bpl.n	8006a62 <_printf_i+0x186>
 8006a34:	07cb      	lsls	r3, r1, #31
 8006a36:	d502      	bpl.n	8006a3e <_printf_i+0x162>
 8006a38:	2320      	movs	r3, #32
 8006a3a:	4319      	orrs	r1, r3
 8006a3c:	6021      	str	r1, [r4, #0]
 8006a3e:	2710      	movs	r7, #16
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	d1b2      	bne.n	80069aa <_printf_i+0xce>
 8006a44:	2320      	movs	r3, #32
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	439a      	bics	r2, r3
 8006a4a:	6022      	str	r2, [r4, #0]
 8006a4c:	e7ad      	b.n	80069aa <_printf_i+0xce>
 8006a4e:	2220      	movs	r2, #32
 8006a50:	6809      	ldr	r1, [r1, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	6022      	str	r2, [r4, #0]
 8006a56:	0022      	movs	r2, r4
 8006a58:	2178      	movs	r1, #120	; 0x78
 8006a5a:	3245      	adds	r2, #69	; 0x45
 8006a5c:	7011      	strb	r1, [r2, #0]
 8006a5e:	4a27      	ldr	r2, [pc, #156]	; (8006afc <_printf_i+0x220>)
 8006a60:	e7e1      	b.n	8006a26 <_printf_i+0x14a>
 8006a62:	0648      	lsls	r0, r1, #25
 8006a64:	d5e6      	bpl.n	8006a34 <_printf_i+0x158>
 8006a66:	b2ad      	uxth	r5, r5
 8006a68:	e7e4      	b.n	8006a34 <_printf_i+0x158>
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	680d      	ldr	r5, [r1, #0]
 8006a6e:	1d10      	adds	r0, r2, #4
 8006a70:	6949      	ldr	r1, [r1, #20]
 8006a72:	6018      	str	r0, [r3, #0]
 8006a74:	6813      	ldr	r3, [r2, #0]
 8006a76:	062e      	lsls	r6, r5, #24
 8006a78:	d501      	bpl.n	8006a7e <_printf_i+0x1a2>
 8006a7a:	6019      	str	r1, [r3, #0]
 8006a7c:	e002      	b.n	8006a84 <_printf_i+0x1a8>
 8006a7e:	066d      	lsls	r5, r5, #25
 8006a80:	d5fb      	bpl.n	8006a7a <_printf_i+0x19e>
 8006a82:	8019      	strh	r1, [r3, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9e04      	ldr	r6, [sp, #16]
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	e7bb      	b.n	8006a04 <_printf_i+0x128>
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	1d11      	adds	r1, r2, #4
 8006a90:	6019      	str	r1, [r3, #0]
 8006a92:	6816      	ldr	r6, [r2, #0]
 8006a94:	2100      	movs	r1, #0
 8006a96:	0030      	movs	r0, r6
 8006a98:	6862      	ldr	r2, [r4, #4]
 8006a9a:	f002 fb5d 	bl	8009158 <memchr>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d001      	beq.n	8006aa6 <_printf_i+0x1ca>
 8006aa2:	1b80      	subs	r0, r0, r6
 8006aa4:	6060      	str	r0, [r4, #4]
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9a04      	ldr	r2, [sp, #16]
 8006aae:	7013      	strb	r3, [r2, #0]
 8006ab0:	e7a8      	b.n	8006a04 <_printf_i+0x128>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	0032      	movs	r2, r6
 8006ab6:	9906      	ldr	r1, [sp, #24]
 8006ab8:	9805      	ldr	r0, [sp, #20]
 8006aba:	9d07      	ldr	r5, [sp, #28]
 8006abc:	47a8      	blx	r5
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d0aa      	beq.n	8006a18 <_printf_i+0x13c>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	079b      	lsls	r3, r3, #30
 8006ac6:	d415      	bmi.n	8006af4 <_printf_i+0x218>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	68e0      	ldr	r0, [r4, #12]
 8006acc:	4298      	cmp	r0, r3
 8006ace:	daa5      	bge.n	8006a1c <_printf_i+0x140>
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	e7a3      	b.n	8006a1c <_printf_i+0x140>
 8006ad4:	0022      	movs	r2, r4
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	9906      	ldr	r1, [sp, #24]
 8006ada:	9805      	ldr	r0, [sp, #20]
 8006adc:	9e07      	ldr	r6, [sp, #28]
 8006ade:	3219      	adds	r2, #25
 8006ae0:	47b0      	blx	r6
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	d098      	beq.n	8006a18 <_printf_i+0x13c>
 8006ae6:	3501      	adds	r5, #1
 8006ae8:	68e3      	ldr	r3, [r4, #12]
 8006aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	42ab      	cmp	r3, r5
 8006af0:	dcf0      	bgt.n	8006ad4 <_printf_i+0x1f8>
 8006af2:	e7e9      	b.n	8006ac8 <_printf_i+0x1ec>
 8006af4:	2500      	movs	r5, #0
 8006af6:	e7f7      	b.n	8006ae8 <_printf_i+0x20c>
 8006af8:	0800ccfe 	.word	0x0800ccfe
 8006afc:	0800cd0f 	.word	0x0800cd0f

08006b00 <_scanf_float>:
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	b08b      	sub	sp, #44	; 0x2c
 8006b04:	0015      	movs	r5, r2
 8006b06:	9001      	str	r0, [sp, #4]
 8006b08:	22ae      	movs	r2, #174	; 0xae
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	9306      	str	r3, [sp, #24]
 8006b0e:	688b      	ldr	r3, [r1, #8]
 8006b10:	000e      	movs	r6, r1
 8006b12:	1e59      	subs	r1, r3, #1
 8006b14:	0052      	lsls	r2, r2, #1
 8006b16:	9005      	str	r0, [sp, #20]
 8006b18:	4291      	cmp	r1, r2
 8006b1a:	d905      	bls.n	8006b28 <_scanf_float+0x28>
 8006b1c:	3b5e      	subs	r3, #94	; 0x5e
 8006b1e:	3bff      	subs	r3, #255	; 0xff
 8006b20:	9305      	str	r3, [sp, #20]
 8006b22:	235e      	movs	r3, #94	; 0x5e
 8006b24:	33ff      	adds	r3, #255	; 0xff
 8006b26:	60b3      	str	r3, [r6, #8]
 8006b28:	23f0      	movs	r3, #240	; 0xf0
 8006b2a:	6832      	ldr	r2, [r6, #0]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	0033      	movs	r3, r6
 8006b34:	2400      	movs	r4, #0
 8006b36:	331c      	adds	r3, #28
 8006b38:	001f      	movs	r7, r3
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	9402      	str	r4, [sp, #8]
 8006b3e:	9408      	str	r4, [sp, #32]
 8006b40:	9407      	str	r4, [sp, #28]
 8006b42:	9400      	str	r4, [sp, #0]
 8006b44:	9404      	str	r4, [sp, #16]
 8006b46:	68b2      	ldr	r2, [r6, #8]
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	d00a      	beq.n	8006b62 <_scanf_float+0x62>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b4e      	cmp	r3, #78	; 0x4e
 8006b52:	d844      	bhi.n	8006bde <_scanf_float+0xde>
 8006b54:	0018      	movs	r0, r3
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d82c      	bhi.n	8006bb4 <_scanf_float+0xb4>
 8006b5a:	382b      	subs	r0, #43	; 0x2b
 8006b5c:	b2c1      	uxtb	r1, r0
 8006b5e:	290e      	cmp	r1, #14
 8006b60:	d92a      	bls.n	8006bb8 <_scanf_float+0xb8>
 8006b62:	9b00      	ldr	r3, [sp, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <_scanf_float+0x70>
 8006b68:	6832      	ldr	r2, [r6, #0]
 8006b6a:	4ba4      	ldr	r3, [pc, #656]	; (8006dfc <_scanf_float+0x2fc>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	9b02      	ldr	r3, [sp, #8]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d900      	bls.n	8006b7a <_scanf_float+0x7a>
 8006b78:	e0f9      	b.n	8006d6e <_scanf_float+0x26e>
 8006b7a:	24be      	movs	r4, #190	; 0xbe
 8006b7c:	0064      	lsls	r4, r4, #1
 8006b7e:	9b03      	ldr	r3, [sp, #12]
 8006b80:	429f      	cmp	r7, r3
 8006b82:	d900      	bls.n	8006b86 <_scanf_float+0x86>
 8006b84:	e0e9      	b.n	8006d5a <_scanf_float+0x25a>
 8006b86:	2301      	movs	r3, #1
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	e185      	b.n	8006e98 <_scanf_float+0x398>
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	3861      	subs	r0, #97	; 0x61
 8006b90:	280d      	cmp	r0, #13
 8006b92:	d8e6      	bhi.n	8006b62 <_scanf_float+0x62>
 8006b94:	f7f9 faca 	bl	800012c <__gnu_thumb1_case_shi>
 8006b98:	ffe50083 	.word	0xffe50083
 8006b9c:	ffe5ffe5 	.word	0xffe5ffe5
 8006ba0:	00a200b6 	.word	0x00a200b6
 8006ba4:	ffe5ffe5 	.word	0xffe5ffe5
 8006ba8:	ffe50089 	.word	0xffe50089
 8006bac:	ffe5ffe5 	.word	0xffe5ffe5
 8006bb0:	0065ffe5 	.word	0x0065ffe5
 8006bb4:	3841      	subs	r0, #65	; 0x41
 8006bb6:	e7eb      	b.n	8006b90 <_scanf_float+0x90>
 8006bb8:	280e      	cmp	r0, #14
 8006bba:	d8d2      	bhi.n	8006b62 <_scanf_float+0x62>
 8006bbc:	f7f9 fab6 	bl	800012c <__gnu_thumb1_case_shi>
 8006bc0:	ffd1004b 	.word	0xffd1004b
 8006bc4:	0098004b 	.word	0x0098004b
 8006bc8:	0020ffd1 	.word	0x0020ffd1
 8006bcc:	00400040 	.word	0x00400040
 8006bd0:	00400040 	.word	0x00400040
 8006bd4:	00400040 	.word	0x00400040
 8006bd8:	00400040 	.word	0x00400040
 8006bdc:	0040      	.short	0x0040
 8006bde:	2b6e      	cmp	r3, #110	; 0x6e
 8006be0:	d809      	bhi.n	8006bf6 <_scanf_float+0xf6>
 8006be2:	2b60      	cmp	r3, #96	; 0x60
 8006be4:	d8d2      	bhi.n	8006b8c <_scanf_float+0x8c>
 8006be6:	2b54      	cmp	r3, #84	; 0x54
 8006be8:	d07d      	beq.n	8006ce6 <_scanf_float+0x1e6>
 8006bea:	2b59      	cmp	r3, #89	; 0x59
 8006bec:	d1b9      	bne.n	8006b62 <_scanf_float+0x62>
 8006bee:	2c07      	cmp	r4, #7
 8006bf0:	d1b7      	bne.n	8006b62 <_scanf_float+0x62>
 8006bf2:	2408      	movs	r4, #8
 8006bf4:	e02c      	b.n	8006c50 <_scanf_float+0x150>
 8006bf6:	2b74      	cmp	r3, #116	; 0x74
 8006bf8:	d075      	beq.n	8006ce6 <_scanf_float+0x1e6>
 8006bfa:	2b79      	cmp	r3, #121	; 0x79
 8006bfc:	d0f7      	beq.n	8006bee <_scanf_float+0xee>
 8006bfe:	e7b0      	b.n	8006b62 <_scanf_float+0x62>
 8006c00:	6831      	ldr	r1, [r6, #0]
 8006c02:	05c8      	lsls	r0, r1, #23
 8006c04:	d51c      	bpl.n	8006c40 <_scanf_float+0x140>
 8006c06:	2380      	movs	r3, #128	; 0x80
 8006c08:	4399      	bics	r1, r3
 8006c0a:	9b00      	ldr	r3, [sp, #0]
 8006c0c:	6031      	str	r1, [r6, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	9b05      	ldr	r3, [sp, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <_scanf_float+0x120>
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	3201      	adds	r2, #1
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	60b2      	str	r2, [r6, #8]
 8006c20:	68b3      	ldr	r3, [r6, #8]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	60b3      	str	r3, [r6, #8]
 8006c26:	6933      	ldr	r3, [r6, #16]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	6133      	str	r3, [r6, #16]
 8006c2c:	686b      	ldr	r3, [r5, #4]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	606b      	str	r3, [r5, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dc00      	bgt.n	8006c38 <_scanf_float+0x138>
 8006c36:	e086      	b.n	8006d46 <_scanf_float+0x246>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	e782      	b.n	8006b46 <_scanf_float+0x46>
 8006c40:	9a02      	ldr	r2, [sp, #8]
 8006c42:	1912      	adds	r2, r2, r4
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d18c      	bne.n	8006b62 <_scanf_float+0x62>
 8006c48:	4a6d      	ldr	r2, [pc, #436]	; (8006e00 <_scanf_float+0x300>)
 8006c4a:	6831      	ldr	r1, [r6, #0]
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	6032      	str	r2, [r6, #0]
 8006c50:	703b      	strb	r3, [r7, #0]
 8006c52:	3701      	adds	r7, #1
 8006c54:	e7e4      	b.n	8006c20 <_scanf_float+0x120>
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	6832      	ldr	r2, [r6, #0]
 8006c5a:	420a      	tst	r2, r1
 8006c5c:	d081      	beq.n	8006b62 <_scanf_float+0x62>
 8006c5e:	438a      	bics	r2, r1
 8006c60:	e7f5      	b.n	8006c4e <_scanf_float+0x14e>
 8006c62:	9a02      	ldr	r2, [sp, #8]
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	d10f      	bne.n	8006c88 <_scanf_float+0x188>
 8006c68:	9a00      	ldr	r2, [sp, #0]
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d10f      	bne.n	8006c8e <_scanf_float+0x18e>
 8006c6e:	6832      	ldr	r2, [r6, #0]
 8006c70:	21e0      	movs	r1, #224	; 0xe0
 8006c72:	0010      	movs	r0, r2
 8006c74:	00c9      	lsls	r1, r1, #3
 8006c76:	4008      	ands	r0, r1
 8006c78:	4288      	cmp	r0, r1
 8006c7a:	d108      	bne.n	8006c8e <_scanf_float+0x18e>
 8006c7c:	4961      	ldr	r1, [pc, #388]	; (8006e04 <_scanf_float+0x304>)
 8006c7e:	400a      	ands	r2, r1
 8006c80:	6032      	str	r2, [r6, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	9202      	str	r2, [sp, #8]
 8006c86:	e7e3      	b.n	8006c50 <_scanf_float+0x150>
 8006c88:	9a02      	ldr	r2, [sp, #8]
 8006c8a:	2a02      	cmp	r2, #2
 8006c8c:	d059      	beq.n	8006d42 <_scanf_float+0x242>
 8006c8e:	2c01      	cmp	r4, #1
 8006c90:	d002      	beq.n	8006c98 <_scanf_float+0x198>
 8006c92:	2c04      	cmp	r4, #4
 8006c94:	d000      	beq.n	8006c98 <_scanf_float+0x198>
 8006c96:	e764      	b.n	8006b62 <_scanf_float+0x62>
 8006c98:	3401      	adds	r4, #1
 8006c9a:	b2e4      	uxtb	r4, r4
 8006c9c:	e7d8      	b.n	8006c50 <_scanf_float+0x150>
 8006c9e:	9a02      	ldr	r2, [sp, #8]
 8006ca0:	2a01      	cmp	r2, #1
 8006ca2:	d000      	beq.n	8006ca6 <_scanf_float+0x1a6>
 8006ca4:	e75d      	b.n	8006b62 <_scanf_float+0x62>
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	e7ec      	b.n	8006c84 <_scanf_float+0x184>
 8006caa:	2c00      	cmp	r4, #0
 8006cac:	d110      	bne.n	8006cd0 <_scanf_float+0x1d0>
 8006cae:	9a00      	ldr	r2, [sp, #0]
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	d000      	beq.n	8006cb6 <_scanf_float+0x1b6>
 8006cb4:	e758      	b.n	8006b68 <_scanf_float+0x68>
 8006cb6:	6832      	ldr	r2, [r6, #0]
 8006cb8:	21e0      	movs	r1, #224	; 0xe0
 8006cba:	0010      	movs	r0, r2
 8006cbc:	00c9      	lsls	r1, r1, #3
 8006cbe:	4008      	ands	r0, r1
 8006cc0:	4288      	cmp	r0, r1
 8006cc2:	d000      	beq.n	8006cc6 <_scanf_float+0x1c6>
 8006cc4:	e754      	b.n	8006b70 <_scanf_float+0x70>
 8006cc6:	494f      	ldr	r1, [pc, #316]	; (8006e04 <_scanf_float+0x304>)
 8006cc8:	3401      	adds	r4, #1
 8006cca:	400a      	ands	r2, r1
 8006ccc:	6032      	str	r2, [r6, #0]
 8006cce:	e7bf      	b.n	8006c50 <_scanf_float+0x150>
 8006cd0:	21fd      	movs	r1, #253	; 0xfd
 8006cd2:	1ee2      	subs	r2, r4, #3
 8006cd4:	420a      	tst	r2, r1
 8006cd6:	d000      	beq.n	8006cda <_scanf_float+0x1da>
 8006cd8:	e743      	b.n	8006b62 <_scanf_float+0x62>
 8006cda:	e7dd      	b.n	8006c98 <_scanf_float+0x198>
 8006cdc:	2c02      	cmp	r4, #2
 8006cde:	d000      	beq.n	8006ce2 <_scanf_float+0x1e2>
 8006ce0:	e73f      	b.n	8006b62 <_scanf_float+0x62>
 8006ce2:	2403      	movs	r4, #3
 8006ce4:	e7b4      	b.n	8006c50 <_scanf_float+0x150>
 8006ce6:	2c06      	cmp	r4, #6
 8006ce8:	d000      	beq.n	8006cec <_scanf_float+0x1ec>
 8006cea:	e73a      	b.n	8006b62 <_scanf_float+0x62>
 8006cec:	2407      	movs	r4, #7
 8006cee:	e7af      	b.n	8006c50 <_scanf_float+0x150>
 8006cf0:	6832      	ldr	r2, [r6, #0]
 8006cf2:	0591      	lsls	r1, r2, #22
 8006cf4:	d400      	bmi.n	8006cf8 <_scanf_float+0x1f8>
 8006cf6:	e734      	b.n	8006b62 <_scanf_float+0x62>
 8006cf8:	4943      	ldr	r1, [pc, #268]	; (8006e08 <_scanf_float+0x308>)
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	6032      	str	r2, [r6, #0]
 8006cfe:	9a00      	ldr	r2, [sp, #0]
 8006d00:	9204      	str	r2, [sp, #16]
 8006d02:	e7a5      	b.n	8006c50 <_scanf_float+0x150>
 8006d04:	21a0      	movs	r1, #160	; 0xa0
 8006d06:	2080      	movs	r0, #128	; 0x80
 8006d08:	6832      	ldr	r2, [r6, #0]
 8006d0a:	00c9      	lsls	r1, r1, #3
 8006d0c:	4011      	ands	r1, r2
 8006d0e:	00c0      	lsls	r0, r0, #3
 8006d10:	4281      	cmp	r1, r0
 8006d12:	d006      	beq.n	8006d22 <_scanf_float+0x222>
 8006d14:	4202      	tst	r2, r0
 8006d16:	d100      	bne.n	8006d1a <_scanf_float+0x21a>
 8006d18:	e723      	b.n	8006b62 <_scanf_float+0x62>
 8006d1a:	9900      	ldr	r1, [sp, #0]
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	d100      	bne.n	8006d22 <_scanf_float+0x222>
 8006d20:	e726      	b.n	8006b70 <_scanf_float+0x70>
 8006d22:	0591      	lsls	r1, r2, #22
 8006d24:	d404      	bmi.n	8006d30 <_scanf_float+0x230>
 8006d26:	9900      	ldr	r1, [sp, #0]
 8006d28:	9804      	ldr	r0, [sp, #16]
 8006d2a:	9708      	str	r7, [sp, #32]
 8006d2c:	1a09      	subs	r1, r1, r0
 8006d2e:	9107      	str	r1, [sp, #28]
 8006d30:	4934      	ldr	r1, [pc, #208]	; (8006e04 <_scanf_float+0x304>)
 8006d32:	400a      	ands	r2, r1
 8006d34:	21c0      	movs	r1, #192	; 0xc0
 8006d36:	0049      	lsls	r1, r1, #1
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	6032      	str	r2, [r6, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	9200      	str	r2, [sp, #0]
 8006d40:	e786      	b.n	8006c50 <_scanf_float+0x150>
 8006d42:	2203      	movs	r2, #3
 8006d44:	e79e      	b.n	8006c84 <_scanf_float+0x184>
 8006d46:	23c0      	movs	r3, #192	; 0xc0
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	0029      	movs	r1, r5
 8006d4c:	58f3      	ldr	r3, [r6, r3]
 8006d4e:	9801      	ldr	r0, [sp, #4]
 8006d50:	4798      	blx	r3
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d100      	bne.n	8006d58 <_scanf_float+0x258>
 8006d56:	e6f6      	b.n	8006b46 <_scanf_float+0x46>
 8006d58:	e703      	b.n	8006b62 <_scanf_float+0x62>
 8006d5a:	3f01      	subs	r7, #1
 8006d5c:	5933      	ldr	r3, [r6, r4]
 8006d5e:	002a      	movs	r2, r5
 8006d60:	7839      	ldrb	r1, [r7, #0]
 8006d62:	9801      	ldr	r0, [sp, #4]
 8006d64:	4798      	blx	r3
 8006d66:	6933      	ldr	r3, [r6, #16]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	6133      	str	r3, [r6, #16]
 8006d6c:	e707      	b.n	8006b7e <_scanf_float+0x7e>
 8006d6e:	1e63      	subs	r3, r4, #1
 8006d70:	2b06      	cmp	r3, #6
 8006d72:	d80e      	bhi.n	8006d92 <_scanf_float+0x292>
 8006d74:	9702      	str	r7, [sp, #8]
 8006d76:	2c02      	cmp	r4, #2
 8006d78:	d920      	bls.n	8006dbc <_scanf_float+0x2bc>
 8006d7a:	1be3      	subs	r3, r4, r7
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	9b02      	ldr	r3, [sp, #8]
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	189b      	adds	r3, r3, r2
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d827      	bhi.n	8006ddc <_scanf_float+0x2dc>
 8006d8c:	3c03      	subs	r4, #3
 8006d8e:	b2e4      	uxtb	r4, r4
 8006d90:	1b3f      	subs	r7, r7, r4
 8006d92:	6833      	ldr	r3, [r6, #0]
 8006d94:	05da      	lsls	r2, r3, #23
 8006d96:	d554      	bpl.n	8006e42 <_scanf_float+0x342>
 8006d98:	055b      	lsls	r3, r3, #21
 8006d9a:	d537      	bpl.n	8006e0c <_scanf_float+0x30c>
 8006d9c:	24be      	movs	r4, #190	; 0xbe
 8006d9e:	0064      	lsls	r4, r4, #1
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	429f      	cmp	r7, r3
 8006da4:	d800      	bhi.n	8006da8 <_scanf_float+0x2a8>
 8006da6:	e6ee      	b.n	8006b86 <_scanf_float+0x86>
 8006da8:	3f01      	subs	r7, #1
 8006daa:	5933      	ldr	r3, [r6, r4]
 8006dac:	002a      	movs	r2, r5
 8006dae:	7839      	ldrb	r1, [r7, #0]
 8006db0:	9801      	ldr	r0, [sp, #4]
 8006db2:	4798      	blx	r3
 8006db4:	6933      	ldr	r3, [r6, #16]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	6133      	str	r3, [r6, #16]
 8006dba:	e7f1      	b.n	8006da0 <_scanf_float+0x2a0>
 8006dbc:	24be      	movs	r4, #190	; 0xbe
 8006dbe:	0064      	lsls	r4, r4, #1
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	429f      	cmp	r7, r3
 8006dc4:	d800      	bhi.n	8006dc8 <_scanf_float+0x2c8>
 8006dc6:	e6de      	b.n	8006b86 <_scanf_float+0x86>
 8006dc8:	3f01      	subs	r7, #1
 8006dca:	5933      	ldr	r3, [r6, r4]
 8006dcc:	002a      	movs	r2, r5
 8006dce:	7839      	ldrb	r1, [r7, #0]
 8006dd0:	9801      	ldr	r0, [sp, #4]
 8006dd2:	4798      	blx	r3
 8006dd4:	6933      	ldr	r3, [r6, #16]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	6133      	str	r3, [r6, #16]
 8006dda:	e7f1      	b.n	8006dc0 <_scanf_float+0x2c0>
 8006ddc:	9b02      	ldr	r3, [sp, #8]
 8006dde:	002a      	movs	r2, r5
 8006de0:	3b01      	subs	r3, #1
 8006de2:	7819      	ldrb	r1, [r3, #0]
 8006de4:	9302      	str	r3, [sp, #8]
 8006de6:	23be      	movs	r3, #190	; 0xbe
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	58f3      	ldr	r3, [r6, r3]
 8006dec:	9801      	ldr	r0, [sp, #4]
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	4798      	blx	r3
 8006df2:	6933      	ldr	r3, [r6, #16]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	6133      	str	r3, [r6, #16]
 8006df8:	e7c2      	b.n	8006d80 <_scanf_float+0x280>
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	fffffeff 	.word	0xfffffeff
 8006e00:	fffffe7f 	.word	0xfffffe7f
 8006e04:	fffff87f 	.word	0xfffff87f
 8006e08:	fffffd7f 	.word	0xfffffd7f
 8006e0c:	6933      	ldr	r3, [r6, #16]
 8006e0e:	1e7c      	subs	r4, r7, #1
 8006e10:	7821      	ldrb	r1, [r4, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	6133      	str	r3, [r6, #16]
 8006e16:	2965      	cmp	r1, #101	; 0x65
 8006e18:	d00c      	beq.n	8006e34 <_scanf_float+0x334>
 8006e1a:	2945      	cmp	r1, #69	; 0x45
 8006e1c:	d00a      	beq.n	8006e34 <_scanf_float+0x334>
 8006e1e:	23be      	movs	r3, #190	; 0xbe
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	58f3      	ldr	r3, [r6, r3]
 8006e24:	002a      	movs	r2, r5
 8006e26:	9801      	ldr	r0, [sp, #4]
 8006e28:	4798      	blx	r3
 8006e2a:	6933      	ldr	r3, [r6, #16]
 8006e2c:	1ebc      	subs	r4, r7, #2
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	7821      	ldrb	r1, [r4, #0]
 8006e32:	6133      	str	r3, [r6, #16]
 8006e34:	23be      	movs	r3, #190	; 0xbe
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	002a      	movs	r2, r5
 8006e3a:	58f3      	ldr	r3, [r6, r3]
 8006e3c:	9801      	ldr	r0, [sp, #4]
 8006e3e:	4798      	blx	r3
 8006e40:	0027      	movs	r7, r4
 8006e42:	6832      	ldr	r2, [r6, #0]
 8006e44:	2310      	movs	r3, #16
 8006e46:	0011      	movs	r1, r2
 8006e48:	4019      	ands	r1, r3
 8006e4a:	9102      	str	r1, [sp, #8]
 8006e4c:	421a      	tst	r2, r3
 8006e4e:	d158      	bne.n	8006f02 <_scanf_float+0x402>
 8006e50:	23c0      	movs	r3, #192	; 0xc0
 8006e52:	7039      	strb	r1, [r7, #0]
 8006e54:	6832      	ldr	r2, [r6, #0]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2280      	movs	r2, #128	; 0x80
 8006e5c:	00d2      	lsls	r2, r2, #3
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d11d      	bne.n	8006e9e <_scanf_float+0x39e>
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	9a00      	ldr	r2, [sp, #0]
 8006e66:	9900      	ldr	r1, [sp, #0]
 8006e68:	1a9a      	subs	r2, r3, r2
 8006e6a:	428b      	cmp	r3, r1
 8006e6c:	d124      	bne.n	8006eb8 <_scanf_float+0x3b8>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	9903      	ldr	r1, [sp, #12]
 8006e72:	9801      	ldr	r0, [sp, #4]
 8006e74:	f000 fe9c 	bl	8007bb0 <_strtod_r>
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	000d      	movs	r5, r1
 8006e7c:	6831      	ldr	r1, [r6, #0]
 8006e7e:	0004      	movs	r4, r0
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	078a      	lsls	r2, r1, #30
 8006e84:	d525      	bpl.n	8006ed2 <_scanf_float+0x3d2>
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	9906      	ldr	r1, [sp, #24]
 8006e8a:	600a      	str	r2, [r1, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	601c      	str	r4, [r3, #0]
 8006e90:	605d      	str	r5, [r3, #4]
 8006e92:	68f3      	ldr	r3, [r6, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60f3      	str	r3, [r6, #12]
 8006e98:	9802      	ldr	r0, [sp, #8]
 8006e9a:	b00b      	add	sp, #44	; 0x2c
 8006e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9e:	9b07      	ldr	r3, [sp, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0e4      	beq.n	8006e6e <_scanf_float+0x36e>
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	9a02      	ldr	r2, [sp, #8]
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	9801      	ldr	r0, [sp, #4]
 8006eac:	230a      	movs	r3, #10
 8006eae:	f000 ff15 	bl	8007cdc <_strtol_r>
 8006eb2:	9b07      	ldr	r3, [sp, #28]
 8006eb4:	9f08      	ldr	r7, [sp, #32]
 8006eb6:	1ac2      	subs	r2, r0, r3
 8006eb8:	0033      	movs	r3, r6
 8006eba:	3370      	adds	r3, #112	; 0x70
 8006ebc:	33ff      	adds	r3, #255	; 0xff
 8006ebe:	429f      	cmp	r7, r3
 8006ec0:	d302      	bcc.n	8006ec8 <_scanf_float+0x3c8>
 8006ec2:	0037      	movs	r7, r6
 8006ec4:	376f      	adds	r7, #111	; 0x6f
 8006ec6:	37ff      	adds	r7, #255	; 0xff
 8006ec8:	0038      	movs	r0, r7
 8006eca:	490f      	ldr	r1, [pc, #60]	; (8006f08 <_scanf_float+0x408>)
 8006ecc:	f000 f824 	bl	8006f18 <siprintf>
 8006ed0:	e7cd      	b.n	8006e6e <_scanf_float+0x36e>
 8006ed2:	1d1a      	adds	r2, r3, #4
 8006ed4:	0749      	lsls	r1, r1, #29
 8006ed6:	d4d7      	bmi.n	8006e88 <_scanf_float+0x388>
 8006ed8:	9906      	ldr	r1, [sp, #24]
 8006eda:	0020      	movs	r0, r4
 8006edc:	600a      	str	r2, [r1, #0]
 8006ede:	681f      	ldr	r7, [r3, #0]
 8006ee0:	0022      	movs	r2, r4
 8006ee2:	002b      	movs	r3, r5
 8006ee4:	0029      	movs	r1, r5
 8006ee6:	f7fb fefb 	bl	8002ce0 <__aeabi_dcmpun>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d004      	beq.n	8006ef8 <_scanf_float+0x3f8>
 8006eee:	4807      	ldr	r0, [pc, #28]	; (8006f0c <_scanf_float+0x40c>)
 8006ef0:	f000 f80e 	bl	8006f10 <nanf>
 8006ef4:	6038      	str	r0, [r7, #0]
 8006ef6:	e7cc      	b.n	8006e92 <_scanf_float+0x392>
 8006ef8:	0020      	movs	r0, r4
 8006efa:	0029      	movs	r1, r5
 8006efc:	f7fb ffe2 	bl	8002ec4 <__aeabi_d2f>
 8006f00:	e7f8      	b.n	8006ef4 <_scanf_float+0x3f4>
 8006f02:	2300      	movs	r3, #0
 8006f04:	e640      	b.n	8006b88 <_scanf_float+0x88>
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	0800cd20 	.word	0x0800cd20
 8006f0c:	0800d128 	.word	0x0800d128

08006f10 <nanf>:
 8006f10:	4800      	ldr	r0, [pc, #0]	; (8006f14 <nanf+0x4>)
 8006f12:	4770      	bx	lr
 8006f14:	7fc00000 	.word	0x7fc00000

08006f18 <siprintf>:
 8006f18:	b40e      	push	{r1, r2, r3}
 8006f1a:	b500      	push	{lr}
 8006f1c:	490b      	ldr	r1, [pc, #44]	; (8006f4c <siprintf+0x34>)
 8006f1e:	b09c      	sub	sp, #112	; 0x70
 8006f20:	ab1d      	add	r3, sp, #116	; 0x74
 8006f22:	9002      	str	r0, [sp, #8]
 8006f24:	9006      	str	r0, [sp, #24]
 8006f26:	9107      	str	r1, [sp, #28]
 8006f28:	9104      	str	r1, [sp, #16]
 8006f2a:	4809      	ldr	r0, [pc, #36]	; (8006f50 <siprintf+0x38>)
 8006f2c:	4909      	ldr	r1, [pc, #36]	; (8006f54 <siprintf+0x3c>)
 8006f2e:	cb04      	ldmia	r3!, {r2}
 8006f30:	9105      	str	r1, [sp, #20]
 8006f32:	6800      	ldr	r0, [r0, #0]
 8006f34:	a902      	add	r1, sp, #8
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	f002 ff5c 	bl	8009df4 <_svfiprintf_r>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9a02      	ldr	r2, [sp, #8]
 8006f40:	7013      	strb	r3, [r2, #0]
 8006f42:	b01c      	add	sp, #112	; 0x70
 8006f44:	bc08      	pop	{r3}
 8006f46:	b003      	add	sp, #12
 8006f48:	4718      	bx	r3
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	7fffffff 	.word	0x7fffffff
 8006f50:	20000050 	.word	0x20000050
 8006f54:	ffff0208 	.word	0xffff0208

08006f58 <sulp>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	0016      	movs	r6, r2
 8006f5c:	000d      	movs	r5, r1
 8006f5e:	f002 fc93 	bl	8009888 <__ulp>
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	d00d      	beq.n	8006f82 <sulp+0x2a>
 8006f66:	236b      	movs	r3, #107	; 0x6b
 8006f68:	006a      	lsls	r2, r5, #1
 8006f6a:	0d52      	lsrs	r2, r2, #21
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd07      	ble.n	8006f82 <sulp+0x2a>
 8006f72:	2400      	movs	r4, #0
 8006f74:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <sulp+0x2c>)
 8006f76:	051b      	lsls	r3, r3, #20
 8006f78:	189d      	adds	r5, r3, r2
 8006f7a:	002b      	movs	r3, r5
 8006f7c:	0022      	movs	r2, r4
 8006f7e:	f7fb f8b1 	bl	80020e4 <__aeabi_dmul>
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	3ff00000 	.word	0x3ff00000

08006f88 <_strtod_l>:
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	001d      	movs	r5, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	b0a5      	sub	sp, #148	; 0x94
 8006f90:	9320      	str	r3, [sp, #128]	; 0x80
 8006f92:	4bac      	ldr	r3, [pc, #688]	; (8007244 <_strtod_l+0x2bc>)
 8006f94:	9005      	str	r0, [sp, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	9108      	str	r1, [sp, #32]
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	9307      	str	r3, [sp, #28]
 8006f9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006fa0:	f7f9 f8b2 	bl	8000108 <strlen>
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	0004      	movs	r4, r0
 8006fa8:	2700      	movs	r7, #0
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	931f      	str	r3, [sp, #124]	; 0x7c
 8006fae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006fb0:	7813      	ldrb	r3, [r2, #0]
 8006fb2:	2b2b      	cmp	r3, #43	; 0x2b
 8006fb4:	d058      	beq.n	8007068 <_strtod_l+0xe0>
 8006fb6:	d844      	bhi.n	8007042 <_strtod_l+0xba>
 8006fb8:	2b0d      	cmp	r3, #13
 8006fba:	d83d      	bhi.n	8007038 <_strtod_l+0xb0>
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d83d      	bhi.n	800703c <_strtod_l+0xb4>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d047      	beq.n	8007054 <_strtod_l+0xcc>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc8:	2200      	movs	r2, #0
 8006fca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8006fce:	9306      	str	r3, [sp, #24]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b30      	cmp	r3, #48	; 0x30
 8006fd4:	d000      	beq.n	8006fd8 <_strtod_l+0x50>
 8006fd6:	e07f      	b.n	80070d8 <_strtod_l+0x150>
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	3220      	adds	r2, #32
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	4393      	bics	r3, r2
 8006fe0:	2b58      	cmp	r3, #88	; 0x58
 8006fe2:	d000      	beq.n	8006fe6 <_strtod_l+0x5e>
 8006fe4:	e06e      	b.n	80070c4 <_strtod_l+0x13c>
 8006fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fe8:	9502      	str	r5, [sp, #8]
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	ab20      	add	r3, sp, #128	; 0x80
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	4a95      	ldr	r2, [pc, #596]	; (8007248 <_strtod_l+0x2c0>)
 8006ff2:	ab21      	add	r3, sp, #132	; 0x84
 8006ff4:	9805      	ldr	r0, [sp, #20]
 8006ff6:	a91f      	add	r1, sp, #124	; 0x7c
 8006ff8:	f001 fd84 	bl	8008b04 <__gethex>
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	0005      	movs	r5, r0
 8007000:	0004      	movs	r4, r0
 8007002:	401d      	ands	r5, r3
 8007004:	4218      	tst	r0, r3
 8007006:	d006      	beq.n	8007016 <_strtod_l+0x8e>
 8007008:	2d06      	cmp	r5, #6
 800700a:	d12f      	bne.n	800706c <_strtod_l+0xe4>
 800700c:	9b06      	ldr	r3, [sp, #24]
 800700e:	3301      	adds	r3, #1
 8007010:	931f      	str	r3, [sp, #124]	; 0x7c
 8007012:	2300      	movs	r3, #0
 8007014:	930e      	str	r3, [sp, #56]	; 0x38
 8007016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <_strtod_l+0x9a>
 800701c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800701e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01c      	beq.n	8007062 <_strtod_l+0xda>
 8007028:	2380      	movs	r3, #128	; 0x80
 800702a:	0032      	movs	r2, r6
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	0010      	movs	r0, r2
 8007032:	0019      	movs	r1, r3
 8007034:	b025      	add	sp, #148	; 0x94
 8007036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007038:	2b20      	cmp	r3, #32
 800703a:	d1c3      	bne.n	8006fc4 <_strtod_l+0x3c>
 800703c:	3201      	adds	r2, #1
 800703e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007040:	e7b5      	b.n	8006fae <_strtod_l+0x26>
 8007042:	2b2d      	cmp	r3, #45	; 0x2d
 8007044:	d1be      	bne.n	8006fc4 <_strtod_l+0x3c>
 8007046:	3b2c      	subs	r3, #44	; 0x2c
 8007048:	930e      	str	r3, [sp, #56]	; 0x38
 800704a:	1c53      	adds	r3, r2, #1
 800704c:	931f      	str	r3, [sp, #124]	; 0x7c
 800704e:	7853      	ldrb	r3, [r2, #1]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1b9      	bne.n	8006fc8 <_strtod_l+0x40>
 8007054:	9b08      	ldr	r3, [sp, #32]
 8007056:	931f      	str	r3, [sp, #124]	; 0x7c
 8007058:	2300      	movs	r3, #0
 800705a:	930e      	str	r3, [sp, #56]	; 0x38
 800705c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1dc      	bne.n	800701c <_strtod_l+0x94>
 8007062:	0032      	movs	r2, r6
 8007064:	003b      	movs	r3, r7
 8007066:	e7e3      	b.n	8007030 <_strtod_l+0xa8>
 8007068:	2300      	movs	r3, #0
 800706a:	e7ed      	b.n	8007048 <_strtod_l+0xc0>
 800706c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800706e:	2a00      	cmp	r2, #0
 8007070:	d007      	beq.n	8007082 <_strtod_l+0xfa>
 8007072:	2135      	movs	r1, #53	; 0x35
 8007074:	a822      	add	r0, sp, #136	; 0x88
 8007076:	f002 fd08 	bl	8009a8a <__copybits>
 800707a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800707c:	9805      	ldr	r0, [sp, #20]
 800707e:	f002 f8c3 	bl	8009208 <_Bfree>
 8007082:	1e68      	subs	r0, r5, #1
 8007084:	2804      	cmp	r0, #4
 8007086:	d806      	bhi.n	8007096 <_strtod_l+0x10e>
 8007088:	f7f9 f846 	bl	8000118 <__gnu_thumb1_case_uqi>
 800708c:	1816030b 	.word	0x1816030b
 8007090:	0b          	.byte	0x0b
 8007091:	00          	.byte	0x00
 8007092:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007094:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007096:	0723      	lsls	r3, r4, #28
 8007098:	d5bd      	bpl.n	8007016 <_strtod_l+0x8e>
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	061b      	lsls	r3, r3, #24
 800709e:	431f      	orrs	r7, r3
 80070a0:	e7b9      	b.n	8007016 <_strtod_l+0x8e>
 80070a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070a4:	4a69      	ldr	r2, [pc, #420]	; (800724c <_strtod_l+0x2c4>)
 80070a6:	496a      	ldr	r1, [pc, #424]	; (8007250 <_strtod_l+0x2c8>)
 80070a8:	401a      	ands	r2, r3
 80070aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ac:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80070ae:	185b      	adds	r3, r3, r1
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	431a      	orrs	r2, r3
 80070b4:	0017      	movs	r7, r2
 80070b6:	e7ee      	b.n	8007096 <_strtod_l+0x10e>
 80070b8:	4f66      	ldr	r7, [pc, #408]	; (8007254 <_strtod_l+0x2cc>)
 80070ba:	e7ec      	b.n	8007096 <_strtod_l+0x10e>
 80070bc:	2601      	movs	r6, #1
 80070be:	4f66      	ldr	r7, [pc, #408]	; (8007258 <_strtod_l+0x2d0>)
 80070c0:	4276      	negs	r6, r6
 80070c2:	e7e8      	b.n	8007096 <_strtod_l+0x10e>
 80070c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	921f      	str	r2, [sp, #124]	; 0x7c
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b30      	cmp	r3, #48	; 0x30
 80070ce:	d0f9      	beq.n	80070c4 <_strtod_l+0x13c>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0a0      	beq.n	8007016 <_strtod_l+0x8e>
 80070d4:	2301      	movs	r3, #1
 80070d6:	930a      	str	r3, [sp, #40]	; 0x28
 80070d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070da:	220a      	movs	r2, #10
 80070dc:	9310      	str	r3, [sp, #64]	; 0x40
 80070de:	2300      	movs	r3, #0
 80070e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80070e8:	7805      	ldrb	r5, [r0, #0]
 80070ea:	002b      	movs	r3, r5
 80070ec:	3b30      	subs	r3, #48	; 0x30
 80070ee:	b2d9      	uxtb	r1, r3
 80070f0:	2909      	cmp	r1, #9
 80070f2:	d927      	bls.n	8007144 <_strtod_l+0x1bc>
 80070f4:	0022      	movs	r2, r4
 80070f6:	9907      	ldr	r1, [sp, #28]
 80070f8:	f002 ff94 	bl	800a024 <strncmp>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d033      	beq.n	8007168 <_strtod_l+0x1e0>
 8007100:	2000      	movs	r0, #0
 8007102:	002b      	movs	r3, r5
 8007104:	4684      	mov	ip, r0
 8007106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007108:	900c      	str	r0, [sp, #48]	; 0x30
 800710a:	9206      	str	r2, [sp, #24]
 800710c:	2220      	movs	r2, #32
 800710e:	0019      	movs	r1, r3
 8007110:	4391      	bics	r1, r2
 8007112:	000a      	movs	r2, r1
 8007114:	2100      	movs	r1, #0
 8007116:	9107      	str	r1, [sp, #28]
 8007118:	2a45      	cmp	r2, #69	; 0x45
 800711a:	d000      	beq.n	800711e <_strtod_l+0x196>
 800711c:	e0c5      	b.n	80072aa <_strtod_l+0x322>
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007122:	4303      	orrs	r3, r0
 8007124:	4313      	orrs	r3, r2
 8007126:	428b      	cmp	r3, r1
 8007128:	d094      	beq.n	8007054 <_strtod_l+0xcc>
 800712a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800712c:	9308      	str	r3, [sp, #32]
 800712e:	3301      	adds	r3, #1
 8007130:	931f      	str	r3, [sp, #124]	; 0x7c
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b2b      	cmp	r3, #43	; 0x2b
 8007138:	d076      	beq.n	8007228 <_strtod_l+0x2a0>
 800713a:	000c      	movs	r4, r1
 800713c:	2b2d      	cmp	r3, #45	; 0x2d
 800713e:	d179      	bne.n	8007234 <_strtod_l+0x2ac>
 8007140:	2401      	movs	r4, #1
 8007142:	e072      	b.n	800722a <_strtod_l+0x2a2>
 8007144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007146:	2908      	cmp	r1, #8
 8007148:	dc09      	bgt.n	800715e <_strtod_l+0x1d6>
 800714a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800714c:	4351      	muls	r1, r2
 800714e:	185b      	adds	r3, r3, r1
 8007150:	930b      	str	r3, [sp, #44]	; 0x2c
 8007152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007154:	3001      	adds	r0, #1
 8007156:	3301      	adds	r3, #1
 8007158:	9309      	str	r3, [sp, #36]	; 0x24
 800715a:	901f      	str	r0, [sp, #124]	; 0x7c
 800715c:	e7c3      	b.n	80070e6 <_strtod_l+0x15e>
 800715e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007160:	4351      	muls	r1, r2
 8007162:	185b      	adds	r3, r3, r1
 8007164:	930f      	str	r3, [sp, #60]	; 0x3c
 8007166:	e7f4      	b.n	8007152 <_strtod_l+0x1ca>
 8007168:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800716a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716c:	191c      	adds	r4, r3, r4
 800716e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007170:	7823      	ldrb	r3, [r4, #0]
 8007172:	2a00      	cmp	r2, #0
 8007174:	d039      	beq.n	80071ea <_strtod_l+0x262>
 8007176:	900c      	str	r0, [sp, #48]	; 0x30
 8007178:	9206      	str	r2, [sp, #24]
 800717a:	001a      	movs	r2, r3
 800717c:	3a30      	subs	r2, #48	; 0x30
 800717e:	2a09      	cmp	r2, #9
 8007180:	d912      	bls.n	80071a8 <_strtod_l+0x220>
 8007182:	2201      	movs	r2, #1
 8007184:	4694      	mov	ip, r2
 8007186:	e7c1      	b.n	800710c <_strtod_l+0x184>
 8007188:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800718a:	3001      	adds	r0, #1
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b30      	cmp	r3, #48	; 0x30
 8007194:	d0f8      	beq.n	8007188 <_strtod_l+0x200>
 8007196:	001a      	movs	r2, r3
 8007198:	3a31      	subs	r2, #49	; 0x31
 800719a:	2a08      	cmp	r2, #8
 800719c:	d83f      	bhi.n	800721e <_strtod_l+0x296>
 800719e:	900c      	str	r0, [sp, #48]	; 0x30
 80071a0:	2000      	movs	r0, #0
 80071a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80071a4:	9006      	str	r0, [sp, #24]
 80071a6:	9210      	str	r2, [sp, #64]	; 0x40
 80071a8:	001a      	movs	r2, r3
 80071aa:	1c41      	adds	r1, r0, #1
 80071ac:	3a30      	subs	r2, #48	; 0x30
 80071ae:	2b30      	cmp	r3, #48	; 0x30
 80071b0:	d015      	beq.n	80071de <_strtod_l+0x256>
 80071b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071b4:	185b      	adds	r3, r3, r1
 80071b6:	210a      	movs	r1, #10
 80071b8:	930c      	str	r3, [sp, #48]	; 0x30
 80071ba:	9b06      	ldr	r3, [sp, #24]
 80071bc:	18c4      	adds	r4, r0, r3
 80071be:	42a3      	cmp	r3, r4
 80071c0:	d115      	bne.n	80071ee <_strtod_l+0x266>
 80071c2:	9906      	ldr	r1, [sp, #24]
 80071c4:	9b06      	ldr	r3, [sp, #24]
 80071c6:	3101      	adds	r1, #1
 80071c8:	1809      	adds	r1, r1, r0
 80071ca:	181b      	adds	r3, r3, r0
 80071cc:	9106      	str	r1, [sp, #24]
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	dc1b      	bgt.n	800720a <_strtod_l+0x282>
 80071d2:	230a      	movs	r3, #10
 80071d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071d6:	434b      	muls	r3, r1
 80071d8:	2100      	movs	r1, #0
 80071da:	18d3      	adds	r3, r2, r3
 80071dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80071de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071e0:	0008      	movs	r0, r1
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	e7c7      	b.n	800717a <_strtod_l+0x1f2>
 80071ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ec:	e7d1      	b.n	8007192 <_strtod_l+0x20a>
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	dc04      	bgt.n	80071fc <_strtod_l+0x274>
 80071f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071f4:	434d      	muls	r5, r1
 80071f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80071f8:	3301      	adds	r3, #1
 80071fa:	e7e0      	b.n	80071be <_strtod_l+0x236>
 80071fc:	1c5d      	adds	r5, r3, #1
 80071fe:	2d10      	cmp	r5, #16
 8007200:	dcfa      	bgt.n	80071f8 <_strtod_l+0x270>
 8007202:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007204:	434d      	muls	r5, r1
 8007206:	950f      	str	r5, [sp, #60]	; 0x3c
 8007208:	e7f6      	b.n	80071f8 <_strtod_l+0x270>
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	2100      	movs	r1, #0
 800720e:	2b10      	cmp	r3, #16
 8007210:	dce5      	bgt.n	80071de <_strtod_l+0x256>
 8007212:	230a      	movs	r3, #10
 8007214:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007216:	4343      	muls	r3, r0
 8007218:	18d3      	adds	r3, r2, r3
 800721a:	930f      	str	r3, [sp, #60]	; 0x3c
 800721c:	e7df      	b.n	80071de <_strtod_l+0x256>
 800721e:	2200      	movs	r2, #0
 8007220:	920c      	str	r2, [sp, #48]	; 0x30
 8007222:	9206      	str	r2, [sp, #24]
 8007224:	3201      	adds	r2, #1
 8007226:	e7ad      	b.n	8007184 <_strtod_l+0x1fc>
 8007228:	2400      	movs	r4, #0
 800722a:	9b08      	ldr	r3, [sp, #32]
 800722c:	3302      	adds	r3, #2
 800722e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007230:	9b08      	ldr	r3, [sp, #32]
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	001a      	movs	r2, r3
 8007236:	3a30      	subs	r2, #48	; 0x30
 8007238:	2a09      	cmp	r2, #9
 800723a:	d913      	bls.n	8007264 <_strtod_l+0x2dc>
 800723c:	9a08      	ldr	r2, [sp, #32]
 800723e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007240:	2200      	movs	r2, #0
 8007242:	e031      	b.n	80072a8 <_strtod_l+0x320>
 8007244:	0800cf70 	.word	0x0800cf70
 8007248:	0800cd28 	.word	0x0800cd28
 800724c:	ffefffff 	.word	0xffefffff
 8007250:	00000433 	.word	0x00000433
 8007254:	7ff00000 	.word	0x7ff00000
 8007258:	7fffffff 	.word	0x7fffffff
 800725c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	921f      	str	r2, [sp, #124]	; 0x7c
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	d0f9      	beq.n	800725c <_strtod_l+0x2d4>
 8007268:	2200      	movs	r2, #0
 800726a:	9207      	str	r2, [sp, #28]
 800726c:	001a      	movs	r2, r3
 800726e:	3a31      	subs	r2, #49	; 0x31
 8007270:	2a08      	cmp	r2, #8
 8007272:	d81a      	bhi.n	80072aa <_strtod_l+0x322>
 8007274:	3b30      	subs	r3, #48	; 0x30
 8007276:	001a      	movs	r2, r3
 8007278:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	911f      	str	r1, [sp, #124]	; 0x7c
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	001d      	movs	r5, r3
 8007286:	3d30      	subs	r5, #48	; 0x30
 8007288:	2d09      	cmp	r5, #9
 800728a:	d939      	bls.n	8007300 <_strtod_l+0x378>
 800728c:	9d07      	ldr	r5, [sp, #28]
 800728e:	1b49      	subs	r1, r1, r5
 8007290:	4db0      	ldr	r5, [pc, #704]	; (8007554 <_strtod_l+0x5cc>)
 8007292:	9507      	str	r5, [sp, #28]
 8007294:	2908      	cmp	r1, #8
 8007296:	dc03      	bgt.n	80072a0 <_strtod_l+0x318>
 8007298:	9207      	str	r2, [sp, #28]
 800729a:	42aa      	cmp	r2, r5
 800729c:	dd00      	ble.n	80072a0 <_strtod_l+0x318>
 800729e:	9507      	str	r5, [sp, #28]
 80072a0:	2c00      	cmp	r4, #0
 80072a2:	d002      	beq.n	80072aa <_strtod_l+0x322>
 80072a4:	9a07      	ldr	r2, [sp, #28]
 80072a6:	4252      	negs	r2, r2
 80072a8:	9207      	str	r2, [sp, #28]
 80072aa:	9a06      	ldr	r2, [sp, #24]
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	d14b      	bne.n	8007348 <_strtod_l+0x3c0>
 80072b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b2:	4310      	orrs	r0, r2
 80072b4:	d000      	beq.n	80072b8 <_strtod_l+0x330>
 80072b6:	e6ae      	b.n	8007016 <_strtod_l+0x8e>
 80072b8:	4662      	mov	r2, ip
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d000      	beq.n	80072c0 <_strtod_l+0x338>
 80072be:	e6c9      	b.n	8007054 <_strtod_l+0xcc>
 80072c0:	2b69      	cmp	r3, #105	; 0x69
 80072c2:	d025      	beq.n	8007310 <_strtod_l+0x388>
 80072c4:	dc21      	bgt.n	800730a <_strtod_l+0x382>
 80072c6:	2b49      	cmp	r3, #73	; 0x49
 80072c8:	d022      	beq.n	8007310 <_strtod_l+0x388>
 80072ca:	2b4e      	cmp	r3, #78	; 0x4e
 80072cc:	d000      	beq.n	80072d0 <_strtod_l+0x348>
 80072ce:	e6c1      	b.n	8007054 <_strtod_l+0xcc>
 80072d0:	49a1      	ldr	r1, [pc, #644]	; (8007558 <_strtod_l+0x5d0>)
 80072d2:	a81f      	add	r0, sp, #124	; 0x7c
 80072d4:	f001 fe64 	bl	8008fa0 <__match>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d100      	bne.n	80072de <_strtod_l+0x356>
 80072dc:	e6ba      	b.n	8007054 <_strtod_l+0xcc>
 80072de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b28      	cmp	r3, #40	; 0x28
 80072e4:	d12a      	bne.n	800733c <_strtod_l+0x3b4>
 80072e6:	499d      	ldr	r1, [pc, #628]	; (800755c <_strtod_l+0x5d4>)
 80072e8:	aa22      	add	r2, sp, #136	; 0x88
 80072ea:	a81f      	add	r0, sp, #124	; 0x7c
 80072ec:	f001 fe6c 	bl	8008fc8 <__hexnan>
 80072f0:	2805      	cmp	r0, #5
 80072f2:	d123      	bne.n	800733c <_strtod_l+0x3b4>
 80072f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072f6:	4a9a      	ldr	r2, [pc, #616]	; (8007560 <_strtod_l+0x5d8>)
 80072f8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80072fa:	431a      	orrs	r2, r3
 80072fc:	0017      	movs	r7, r2
 80072fe:	e68a      	b.n	8007016 <_strtod_l+0x8e>
 8007300:	210a      	movs	r1, #10
 8007302:	434a      	muls	r2, r1
 8007304:	18d2      	adds	r2, r2, r3
 8007306:	3a30      	subs	r2, #48	; 0x30
 8007308:	e7b8      	b.n	800727c <_strtod_l+0x2f4>
 800730a:	2b6e      	cmp	r3, #110	; 0x6e
 800730c:	d0e0      	beq.n	80072d0 <_strtod_l+0x348>
 800730e:	e6a1      	b.n	8007054 <_strtod_l+0xcc>
 8007310:	4994      	ldr	r1, [pc, #592]	; (8007564 <_strtod_l+0x5dc>)
 8007312:	a81f      	add	r0, sp, #124	; 0x7c
 8007314:	f001 fe44 	bl	8008fa0 <__match>
 8007318:	2800      	cmp	r0, #0
 800731a:	d100      	bne.n	800731e <_strtod_l+0x396>
 800731c:	e69a      	b.n	8007054 <_strtod_l+0xcc>
 800731e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007320:	4991      	ldr	r1, [pc, #580]	; (8007568 <_strtod_l+0x5e0>)
 8007322:	3b01      	subs	r3, #1
 8007324:	a81f      	add	r0, sp, #124	; 0x7c
 8007326:	931f      	str	r3, [sp, #124]	; 0x7c
 8007328:	f001 fe3a 	bl	8008fa0 <__match>
 800732c:	2800      	cmp	r0, #0
 800732e:	d102      	bne.n	8007336 <_strtod_l+0x3ae>
 8007330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007332:	3301      	adds	r3, #1
 8007334:	931f      	str	r3, [sp, #124]	; 0x7c
 8007336:	2600      	movs	r6, #0
 8007338:	4f89      	ldr	r7, [pc, #548]	; (8007560 <_strtod_l+0x5d8>)
 800733a:	e66c      	b.n	8007016 <_strtod_l+0x8e>
 800733c:	488b      	ldr	r0, [pc, #556]	; (800756c <_strtod_l+0x5e4>)
 800733e:	f002 fe59 	bl	8009ff4 <nan>
 8007342:	0006      	movs	r6, r0
 8007344:	000f      	movs	r7, r1
 8007346:	e666      	b.n	8007016 <_strtod_l+0x8e>
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	930a      	str	r3, [sp, #40]	; 0x28
 8007350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <_strtod_l+0x3d2>
 8007356:	9b06      	ldr	r3, [sp, #24]
 8007358:	9309      	str	r3, [sp, #36]	; 0x24
 800735a:	9c06      	ldr	r4, [sp, #24]
 800735c:	2c10      	cmp	r4, #16
 800735e:	dd00      	ble.n	8007362 <_strtod_l+0x3da>
 8007360:	2410      	movs	r4, #16
 8007362:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007364:	f7fb fd40 	bl	8002de8 <__aeabi_ui2d>
 8007368:	9b06      	ldr	r3, [sp, #24]
 800736a:	0006      	movs	r6, r0
 800736c:	000f      	movs	r7, r1
 800736e:	2b09      	cmp	r3, #9
 8007370:	dd15      	ble.n	800739e <_strtod_l+0x416>
 8007372:	0022      	movs	r2, r4
 8007374:	4b7e      	ldr	r3, [pc, #504]	; (8007570 <_strtod_l+0x5e8>)
 8007376:	3a09      	subs	r2, #9
 8007378:	00d2      	lsls	r2, r2, #3
 800737a:	189b      	adds	r3, r3, r2
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f7fa feb0 	bl	80020e4 <__aeabi_dmul>
 8007384:	0006      	movs	r6, r0
 8007386:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007388:	000f      	movs	r7, r1
 800738a:	f7fb fd2d 	bl	8002de8 <__aeabi_ui2d>
 800738e:	0002      	movs	r2, r0
 8007390:	000b      	movs	r3, r1
 8007392:	0030      	movs	r0, r6
 8007394:	0039      	movs	r1, r7
 8007396:	f7f9 ff67 	bl	8001268 <__aeabi_dadd>
 800739a:	0006      	movs	r6, r0
 800739c:	000f      	movs	r7, r1
 800739e:	9b06      	ldr	r3, [sp, #24]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	dc39      	bgt.n	8007418 <_strtod_l+0x490>
 80073a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d100      	bne.n	80073ac <_strtod_l+0x424>
 80073aa:	e634      	b.n	8007016 <_strtod_l+0x8e>
 80073ac:	dd24      	ble.n	80073f8 <_strtod_l+0x470>
 80073ae:	2b16      	cmp	r3, #22
 80073b0:	dc09      	bgt.n	80073c6 <_strtod_l+0x43e>
 80073b2:	496f      	ldr	r1, [pc, #444]	; (8007570 <_strtod_l+0x5e8>)
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	18c9      	adds	r1, r1, r3
 80073b8:	0032      	movs	r2, r6
 80073ba:	6808      	ldr	r0, [r1, #0]
 80073bc:	6849      	ldr	r1, [r1, #4]
 80073be:	003b      	movs	r3, r7
 80073c0:	f7fa fe90 	bl	80020e4 <__aeabi_dmul>
 80073c4:	e7bd      	b.n	8007342 <_strtod_l+0x3ba>
 80073c6:	2325      	movs	r3, #37	; 0x25
 80073c8:	9a06      	ldr	r2, [sp, #24]
 80073ca:	1a9b      	subs	r3, r3, r2
 80073cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ce:	4293      	cmp	r3, r2
 80073d0:	db22      	blt.n	8007418 <_strtod_l+0x490>
 80073d2:	240f      	movs	r4, #15
 80073d4:	9b06      	ldr	r3, [sp, #24]
 80073d6:	4d66      	ldr	r5, [pc, #408]	; (8007570 <_strtod_l+0x5e8>)
 80073d8:	1ae4      	subs	r4, r4, r3
 80073da:	00e1      	lsls	r1, r4, #3
 80073dc:	1869      	adds	r1, r5, r1
 80073de:	0032      	movs	r2, r6
 80073e0:	6808      	ldr	r0, [r1, #0]
 80073e2:	6849      	ldr	r1, [r1, #4]
 80073e4:	003b      	movs	r3, r7
 80073e6:	f7fa fe7d 	bl	80020e4 <__aeabi_dmul>
 80073ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ec:	1b1c      	subs	r4, r3, r4
 80073ee:	00e4      	lsls	r4, r4, #3
 80073f0:	192c      	adds	r4, r5, r4
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	e7e3      	b.n	80073c0 <_strtod_l+0x438>
 80073f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fa:	3316      	adds	r3, #22
 80073fc:	db0c      	blt.n	8007418 <_strtod_l+0x490>
 80073fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007400:	9a07      	ldr	r2, [sp, #28]
 8007402:	0030      	movs	r0, r6
 8007404:	1a9a      	subs	r2, r3, r2
 8007406:	4b5a      	ldr	r3, [pc, #360]	; (8007570 <_strtod_l+0x5e8>)
 8007408:	00d2      	lsls	r2, r2, #3
 800740a:	189b      	adds	r3, r3, r2
 800740c:	0039      	movs	r1, r7
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f7fa fa65 	bl	80018e0 <__aeabi_ddiv>
 8007416:	e794      	b.n	8007342 <_strtod_l+0x3ba>
 8007418:	9b06      	ldr	r3, [sp, #24]
 800741a:	1b1c      	subs	r4, r3, r4
 800741c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741e:	18e4      	adds	r4, r4, r3
 8007420:	2c00      	cmp	r4, #0
 8007422:	dd72      	ble.n	800750a <_strtod_l+0x582>
 8007424:	230f      	movs	r3, #15
 8007426:	0021      	movs	r1, r4
 8007428:	4019      	ands	r1, r3
 800742a:	421c      	tst	r4, r3
 800742c:	d00a      	beq.n	8007444 <_strtod_l+0x4bc>
 800742e:	00cb      	lsls	r3, r1, #3
 8007430:	494f      	ldr	r1, [pc, #316]	; (8007570 <_strtod_l+0x5e8>)
 8007432:	0032      	movs	r2, r6
 8007434:	18c9      	adds	r1, r1, r3
 8007436:	6808      	ldr	r0, [r1, #0]
 8007438:	6849      	ldr	r1, [r1, #4]
 800743a:	003b      	movs	r3, r7
 800743c:	f7fa fe52 	bl	80020e4 <__aeabi_dmul>
 8007440:	0006      	movs	r6, r0
 8007442:	000f      	movs	r7, r1
 8007444:	230f      	movs	r3, #15
 8007446:	439c      	bics	r4, r3
 8007448:	d04a      	beq.n	80074e0 <_strtod_l+0x558>
 800744a:	3326      	adds	r3, #38	; 0x26
 800744c:	33ff      	adds	r3, #255	; 0xff
 800744e:	429c      	cmp	r4, r3
 8007450:	dd22      	ble.n	8007498 <_strtod_l+0x510>
 8007452:	2300      	movs	r3, #0
 8007454:	9306      	str	r3, [sp, #24]
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	930b      	str	r3, [sp, #44]	; 0x2c
 800745a:	9309      	str	r3, [sp, #36]	; 0x24
 800745c:	2322      	movs	r3, #34	; 0x22
 800745e:	2600      	movs	r6, #0
 8007460:	9a05      	ldr	r2, [sp, #20]
 8007462:	4f3f      	ldr	r7, [pc, #252]	; (8007560 <_strtod_l+0x5d8>)
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007468:	42b3      	cmp	r3, r6
 800746a:	d100      	bne.n	800746e <_strtod_l+0x4e6>
 800746c:	e5d3      	b.n	8007016 <_strtod_l+0x8e>
 800746e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007470:	9805      	ldr	r0, [sp, #20]
 8007472:	f001 fec9 	bl	8009208 <_Bfree>
 8007476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007478:	9805      	ldr	r0, [sp, #20]
 800747a:	f001 fec5 	bl	8009208 <_Bfree>
 800747e:	9907      	ldr	r1, [sp, #28]
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	f001 fec1 	bl	8009208 <_Bfree>
 8007486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007488:	9805      	ldr	r0, [sp, #20]
 800748a:	f001 febd 	bl	8009208 <_Bfree>
 800748e:	9906      	ldr	r1, [sp, #24]
 8007490:	9805      	ldr	r0, [sp, #20]
 8007492:	f001 feb9 	bl	8009208 <_Bfree>
 8007496:	e5be      	b.n	8007016 <_strtod_l+0x8e>
 8007498:	2300      	movs	r3, #0
 800749a:	0030      	movs	r0, r6
 800749c:	0039      	movs	r1, r7
 800749e:	4d35      	ldr	r5, [pc, #212]	; (8007574 <_strtod_l+0x5ec>)
 80074a0:	1124      	asrs	r4, r4, #4
 80074a2:	9308      	str	r3, [sp, #32]
 80074a4:	2c01      	cmp	r4, #1
 80074a6:	dc1e      	bgt.n	80074e6 <_strtod_l+0x55e>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <_strtod_l+0x528>
 80074ac:	0006      	movs	r6, r0
 80074ae:	000f      	movs	r7, r1
 80074b0:	4b31      	ldr	r3, [pc, #196]	; (8007578 <_strtod_l+0x5f0>)
 80074b2:	0032      	movs	r2, r6
 80074b4:	18ff      	adds	r7, r7, r3
 80074b6:	9b08      	ldr	r3, [sp, #32]
 80074b8:	00dd      	lsls	r5, r3, #3
 80074ba:	4b2e      	ldr	r3, [pc, #184]	; (8007574 <_strtod_l+0x5ec>)
 80074bc:	195d      	adds	r5, r3, r5
 80074be:	6828      	ldr	r0, [r5, #0]
 80074c0:	6869      	ldr	r1, [r5, #4]
 80074c2:	003b      	movs	r3, r7
 80074c4:	f7fa fe0e 	bl	80020e4 <__aeabi_dmul>
 80074c8:	4b25      	ldr	r3, [pc, #148]	; (8007560 <_strtod_l+0x5d8>)
 80074ca:	4a2c      	ldr	r2, [pc, #176]	; (800757c <_strtod_l+0x5f4>)
 80074cc:	0006      	movs	r6, r0
 80074ce:	400b      	ands	r3, r1
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d8be      	bhi.n	8007452 <_strtod_l+0x4ca>
 80074d4:	4a2a      	ldr	r2, [pc, #168]	; (8007580 <_strtod_l+0x5f8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d913      	bls.n	8007502 <_strtod_l+0x57a>
 80074da:	2601      	movs	r6, #1
 80074dc:	4f29      	ldr	r7, [pc, #164]	; (8007584 <_strtod_l+0x5fc>)
 80074de:	4276      	negs	r6, r6
 80074e0:	2300      	movs	r3, #0
 80074e2:	9308      	str	r3, [sp, #32]
 80074e4:	e087      	b.n	80075f6 <_strtod_l+0x66e>
 80074e6:	2201      	movs	r2, #1
 80074e8:	4214      	tst	r4, r2
 80074ea:	d004      	beq.n	80074f6 <_strtod_l+0x56e>
 80074ec:	682a      	ldr	r2, [r5, #0]
 80074ee:	686b      	ldr	r3, [r5, #4]
 80074f0:	f7fa fdf8 	bl	80020e4 <__aeabi_dmul>
 80074f4:	2301      	movs	r3, #1
 80074f6:	9a08      	ldr	r2, [sp, #32]
 80074f8:	1064      	asrs	r4, r4, #1
 80074fa:	3201      	adds	r2, #1
 80074fc:	9208      	str	r2, [sp, #32]
 80074fe:	3508      	adds	r5, #8
 8007500:	e7d0      	b.n	80074a4 <_strtod_l+0x51c>
 8007502:	23d4      	movs	r3, #212	; 0xd4
 8007504:	049b      	lsls	r3, r3, #18
 8007506:	18cf      	adds	r7, r1, r3
 8007508:	e7ea      	b.n	80074e0 <_strtod_l+0x558>
 800750a:	2c00      	cmp	r4, #0
 800750c:	d0e8      	beq.n	80074e0 <_strtod_l+0x558>
 800750e:	4264      	negs	r4, r4
 8007510:	220f      	movs	r2, #15
 8007512:	0023      	movs	r3, r4
 8007514:	4013      	ands	r3, r2
 8007516:	4214      	tst	r4, r2
 8007518:	d00a      	beq.n	8007530 <_strtod_l+0x5a8>
 800751a:	00da      	lsls	r2, r3, #3
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <_strtod_l+0x5e8>)
 800751e:	0030      	movs	r0, r6
 8007520:	189b      	adds	r3, r3, r2
 8007522:	0039      	movs	r1, r7
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f7fa f9da 	bl	80018e0 <__aeabi_ddiv>
 800752c:	0006      	movs	r6, r0
 800752e:	000f      	movs	r7, r1
 8007530:	1124      	asrs	r4, r4, #4
 8007532:	d0d5      	beq.n	80074e0 <_strtod_l+0x558>
 8007534:	2c1f      	cmp	r4, #31
 8007536:	dd27      	ble.n	8007588 <_strtod_l+0x600>
 8007538:	2300      	movs	r3, #0
 800753a:	9306      	str	r3, [sp, #24]
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007540:	9309      	str	r3, [sp, #36]	; 0x24
 8007542:	2322      	movs	r3, #34	; 0x22
 8007544:	9a05      	ldr	r2, [sp, #20]
 8007546:	2600      	movs	r6, #0
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754c:	2700      	movs	r7, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d18d      	bne.n	800746e <_strtod_l+0x4e6>
 8007552:	e560      	b.n	8007016 <_strtod_l+0x8e>
 8007554:	00004e1f 	.word	0x00004e1f
 8007558:	0800ccf9 	.word	0x0800ccf9
 800755c:	0800cd3c 	.word	0x0800cd3c
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	0800ccf1 	.word	0x0800ccf1
 8007568:	0800ce7c 	.word	0x0800ce7c
 800756c:	0800d128 	.word	0x0800d128
 8007570:	0800d008 	.word	0x0800d008
 8007574:	0800cfe0 	.word	0x0800cfe0
 8007578:	fcb00000 	.word	0xfcb00000
 800757c:	7ca00000 	.word	0x7ca00000
 8007580:	7c900000 	.word	0x7c900000
 8007584:	7fefffff 	.word	0x7fefffff
 8007588:	2310      	movs	r3, #16
 800758a:	0022      	movs	r2, r4
 800758c:	401a      	ands	r2, r3
 800758e:	9208      	str	r2, [sp, #32]
 8007590:	421c      	tst	r4, r3
 8007592:	d001      	beq.n	8007598 <_strtod_l+0x610>
 8007594:	335a      	adds	r3, #90	; 0x5a
 8007596:	9308      	str	r3, [sp, #32]
 8007598:	0030      	movs	r0, r6
 800759a:	0039      	movs	r1, r7
 800759c:	2300      	movs	r3, #0
 800759e:	4dc5      	ldr	r5, [pc, #788]	; (80078b4 <_strtod_l+0x92c>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	4214      	tst	r4, r2
 80075a4:	d004      	beq.n	80075b0 <_strtod_l+0x628>
 80075a6:	682a      	ldr	r2, [r5, #0]
 80075a8:	686b      	ldr	r3, [r5, #4]
 80075aa:	f7fa fd9b 	bl	80020e4 <__aeabi_dmul>
 80075ae:	2301      	movs	r3, #1
 80075b0:	1064      	asrs	r4, r4, #1
 80075b2:	3508      	adds	r5, #8
 80075b4:	2c00      	cmp	r4, #0
 80075b6:	d1f3      	bne.n	80075a0 <_strtod_l+0x618>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <_strtod_l+0x638>
 80075bc:	0006      	movs	r6, r0
 80075be:	000f      	movs	r7, r1
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00f      	beq.n	80075e6 <_strtod_l+0x65e>
 80075c6:	236b      	movs	r3, #107	; 0x6b
 80075c8:	007a      	lsls	r2, r7, #1
 80075ca:	0d52      	lsrs	r2, r2, #21
 80075cc:	0039      	movs	r1, r7
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dd08      	ble.n	80075e6 <_strtod_l+0x65e>
 80075d4:	2b1f      	cmp	r3, #31
 80075d6:	dc00      	bgt.n	80075da <_strtod_l+0x652>
 80075d8:	e124      	b.n	8007824 <_strtod_l+0x89c>
 80075da:	2600      	movs	r6, #0
 80075dc:	2b34      	cmp	r3, #52	; 0x34
 80075de:	dc00      	bgt.n	80075e2 <_strtod_l+0x65a>
 80075e0:	e119      	b.n	8007816 <_strtod_l+0x88e>
 80075e2:	27dc      	movs	r7, #220	; 0xdc
 80075e4:	04bf      	lsls	r7, r7, #18
 80075e6:	2200      	movs	r2, #0
 80075e8:	2300      	movs	r3, #0
 80075ea:	0030      	movs	r0, r6
 80075ec:	0039      	movs	r1, r7
 80075ee:	f7f8 ff2d 	bl	800044c <__aeabi_dcmpeq>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1a0      	bne.n	8007538 <_strtod_l+0x5b0>
 80075f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80075fe:	9b06      	ldr	r3, [sp, #24]
 8007600:	9805      	ldr	r0, [sp, #20]
 8007602:	f001 fe69 	bl	80092d8 <__s2b>
 8007606:	900b      	str	r0, [sp, #44]	; 0x2c
 8007608:	2800      	cmp	r0, #0
 800760a:	d100      	bne.n	800760e <_strtod_l+0x686>
 800760c:	e721      	b.n	8007452 <_strtod_l+0x4ca>
 800760e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007610:	9907      	ldr	r1, [sp, #28]
 8007612:	17da      	asrs	r2, r3, #31
 8007614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	401a      	ands	r2, r3
 800761a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761c:	9215      	str	r2, [sp, #84]	; 0x54
 800761e:	43db      	mvns	r3, r3
 8007620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007622:	17db      	asrs	r3, r3, #31
 8007624:	401a      	ands	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	921a      	str	r2, [sp, #104]	; 0x68
 800762a:	9306      	str	r3, [sp, #24]
 800762c:	9307      	str	r3, [sp, #28]
 800762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007630:	9805      	ldr	r0, [sp, #20]
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	f001 fda4 	bl	8009180 <_Balloc>
 8007638:	9009      	str	r0, [sp, #36]	; 0x24
 800763a:	2800      	cmp	r0, #0
 800763c:	d100      	bne.n	8007640 <_strtod_l+0x6b8>
 800763e:	e70d      	b.n	800745c <_strtod_l+0x4d4>
 8007640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	310c      	adds	r1, #12
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	300c      	adds	r0, #12
 800764e:	930c      	str	r3, [sp, #48]	; 0x30
 8007650:	f001 fd8d 	bl	800916e <memcpy>
 8007654:	ab22      	add	r3, sp, #136	; 0x88
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	ab21      	add	r3, sp, #132	; 0x84
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	0032      	movs	r2, r6
 800765e:	003b      	movs	r3, r7
 8007660:	9805      	ldr	r0, [sp, #20]
 8007662:	9612      	str	r6, [sp, #72]	; 0x48
 8007664:	9713      	str	r7, [sp, #76]	; 0x4c
 8007666:	f002 f983 	bl	8009970 <__d2b>
 800766a:	9020      	str	r0, [sp, #128]	; 0x80
 800766c:	2800      	cmp	r0, #0
 800766e:	d100      	bne.n	8007672 <_strtod_l+0x6ea>
 8007670:	e6f4      	b.n	800745c <_strtod_l+0x4d4>
 8007672:	2101      	movs	r1, #1
 8007674:	9805      	ldr	r0, [sp, #20]
 8007676:	f001 fec3 	bl	8009400 <__i2b>
 800767a:	9007      	str	r0, [sp, #28]
 800767c:	2800      	cmp	r0, #0
 800767e:	d100      	bne.n	8007682 <_strtod_l+0x6fa>
 8007680:	e6ec      	b.n	800745c <_strtod_l+0x4d4>
 8007682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007684:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007686:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007688:	1ad4      	subs	r4, r2, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	db01      	blt.n	8007692 <_strtod_l+0x70a>
 800768e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007690:	195d      	adds	r5, r3, r5
 8007692:	9908      	ldr	r1, [sp, #32]
 8007694:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	2136      	movs	r1, #54	; 0x36
 800769a:	189b      	adds	r3, r3, r2
 800769c:	1a8a      	subs	r2, r1, r2
 800769e:	4986      	ldr	r1, [pc, #536]	; (80078b8 <_strtod_l+0x930>)
 80076a0:	2001      	movs	r0, #1
 80076a2:	468c      	mov	ip, r1
 80076a4:	2100      	movs	r1, #0
 80076a6:	3b01      	subs	r3, #1
 80076a8:	9110      	str	r1, [sp, #64]	; 0x40
 80076aa:	9014      	str	r0, [sp, #80]	; 0x50
 80076ac:	4563      	cmp	r3, ip
 80076ae:	da07      	bge.n	80076c0 <_strtod_l+0x738>
 80076b0:	4661      	mov	r1, ip
 80076b2:	1ac9      	subs	r1, r1, r3
 80076b4:	1a52      	subs	r2, r2, r1
 80076b6:	291f      	cmp	r1, #31
 80076b8:	dd00      	ble.n	80076bc <_strtod_l+0x734>
 80076ba:	e0b8      	b.n	800782e <_strtod_l+0x8a6>
 80076bc:	4088      	lsls	r0, r1
 80076be:	9014      	str	r0, [sp, #80]	; 0x50
 80076c0:	18ab      	adds	r3, r5, r2
 80076c2:	930c      	str	r3, [sp, #48]	; 0x30
 80076c4:	18a4      	adds	r4, r4, r2
 80076c6:	9b08      	ldr	r3, [sp, #32]
 80076c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076ca:	191c      	adds	r4, r3, r4
 80076cc:	002b      	movs	r3, r5
 80076ce:	4295      	cmp	r5, r2
 80076d0:	dd00      	ble.n	80076d4 <_strtod_l+0x74c>
 80076d2:	0013      	movs	r3, r2
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	dd00      	ble.n	80076da <_strtod_l+0x752>
 80076d8:	0023      	movs	r3, r4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dd04      	ble.n	80076e8 <_strtod_l+0x760>
 80076de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076e0:	1ae4      	subs	r4, r4, r3
 80076e2:	1ad2      	subs	r2, r2, r3
 80076e4:	920c      	str	r2, [sp, #48]	; 0x30
 80076e6:	1aed      	subs	r5, r5, r3
 80076e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd17      	ble.n	800771e <_strtod_l+0x796>
 80076ee:	001a      	movs	r2, r3
 80076f0:	9907      	ldr	r1, [sp, #28]
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	f001 ff4a 	bl	800958c <__pow5mult>
 80076f8:	9007      	str	r0, [sp, #28]
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d100      	bne.n	8007700 <_strtod_l+0x778>
 80076fe:	e6ad      	b.n	800745c <_strtod_l+0x4d4>
 8007700:	0001      	movs	r1, r0
 8007702:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007704:	9805      	ldr	r0, [sp, #20]
 8007706:	f001 fe91 	bl	800942c <__multiply>
 800770a:	900f      	str	r0, [sp, #60]	; 0x3c
 800770c:	2800      	cmp	r0, #0
 800770e:	d100      	bne.n	8007712 <_strtod_l+0x78a>
 8007710:	e6a4      	b.n	800745c <_strtod_l+0x4d4>
 8007712:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007714:	9805      	ldr	r0, [sp, #20]
 8007716:	f001 fd77 	bl	8009208 <_Bfree>
 800771a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800771c:	9320      	str	r3, [sp, #128]	; 0x80
 800771e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	dd00      	ble.n	8007726 <_strtod_l+0x79e>
 8007724:	e089      	b.n	800783a <_strtod_l+0x8b2>
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	dd08      	ble.n	800773e <_strtod_l+0x7b6>
 800772c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800772e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007730:	9805      	ldr	r0, [sp, #20]
 8007732:	f001 ff2b 	bl	800958c <__pow5mult>
 8007736:	9009      	str	r0, [sp, #36]	; 0x24
 8007738:	2800      	cmp	r0, #0
 800773a:	d100      	bne.n	800773e <_strtod_l+0x7b6>
 800773c:	e68e      	b.n	800745c <_strtod_l+0x4d4>
 800773e:	2c00      	cmp	r4, #0
 8007740:	dd08      	ble.n	8007754 <_strtod_l+0x7cc>
 8007742:	0022      	movs	r2, r4
 8007744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	f001 ff7c 	bl	8009644 <__lshift>
 800774c:	9009      	str	r0, [sp, #36]	; 0x24
 800774e:	2800      	cmp	r0, #0
 8007750:	d100      	bne.n	8007754 <_strtod_l+0x7cc>
 8007752:	e683      	b.n	800745c <_strtod_l+0x4d4>
 8007754:	2d00      	cmp	r5, #0
 8007756:	dd08      	ble.n	800776a <_strtod_l+0x7e2>
 8007758:	002a      	movs	r2, r5
 800775a:	9907      	ldr	r1, [sp, #28]
 800775c:	9805      	ldr	r0, [sp, #20]
 800775e:	f001 ff71 	bl	8009644 <__lshift>
 8007762:	9007      	str	r0, [sp, #28]
 8007764:	2800      	cmp	r0, #0
 8007766:	d100      	bne.n	800776a <_strtod_l+0x7e2>
 8007768:	e678      	b.n	800745c <_strtod_l+0x4d4>
 800776a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800776e:	9805      	ldr	r0, [sp, #20]
 8007770:	f001 fff2 	bl	8009758 <__mdiff>
 8007774:	9006      	str	r0, [sp, #24]
 8007776:	2800      	cmp	r0, #0
 8007778:	d100      	bne.n	800777c <_strtod_l+0x7f4>
 800777a:	e66f      	b.n	800745c <_strtod_l+0x4d4>
 800777c:	2200      	movs	r2, #0
 800777e:	68c3      	ldr	r3, [r0, #12]
 8007780:	9907      	ldr	r1, [sp, #28]
 8007782:	60c2      	str	r2, [r0, #12]
 8007784:	930f      	str	r3, [sp, #60]	; 0x3c
 8007786:	f001 ffcb 	bl	8009720 <__mcmp>
 800778a:	2800      	cmp	r0, #0
 800778c:	da5f      	bge.n	800784e <_strtod_l+0x8c6>
 800778e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007790:	4333      	orrs	r3, r6
 8007792:	d000      	beq.n	8007796 <_strtod_l+0x80e>
 8007794:	e08a      	b.n	80078ac <_strtod_l+0x924>
 8007796:	033b      	lsls	r3, r7, #12
 8007798:	d000      	beq.n	800779c <_strtod_l+0x814>
 800779a:	e087      	b.n	80078ac <_strtod_l+0x924>
 800779c:	22d6      	movs	r2, #214	; 0xd6
 800779e:	4b47      	ldr	r3, [pc, #284]	; (80078bc <_strtod_l+0x934>)
 80077a0:	04d2      	lsls	r2, r2, #19
 80077a2:	403b      	ands	r3, r7
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d800      	bhi.n	80077aa <_strtod_l+0x822>
 80077a8:	e080      	b.n	80078ac <_strtod_l+0x924>
 80077aa:	9b06      	ldr	r3, [sp, #24]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	930a      	str	r3, [sp, #40]	; 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <_strtod_l+0x836>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	930a      	str	r3, [sp, #40]	; 0x28
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	dd76      	ble.n	80078ac <_strtod_l+0x924>
 80077be:	9906      	ldr	r1, [sp, #24]
 80077c0:	2201      	movs	r2, #1
 80077c2:	9805      	ldr	r0, [sp, #20]
 80077c4:	f001 ff3e 	bl	8009644 <__lshift>
 80077c8:	9907      	ldr	r1, [sp, #28]
 80077ca:	9006      	str	r0, [sp, #24]
 80077cc:	f001 ffa8 	bl	8009720 <__mcmp>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	dd6b      	ble.n	80078ac <_strtod_l+0x924>
 80077d4:	9908      	ldr	r1, [sp, #32]
 80077d6:	003b      	movs	r3, r7
 80077d8:	4a38      	ldr	r2, [pc, #224]	; (80078bc <_strtod_l+0x934>)
 80077da:	2900      	cmp	r1, #0
 80077dc:	d100      	bne.n	80077e0 <_strtod_l+0x858>
 80077de:	e092      	b.n	8007906 <_strtod_l+0x97e>
 80077e0:	0011      	movs	r1, r2
 80077e2:	20d6      	movs	r0, #214	; 0xd6
 80077e4:	4039      	ands	r1, r7
 80077e6:	04c0      	lsls	r0, r0, #19
 80077e8:	4281      	cmp	r1, r0
 80077ea:	dd00      	ble.n	80077ee <_strtod_l+0x866>
 80077ec:	e08b      	b.n	8007906 <_strtod_l+0x97e>
 80077ee:	23dc      	movs	r3, #220	; 0xdc
 80077f0:	049b      	lsls	r3, r3, #18
 80077f2:	4299      	cmp	r1, r3
 80077f4:	dc00      	bgt.n	80077f8 <_strtod_l+0x870>
 80077f6:	e6a4      	b.n	8007542 <_strtod_l+0x5ba>
 80077f8:	0030      	movs	r0, r6
 80077fa:	0039      	movs	r1, r7
 80077fc:	2200      	movs	r2, #0
 80077fe:	4b30      	ldr	r3, [pc, #192]	; (80078c0 <_strtod_l+0x938>)
 8007800:	f7fa fc70 	bl	80020e4 <__aeabi_dmul>
 8007804:	0006      	movs	r6, r0
 8007806:	000f      	movs	r7, r1
 8007808:	4308      	orrs	r0, r1
 800780a:	d000      	beq.n	800780e <_strtod_l+0x886>
 800780c:	e62f      	b.n	800746e <_strtod_l+0x4e6>
 800780e:	2322      	movs	r3, #34	; 0x22
 8007810:	9a05      	ldr	r2, [sp, #20]
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e62b      	b.n	800746e <_strtod_l+0x4e6>
 8007816:	234b      	movs	r3, #75	; 0x4b
 8007818:	1a9a      	subs	r2, r3, r2
 800781a:	3b4c      	subs	r3, #76	; 0x4c
 800781c:	4093      	lsls	r3, r2
 800781e:	4019      	ands	r1, r3
 8007820:	000f      	movs	r7, r1
 8007822:	e6e0      	b.n	80075e6 <_strtod_l+0x65e>
 8007824:	2201      	movs	r2, #1
 8007826:	4252      	negs	r2, r2
 8007828:	409a      	lsls	r2, r3
 800782a:	4016      	ands	r6, r2
 800782c:	e6db      	b.n	80075e6 <_strtod_l+0x65e>
 800782e:	4925      	ldr	r1, [pc, #148]	; (80078c4 <_strtod_l+0x93c>)
 8007830:	1acb      	subs	r3, r1, r3
 8007832:	0001      	movs	r1, r0
 8007834:	4099      	lsls	r1, r3
 8007836:	9110      	str	r1, [sp, #64]	; 0x40
 8007838:	e741      	b.n	80076be <_strtod_l+0x736>
 800783a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800783c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800783e:	9805      	ldr	r0, [sp, #20]
 8007840:	f001 ff00 	bl	8009644 <__lshift>
 8007844:	9020      	str	r0, [sp, #128]	; 0x80
 8007846:	2800      	cmp	r0, #0
 8007848:	d000      	beq.n	800784c <_strtod_l+0x8c4>
 800784a:	e76c      	b.n	8007726 <_strtod_l+0x79e>
 800784c:	e606      	b.n	800745c <_strtod_l+0x4d4>
 800784e:	970c      	str	r7, [sp, #48]	; 0x30
 8007850:	2800      	cmp	r0, #0
 8007852:	d176      	bne.n	8007942 <_strtod_l+0x9ba>
 8007854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007856:	033b      	lsls	r3, r7, #12
 8007858:	0b1b      	lsrs	r3, r3, #12
 800785a:	2a00      	cmp	r2, #0
 800785c:	d038      	beq.n	80078d0 <_strtod_l+0x948>
 800785e:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <_strtod_l+0x940>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d138      	bne.n	80078d6 <_strtod_l+0x94e>
 8007864:	2201      	movs	r2, #1
 8007866:	9b08      	ldr	r3, [sp, #32]
 8007868:	4252      	negs	r2, r2
 800786a:	0031      	movs	r1, r6
 800786c:	0010      	movs	r0, r2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <_strtod_l+0x902>
 8007872:	24d4      	movs	r4, #212	; 0xd4
 8007874:	4b11      	ldr	r3, [pc, #68]	; (80078bc <_strtod_l+0x934>)
 8007876:	0010      	movs	r0, r2
 8007878:	403b      	ands	r3, r7
 800787a:	04e4      	lsls	r4, r4, #19
 800787c:	42a3      	cmp	r3, r4
 800787e:	d804      	bhi.n	800788a <_strtod_l+0x902>
 8007880:	306c      	adds	r0, #108	; 0x6c
 8007882:	0d1b      	lsrs	r3, r3, #20
 8007884:	1ac3      	subs	r3, r0, r3
 8007886:	409a      	lsls	r2, r3
 8007888:	0010      	movs	r0, r2
 800788a:	4281      	cmp	r1, r0
 800788c:	d123      	bne.n	80078d6 <_strtod_l+0x94e>
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <_strtod_l+0x944>)
 8007890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007892:	429a      	cmp	r2, r3
 8007894:	d102      	bne.n	800789c <_strtod_l+0x914>
 8007896:	1c4b      	adds	r3, r1, #1
 8007898:	d100      	bne.n	800789c <_strtod_l+0x914>
 800789a:	e5df      	b.n	800745c <_strtod_l+0x4d4>
 800789c:	4b07      	ldr	r3, [pc, #28]	; (80078bc <_strtod_l+0x934>)
 800789e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a0:	2600      	movs	r6, #0
 80078a2:	401a      	ands	r2, r3
 80078a4:	0013      	movs	r3, r2
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	0352      	lsls	r2, r2, #13
 80078aa:	189f      	adds	r7, r3, r2
 80078ac:	9b08      	ldr	r3, [sp, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1a2      	bne.n	80077f8 <_strtod_l+0x870>
 80078b2:	e5dc      	b.n	800746e <_strtod_l+0x4e6>
 80078b4:	0800cd50 	.word	0x0800cd50
 80078b8:	fffffc02 	.word	0xfffffc02
 80078bc:	7ff00000 	.word	0x7ff00000
 80078c0:	39500000 	.word	0x39500000
 80078c4:	fffffbe2 	.word	0xfffffbe2
 80078c8:	000fffff 	.word	0x000fffff
 80078cc:	7fefffff 	.word	0x7fefffff
 80078d0:	4333      	orrs	r3, r6
 80078d2:	d100      	bne.n	80078d6 <_strtod_l+0x94e>
 80078d4:	e77e      	b.n	80077d4 <_strtod_l+0x84c>
 80078d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01d      	beq.n	8007918 <_strtod_l+0x990>
 80078dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078e0:	4213      	tst	r3, r2
 80078e2:	d0e3      	beq.n	80078ac <_strtod_l+0x924>
 80078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e6:	0030      	movs	r0, r6
 80078e8:	0039      	movs	r1, r7
 80078ea:	9a08      	ldr	r2, [sp, #32]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <_strtod_l+0x998>
 80078f0:	f7ff fb32 	bl	8006f58 <sulp>
 80078f4:	0002      	movs	r2, r0
 80078f6:	000b      	movs	r3, r1
 80078f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078fc:	f7f9 fcb4 	bl	8001268 <__aeabi_dadd>
 8007900:	0006      	movs	r6, r0
 8007902:	000f      	movs	r7, r1
 8007904:	e7d2      	b.n	80078ac <_strtod_l+0x924>
 8007906:	2601      	movs	r6, #1
 8007908:	4013      	ands	r3, r2
 800790a:	4a99      	ldr	r2, [pc, #612]	; (8007b70 <_strtod_l+0xbe8>)
 800790c:	4276      	negs	r6, r6
 800790e:	189b      	adds	r3, r3, r2
 8007910:	4a98      	ldr	r2, [pc, #608]	; (8007b74 <_strtod_l+0xbec>)
 8007912:	431a      	orrs	r2, r3
 8007914:	0017      	movs	r7, r2
 8007916:	e7c9      	b.n	80078ac <_strtod_l+0x924>
 8007918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800791a:	4233      	tst	r3, r6
 800791c:	d0c6      	beq.n	80078ac <_strtod_l+0x924>
 800791e:	e7e1      	b.n	80078e4 <_strtod_l+0x95c>
 8007920:	f7ff fb1a 	bl	8006f58 <sulp>
 8007924:	0002      	movs	r2, r0
 8007926:	000b      	movs	r3, r1
 8007928:	9812      	ldr	r0, [sp, #72]	; 0x48
 800792a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800792c:	f7fa fe46 	bl	80025bc <__aeabi_dsub>
 8007930:	2200      	movs	r2, #0
 8007932:	2300      	movs	r3, #0
 8007934:	0006      	movs	r6, r0
 8007936:	000f      	movs	r7, r1
 8007938:	f7f8 fd88 	bl	800044c <__aeabi_dcmpeq>
 800793c:	2800      	cmp	r0, #0
 800793e:	d0b5      	beq.n	80078ac <_strtod_l+0x924>
 8007940:	e5ff      	b.n	8007542 <_strtod_l+0x5ba>
 8007942:	9907      	ldr	r1, [sp, #28]
 8007944:	9806      	ldr	r0, [sp, #24]
 8007946:	f002 f877 	bl	8009a38 <__ratio>
 800794a:	2380      	movs	r3, #128	; 0x80
 800794c:	2200      	movs	r2, #0
 800794e:	05db      	lsls	r3, r3, #23
 8007950:	0004      	movs	r4, r0
 8007952:	000d      	movs	r5, r1
 8007954:	f7f8 fd8a 	bl	800046c <__aeabi_dcmple>
 8007958:	2800      	cmp	r0, #0
 800795a:	d075      	beq.n	8007a48 <_strtod_l+0xac0>
 800795c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d047      	beq.n	80079f2 <_strtod_l+0xa6a>
 8007962:	2300      	movs	r3, #0
 8007964:	4c84      	ldr	r4, [pc, #528]	; (8007b78 <_strtod_l+0xbf0>)
 8007966:	2500      	movs	r5, #0
 8007968:	9310      	str	r3, [sp, #64]	; 0x40
 800796a:	9411      	str	r4, [sp, #68]	; 0x44
 800796c:	4c82      	ldr	r4, [pc, #520]	; (8007b78 <_strtod_l+0xbf0>)
 800796e:	4a83      	ldr	r2, [pc, #524]	; (8007b7c <_strtod_l+0xbf4>)
 8007970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007972:	4013      	ands	r3, r2
 8007974:	9314      	str	r3, [sp, #80]	; 0x50
 8007976:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007978:	4b81      	ldr	r3, [pc, #516]	; (8007b80 <_strtod_l+0xbf8>)
 800797a:	429a      	cmp	r2, r3
 800797c:	d000      	beq.n	8007980 <_strtod_l+0x9f8>
 800797e:	e0ac      	b.n	8007ada <_strtod_l+0xb52>
 8007980:	4a80      	ldr	r2, [pc, #512]	; (8007b84 <_strtod_l+0xbfc>)
 8007982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007984:	4694      	mov	ip, r2
 8007986:	4463      	add	r3, ip
 8007988:	001f      	movs	r7, r3
 800798a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800798c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800798e:	0030      	movs	r0, r6
 8007990:	0039      	movs	r1, r7
 8007992:	920c      	str	r2, [sp, #48]	; 0x30
 8007994:	930d      	str	r3, [sp, #52]	; 0x34
 8007996:	f001 ff77 	bl	8009888 <__ulp>
 800799a:	0002      	movs	r2, r0
 800799c:	000b      	movs	r3, r1
 800799e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079a2:	f7fa fb9f 	bl	80020e4 <__aeabi_dmul>
 80079a6:	0032      	movs	r2, r6
 80079a8:	003b      	movs	r3, r7
 80079aa:	f7f9 fc5d 	bl	8001268 <__aeabi_dadd>
 80079ae:	4a73      	ldr	r2, [pc, #460]	; (8007b7c <_strtod_l+0xbf4>)
 80079b0:	4b75      	ldr	r3, [pc, #468]	; (8007b88 <_strtod_l+0xc00>)
 80079b2:	0006      	movs	r6, r0
 80079b4:	400a      	ands	r2, r1
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d95e      	bls.n	8007a78 <_strtod_l+0xaf0>
 80079ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079bc:	4b73      	ldr	r3, [pc, #460]	; (8007b8c <_strtod_l+0xc04>)
 80079be:	429a      	cmp	r2, r3
 80079c0:	d103      	bne.n	80079ca <_strtod_l+0xa42>
 80079c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079c4:	3301      	adds	r3, #1
 80079c6:	d100      	bne.n	80079ca <_strtod_l+0xa42>
 80079c8:	e548      	b.n	800745c <_strtod_l+0x4d4>
 80079ca:	2601      	movs	r6, #1
 80079cc:	4f6f      	ldr	r7, [pc, #444]	; (8007b8c <_strtod_l+0xc04>)
 80079ce:	4276      	negs	r6, r6
 80079d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80079d2:	9805      	ldr	r0, [sp, #20]
 80079d4:	f001 fc18 	bl	8009208 <_Bfree>
 80079d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	f001 fc14 	bl	8009208 <_Bfree>
 80079e0:	9907      	ldr	r1, [sp, #28]
 80079e2:	9805      	ldr	r0, [sp, #20]
 80079e4:	f001 fc10 	bl	8009208 <_Bfree>
 80079e8:	9906      	ldr	r1, [sp, #24]
 80079ea:	9805      	ldr	r0, [sp, #20]
 80079ec:	f001 fc0c 	bl	8009208 <_Bfree>
 80079f0:	e61d      	b.n	800762e <_strtod_l+0x6a6>
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	d11c      	bne.n	8007a30 <_strtod_l+0xaa8>
 80079f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079f8:	031b      	lsls	r3, r3, #12
 80079fa:	d11f      	bne.n	8007a3c <_strtod_l+0xab4>
 80079fc:	2200      	movs	r2, #0
 80079fe:	0020      	movs	r0, r4
 8007a00:	0029      	movs	r1, r5
 8007a02:	4b5d      	ldr	r3, [pc, #372]	; (8007b78 <_strtod_l+0xbf0>)
 8007a04:	f7f8 fd28 	bl	8000458 <__aeabi_dcmplt>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d11a      	bne.n	8007a42 <_strtod_l+0xaba>
 8007a0c:	0020      	movs	r0, r4
 8007a0e:	0029      	movs	r1, r5
 8007a10:	2200      	movs	r2, #0
 8007a12:	4b5f      	ldr	r3, [pc, #380]	; (8007b90 <_strtod_l+0xc08>)
 8007a14:	f7fa fb66 	bl	80020e4 <__aeabi_dmul>
 8007a18:	0005      	movs	r5, r0
 8007a1a:	000c      	movs	r4, r1
 8007a1c:	2380      	movs	r3, #128	; 0x80
 8007a1e:	061b      	lsls	r3, r3, #24
 8007a20:	18e3      	adds	r3, r4, r3
 8007a22:	951c      	str	r5, [sp, #112]	; 0x70
 8007a24:	931d      	str	r3, [sp, #116]	; 0x74
 8007a26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a2a:	9210      	str	r2, [sp, #64]	; 0x40
 8007a2c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a2e:	e79e      	b.n	800796e <_strtod_l+0x9e6>
 8007a30:	2e01      	cmp	r6, #1
 8007a32:	d103      	bne.n	8007a3c <_strtod_l+0xab4>
 8007a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d100      	bne.n	8007a3c <_strtod_l+0xab4>
 8007a3a:	e582      	b.n	8007542 <_strtod_l+0x5ba>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4c55      	ldr	r4, [pc, #340]	; (8007b94 <_strtod_l+0xc0c>)
 8007a40:	e791      	b.n	8007966 <_strtod_l+0x9de>
 8007a42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a44:	4c52      	ldr	r4, [pc, #328]	; (8007b90 <_strtod_l+0xc08>)
 8007a46:	e7e9      	b.n	8007a1c <_strtod_l+0xa94>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	0020      	movs	r0, r4
 8007a4c:	0029      	movs	r1, r5
 8007a4e:	4b50      	ldr	r3, [pc, #320]	; (8007b90 <_strtod_l+0xc08>)
 8007a50:	f7fa fb48 	bl	80020e4 <__aeabi_dmul>
 8007a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a56:	0005      	movs	r5, r0
 8007a58:	000b      	movs	r3, r1
 8007a5a:	000c      	movs	r4, r1
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	d107      	bne.n	8007a70 <_strtod_l+0xae8>
 8007a60:	2280      	movs	r2, #128	; 0x80
 8007a62:	0612      	lsls	r2, r2, #24
 8007a64:	188b      	adds	r3, r1, r2
 8007a66:	9016      	str	r0, [sp, #88]	; 0x58
 8007a68:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a6e:	e7dc      	b.n	8007a2a <_strtod_l+0xaa2>
 8007a70:	0002      	movs	r2, r0
 8007a72:	9216      	str	r2, [sp, #88]	; 0x58
 8007a74:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a76:	e7f8      	b.n	8007a6a <_strtod_l+0xae2>
 8007a78:	23d4      	movs	r3, #212	; 0xd4
 8007a7a:	049b      	lsls	r3, r3, #18
 8007a7c:	18cf      	adds	r7, r1, r3
 8007a7e:	9b08      	ldr	r3, [sp, #32]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1a5      	bne.n	80079d0 <_strtod_l+0xa48>
 8007a84:	4b3d      	ldr	r3, [pc, #244]	; (8007b7c <_strtod_l+0xbf4>)
 8007a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a88:	403b      	ands	r3, r7
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d1a0      	bne.n	80079d0 <_strtod_l+0xa48>
 8007a8e:	0028      	movs	r0, r5
 8007a90:	0021      	movs	r1, r4
 8007a92:	f7f8 fdaf 	bl	80005f4 <__aeabi_d2lz>
 8007a96:	f7f8 fde9 	bl	800066c <__aeabi_l2d>
 8007a9a:	0002      	movs	r2, r0
 8007a9c:	000b      	movs	r3, r1
 8007a9e:	0028      	movs	r0, r5
 8007aa0:	0021      	movs	r1, r4
 8007aa2:	f7fa fd8b 	bl	80025bc <__aeabi_dsub>
 8007aa6:	033b      	lsls	r3, r7, #12
 8007aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007aaa:	0b1b      	lsrs	r3, r3, #12
 8007aac:	4333      	orrs	r3, r6
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	0004      	movs	r4, r0
 8007ab2:	000d      	movs	r5, r1
 8007ab4:	4a38      	ldr	r2, [pc, #224]	; (8007b98 <_strtod_l+0xc10>)
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d055      	beq.n	8007b66 <_strtod_l+0xbde>
 8007aba:	4b38      	ldr	r3, [pc, #224]	; (8007b9c <_strtod_l+0xc14>)
 8007abc:	f7f8 fccc 	bl	8000458 <__aeabi_dcmplt>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d000      	beq.n	8007ac6 <_strtod_l+0xb3e>
 8007ac4:	e4d3      	b.n	800746e <_strtod_l+0x4e6>
 8007ac6:	0020      	movs	r0, r4
 8007ac8:	0029      	movs	r1, r5
 8007aca:	4a35      	ldr	r2, [pc, #212]	; (8007ba0 <_strtod_l+0xc18>)
 8007acc:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <_strtod_l+0xc08>)
 8007ace:	f7f8 fcd7 	bl	8000480 <__aeabi_dcmpgt>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d100      	bne.n	8007ad8 <_strtod_l+0xb50>
 8007ad6:	e77b      	b.n	80079d0 <_strtod_l+0xa48>
 8007ad8:	e4c9      	b.n	800746e <_strtod_l+0x4e6>
 8007ada:	9b08      	ldr	r3, [sp, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d02b      	beq.n	8007b38 <_strtod_l+0xbb0>
 8007ae0:	23d4      	movs	r3, #212	; 0xd4
 8007ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ae4:	04db      	lsls	r3, r3, #19
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d826      	bhi.n	8007b38 <_strtod_l+0xbb0>
 8007aea:	0028      	movs	r0, r5
 8007aec:	0021      	movs	r1, r4
 8007aee:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <_strtod_l+0xc1c>)
 8007af0:	4b2d      	ldr	r3, [pc, #180]	; (8007ba8 <_strtod_l+0xc20>)
 8007af2:	f7f8 fcbb 	bl	800046c <__aeabi_dcmple>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d017      	beq.n	8007b2a <_strtod_l+0xba2>
 8007afa:	0028      	movs	r0, r5
 8007afc:	0021      	movs	r1, r4
 8007afe:	f7f8 fd5b 	bl	80005b8 <__aeabi_d2uiz>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d100      	bne.n	8007b08 <_strtod_l+0xb80>
 8007b06:	3001      	adds	r0, #1
 8007b08:	f7fb f96e 	bl	8002de8 <__aeabi_ui2d>
 8007b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b0e:	0005      	movs	r5, r0
 8007b10:	000b      	movs	r3, r1
 8007b12:	000c      	movs	r4, r1
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	d122      	bne.n	8007b5e <_strtod_l+0xbd6>
 8007b18:	2280      	movs	r2, #128	; 0x80
 8007b1a:	0612      	lsls	r2, r2, #24
 8007b1c:	188b      	adds	r3, r1, r2
 8007b1e:	9018      	str	r0, [sp, #96]	; 0x60
 8007b20:	9319      	str	r3, [sp, #100]	; 0x64
 8007b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b26:	9210      	str	r2, [sp, #64]	; 0x40
 8007b28:	9311      	str	r3, [sp, #68]	; 0x44
 8007b2a:	22d6      	movs	r2, #214	; 0xd6
 8007b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b2e:	04d2      	lsls	r2, r2, #19
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	9311      	str	r3, [sp, #68]	; 0x44
 8007b38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b3c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007b3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007b40:	f001 fea2 	bl	8009888 <__ulp>
 8007b44:	0002      	movs	r2, r0
 8007b46:	000b      	movs	r3, r1
 8007b48:	0030      	movs	r0, r6
 8007b4a:	0039      	movs	r1, r7
 8007b4c:	f7fa faca 	bl	80020e4 <__aeabi_dmul>
 8007b50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b54:	f7f9 fb88 	bl	8001268 <__aeabi_dadd>
 8007b58:	0006      	movs	r6, r0
 8007b5a:	000f      	movs	r7, r1
 8007b5c:	e78f      	b.n	8007a7e <_strtod_l+0xaf6>
 8007b5e:	0002      	movs	r2, r0
 8007b60:	9218      	str	r2, [sp, #96]	; 0x60
 8007b62:	9319      	str	r3, [sp, #100]	; 0x64
 8007b64:	e7dd      	b.n	8007b22 <_strtod_l+0xb9a>
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <_strtod_l+0xc24>)
 8007b68:	f7f8 fc76 	bl	8000458 <__aeabi_dcmplt>
 8007b6c:	e7b1      	b.n	8007ad2 <_strtod_l+0xb4a>
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	fff00000 	.word	0xfff00000
 8007b74:	000fffff 	.word	0x000fffff
 8007b78:	3ff00000 	.word	0x3ff00000
 8007b7c:	7ff00000 	.word	0x7ff00000
 8007b80:	7fe00000 	.word	0x7fe00000
 8007b84:	fcb00000 	.word	0xfcb00000
 8007b88:	7c9fffff 	.word	0x7c9fffff
 8007b8c:	7fefffff 	.word	0x7fefffff
 8007b90:	3fe00000 	.word	0x3fe00000
 8007b94:	bff00000 	.word	0xbff00000
 8007b98:	94a03595 	.word	0x94a03595
 8007b9c:	3fdfffff 	.word	0x3fdfffff
 8007ba0:	35afe535 	.word	0x35afe535
 8007ba4:	ffc00000 	.word	0xffc00000
 8007ba8:	41dfffff 	.word	0x41dfffff
 8007bac:	3fcfffff 	.word	0x3fcfffff

08007bb0 <_strtod_r>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <_strtod_r+0xc>)
 8007bb4:	f7ff f9e8 	bl	8006f88 <_strtod_l>
 8007bb8:	bd10      	pop	{r4, pc}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	200000b8 	.word	0x200000b8

08007bc0 <_strtol_l.constprop.0>:
 8007bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	001e      	movs	r6, r3
 8007bc6:	9005      	str	r0, [sp, #20]
 8007bc8:	9101      	str	r1, [sp, #4]
 8007bca:	9202      	str	r2, [sp, #8]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d045      	beq.n	8007c5c <_strtol_l.constprop.0+0x9c>
 8007bd0:	000b      	movs	r3, r1
 8007bd2:	2e24      	cmp	r6, #36	; 0x24
 8007bd4:	d842      	bhi.n	8007c5c <_strtol_l.constprop.0+0x9c>
 8007bd6:	4a3f      	ldr	r2, [pc, #252]	; (8007cd4 <_strtol_l.constprop.0+0x114>)
 8007bd8:	2108      	movs	r1, #8
 8007bda:	4694      	mov	ip, r2
 8007bdc:	001a      	movs	r2, r3
 8007bde:	4660      	mov	r0, ip
 8007be0:	7814      	ldrb	r4, [r2, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	5d00      	ldrb	r0, [r0, r4]
 8007be6:	001d      	movs	r5, r3
 8007be8:	0007      	movs	r7, r0
 8007bea:	400f      	ands	r7, r1
 8007bec:	4208      	tst	r0, r1
 8007bee:	d1f5      	bne.n	8007bdc <_strtol_l.constprop.0+0x1c>
 8007bf0:	2c2d      	cmp	r4, #45	; 0x2d
 8007bf2:	d13a      	bne.n	8007c6a <_strtol_l.constprop.0+0xaa>
 8007bf4:	2701      	movs	r7, #1
 8007bf6:	781c      	ldrb	r4, [r3, #0]
 8007bf8:	1c95      	adds	r5, r2, #2
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d065      	beq.n	8007cca <_strtol_l.constprop.0+0x10a>
 8007bfe:	2e10      	cmp	r6, #16
 8007c00:	d109      	bne.n	8007c16 <_strtol_l.constprop.0+0x56>
 8007c02:	2c30      	cmp	r4, #48	; 0x30
 8007c04:	d107      	bne.n	8007c16 <_strtol_l.constprop.0+0x56>
 8007c06:	2220      	movs	r2, #32
 8007c08:	782b      	ldrb	r3, [r5, #0]
 8007c0a:	4393      	bics	r3, r2
 8007c0c:	2b58      	cmp	r3, #88	; 0x58
 8007c0e:	d157      	bne.n	8007cc0 <_strtol_l.constprop.0+0x100>
 8007c10:	2610      	movs	r6, #16
 8007c12:	786c      	ldrb	r4, [r5, #1]
 8007c14:	3502      	adds	r5, #2
 8007c16:	4b30      	ldr	r3, [pc, #192]	; (8007cd8 <_strtol_l.constprop.0+0x118>)
 8007c18:	0031      	movs	r1, r6
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	f7f8 fb14 	bl	800024c <__aeabi_uidivmod>
 8007c24:	2300      	movs	r3, #0
 8007c26:	2201      	movs	r2, #1
 8007c28:	4684      	mov	ip, r0
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	9104      	str	r1, [sp, #16]
 8007c2e:	4252      	negs	r2, r2
 8007c30:	0021      	movs	r1, r4
 8007c32:	3930      	subs	r1, #48	; 0x30
 8007c34:	2909      	cmp	r1, #9
 8007c36:	d81d      	bhi.n	8007c74 <_strtol_l.constprop.0+0xb4>
 8007c38:	000c      	movs	r4, r1
 8007c3a:	42a6      	cmp	r6, r4
 8007c3c:	dd28      	ble.n	8007c90 <_strtol_l.constprop.0+0xd0>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	db24      	blt.n	8007c8c <_strtol_l.constprop.0+0xcc>
 8007c42:	0013      	movs	r3, r2
 8007c44:	4584      	cmp	ip, r0
 8007c46:	d306      	bcc.n	8007c56 <_strtol_l.constprop.0+0x96>
 8007c48:	d102      	bne.n	8007c50 <_strtol_l.constprop.0+0x90>
 8007c4a:	9904      	ldr	r1, [sp, #16]
 8007c4c:	42a1      	cmp	r1, r4
 8007c4e:	db02      	blt.n	8007c56 <_strtol_l.constprop.0+0x96>
 8007c50:	2301      	movs	r3, #1
 8007c52:	4370      	muls	r0, r6
 8007c54:	1820      	adds	r0, r4, r0
 8007c56:	782c      	ldrb	r4, [r5, #0]
 8007c58:	3501      	adds	r5, #1
 8007c5a:	e7e9      	b.n	8007c30 <_strtol_l.constprop.0+0x70>
 8007c5c:	f7fe fab0 	bl	80061c0 <__errno>
 8007c60:	2316      	movs	r3, #22
 8007c62:	6003      	str	r3, [r0, #0]
 8007c64:	2000      	movs	r0, #0
 8007c66:	b007      	add	sp, #28
 8007c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6a:	2c2b      	cmp	r4, #43	; 0x2b
 8007c6c:	d1c5      	bne.n	8007bfa <_strtol_l.constprop.0+0x3a>
 8007c6e:	781c      	ldrb	r4, [r3, #0]
 8007c70:	1c95      	adds	r5, r2, #2
 8007c72:	e7c2      	b.n	8007bfa <_strtol_l.constprop.0+0x3a>
 8007c74:	0021      	movs	r1, r4
 8007c76:	3941      	subs	r1, #65	; 0x41
 8007c78:	2919      	cmp	r1, #25
 8007c7a:	d801      	bhi.n	8007c80 <_strtol_l.constprop.0+0xc0>
 8007c7c:	3c37      	subs	r4, #55	; 0x37
 8007c7e:	e7dc      	b.n	8007c3a <_strtol_l.constprop.0+0x7a>
 8007c80:	0021      	movs	r1, r4
 8007c82:	3961      	subs	r1, #97	; 0x61
 8007c84:	2919      	cmp	r1, #25
 8007c86:	d803      	bhi.n	8007c90 <_strtol_l.constprop.0+0xd0>
 8007c88:	3c57      	subs	r4, #87	; 0x57
 8007c8a:	e7d6      	b.n	8007c3a <_strtol_l.constprop.0+0x7a>
 8007c8c:	0013      	movs	r3, r2
 8007c8e:	e7e2      	b.n	8007c56 <_strtol_l.constprop.0+0x96>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da09      	bge.n	8007ca8 <_strtol_l.constprop.0+0xe8>
 8007c94:	2322      	movs	r3, #34	; 0x22
 8007c96:	9a05      	ldr	r2, [sp, #20]
 8007c98:	9803      	ldr	r0, [sp, #12]
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0e1      	beq.n	8007c66 <_strtol_l.constprop.0+0xa6>
 8007ca2:	1e6b      	subs	r3, r5, #1
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	e007      	b.n	8007cb8 <_strtol_l.constprop.0+0xf8>
 8007ca8:	2f00      	cmp	r7, #0
 8007caa:	d000      	beq.n	8007cae <_strtol_l.constprop.0+0xee>
 8007cac:	4240      	negs	r0, r0
 8007cae:	9a02      	ldr	r2, [sp, #8]
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	d0d8      	beq.n	8007c66 <_strtol_l.constprop.0+0xa6>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f4      	bne.n	8007ca2 <_strtol_l.constprop.0+0xe2>
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	9a01      	ldr	r2, [sp, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e7d2      	b.n	8007c66 <_strtol_l.constprop.0+0xa6>
 8007cc0:	2430      	movs	r4, #48	; 0x30
 8007cc2:	2e00      	cmp	r6, #0
 8007cc4:	d1a7      	bne.n	8007c16 <_strtol_l.constprop.0+0x56>
 8007cc6:	3608      	adds	r6, #8
 8007cc8:	e7a5      	b.n	8007c16 <_strtol_l.constprop.0+0x56>
 8007cca:	2c30      	cmp	r4, #48	; 0x30
 8007ccc:	d09b      	beq.n	8007c06 <_strtol_l.constprop.0+0x46>
 8007cce:	260a      	movs	r6, #10
 8007cd0:	e7a1      	b.n	8007c16 <_strtol_l.constprop.0+0x56>
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	0800cd79 	.word	0x0800cd79
 8007cd8:	7fffffff 	.word	0x7fffffff

08007cdc <_strtol_r>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	f7ff ff6f 	bl	8007bc0 <_strtol_l.constprop.0>
 8007ce2:	bd10      	pop	{r4, pc}

08007ce4 <quorem>:
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	0006      	movs	r6, r0
 8007ce8:	690b      	ldr	r3, [r1, #16]
 8007cea:	6932      	ldr	r2, [r6, #16]
 8007cec:	b087      	sub	sp, #28
 8007cee:	2000      	movs	r0, #0
 8007cf0:	9103      	str	r1, [sp, #12]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	db65      	blt.n	8007dc2 <quorem+0xde>
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	009c      	lsls	r4, r3, #2
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	000b      	movs	r3, r1
 8007cfe:	3314      	adds	r3, #20
 8007d00:	9305      	str	r3, [sp, #20]
 8007d02:	191b      	adds	r3, r3, r4
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	0033      	movs	r3, r6
 8007d08:	3314      	adds	r3, #20
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	191c      	adds	r4, r3, r4
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	6827      	ldr	r7, [r4, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	0038      	movs	r0, r7
 8007d16:	1c5d      	adds	r5, r3, #1
 8007d18:	0029      	movs	r1, r5
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	f7f8 fa10 	bl	8000140 <__udivsi3>
 8007d20:	9001      	str	r0, [sp, #4]
 8007d22:	42af      	cmp	r7, r5
 8007d24:	d324      	bcc.n	8007d70 <quorem+0x8c>
 8007d26:	2500      	movs	r5, #0
 8007d28:	46ac      	mov	ip, r5
 8007d2a:	9802      	ldr	r0, [sp, #8]
 8007d2c:	9f05      	ldr	r7, [sp, #20]
 8007d2e:	cf08      	ldmia	r7!, {r3}
 8007d30:	9a01      	ldr	r2, [sp, #4]
 8007d32:	b299      	uxth	r1, r3
 8007d34:	4351      	muls	r1, r2
 8007d36:	0c1b      	lsrs	r3, r3, #16
 8007d38:	4353      	muls	r3, r2
 8007d3a:	1949      	adds	r1, r1, r5
 8007d3c:	0c0a      	lsrs	r2, r1, #16
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	6802      	ldr	r2, [r0, #0]
 8007d42:	b289      	uxth	r1, r1
 8007d44:	b292      	uxth	r2, r2
 8007d46:	4462      	add	r2, ip
 8007d48:	1a52      	subs	r2, r2, r1
 8007d4a:	6801      	ldr	r1, [r0, #0]
 8007d4c:	0c1d      	lsrs	r5, r3, #16
 8007d4e:	0c09      	lsrs	r1, r1, #16
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	1acb      	subs	r3, r1, r3
 8007d54:	1411      	asrs	r1, r2, #16
 8007d56:	185b      	adds	r3, r3, r1
 8007d58:	1419      	asrs	r1, r3, #16
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	041b      	lsls	r3, r3, #16
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	468c      	mov	ip, r1
 8007d64:	c004      	stmia	r0!, {r2}
 8007d66:	42bb      	cmp	r3, r7
 8007d68:	d2e1      	bcs.n	8007d2e <quorem+0x4a>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d030      	beq.n	8007dd2 <quorem+0xee>
 8007d70:	0030      	movs	r0, r6
 8007d72:	9903      	ldr	r1, [sp, #12]
 8007d74:	f001 fcd4 	bl	8009720 <__mcmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	db21      	blt.n	8007dc0 <quorem+0xdc>
 8007d7c:	0030      	movs	r0, r6
 8007d7e:	2400      	movs	r4, #0
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	9903      	ldr	r1, [sp, #12]
 8007d84:	3301      	adds	r3, #1
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	3014      	adds	r0, #20
 8007d8a:	3114      	adds	r1, #20
 8007d8c:	6803      	ldr	r3, [r0, #0]
 8007d8e:	c920      	ldmia	r1!, {r5}
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	1914      	adds	r4, r2, r4
 8007d94:	b2aa      	uxth	r2, r5
 8007d96:	1aa2      	subs	r2, r4, r2
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	0c2d      	lsrs	r5, r5, #16
 8007d9c:	1414      	asrs	r4, r2, #16
 8007d9e:	1b5b      	subs	r3, r3, r5
 8007da0:	191b      	adds	r3, r3, r4
 8007da2:	141c      	asrs	r4, r3, #16
 8007da4:	b292      	uxth	r2, r2
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	4313      	orrs	r3, r2
 8007daa:	c008      	stmia	r0!, {r3}
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	428b      	cmp	r3, r1
 8007db0:	d2ec      	bcs.n	8007d8c <quorem+0xa8>
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	9a02      	ldr	r2, [sp, #8]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	18d3      	adds	r3, r2, r3
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d015      	beq.n	8007dec <quorem+0x108>
 8007dc0:	9801      	ldr	r0, [sp, #4]
 8007dc2:	b007      	add	sp, #28
 8007dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d106      	bne.n	8007dda <quorem+0xf6>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	3c04      	subs	r4, #4
 8007dd6:	42a3      	cmp	r3, r4
 8007dd8:	d3f5      	bcc.n	8007dc6 <quorem+0xe2>
 8007dda:	9b00      	ldr	r3, [sp, #0]
 8007ddc:	6133      	str	r3, [r6, #16]
 8007dde:	e7c7      	b.n	8007d70 <quorem+0x8c>
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	d106      	bne.n	8007df4 <quorem+0x110>
 8007de6:	9a00      	ldr	r2, [sp, #0]
 8007de8:	3a01      	subs	r2, #1
 8007dea:	9200      	str	r2, [sp, #0]
 8007dec:	9a02      	ldr	r2, [sp, #8]
 8007dee:	3b04      	subs	r3, #4
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d3f5      	bcc.n	8007de0 <quorem+0xfc>
 8007df4:	9b00      	ldr	r3, [sp, #0]
 8007df6:	6133      	str	r3, [r6, #16]
 8007df8:	e7e2      	b.n	8007dc0 <quorem+0xdc>
	...

08007dfc <_dtoa_r>:
 8007dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfe:	b09d      	sub	sp, #116	; 0x74
 8007e00:	9202      	str	r2, [sp, #8]
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	9b02      	ldr	r3, [sp, #8]
 8007e06:	9c03      	ldr	r4, [sp, #12]
 8007e08:	9308      	str	r3, [sp, #32]
 8007e0a:	9409      	str	r4, [sp, #36]	; 0x24
 8007e0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e0e:	0007      	movs	r7, r0
 8007e10:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007e12:	2c00      	cmp	r4, #0
 8007e14:	d10e      	bne.n	8007e34 <_dtoa_r+0x38>
 8007e16:	2010      	movs	r0, #16
 8007e18:	f001 f982 	bl	8009120 <malloc>
 8007e1c:	1e02      	subs	r2, r0, #0
 8007e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e20:	d104      	bne.n	8007e2c <_dtoa_r+0x30>
 8007e22:	21ea      	movs	r1, #234	; 0xea
 8007e24:	4bc7      	ldr	r3, [pc, #796]	; (8008144 <_dtoa_r+0x348>)
 8007e26:	48c8      	ldr	r0, [pc, #800]	; (8008148 <_dtoa_r+0x34c>)
 8007e28:	f002 f91c 	bl	800a064 <__assert_func>
 8007e2c:	6044      	str	r4, [r0, #4]
 8007e2e:	6084      	str	r4, [r0, #8]
 8007e30:	6004      	str	r4, [r0, #0]
 8007e32:	60c4      	str	r4, [r0, #12]
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	d00a      	beq.n	8007e52 <_dtoa_r+0x56>
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4093      	lsls	r3, r2
 8007e42:	604a      	str	r2, [r1, #4]
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	0038      	movs	r0, r7
 8007e48:	f001 f9de 	bl	8009208 <_Bfree>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	da20      	bge.n	8007e9a <_dtoa_r+0x9e>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	085b      	lsrs	r3, r3, #1
 8007e62:	9309      	str	r3, [sp, #36]	; 0x24
 8007e64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e66:	4bb9      	ldr	r3, [pc, #740]	; (800814c <_dtoa_r+0x350>)
 8007e68:	4ab8      	ldr	r2, [pc, #736]	; (800814c <_dtoa_r+0x350>)
 8007e6a:	402b      	ands	r3, r5
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d117      	bne.n	8007ea0 <_dtoa_r+0xa4>
 8007e70:	4bb7      	ldr	r3, [pc, #732]	; (8008150 <_dtoa_r+0x354>)
 8007e72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e74:	0328      	lsls	r0, r5, #12
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	0b00      	lsrs	r0, r0, #12
 8007e7c:	4318      	orrs	r0, r3
 8007e7e:	d101      	bne.n	8007e84 <_dtoa_r+0x88>
 8007e80:	f000 fdbf 	bl	8008a02 <_dtoa_r+0xc06>
 8007e84:	48b3      	ldr	r0, [pc, #716]	; (8008154 <_dtoa_r+0x358>)
 8007e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e88:	9006      	str	r0, [sp, #24]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <_dtoa_r+0x98>
 8007e8e:	4bb2      	ldr	r3, [pc, #712]	; (8008158 <_dtoa_r+0x35c>)
 8007e90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	9806      	ldr	r0, [sp, #24]
 8007e96:	b01d      	add	sp, #116	; 0x74
 8007e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	e7e1      	b.n	8007e64 <_dtoa_r+0x68>
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007ea4:	9312      	str	r3, [sp, #72]	; 0x48
 8007ea6:	9413      	str	r4, [sp, #76]	; 0x4c
 8007ea8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007eaa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007eac:	2200      	movs	r2, #0
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f7f8 facc 	bl	800044c <__aeabi_dcmpeq>
 8007eb4:	1e04      	subs	r4, r0, #0
 8007eb6:	d009      	beq.n	8007ecc <_dtoa_r+0xd0>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	4ba7      	ldr	r3, [pc, #668]	; (800815c <_dtoa_r+0x360>)
 8007ec0:	9306      	str	r3, [sp, #24]
 8007ec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0e5      	beq.n	8007e94 <_dtoa_r+0x98>
 8007ec8:	4ba5      	ldr	r3, [pc, #660]	; (8008160 <_dtoa_r+0x364>)
 8007eca:	e7e1      	b.n	8007e90 <_dtoa_r+0x94>
 8007ecc:	ab1a      	add	r3, sp, #104	; 0x68
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	0038      	movs	r0, r7
 8007ed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eda:	f001 fd49 	bl	8009970 <__d2b>
 8007ede:	006e      	lsls	r6, r5, #1
 8007ee0:	9005      	str	r0, [sp, #20]
 8007ee2:	0d76      	lsrs	r6, r6, #21
 8007ee4:	d100      	bne.n	8007ee8 <_dtoa_r+0xec>
 8007ee6:	e07c      	b.n	8007fe2 <_dtoa_r+0x1e6>
 8007ee8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007eea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007eec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eee:	4a9d      	ldr	r2, [pc, #628]	; (8008164 <_dtoa_r+0x368>)
 8007ef0:	031b      	lsls	r3, r3, #12
 8007ef2:	0b1b      	lsrs	r3, r3, #12
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	0011      	movs	r1, r2
 8007ef8:	4b9b      	ldr	r3, [pc, #620]	; (8008168 <_dtoa_r+0x36c>)
 8007efa:	9418      	str	r4, [sp, #96]	; 0x60
 8007efc:	18f6      	adds	r6, r6, r3
 8007efe:	2200      	movs	r2, #0
 8007f00:	4b9a      	ldr	r3, [pc, #616]	; (800816c <_dtoa_r+0x370>)
 8007f02:	f7fa fb5b 	bl	80025bc <__aeabi_dsub>
 8007f06:	4a9a      	ldr	r2, [pc, #616]	; (8008170 <_dtoa_r+0x374>)
 8007f08:	4b9a      	ldr	r3, [pc, #616]	; (8008174 <_dtoa_r+0x378>)
 8007f0a:	f7fa f8eb 	bl	80020e4 <__aeabi_dmul>
 8007f0e:	4a9a      	ldr	r2, [pc, #616]	; (8008178 <_dtoa_r+0x37c>)
 8007f10:	4b9a      	ldr	r3, [pc, #616]	; (800817c <_dtoa_r+0x380>)
 8007f12:	f7f9 f9a9 	bl	8001268 <__aeabi_dadd>
 8007f16:	0004      	movs	r4, r0
 8007f18:	0030      	movs	r0, r6
 8007f1a:	000d      	movs	r5, r1
 8007f1c:	f7fa ff34 	bl	8002d88 <__aeabi_i2d>
 8007f20:	4a97      	ldr	r2, [pc, #604]	; (8008180 <_dtoa_r+0x384>)
 8007f22:	4b98      	ldr	r3, [pc, #608]	; (8008184 <_dtoa_r+0x388>)
 8007f24:	f7fa f8de 	bl	80020e4 <__aeabi_dmul>
 8007f28:	0002      	movs	r2, r0
 8007f2a:	000b      	movs	r3, r1
 8007f2c:	0020      	movs	r0, r4
 8007f2e:	0029      	movs	r1, r5
 8007f30:	f7f9 f99a 	bl	8001268 <__aeabi_dadd>
 8007f34:	0004      	movs	r4, r0
 8007f36:	000d      	movs	r5, r1
 8007f38:	f7fa fef0 	bl	8002d1c <__aeabi_d2iz>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	9002      	str	r0, [sp, #8]
 8007f40:	2300      	movs	r3, #0
 8007f42:	0020      	movs	r0, r4
 8007f44:	0029      	movs	r1, r5
 8007f46:	f7f8 fa87 	bl	8000458 <__aeabi_dcmplt>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d00b      	beq.n	8007f66 <_dtoa_r+0x16a>
 8007f4e:	9802      	ldr	r0, [sp, #8]
 8007f50:	f7fa ff1a 	bl	8002d88 <__aeabi_i2d>
 8007f54:	002b      	movs	r3, r5
 8007f56:	0022      	movs	r2, r4
 8007f58:	f7f8 fa78 	bl	800044c <__aeabi_dcmpeq>
 8007f5c:	4243      	negs	r3, r0
 8007f5e:	4158      	adcs	r0, r3
 8007f60:	9b02      	ldr	r3, [sp, #8]
 8007f62:	1a1b      	subs	r3, r3, r0
 8007f64:	9302      	str	r3, [sp, #8]
 8007f66:	2301      	movs	r3, #1
 8007f68:	9316      	str	r3, [sp, #88]	; 0x58
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	2b16      	cmp	r3, #22
 8007f6e:	d80f      	bhi.n	8007f90 <_dtoa_r+0x194>
 8007f70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f74:	00da      	lsls	r2, r3, #3
 8007f76:	4b84      	ldr	r3, [pc, #528]	; (8008188 <_dtoa_r+0x38c>)
 8007f78:	189b      	adds	r3, r3, r2
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f7f8 fa6b 	bl	8000458 <__aeabi_dcmplt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d049      	beq.n	800801a <_dtoa_r+0x21e>
 8007f86:	9b02      	ldr	r3, [sp, #8]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	9302      	str	r3, [sp, #8]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9316      	str	r3, [sp, #88]	; 0x58
 8007f90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007f92:	1b9e      	subs	r6, r3, r6
 8007f94:	2300      	movs	r3, #0
 8007f96:	930a      	str	r3, [sp, #40]	; 0x28
 8007f98:	0033      	movs	r3, r6
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f9e:	d504      	bpl.n	8007faa <_dtoa_r+0x1ae>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	1b9b      	subs	r3, r3, r6
 8007fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	930d      	str	r3, [sp, #52]	; 0x34
 8007faa:	9b02      	ldr	r3, [sp, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	db36      	blt.n	800801e <_dtoa_r+0x222>
 8007fb0:	9a02      	ldr	r2, [sp, #8]
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb4:	4694      	mov	ip, r2
 8007fb6:	4463      	add	r3, ip
 8007fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9215      	str	r2, [sp, #84]	; 0x54
 8007fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8007fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fc2:	2401      	movs	r4, #1
 8007fc4:	2b09      	cmp	r3, #9
 8007fc6:	d864      	bhi.n	8008092 <_dtoa_r+0x296>
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	dd02      	ble.n	8007fd2 <_dtoa_r+0x1d6>
 8007fcc:	2400      	movs	r4, #0
 8007fce:	3b04      	subs	r3, #4
 8007fd0:	9322      	str	r3, [sp, #136]	; 0x88
 8007fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fd4:	1e98      	subs	r0, r3, #2
 8007fd6:	2803      	cmp	r0, #3
 8007fd8:	d864      	bhi.n	80080a4 <_dtoa_r+0x2a8>
 8007fda:	f7f8 f89d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007fde:	3829      	.short	0x3829
 8007fe0:	5836      	.short	0x5836
 8007fe2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007fe4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007fe6:	189e      	adds	r6, r3, r2
 8007fe8:	4b68      	ldr	r3, [pc, #416]	; (800818c <_dtoa_r+0x390>)
 8007fea:	18f2      	adds	r2, r6, r3
 8007fec:	2a20      	cmp	r2, #32
 8007fee:	dd0f      	ble.n	8008010 <_dtoa_r+0x214>
 8007ff0:	2340      	movs	r3, #64	; 0x40
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	409d      	lsls	r5, r3
 8007ff6:	4b66      	ldr	r3, [pc, #408]	; (8008190 <_dtoa_r+0x394>)
 8007ff8:	9802      	ldr	r0, [sp, #8]
 8007ffa:	18f3      	adds	r3, r6, r3
 8007ffc:	40d8      	lsrs	r0, r3
 8007ffe:	4328      	orrs	r0, r5
 8008000:	f7fa fef2 	bl	8002de8 <__aeabi_ui2d>
 8008004:	2301      	movs	r3, #1
 8008006:	4c63      	ldr	r4, [pc, #396]	; (8008194 <_dtoa_r+0x398>)
 8008008:	3e01      	subs	r6, #1
 800800a:	1909      	adds	r1, r1, r4
 800800c:	9318      	str	r3, [sp, #96]	; 0x60
 800800e:	e776      	b.n	8007efe <_dtoa_r+0x102>
 8008010:	2320      	movs	r3, #32
 8008012:	9802      	ldr	r0, [sp, #8]
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	4098      	lsls	r0, r3
 8008018:	e7f2      	b.n	8008000 <_dtoa_r+0x204>
 800801a:	9016      	str	r0, [sp, #88]	; 0x58
 800801c:	e7b8      	b.n	8007f90 <_dtoa_r+0x194>
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	9a02      	ldr	r2, [sp, #8]
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	930a      	str	r3, [sp, #40]	; 0x28
 8008026:	4253      	negs	r3, r2
 8008028:	930e      	str	r3, [sp, #56]	; 0x38
 800802a:	2300      	movs	r3, #0
 800802c:	9315      	str	r3, [sp, #84]	; 0x54
 800802e:	e7c7      	b.n	8007fc0 <_dtoa_r+0x1c4>
 8008030:	2300      	movs	r3, #0
 8008032:	930f      	str	r3, [sp, #60]	; 0x3c
 8008034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008036:	930c      	str	r3, [sp, #48]	; 0x30
 8008038:	9307      	str	r3, [sp, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	dc13      	bgt.n	8008066 <_dtoa_r+0x26a>
 800803e:	2301      	movs	r3, #1
 8008040:	001a      	movs	r2, r3
 8008042:	930c      	str	r3, [sp, #48]	; 0x30
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	9223      	str	r2, [sp, #140]	; 0x8c
 8008048:	e00d      	b.n	8008066 <_dtoa_r+0x26a>
 800804a:	2301      	movs	r3, #1
 800804c:	e7f1      	b.n	8008032 <_dtoa_r+0x236>
 800804e:	2300      	movs	r3, #0
 8008050:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008052:	930f      	str	r3, [sp, #60]	; 0x3c
 8008054:	4694      	mov	ip, r2
 8008056:	9b02      	ldr	r3, [sp, #8]
 8008058:	4463      	add	r3, ip
 800805a:	930c      	str	r3, [sp, #48]	; 0x30
 800805c:	3301      	adds	r3, #1
 800805e:	9307      	str	r3, [sp, #28]
 8008060:	2b00      	cmp	r3, #0
 8008062:	dc00      	bgt.n	8008066 <_dtoa_r+0x26a>
 8008064:	2301      	movs	r3, #1
 8008066:	2200      	movs	r2, #0
 8008068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800806a:	6042      	str	r2, [r0, #4]
 800806c:	3204      	adds	r2, #4
 800806e:	0015      	movs	r5, r2
 8008070:	3514      	adds	r5, #20
 8008072:	6841      	ldr	r1, [r0, #4]
 8008074:	429d      	cmp	r5, r3
 8008076:	d919      	bls.n	80080ac <_dtoa_r+0x2b0>
 8008078:	0038      	movs	r0, r7
 800807a:	f001 f881 	bl	8009180 <_Balloc>
 800807e:	9006      	str	r0, [sp, #24]
 8008080:	2800      	cmp	r0, #0
 8008082:	d117      	bne.n	80080b4 <_dtoa_r+0x2b8>
 8008084:	21d5      	movs	r1, #213	; 0xd5
 8008086:	0002      	movs	r2, r0
 8008088:	4b43      	ldr	r3, [pc, #268]	; (8008198 <_dtoa_r+0x39c>)
 800808a:	0049      	lsls	r1, r1, #1
 800808c:	e6cb      	b.n	8007e26 <_dtoa_r+0x2a>
 800808e:	2301      	movs	r3, #1
 8008090:	e7de      	b.n	8008050 <_dtoa_r+0x254>
 8008092:	2300      	movs	r3, #0
 8008094:	940f      	str	r4, [sp, #60]	; 0x3c
 8008096:	9322      	str	r3, [sp, #136]	; 0x88
 8008098:	3b01      	subs	r3, #1
 800809a:	930c      	str	r3, [sp, #48]	; 0x30
 800809c:	9307      	str	r3, [sp, #28]
 800809e:	2200      	movs	r2, #0
 80080a0:	3313      	adds	r3, #19
 80080a2:	e7d0      	b.n	8008046 <_dtoa_r+0x24a>
 80080a4:	2301      	movs	r3, #1
 80080a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080a8:	3b02      	subs	r3, #2
 80080aa:	e7f6      	b.n	800809a <_dtoa_r+0x29e>
 80080ac:	3101      	adds	r1, #1
 80080ae:	6041      	str	r1, [r0, #4]
 80080b0:	0052      	lsls	r2, r2, #1
 80080b2:	e7dc      	b.n	800806e <_dtoa_r+0x272>
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	9a06      	ldr	r2, [sp, #24]
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	2b0e      	cmp	r3, #14
 80080be:	d900      	bls.n	80080c2 <_dtoa_r+0x2c6>
 80080c0:	e0eb      	b.n	800829a <_dtoa_r+0x49e>
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	d100      	bne.n	80080c8 <_dtoa_r+0x2cc>
 80080c6:	e0e8      	b.n	800829a <_dtoa_r+0x49e>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dd68      	ble.n	80081a0 <_dtoa_r+0x3a4>
 80080ce:	001a      	movs	r2, r3
 80080d0:	210f      	movs	r1, #15
 80080d2:	4b2d      	ldr	r3, [pc, #180]	; (8008188 <_dtoa_r+0x38c>)
 80080d4:	400a      	ands	r2, r1
 80080d6:	00d2      	lsls	r2, r2, #3
 80080d8:	189b      	adds	r3, r3, r2
 80080da:	681d      	ldr	r5, [r3, #0]
 80080dc:	685e      	ldr	r6, [r3, #4]
 80080de:	9b02      	ldr	r3, [sp, #8]
 80080e0:	111c      	asrs	r4, r3, #4
 80080e2:	2302      	movs	r3, #2
 80080e4:	9310      	str	r3, [sp, #64]	; 0x40
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	05db      	lsls	r3, r3, #23
 80080ea:	d50b      	bpl.n	8008104 <_dtoa_r+0x308>
 80080ec:	4b2b      	ldr	r3, [pc, #172]	; (800819c <_dtoa_r+0x3a0>)
 80080ee:	400c      	ands	r4, r1
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80080f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080f8:	f7f9 fbf2 	bl	80018e0 <__aeabi_ddiv>
 80080fc:	2303      	movs	r3, #3
 80080fe:	9008      	str	r0, [sp, #32]
 8008100:	9109      	str	r1, [sp, #36]	; 0x24
 8008102:	9310      	str	r3, [sp, #64]	; 0x40
 8008104:	4b25      	ldr	r3, [pc, #148]	; (800819c <_dtoa_r+0x3a0>)
 8008106:	9314      	str	r3, [sp, #80]	; 0x50
 8008108:	2c00      	cmp	r4, #0
 800810a:	d108      	bne.n	800811e <_dtoa_r+0x322>
 800810c:	9808      	ldr	r0, [sp, #32]
 800810e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008110:	002a      	movs	r2, r5
 8008112:	0033      	movs	r3, r6
 8008114:	f7f9 fbe4 	bl	80018e0 <__aeabi_ddiv>
 8008118:	9008      	str	r0, [sp, #32]
 800811a:	9109      	str	r1, [sp, #36]	; 0x24
 800811c:	e05c      	b.n	80081d8 <_dtoa_r+0x3dc>
 800811e:	2301      	movs	r3, #1
 8008120:	421c      	tst	r4, r3
 8008122:	d00b      	beq.n	800813c <_dtoa_r+0x340>
 8008124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008126:	0028      	movs	r0, r5
 8008128:	3301      	adds	r3, #1
 800812a:	9310      	str	r3, [sp, #64]	; 0x40
 800812c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800812e:	0031      	movs	r1, r6
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f7f9 ffd6 	bl	80020e4 <__aeabi_dmul>
 8008138:	0005      	movs	r5, r0
 800813a:	000e      	movs	r6, r1
 800813c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800813e:	1064      	asrs	r4, r4, #1
 8008140:	3308      	adds	r3, #8
 8008142:	e7e0      	b.n	8008106 <_dtoa_r+0x30a>
 8008144:	0800ce86 	.word	0x0800ce86
 8008148:	0800ce9d 	.word	0x0800ce9d
 800814c:	7ff00000 	.word	0x7ff00000
 8008150:	0000270f 	.word	0x0000270f
 8008154:	0800ce82 	.word	0x0800ce82
 8008158:	0800ce85 	.word	0x0800ce85
 800815c:	0800ccfc 	.word	0x0800ccfc
 8008160:	0800ccfd 	.word	0x0800ccfd
 8008164:	3ff00000 	.word	0x3ff00000
 8008168:	fffffc01 	.word	0xfffffc01
 800816c:	3ff80000 	.word	0x3ff80000
 8008170:	636f4361 	.word	0x636f4361
 8008174:	3fd287a7 	.word	0x3fd287a7
 8008178:	8b60c8b3 	.word	0x8b60c8b3
 800817c:	3fc68a28 	.word	0x3fc68a28
 8008180:	509f79fb 	.word	0x509f79fb
 8008184:	3fd34413 	.word	0x3fd34413
 8008188:	0800d008 	.word	0x0800d008
 800818c:	00000432 	.word	0x00000432
 8008190:	00000412 	.word	0x00000412
 8008194:	fe100000 	.word	0xfe100000
 8008198:	0800cef8 	.word	0x0800cef8
 800819c:	0800cfe0 	.word	0x0800cfe0
 80081a0:	2302      	movs	r3, #2
 80081a2:	9310      	str	r3, [sp, #64]	; 0x40
 80081a4:	9b02      	ldr	r3, [sp, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <_dtoa_r+0x3dc>
 80081aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80081ae:	425c      	negs	r4, r3
 80081b0:	230f      	movs	r3, #15
 80081b2:	4ab6      	ldr	r2, [pc, #728]	; (800848c <_dtoa_r+0x690>)
 80081b4:	4023      	ands	r3, r4
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	18d3      	adds	r3, r2, r3
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f7f9 ff91 	bl	80020e4 <__aeabi_dmul>
 80081c2:	2601      	movs	r6, #1
 80081c4:	2300      	movs	r3, #0
 80081c6:	9008      	str	r0, [sp, #32]
 80081c8:	9109      	str	r1, [sp, #36]	; 0x24
 80081ca:	4db1      	ldr	r5, [pc, #708]	; (8008490 <_dtoa_r+0x694>)
 80081cc:	1124      	asrs	r4, r4, #4
 80081ce:	2c00      	cmp	r4, #0
 80081d0:	d000      	beq.n	80081d4 <_dtoa_r+0x3d8>
 80081d2:	e094      	b.n	80082fe <_dtoa_r+0x502>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d19f      	bne.n	8008118 <_dtoa_r+0x31c>
 80081d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d100      	bne.n	80081e0 <_dtoa_r+0x3e4>
 80081de:	e09b      	b.n	8008318 <_dtoa_r+0x51c>
 80081e0:	9c08      	ldr	r4, [sp, #32]
 80081e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081e4:	2200      	movs	r2, #0
 80081e6:	0020      	movs	r0, r4
 80081e8:	0029      	movs	r1, r5
 80081ea:	4baa      	ldr	r3, [pc, #680]	; (8008494 <_dtoa_r+0x698>)
 80081ec:	f7f8 f934 	bl	8000458 <__aeabi_dcmplt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d100      	bne.n	80081f6 <_dtoa_r+0x3fa>
 80081f4:	e090      	b.n	8008318 <_dtoa_r+0x51c>
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d100      	bne.n	80081fe <_dtoa_r+0x402>
 80081fc:	e08c      	b.n	8008318 <_dtoa_r+0x51c>
 80081fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008200:	2b00      	cmp	r3, #0
 8008202:	dd46      	ble.n	8008292 <_dtoa_r+0x496>
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	2200      	movs	r2, #0
 8008208:	0020      	movs	r0, r4
 800820a:	0029      	movs	r1, r5
 800820c:	1e5e      	subs	r6, r3, #1
 800820e:	4ba2      	ldr	r3, [pc, #648]	; (8008498 <_dtoa_r+0x69c>)
 8008210:	f7f9 ff68 	bl	80020e4 <__aeabi_dmul>
 8008214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008216:	9008      	str	r0, [sp, #32]
 8008218:	9109      	str	r1, [sp, #36]	; 0x24
 800821a:	3301      	adds	r3, #1
 800821c:	9310      	str	r3, [sp, #64]	; 0x40
 800821e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008220:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008222:	9c08      	ldr	r4, [sp, #32]
 8008224:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008226:	9314      	str	r3, [sp, #80]	; 0x50
 8008228:	f7fa fdae 	bl	8002d88 <__aeabi_i2d>
 800822c:	0022      	movs	r2, r4
 800822e:	002b      	movs	r3, r5
 8008230:	f7f9 ff58 	bl	80020e4 <__aeabi_dmul>
 8008234:	2200      	movs	r2, #0
 8008236:	4b99      	ldr	r3, [pc, #612]	; (800849c <_dtoa_r+0x6a0>)
 8008238:	f7f9 f816 	bl	8001268 <__aeabi_dadd>
 800823c:	9010      	str	r0, [sp, #64]	; 0x40
 800823e:	9111      	str	r1, [sp, #68]	; 0x44
 8008240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008244:	9208      	str	r2, [sp, #32]
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	4a95      	ldr	r2, [pc, #596]	; (80084a0 <_dtoa_r+0x6a4>)
 800824a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800824c:	4694      	mov	ip, r2
 800824e:	4463      	add	r3, ip
 8008250:	9317      	str	r3, [sp, #92]	; 0x5c
 8008252:	9309      	str	r3, [sp, #36]	; 0x24
 8008254:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008256:	2b00      	cmp	r3, #0
 8008258:	d161      	bne.n	800831e <_dtoa_r+0x522>
 800825a:	2200      	movs	r2, #0
 800825c:	0020      	movs	r0, r4
 800825e:	0029      	movs	r1, r5
 8008260:	4b90      	ldr	r3, [pc, #576]	; (80084a4 <_dtoa_r+0x6a8>)
 8008262:	f7fa f9ab 	bl	80025bc <__aeabi_dsub>
 8008266:	9a08      	ldr	r2, [sp, #32]
 8008268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800826a:	0004      	movs	r4, r0
 800826c:	000d      	movs	r5, r1
 800826e:	f7f8 f907 	bl	8000480 <__aeabi_dcmpgt>
 8008272:	2800      	cmp	r0, #0
 8008274:	d000      	beq.n	8008278 <_dtoa_r+0x47c>
 8008276:	e2af      	b.n	80087d8 <_dtoa_r+0x9dc>
 8008278:	488b      	ldr	r0, [pc, #556]	; (80084a8 <_dtoa_r+0x6ac>)
 800827a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800827c:	4684      	mov	ip, r0
 800827e:	4461      	add	r1, ip
 8008280:	000b      	movs	r3, r1
 8008282:	0020      	movs	r0, r4
 8008284:	0029      	movs	r1, r5
 8008286:	9a08      	ldr	r2, [sp, #32]
 8008288:	f7f8 f8e6 	bl	8000458 <__aeabi_dcmplt>
 800828c:	2800      	cmp	r0, #0
 800828e:	d000      	beq.n	8008292 <_dtoa_r+0x496>
 8008290:	e29f      	b.n	80087d2 <_dtoa_r+0x9d6>
 8008292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008294:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008296:	9308      	str	r3, [sp, #32]
 8008298:	9409      	str	r4, [sp, #36]	; 0x24
 800829a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800829c:	2b00      	cmp	r3, #0
 800829e:	da00      	bge.n	80082a2 <_dtoa_r+0x4a6>
 80082a0:	e172      	b.n	8008588 <_dtoa_r+0x78c>
 80082a2:	9a02      	ldr	r2, [sp, #8]
 80082a4:	2a0e      	cmp	r2, #14
 80082a6:	dd00      	ble.n	80082aa <_dtoa_r+0x4ae>
 80082a8:	e16e      	b.n	8008588 <_dtoa_r+0x78c>
 80082aa:	4b78      	ldr	r3, [pc, #480]	; (800848c <_dtoa_r+0x690>)
 80082ac:	00d2      	lsls	r2, r2, #3
 80082ae:	189b      	adds	r3, r3, r2
 80082b0:	685c      	ldr	r4, [r3, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	930a      	str	r3, [sp, #40]	; 0x28
 80082b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80082b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	db00      	blt.n	80082c0 <_dtoa_r+0x4c4>
 80082be:	e0f7      	b.n	80084b0 <_dtoa_r+0x6b4>
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dd00      	ble.n	80082c8 <_dtoa_r+0x4cc>
 80082c6:	e0f3      	b.n	80084b0 <_dtoa_r+0x6b4>
 80082c8:	d000      	beq.n	80082cc <_dtoa_r+0x4d0>
 80082ca:	e282      	b.n	80087d2 <_dtoa_r+0x9d6>
 80082cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082d0:	2200      	movs	r2, #0
 80082d2:	4b74      	ldr	r3, [pc, #464]	; (80084a4 <_dtoa_r+0x6a8>)
 80082d4:	f7f9 ff06 	bl	80020e4 <__aeabi_dmul>
 80082d8:	9a08      	ldr	r2, [sp, #32]
 80082da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082dc:	f7f8 f8da 	bl	8000494 <__aeabi_dcmpge>
 80082e0:	9e07      	ldr	r6, [sp, #28]
 80082e2:	0035      	movs	r5, r6
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d000      	beq.n	80082ea <_dtoa_r+0x4ee>
 80082e8:	e259      	b.n	800879e <_dtoa_r+0x9a2>
 80082ea:	9b06      	ldr	r3, [sp, #24]
 80082ec:	9a06      	ldr	r2, [sp, #24]
 80082ee:	3301      	adds	r3, #1
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	2331      	movs	r3, #49	; 0x31
 80082f4:	7013      	strb	r3, [r2, #0]
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	3301      	adds	r3, #1
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	e254      	b.n	80087a8 <_dtoa_r+0x9ac>
 80082fe:	4234      	tst	r4, r6
 8008300:	d007      	beq.n	8008312 <_dtoa_r+0x516>
 8008302:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008304:	3301      	adds	r3, #1
 8008306:	9310      	str	r3, [sp, #64]	; 0x40
 8008308:	682a      	ldr	r2, [r5, #0]
 800830a:	686b      	ldr	r3, [r5, #4]
 800830c:	f7f9 feea 	bl	80020e4 <__aeabi_dmul>
 8008310:	0033      	movs	r3, r6
 8008312:	1064      	asrs	r4, r4, #1
 8008314:	3508      	adds	r5, #8
 8008316:	e75a      	b.n	80081ce <_dtoa_r+0x3d2>
 8008318:	9e02      	ldr	r6, [sp, #8]
 800831a:	9b07      	ldr	r3, [sp, #28]
 800831c:	e780      	b.n	8008220 <_dtoa_r+0x424>
 800831e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008320:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008322:	1e5a      	subs	r2, r3, #1
 8008324:	4b59      	ldr	r3, [pc, #356]	; (800848c <_dtoa_r+0x690>)
 8008326:	00d2      	lsls	r2, r2, #3
 8008328:	189b      	adds	r3, r3, r2
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2900      	cmp	r1, #0
 8008330:	d051      	beq.n	80083d6 <_dtoa_r+0x5da>
 8008332:	2000      	movs	r0, #0
 8008334:	495d      	ldr	r1, [pc, #372]	; (80084ac <_dtoa_r+0x6b0>)
 8008336:	f7f9 fad3 	bl	80018e0 <__aeabi_ddiv>
 800833a:	9a08      	ldr	r2, [sp, #32]
 800833c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833e:	f7fa f93d 	bl	80025bc <__aeabi_dsub>
 8008342:	9a06      	ldr	r2, [sp, #24]
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	4694      	mov	ip, r2
 8008348:	9317      	str	r3, [sp, #92]	; 0x5c
 800834a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800834c:	9010      	str	r0, [sp, #64]	; 0x40
 800834e:	9111      	str	r1, [sp, #68]	; 0x44
 8008350:	4463      	add	r3, ip
 8008352:	9319      	str	r3, [sp, #100]	; 0x64
 8008354:	0029      	movs	r1, r5
 8008356:	0020      	movs	r0, r4
 8008358:	f7fa fce0 	bl	8002d1c <__aeabi_d2iz>
 800835c:	9014      	str	r0, [sp, #80]	; 0x50
 800835e:	f7fa fd13 	bl	8002d88 <__aeabi_i2d>
 8008362:	0002      	movs	r2, r0
 8008364:	000b      	movs	r3, r1
 8008366:	0020      	movs	r0, r4
 8008368:	0029      	movs	r1, r5
 800836a:	f7fa f927 	bl	80025bc <__aeabi_dsub>
 800836e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008370:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008372:	3301      	adds	r3, #1
 8008374:	9308      	str	r3, [sp, #32]
 8008376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008378:	0004      	movs	r4, r0
 800837a:	3330      	adds	r3, #48	; 0x30
 800837c:	7013      	strb	r3, [r2, #0]
 800837e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008382:	000d      	movs	r5, r1
 8008384:	f7f8 f868 	bl	8000458 <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	d175      	bne.n	8008478 <_dtoa_r+0x67c>
 800838c:	0022      	movs	r2, r4
 800838e:	002b      	movs	r3, r5
 8008390:	2000      	movs	r0, #0
 8008392:	4940      	ldr	r1, [pc, #256]	; (8008494 <_dtoa_r+0x698>)
 8008394:	f7fa f912 	bl	80025bc <__aeabi_dsub>
 8008398:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800839a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800839c:	f7f8 f85c 	bl	8000458 <__aeabi_dcmplt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d000      	beq.n	80083a6 <_dtoa_r+0x5aa>
 80083a4:	e0d2      	b.n	800854c <_dtoa_r+0x750>
 80083a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083a8:	9a08      	ldr	r2, [sp, #32]
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d100      	bne.n	80083b0 <_dtoa_r+0x5b4>
 80083ae:	e770      	b.n	8008292 <_dtoa_r+0x496>
 80083b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80083b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80083b4:	2200      	movs	r2, #0
 80083b6:	4b38      	ldr	r3, [pc, #224]	; (8008498 <_dtoa_r+0x69c>)
 80083b8:	f7f9 fe94 	bl	80020e4 <__aeabi_dmul>
 80083bc:	4b36      	ldr	r3, [pc, #216]	; (8008498 <_dtoa_r+0x69c>)
 80083be:	9010      	str	r0, [sp, #64]	; 0x40
 80083c0:	9111      	str	r1, [sp, #68]	; 0x44
 80083c2:	2200      	movs	r2, #0
 80083c4:	0020      	movs	r0, r4
 80083c6:	0029      	movs	r1, r5
 80083c8:	f7f9 fe8c 	bl	80020e4 <__aeabi_dmul>
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	0004      	movs	r4, r0
 80083d0:	000d      	movs	r5, r1
 80083d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80083d4:	e7be      	b.n	8008354 <_dtoa_r+0x558>
 80083d6:	9808      	ldr	r0, [sp, #32]
 80083d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083da:	f7f9 fe83 	bl	80020e4 <__aeabi_dmul>
 80083de:	9a06      	ldr	r2, [sp, #24]
 80083e0:	9b06      	ldr	r3, [sp, #24]
 80083e2:	4694      	mov	ip, r2
 80083e4:	9308      	str	r3, [sp, #32]
 80083e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083e8:	9010      	str	r0, [sp, #64]	; 0x40
 80083ea:	9111      	str	r1, [sp, #68]	; 0x44
 80083ec:	4463      	add	r3, ip
 80083ee:	9319      	str	r3, [sp, #100]	; 0x64
 80083f0:	0029      	movs	r1, r5
 80083f2:	0020      	movs	r0, r4
 80083f4:	f7fa fc92 	bl	8002d1c <__aeabi_d2iz>
 80083f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80083fa:	f7fa fcc5 	bl	8002d88 <__aeabi_i2d>
 80083fe:	0002      	movs	r2, r0
 8008400:	000b      	movs	r3, r1
 8008402:	0020      	movs	r0, r4
 8008404:	0029      	movs	r1, r5
 8008406:	f7fa f8d9 	bl	80025bc <__aeabi_dsub>
 800840a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800840c:	9a08      	ldr	r2, [sp, #32]
 800840e:	3330      	adds	r3, #48	; 0x30
 8008410:	7013      	strb	r3, [r2, #0]
 8008412:	0013      	movs	r3, r2
 8008414:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008416:	3301      	adds	r3, #1
 8008418:	0004      	movs	r4, r0
 800841a:	000d      	movs	r5, r1
 800841c:	9308      	str	r3, [sp, #32]
 800841e:	4293      	cmp	r3, r2
 8008420:	d12c      	bne.n	800847c <_dtoa_r+0x680>
 8008422:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008424:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008426:	9a06      	ldr	r2, [sp, #24]
 8008428:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800842a:	4694      	mov	ip, r2
 800842c:	4463      	add	r3, ip
 800842e:	2200      	movs	r2, #0
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <_dtoa_r+0x6b0>)
 8008434:	f7f8 ff18 	bl	8001268 <__aeabi_dadd>
 8008438:	0002      	movs	r2, r0
 800843a:	000b      	movs	r3, r1
 800843c:	0020      	movs	r0, r4
 800843e:	0029      	movs	r1, r5
 8008440:	f7f8 f81e 	bl	8000480 <__aeabi_dcmpgt>
 8008444:	2800      	cmp	r0, #0
 8008446:	d000      	beq.n	800844a <_dtoa_r+0x64e>
 8008448:	e080      	b.n	800854c <_dtoa_r+0x750>
 800844a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800844c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800844e:	2000      	movs	r0, #0
 8008450:	4916      	ldr	r1, [pc, #88]	; (80084ac <_dtoa_r+0x6b0>)
 8008452:	f7fa f8b3 	bl	80025bc <__aeabi_dsub>
 8008456:	0002      	movs	r2, r0
 8008458:	000b      	movs	r3, r1
 800845a:	0020      	movs	r0, r4
 800845c:	0029      	movs	r1, r5
 800845e:	f7f7 fffb 	bl	8000458 <__aeabi_dcmplt>
 8008462:	2800      	cmp	r0, #0
 8008464:	d100      	bne.n	8008468 <_dtoa_r+0x66c>
 8008466:	e714      	b.n	8008292 <_dtoa_r+0x496>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	001a      	movs	r2, r3
 800846c:	3a01      	subs	r2, #1
 800846e:	9208      	str	r2, [sp, #32]
 8008470:	7812      	ldrb	r2, [r2, #0]
 8008472:	2a30      	cmp	r2, #48	; 0x30
 8008474:	d0f8      	beq.n	8008468 <_dtoa_r+0x66c>
 8008476:	9308      	str	r3, [sp, #32]
 8008478:	9602      	str	r6, [sp, #8]
 800847a:	e055      	b.n	8008528 <_dtoa_r+0x72c>
 800847c:	2200      	movs	r2, #0
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <_dtoa_r+0x69c>)
 8008480:	f7f9 fe30 	bl	80020e4 <__aeabi_dmul>
 8008484:	0004      	movs	r4, r0
 8008486:	000d      	movs	r5, r1
 8008488:	e7b2      	b.n	80083f0 <_dtoa_r+0x5f4>
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	0800d008 	.word	0x0800d008
 8008490:	0800cfe0 	.word	0x0800cfe0
 8008494:	3ff00000 	.word	0x3ff00000
 8008498:	40240000 	.word	0x40240000
 800849c:	401c0000 	.word	0x401c0000
 80084a0:	fcc00000 	.word	0xfcc00000
 80084a4:	40140000 	.word	0x40140000
 80084a8:	7cc00000 	.word	0x7cc00000
 80084ac:	3fe00000 	.word	0x3fe00000
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	9e06      	ldr	r6, [sp, #24]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	199b      	adds	r3, r3, r6
 80084b8:	930c      	str	r3, [sp, #48]	; 0x30
 80084ba:	9c08      	ldr	r4, [sp, #32]
 80084bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c2:	0020      	movs	r0, r4
 80084c4:	0029      	movs	r1, r5
 80084c6:	f7f9 fa0b 	bl	80018e0 <__aeabi_ddiv>
 80084ca:	f7fa fc27 	bl	8002d1c <__aeabi_d2iz>
 80084ce:	9007      	str	r0, [sp, #28]
 80084d0:	f7fa fc5a 	bl	8002d88 <__aeabi_i2d>
 80084d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d8:	f7f9 fe04 	bl	80020e4 <__aeabi_dmul>
 80084dc:	0002      	movs	r2, r0
 80084de:	000b      	movs	r3, r1
 80084e0:	0020      	movs	r0, r4
 80084e2:	0029      	movs	r1, r5
 80084e4:	f7fa f86a 	bl	80025bc <__aeabi_dsub>
 80084e8:	0033      	movs	r3, r6
 80084ea:	9a07      	ldr	r2, [sp, #28]
 80084ec:	3601      	adds	r6, #1
 80084ee:	3230      	adds	r2, #48	; 0x30
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084f4:	9608      	str	r6, [sp, #32]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d139      	bne.n	800856e <_dtoa_r+0x772>
 80084fa:	0002      	movs	r2, r0
 80084fc:	000b      	movs	r3, r1
 80084fe:	f7f8 feb3 	bl	8001268 <__aeabi_dadd>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008506:	0004      	movs	r4, r0
 8008508:	000d      	movs	r5, r1
 800850a:	f7f7 ffb9 	bl	8000480 <__aeabi_dcmpgt>
 800850e:	2800      	cmp	r0, #0
 8008510:	d11b      	bne.n	800854a <_dtoa_r+0x74e>
 8008512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008516:	0020      	movs	r0, r4
 8008518:	0029      	movs	r1, r5
 800851a:	f7f7 ff97 	bl	800044c <__aeabi_dcmpeq>
 800851e:	2800      	cmp	r0, #0
 8008520:	d002      	beq.n	8008528 <_dtoa_r+0x72c>
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	07db      	lsls	r3, r3, #31
 8008526:	d410      	bmi.n	800854a <_dtoa_r+0x74e>
 8008528:	0038      	movs	r0, r7
 800852a:	9905      	ldr	r1, [sp, #20]
 800852c:	f000 fe6c 	bl	8009208 <_Bfree>
 8008530:	2300      	movs	r3, #0
 8008532:	9a08      	ldr	r2, [sp, #32]
 8008534:	9802      	ldr	r0, [sp, #8]
 8008536:	7013      	strb	r3, [r2, #0]
 8008538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800853a:	3001      	adds	r0, #1
 800853c:	6018      	str	r0, [r3, #0]
 800853e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008540:	2b00      	cmp	r3, #0
 8008542:	d100      	bne.n	8008546 <_dtoa_r+0x74a>
 8008544:	e4a6      	b.n	8007e94 <_dtoa_r+0x98>
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e4a4      	b.n	8007e94 <_dtoa_r+0x98>
 800854a:	9e02      	ldr	r6, [sp, #8]
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	9308      	str	r3, [sp, #32]
 8008550:	3b01      	subs	r3, #1
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	2a39      	cmp	r2, #57	; 0x39
 8008556:	d106      	bne.n	8008566 <_dtoa_r+0x76a>
 8008558:	9a06      	ldr	r2, [sp, #24]
 800855a:	429a      	cmp	r2, r3
 800855c:	d1f7      	bne.n	800854e <_dtoa_r+0x752>
 800855e:	2230      	movs	r2, #48	; 0x30
 8008560:	9906      	ldr	r1, [sp, #24]
 8008562:	3601      	adds	r6, #1
 8008564:	700a      	strb	r2, [r1, #0]
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	3201      	adds	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e784      	b.n	8008478 <_dtoa_r+0x67c>
 800856e:	2200      	movs	r2, #0
 8008570:	4baa      	ldr	r3, [pc, #680]	; (800881c <_dtoa_r+0xa20>)
 8008572:	f7f9 fdb7 	bl	80020e4 <__aeabi_dmul>
 8008576:	2200      	movs	r2, #0
 8008578:	2300      	movs	r3, #0
 800857a:	0004      	movs	r4, r0
 800857c:	000d      	movs	r5, r1
 800857e:	f7f7 ff65 	bl	800044c <__aeabi_dcmpeq>
 8008582:	2800      	cmp	r0, #0
 8008584:	d09b      	beq.n	80084be <_dtoa_r+0x6c2>
 8008586:	e7cf      	b.n	8008528 <_dtoa_r+0x72c>
 8008588:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800858a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800858c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800858e:	2d00      	cmp	r5, #0
 8008590:	d012      	beq.n	80085b8 <_dtoa_r+0x7bc>
 8008592:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008594:	2a01      	cmp	r2, #1
 8008596:	dc66      	bgt.n	8008666 <_dtoa_r+0x86a>
 8008598:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800859a:	2a00      	cmp	r2, #0
 800859c:	d05d      	beq.n	800865a <_dtoa_r+0x85e>
 800859e:	4aa0      	ldr	r2, [pc, #640]	; (8008820 <_dtoa_r+0xa24>)
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a4:	2101      	movs	r1, #1
 80085a6:	18d2      	adds	r2, r2, r3
 80085a8:	920a      	str	r2, [sp, #40]	; 0x28
 80085aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ac:	0038      	movs	r0, r7
 80085ae:	18d3      	adds	r3, r2, r3
 80085b0:	930d      	str	r3, [sp, #52]	; 0x34
 80085b2:	f000 ff25 	bl	8009400 <__i2b>
 80085b6:	0005      	movs	r5, r0
 80085b8:	2c00      	cmp	r4, #0
 80085ba:	dd0e      	ble.n	80085da <_dtoa_r+0x7de>
 80085bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd0b      	ble.n	80085da <_dtoa_r+0x7de>
 80085c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085c4:	0023      	movs	r3, r4
 80085c6:	4294      	cmp	r4, r2
 80085c8:	dd00      	ble.n	80085cc <_dtoa_r+0x7d0>
 80085ca:	0013      	movs	r3, r2
 80085cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ce:	1ae4      	subs	r4, r4, r3
 80085d0:	1ad2      	subs	r2, r2, r3
 80085d2:	920a      	str	r2, [sp, #40]	; 0x28
 80085d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	930d      	str	r3, [sp, #52]	; 0x34
 80085da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01f      	beq.n	8008620 <_dtoa_r+0x824>
 80085e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d054      	beq.n	8008690 <_dtoa_r+0x894>
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	dd11      	ble.n	800860e <_dtoa_r+0x812>
 80085ea:	0029      	movs	r1, r5
 80085ec:	0032      	movs	r2, r6
 80085ee:	0038      	movs	r0, r7
 80085f0:	f000 ffcc 	bl	800958c <__pow5mult>
 80085f4:	9a05      	ldr	r2, [sp, #20]
 80085f6:	0001      	movs	r1, r0
 80085f8:	0005      	movs	r5, r0
 80085fa:	0038      	movs	r0, r7
 80085fc:	f000 ff16 	bl	800942c <__multiply>
 8008600:	9905      	ldr	r1, [sp, #20]
 8008602:	9014      	str	r0, [sp, #80]	; 0x50
 8008604:	0038      	movs	r0, r7
 8008606:	f000 fdff 	bl	8009208 <_Bfree>
 800860a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800860c:	9305      	str	r3, [sp, #20]
 800860e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008610:	1b9a      	subs	r2, r3, r6
 8008612:	42b3      	cmp	r3, r6
 8008614:	d004      	beq.n	8008620 <_dtoa_r+0x824>
 8008616:	0038      	movs	r0, r7
 8008618:	9905      	ldr	r1, [sp, #20]
 800861a:	f000 ffb7 	bl	800958c <__pow5mult>
 800861e:	9005      	str	r0, [sp, #20]
 8008620:	2101      	movs	r1, #1
 8008622:	0038      	movs	r0, r7
 8008624:	f000 feec 	bl	8009400 <__i2b>
 8008628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862a:	0006      	movs	r6, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	dd31      	ble.n	8008694 <_dtoa_r+0x898>
 8008630:	001a      	movs	r2, r3
 8008632:	0001      	movs	r1, r0
 8008634:	0038      	movs	r0, r7
 8008636:	f000 ffa9 	bl	800958c <__pow5mult>
 800863a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800863c:	0006      	movs	r6, r0
 800863e:	2b01      	cmp	r3, #1
 8008640:	dd2d      	ble.n	800869e <_dtoa_r+0x8a2>
 8008642:	2300      	movs	r3, #0
 8008644:	930e      	str	r3, [sp, #56]	; 0x38
 8008646:	6933      	ldr	r3, [r6, #16]
 8008648:	3303      	adds	r3, #3
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	18f3      	adds	r3, r6, r3
 800864e:	6858      	ldr	r0, [r3, #4]
 8008650:	f000 fe8e 	bl	8009370 <__hi0bits>
 8008654:	2320      	movs	r3, #32
 8008656:	1a18      	subs	r0, r3, r0
 8008658:	e039      	b.n	80086ce <_dtoa_r+0x8d2>
 800865a:	2336      	movs	r3, #54	; 0x36
 800865c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800865e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008660:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	e79d      	b.n	80085a2 <_dtoa_r+0x7a6>
 8008666:	9b07      	ldr	r3, [sp, #28]
 8008668:	1e5e      	subs	r6, r3, #1
 800866a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800866c:	42b3      	cmp	r3, r6
 800866e:	db07      	blt.n	8008680 <_dtoa_r+0x884>
 8008670:	1b9e      	subs	r6, r3, r6
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008676:	2b00      	cmp	r3, #0
 8008678:	da93      	bge.n	80085a2 <_dtoa_r+0x7a6>
 800867a:	1ae4      	subs	r4, r4, r3
 800867c:	2300      	movs	r3, #0
 800867e:	e790      	b.n	80085a2 <_dtoa_r+0x7a6>
 8008680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008682:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008684:	1af3      	subs	r3, r6, r3
 8008686:	18d3      	adds	r3, r2, r3
 8008688:	960e      	str	r6, [sp, #56]	; 0x38
 800868a:	9315      	str	r3, [sp, #84]	; 0x54
 800868c:	2600      	movs	r6, #0
 800868e:	e7f0      	b.n	8008672 <_dtoa_r+0x876>
 8008690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008692:	e7c0      	b.n	8008616 <_dtoa_r+0x81a>
 8008694:	2300      	movs	r3, #0
 8008696:	930e      	str	r3, [sp, #56]	; 0x38
 8008698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800869a:	2b01      	cmp	r3, #1
 800869c:	dc13      	bgt.n	80086c6 <_dtoa_r+0x8ca>
 800869e:	2300      	movs	r3, #0
 80086a0:	930e      	str	r3, [sp, #56]	; 0x38
 80086a2:	9b08      	ldr	r3, [sp, #32]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10e      	bne.n	80086c6 <_dtoa_r+0x8ca>
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	031b      	lsls	r3, r3, #12
 80086ac:	d10b      	bne.n	80086c6 <_dtoa_r+0x8ca>
 80086ae:	4b5d      	ldr	r3, [pc, #372]	; (8008824 <_dtoa_r+0xa28>)
 80086b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b2:	4213      	tst	r3, r2
 80086b4:	d007      	beq.n	80086c6 <_dtoa_r+0x8ca>
 80086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b8:	3301      	adds	r3, #1
 80086ba:	930a      	str	r3, [sp, #40]	; 0x28
 80086bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086be:	3301      	adds	r3, #1
 80086c0:	930d      	str	r3, [sp, #52]	; 0x34
 80086c2:	2301      	movs	r3, #1
 80086c4:	930e      	str	r3, [sp, #56]	; 0x38
 80086c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086c8:	2001      	movs	r0, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1bb      	bne.n	8008646 <_dtoa_r+0x84a>
 80086ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d0:	221f      	movs	r2, #31
 80086d2:	1818      	adds	r0, r3, r0
 80086d4:	0003      	movs	r3, r0
 80086d6:	4013      	ands	r3, r2
 80086d8:	4210      	tst	r0, r2
 80086da:	d046      	beq.n	800876a <_dtoa_r+0x96e>
 80086dc:	3201      	adds	r2, #1
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	2a04      	cmp	r2, #4
 80086e2:	dd3f      	ble.n	8008764 <_dtoa_r+0x968>
 80086e4:	221c      	movs	r2, #28
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ea:	18e4      	adds	r4, r4, r3
 80086ec:	18d2      	adds	r2, r2, r3
 80086ee:	920a      	str	r2, [sp, #40]	; 0x28
 80086f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086f2:	18d3      	adds	r3, r2, r3
 80086f4:	930d      	str	r3, [sp, #52]	; 0x34
 80086f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dd05      	ble.n	8008708 <_dtoa_r+0x90c>
 80086fc:	001a      	movs	r2, r3
 80086fe:	0038      	movs	r0, r7
 8008700:	9905      	ldr	r1, [sp, #20]
 8008702:	f000 ff9f 	bl	8009644 <__lshift>
 8008706:	9005      	str	r0, [sp, #20]
 8008708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800870a:	2b00      	cmp	r3, #0
 800870c:	dd05      	ble.n	800871a <_dtoa_r+0x91e>
 800870e:	0031      	movs	r1, r6
 8008710:	001a      	movs	r2, r3
 8008712:	0038      	movs	r0, r7
 8008714:	f000 ff96 	bl	8009644 <__lshift>
 8008718:	0006      	movs	r6, r0
 800871a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800871c:	2b00      	cmp	r3, #0
 800871e:	d026      	beq.n	800876e <_dtoa_r+0x972>
 8008720:	0031      	movs	r1, r6
 8008722:	9805      	ldr	r0, [sp, #20]
 8008724:	f000 fffc 	bl	8009720 <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	da20      	bge.n	800876e <_dtoa_r+0x972>
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	220a      	movs	r2, #10
 8008730:	3b01      	subs	r3, #1
 8008732:	9302      	str	r3, [sp, #8]
 8008734:	0038      	movs	r0, r7
 8008736:	2300      	movs	r3, #0
 8008738:	9905      	ldr	r1, [sp, #20]
 800873a:	f000 fd89 	bl	8009250 <__multadd>
 800873e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008740:	9005      	str	r0, [sp, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d100      	bne.n	8008748 <_dtoa_r+0x94c>
 8008746:	e166      	b.n	8008a16 <_dtoa_r+0xc1a>
 8008748:	2300      	movs	r3, #0
 800874a:	0029      	movs	r1, r5
 800874c:	220a      	movs	r2, #10
 800874e:	0038      	movs	r0, r7
 8008750:	f000 fd7e 	bl	8009250 <__multadd>
 8008754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008756:	0005      	movs	r5, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	dc47      	bgt.n	80087ec <_dtoa_r+0x9f0>
 800875c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800875e:	2b02      	cmp	r3, #2
 8008760:	dc0d      	bgt.n	800877e <_dtoa_r+0x982>
 8008762:	e043      	b.n	80087ec <_dtoa_r+0x9f0>
 8008764:	2a04      	cmp	r2, #4
 8008766:	d0c6      	beq.n	80086f6 <_dtoa_r+0x8fa>
 8008768:	0013      	movs	r3, r2
 800876a:	331c      	adds	r3, #28
 800876c:	e7bc      	b.n	80086e8 <_dtoa_r+0x8ec>
 800876e:	9b07      	ldr	r3, [sp, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	dc35      	bgt.n	80087e0 <_dtoa_r+0x9e4>
 8008774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008776:	2b02      	cmp	r3, #2
 8008778:	dd32      	ble.n	80087e0 <_dtoa_r+0x9e4>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	930c      	str	r3, [sp, #48]	; 0x30
 800877e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10c      	bne.n	800879e <_dtoa_r+0x9a2>
 8008784:	0031      	movs	r1, r6
 8008786:	2205      	movs	r2, #5
 8008788:	0038      	movs	r0, r7
 800878a:	f000 fd61 	bl	8009250 <__multadd>
 800878e:	0006      	movs	r6, r0
 8008790:	0001      	movs	r1, r0
 8008792:	9805      	ldr	r0, [sp, #20]
 8008794:	f000 ffc4 	bl	8009720 <__mcmp>
 8008798:	2800      	cmp	r0, #0
 800879a:	dd00      	ble.n	800879e <_dtoa_r+0x9a2>
 800879c:	e5a5      	b.n	80082ea <_dtoa_r+0x4ee>
 800879e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087a0:	43db      	mvns	r3, r3
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	9b06      	ldr	r3, [sp, #24]
 80087a6:	9308      	str	r3, [sp, #32]
 80087a8:	2400      	movs	r4, #0
 80087aa:	0031      	movs	r1, r6
 80087ac:	0038      	movs	r0, r7
 80087ae:	f000 fd2b 	bl	8009208 <_Bfree>
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	d100      	bne.n	80087b8 <_dtoa_r+0x9bc>
 80087b6:	e6b7      	b.n	8008528 <_dtoa_r+0x72c>
 80087b8:	2c00      	cmp	r4, #0
 80087ba:	d005      	beq.n	80087c8 <_dtoa_r+0x9cc>
 80087bc:	42ac      	cmp	r4, r5
 80087be:	d003      	beq.n	80087c8 <_dtoa_r+0x9cc>
 80087c0:	0021      	movs	r1, r4
 80087c2:	0038      	movs	r0, r7
 80087c4:	f000 fd20 	bl	8009208 <_Bfree>
 80087c8:	0029      	movs	r1, r5
 80087ca:	0038      	movs	r0, r7
 80087cc:	f000 fd1c 	bl	8009208 <_Bfree>
 80087d0:	e6aa      	b.n	8008528 <_dtoa_r+0x72c>
 80087d2:	2600      	movs	r6, #0
 80087d4:	0035      	movs	r5, r6
 80087d6:	e7e2      	b.n	800879e <_dtoa_r+0x9a2>
 80087d8:	9602      	str	r6, [sp, #8]
 80087da:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80087dc:	0035      	movs	r5, r6
 80087de:	e584      	b.n	80082ea <_dtoa_r+0x4ee>
 80087e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d100      	bne.n	80087e8 <_dtoa_r+0x9ec>
 80087e6:	e0ce      	b.n	8008986 <_dtoa_r+0xb8a>
 80087e8:	9b07      	ldr	r3, [sp, #28]
 80087ea:	930c      	str	r3, [sp, #48]	; 0x30
 80087ec:	2c00      	cmp	r4, #0
 80087ee:	dd05      	ble.n	80087fc <_dtoa_r+0xa00>
 80087f0:	0029      	movs	r1, r5
 80087f2:	0022      	movs	r2, r4
 80087f4:	0038      	movs	r0, r7
 80087f6:	f000 ff25 	bl	8009644 <__lshift>
 80087fa:	0005      	movs	r5, r0
 80087fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087fe:	0028      	movs	r0, r5
 8008800:	2b00      	cmp	r3, #0
 8008802:	d022      	beq.n	800884a <_dtoa_r+0xa4e>
 8008804:	0038      	movs	r0, r7
 8008806:	6869      	ldr	r1, [r5, #4]
 8008808:	f000 fcba 	bl	8009180 <_Balloc>
 800880c:	1e04      	subs	r4, r0, #0
 800880e:	d10f      	bne.n	8008830 <_dtoa_r+0xa34>
 8008810:	0002      	movs	r2, r0
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <_dtoa_r+0xa2c>)
 8008814:	4905      	ldr	r1, [pc, #20]	; (800882c <_dtoa_r+0xa30>)
 8008816:	f7ff fb06 	bl	8007e26 <_dtoa_r+0x2a>
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	40240000 	.word	0x40240000
 8008820:	00000433 	.word	0x00000433
 8008824:	7ff00000 	.word	0x7ff00000
 8008828:	0800cef8 	.word	0x0800cef8
 800882c:	000002ea 	.word	0x000002ea
 8008830:	0029      	movs	r1, r5
 8008832:	692b      	ldr	r3, [r5, #16]
 8008834:	310c      	adds	r1, #12
 8008836:	1c9a      	adds	r2, r3, #2
 8008838:	0092      	lsls	r2, r2, #2
 800883a:	300c      	adds	r0, #12
 800883c:	f000 fc97 	bl	800916e <memcpy>
 8008840:	2201      	movs	r2, #1
 8008842:	0021      	movs	r1, r4
 8008844:	0038      	movs	r0, r7
 8008846:	f000 fefd 	bl	8009644 <__lshift>
 800884a:	9b06      	ldr	r3, [sp, #24]
 800884c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800884e:	930a      	str	r3, [sp, #40]	; 0x28
 8008850:	3b01      	subs	r3, #1
 8008852:	189b      	adds	r3, r3, r2
 8008854:	2201      	movs	r2, #1
 8008856:	002c      	movs	r4, r5
 8008858:	0005      	movs	r5, r0
 800885a:	9314      	str	r3, [sp, #80]	; 0x50
 800885c:	9b08      	ldr	r3, [sp, #32]
 800885e:	4013      	ands	r3, r2
 8008860:	930f      	str	r3, [sp, #60]	; 0x3c
 8008862:	0031      	movs	r1, r6
 8008864:	9805      	ldr	r0, [sp, #20]
 8008866:	f7ff fa3d 	bl	8007ce4 <quorem>
 800886a:	0003      	movs	r3, r0
 800886c:	0021      	movs	r1, r4
 800886e:	3330      	adds	r3, #48	; 0x30
 8008870:	900d      	str	r0, [sp, #52]	; 0x34
 8008872:	9805      	ldr	r0, [sp, #20]
 8008874:	9307      	str	r3, [sp, #28]
 8008876:	f000 ff53 	bl	8009720 <__mcmp>
 800887a:	002a      	movs	r2, r5
 800887c:	900e      	str	r0, [sp, #56]	; 0x38
 800887e:	0031      	movs	r1, r6
 8008880:	0038      	movs	r0, r7
 8008882:	f000 ff69 	bl	8009758 <__mdiff>
 8008886:	68c3      	ldr	r3, [r0, #12]
 8008888:	9008      	str	r0, [sp, #32]
 800888a:	9310      	str	r3, [sp, #64]	; 0x40
 800888c:	2301      	movs	r3, #1
 800888e:	930c      	str	r3, [sp, #48]	; 0x30
 8008890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <_dtoa_r+0xaa4>
 8008896:	0001      	movs	r1, r0
 8008898:	9805      	ldr	r0, [sp, #20]
 800889a:	f000 ff41 	bl	8009720 <__mcmp>
 800889e:	900c      	str	r0, [sp, #48]	; 0x30
 80088a0:	0038      	movs	r0, r7
 80088a2:	9908      	ldr	r1, [sp, #32]
 80088a4:	f000 fcb0 	bl	8009208 <_Bfree>
 80088a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ac:	3301      	adds	r3, #1
 80088ae:	9308      	str	r3, [sp, #32]
 80088b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088b2:	4313      	orrs	r3, r2
 80088b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088b6:	4313      	orrs	r3, r2
 80088b8:	d10c      	bne.n	80088d4 <_dtoa_r+0xad8>
 80088ba:	9b07      	ldr	r3, [sp, #28]
 80088bc:	2b39      	cmp	r3, #57	; 0x39
 80088be:	d026      	beq.n	800890e <_dtoa_r+0xb12>
 80088c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dd02      	ble.n	80088cc <_dtoa_r+0xad0>
 80088c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c8:	3331      	adds	r3, #49	; 0x31
 80088ca:	9307      	str	r3, [sp, #28]
 80088cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	e76a      	b.n	80087aa <_dtoa_r+0x9ae>
 80088d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	db04      	blt.n	80088e4 <_dtoa_r+0xae8>
 80088da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088dc:	4313      	orrs	r3, r2
 80088de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088e0:	4313      	orrs	r3, r2
 80088e2:	d11f      	bne.n	8008924 <_dtoa_r+0xb28>
 80088e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	ddf0      	ble.n	80088cc <_dtoa_r+0xad0>
 80088ea:	9905      	ldr	r1, [sp, #20]
 80088ec:	2201      	movs	r2, #1
 80088ee:	0038      	movs	r0, r7
 80088f0:	f000 fea8 	bl	8009644 <__lshift>
 80088f4:	0031      	movs	r1, r6
 80088f6:	9005      	str	r0, [sp, #20]
 80088f8:	f000 ff12 	bl	8009720 <__mcmp>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc03      	bgt.n	8008908 <_dtoa_r+0xb0c>
 8008900:	d1e4      	bne.n	80088cc <_dtoa_r+0xad0>
 8008902:	9b07      	ldr	r3, [sp, #28]
 8008904:	07db      	lsls	r3, r3, #31
 8008906:	d5e1      	bpl.n	80088cc <_dtoa_r+0xad0>
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	2b39      	cmp	r3, #57	; 0x39
 800890c:	d1db      	bne.n	80088c6 <_dtoa_r+0xaca>
 800890e:	2339      	movs	r3, #57	; 0x39
 8008910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008912:	7013      	strb	r3, [r2, #0]
 8008914:	9b08      	ldr	r3, [sp, #32]
 8008916:	9308      	str	r3, [sp, #32]
 8008918:	3b01      	subs	r3, #1
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	2a39      	cmp	r2, #57	; 0x39
 800891e:	d068      	beq.n	80089f2 <_dtoa_r+0xbf6>
 8008920:	3201      	adds	r2, #1
 8008922:	e7d5      	b.n	80088d0 <_dtoa_r+0xad4>
 8008924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008926:	2b00      	cmp	r3, #0
 8008928:	dd07      	ble.n	800893a <_dtoa_r+0xb3e>
 800892a:	9b07      	ldr	r3, [sp, #28]
 800892c:	2b39      	cmp	r3, #57	; 0x39
 800892e:	d0ee      	beq.n	800890e <_dtoa_r+0xb12>
 8008930:	9b07      	ldr	r3, [sp, #28]
 8008932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008934:	3301      	adds	r3, #1
 8008936:	7013      	strb	r3, [r2, #0]
 8008938:	e737      	b.n	80087aa <_dtoa_r+0x9ae>
 800893a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893c:	9a07      	ldr	r2, [sp, #28]
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008944:	4293      	cmp	r3, r2
 8008946:	d03e      	beq.n	80089c6 <_dtoa_r+0xbca>
 8008948:	2300      	movs	r3, #0
 800894a:	220a      	movs	r2, #10
 800894c:	9905      	ldr	r1, [sp, #20]
 800894e:	0038      	movs	r0, r7
 8008950:	f000 fc7e 	bl	8009250 <__multadd>
 8008954:	2300      	movs	r3, #0
 8008956:	9005      	str	r0, [sp, #20]
 8008958:	220a      	movs	r2, #10
 800895a:	0021      	movs	r1, r4
 800895c:	0038      	movs	r0, r7
 800895e:	42ac      	cmp	r4, r5
 8008960:	d106      	bne.n	8008970 <_dtoa_r+0xb74>
 8008962:	f000 fc75 	bl	8009250 <__multadd>
 8008966:	0004      	movs	r4, r0
 8008968:	0005      	movs	r5, r0
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	930a      	str	r3, [sp, #40]	; 0x28
 800896e:	e778      	b.n	8008862 <_dtoa_r+0xa66>
 8008970:	f000 fc6e 	bl	8009250 <__multadd>
 8008974:	0029      	movs	r1, r5
 8008976:	0004      	movs	r4, r0
 8008978:	2300      	movs	r3, #0
 800897a:	220a      	movs	r2, #10
 800897c:	0038      	movs	r0, r7
 800897e:	f000 fc67 	bl	8009250 <__multadd>
 8008982:	0005      	movs	r5, r0
 8008984:	e7f1      	b.n	800896a <_dtoa_r+0xb6e>
 8008986:	9b07      	ldr	r3, [sp, #28]
 8008988:	930c      	str	r3, [sp, #48]	; 0x30
 800898a:	2400      	movs	r4, #0
 800898c:	0031      	movs	r1, r6
 800898e:	9805      	ldr	r0, [sp, #20]
 8008990:	f7ff f9a8 	bl	8007ce4 <quorem>
 8008994:	9b06      	ldr	r3, [sp, #24]
 8008996:	3030      	adds	r0, #48	; 0x30
 8008998:	5518      	strb	r0, [r3, r4]
 800899a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800899c:	3401      	adds	r4, #1
 800899e:	9007      	str	r0, [sp, #28]
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	dd07      	ble.n	80089b4 <_dtoa_r+0xbb8>
 80089a4:	2300      	movs	r3, #0
 80089a6:	220a      	movs	r2, #10
 80089a8:	0038      	movs	r0, r7
 80089aa:	9905      	ldr	r1, [sp, #20]
 80089ac:	f000 fc50 	bl	8009250 <__multadd>
 80089b0:	9005      	str	r0, [sp, #20]
 80089b2:	e7eb      	b.n	800898c <_dtoa_r+0xb90>
 80089b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089b6:	2001      	movs	r0, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dd00      	ble.n	80089be <_dtoa_r+0xbc2>
 80089bc:	0018      	movs	r0, r3
 80089be:	2400      	movs	r4, #0
 80089c0:	9b06      	ldr	r3, [sp, #24]
 80089c2:	181b      	adds	r3, r3, r0
 80089c4:	9308      	str	r3, [sp, #32]
 80089c6:	9905      	ldr	r1, [sp, #20]
 80089c8:	2201      	movs	r2, #1
 80089ca:	0038      	movs	r0, r7
 80089cc:	f000 fe3a 	bl	8009644 <__lshift>
 80089d0:	0031      	movs	r1, r6
 80089d2:	9005      	str	r0, [sp, #20]
 80089d4:	f000 fea4 	bl	8009720 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dc9b      	bgt.n	8008914 <_dtoa_r+0xb18>
 80089dc:	d102      	bne.n	80089e4 <_dtoa_r+0xbe8>
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	07db      	lsls	r3, r3, #31
 80089e2:	d497      	bmi.n	8008914 <_dtoa_r+0xb18>
 80089e4:	9b08      	ldr	r3, [sp, #32]
 80089e6:	9308      	str	r3, [sp, #32]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	2a30      	cmp	r2, #48	; 0x30
 80089ee:	d0fa      	beq.n	80089e6 <_dtoa_r+0xbea>
 80089f0:	e6db      	b.n	80087aa <_dtoa_r+0x9ae>
 80089f2:	9a06      	ldr	r2, [sp, #24]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d18e      	bne.n	8008916 <_dtoa_r+0xb1a>
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	3301      	adds	r3, #1
 80089fc:	9302      	str	r3, [sp, #8]
 80089fe:	2331      	movs	r3, #49	; 0x31
 8008a00:	e799      	b.n	8008936 <_dtoa_r+0xb3a>
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <_dtoa_r+0xc2c>)
 8008a04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a06:	9306      	str	r3, [sp, #24]
 8008a08:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <_dtoa_r+0xc30>)
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	d001      	beq.n	8008a12 <_dtoa_r+0xc16>
 8008a0e:	f7ff fa3f 	bl	8007e90 <_dtoa_r+0x94>
 8008a12:	f7ff fa3f 	bl	8007e94 <_dtoa_r+0x98>
 8008a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dcb6      	bgt.n	800898a <_dtoa_r+0xb8e>
 8008a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	dd00      	ble.n	8008a24 <_dtoa_r+0xc28>
 8008a22:	e6ac      	b.n	800877e <_dtoa_r+0x982>
 8008a24:	e7b1      	b.n	800898a <_dtoa_r+0xb8e>
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	0800ce79 	.word	0x0800ce79
 8008a2c:	0800ce81 	.word	0x0800ce81

08008a30 <rshift>:
 8008a30:	0002      	movs	r2, r0
 8008a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a34:	6904      	ldr	r4, [r0, #16]
 8008a36:	3214      	adds	r2, #20
 8008a38:	0013      	movs	r3, r2
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	114f      	asrs	r7, r1, #5
 8008a3e:	42bc      	cmp	r4, r7
 8008a40:	dd31      	ble.n	8008aa6 <rshift+0x76>
 8008a42:	00bb      	lsls	r3, r7, #2
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	261f      	movs	r6, #31
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	000b      	movs	r3, r1
 8008a4c:	00a5      	lsls	r5, r4, #2
 8008a4e:	4033      	ands	r3, r6
 8008a50:	1955      	adds	r5, r2, r5
 8008a52:	9302      	str	r3, [sp, #8]
 8008a54:	4231      	tst	r1, r6
 8008a56:	d10c      	bne.n	8008a72 <rshift+0x42>
 8008a58:	0016      	movs	r6, r2
 8008a5a:	9901      	ldr	r1, [sp, #4]
 8008a5c:	428d      	cmp	r5, r1
 8008a5e:	d838      	bhi.n	8008ad2 <rshift+0xa2>
 8008a60:	9901      	ldr	r1, [sp, #4]
 8008a62:	2300      	movs	r3, #0
 8008a64:	3903      	subs	r1, #3
 8008a66:	428d      	cmp	r5, r1
 8008a68:	d301      	bcc.n	8008a6e <rshift+0x3e>
 8008a6a:	1be3      	subs	r3, r4, r7
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	18d3      	adds	r3, r2, r3
 8008a70:	e019      	b.n	8008aa6 <rshift+0x76>
 8008a72:	2120      	movs	r1, #32
 8008a74:	9b02      	ldr	r3, [sp, #8]
 8008a76:	9e01      	ldr	r6, [sp, #4]
 8008a78:	1acb      	subs	r3, r1, r3
 8008a7a:	9303      	str	r3, [sp, #12]
 8008a7c:	ce02      	ldmia	r6!, {r1}
 8008a7e:	9b02      	ldr	r3, [sp, #8]
 8008a80:	4694      	mov	ip, r2
 8008a82:	40d9      	lsrs	r1, r3
 8008a84:	9100      	str	r1, [sp, #0]
 8008a86:	42b5      	cmp	r5, r6
 8008a88:	d816      	bhi.n	8008ab8 <rshift+0x88>
 8008a8a:	9e01      	ldr	r6, [sp, #4]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	3601      	adds	r6, #1
 8008a90:	42b5      	cmp	r5, r6
 8008a92:	d302      	bcc.n	8008a9a <rshift+0x6a>
 8008a94:	1be3      	subs	r3, r4, r7
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	9900      	ldr	r1, [sp, #0]
 8008a9c:	18d3      	adds	r3, r2, r3
 8008a9e:	6019      	str	r1, [r3, #0]
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d000      	beq.n	8008aa6 <rshift+0x76>
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	1a99      	subs	r1, r3, r2
 8008aa8:	1089      	asrs	r1, r1, #2
 8008aaa:	6101      	str	r1, [r0, #16]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d101      	bne.n	8008ab4 <rshift+0x84>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6143      	str	r3, [r0, #20]
 8008ab4:	b005      	add	sp, #20
 8008ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab8:	6833      	ldr	r3, [r6, #0]
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	408b      	lsls	r3, r1
 8008abe:	9900      	ldr	r1, [sp, #0]
 8008ac0:	4319      	orrs	r1, r3
 8008ac2:	4663      	mov	r3, ip
 8008ac4:	c302      	stmia	r3!, {r1}
 8008ac6:	469c      	mov	ip, r3
 8008ac8:	ce02      	ldmia	r6!, {r1}
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	40d9      	lsrs	r1, r3
 8008ace:	9100      	str	r1, [sp, #0]
 8008ad0:	e7d9      	b.n	8008a86 <rshift+0x56>
 8008ad2:	c908      	ldmia	r1!, {r3}
 8008ad4:	c608      	stmia	r6!, {r3}
 8008ad6:	e7c1      	b.n	8008a5c <rshift+0x2c>

08008ad8 <__hexdig_fun>:
 8008ad8:	0002      	movs	r2, r0
 8008ada:	3a30      	subs	r2, #48	; 0x30
 8008adc:	0003      	movs	r3, r0
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d802      	bhi.n	8008ae8 <__hexdig_fun+0x10>
 8008ae2:	3b20      	subs	r3, #32
 8008ae4:	b2d8      	uxtb	r0, r3
 8008ae6:	4770      	bx	lr
 8008ae8:	0002      	movs	r2, r0
 8008aea:	3a61      	subs	r2, #97	; 0x61
 8008aec:	2a05      	cmp	r2, #5
 8008aee:	d801      	bhi.n	8008af4 <__hexdig_fun+0x1c>
 8008af0:	3b47      	subs	r3, #71	; 0x47
 8008af2:	e7f7      	b.n	8008ae4 <__hexdig_fun+0xc>
 8008af4:	001a      	movs	r2, r3
 8008af6:	3a41      	subs	r2, #65	; 0x41
 8008af8:	2000      	movs	r0, #0
 8008afa:	2a05      	cmp	r2, #5
 8008afc:	d8f3      	bhi.n	8008ae6 <__hexdig_fun+0xe>
 8008afe:	3b27      	subs	r3, #39	; 0x27
 8008b00:	e7f0      	b.n	8008ae4 <__hexdig_fun+0xc>
	...

08008b04 <__gethex>:
 8008b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b06:	b08d      	sub	sp, #52	; 0x34
 8008b08:	930a      	str	r3, [sp, #40]	; 0x28
 8008b0a:	4bbf      	ldr	r3, [pc, #764]	; (8008e08 <__gethex+0x304>)
 8008b0c:	9005      	str	r0, [sp, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	9109      	str	r1, [sp, #36]	; 0x24
 8008b12:	0018      	movs	r0, r3
 8008b14:	9202      	str	r2, [sp, #8]
 8008b16:	9307      	str	r3, [sp, #28]
 8008b18:	f7f7 faf6 	bl	8000108 <strlen>
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	9b07      	ldr	r3, [sp, #28]
 8008b20:	4252      	negs	r2, r2
 8008b22:	181b      	adds	r3, r3, r0
 8008b24:	3b01      	subs	r3, #1
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	9003      	str	r0, [sp, #12]
 8008b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	1c8b      	adds	r3, r1, #2
 8008b32:	1a52      	subs	r2, r2, r1
 8008b34:	18d1      	adds	r1, r2, r3
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	9108      	str	r1, [sp, #32]
 8008b3a:	9901      	ldr	r1, [sp, #4]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	7808      	ldrb	r0, [r1, #0]
 8008b40:	2830      	cmp	r0, #48	; 0x30
 8008b42:	d0f7      	beq.n	8008b34 <__gethex+0x30>
 8008b44:	f7ff ffc8 	bl	8008ad8 <__hexdig_fun>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	001c      	movs	r4, r3
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	4298      	cmp	r0, r3
 8008b50:	d11f      	bne.n	8008b92 <__gethex+0x8e>
 8008b52:	9a03      	ldr	r2, [sp, #12]
 8008b54:	9907      	ldr	r1, [sp, #28]
 8008b56:	9801      	ldr	r0, [sp, #4]
 8008b58:	f001 fa64 	bl	800a024 <strncmp>
 8008b5c:	0007      	movs	r7, r0
 8008b5e:	42a0      	cmp	r0, r4
 8008b60:	d000      	beq.n	8008b64 <__gethex+0x60>
 8008b62:	e06b      	b.n	8008c3c <__gethex+0x138>
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	9a03      	ldr	r2, [sp, #12]
 8008b68:	5c98      	ldrb	r0, [r3, r2]
 8008b6a:	189d      	adds	r5, r3, r2
 8008b6c:	f7ff ffb4 	bl	8008ad8 <__hexdig_fun>
 8008b70:	2301      	movs	r3, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d030      	beq.n	8008bda <__gethex+0xd6>
 8008b78:	9501      	str	r5, [sp, #4]
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	7818      	ldrb	r0, [r3, #0]
 8008b7e:	2830      	cmp	r0, #48	; 0x30
 8008b80:	d009      	beq.n	8008b96 <__gethex+0x92>
 8008b82:	f7ff ffa9 	bl	8008ad8 <__hexdig_fun>
 8008b86:	4242      	negs	r2, r0
 8008b88:	4142      	adcs	r2, r0
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	002c      	movs	r4, r5
 8008b8e:	9204      	str	r2, [sp, #16]
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	9d01      	ldr	r5, [sp, #4]
 8008b94:	e004      	b.n	8008ba0 <__gethex+0x9c>
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	e7ed      	b.n	8008b7a <__gethex+0x76>
 8008b9e:	3501      	adds	r5, #1
 8008ba0:	7828      	ldrb	r0, [r5, #0]
 8008ba2:	f7ff ff99 	bl	8008ad8 <__hexdig_fun>
 8008ba6:	1e07      	subs	r7, r0, #0
 8008ba8:	d1f9      	bne.n	8008b9e <__gethex+0x9a>
 8008baa:	0028      	movs	r0, r5
 8008bac:	9a03      	ldr	r2, [sp, #12]
 8008bae:	9907      	ldr	r1, [sp, #28]
 8008bb0:	f001 fa38 	bl	800a024 <strncmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d10e      	bne.n	8008bd6 <__gethex+0xd2>
 8008bb8:	2c00      	cmp	r4, #0
 8008bba:	d107      	bne.n	8008bcc <__gethex+0xc8>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	18ed      	adds	r5, r5, r3
 8008bc0:	002c      	movs	r4, r5
 8008bc2:	7828      	ldrb	r0, [r5, #0]
 8008bc4:	f7ff ff88 	bl	8008ad8 <__hexdig_fun>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d102      	bne.n	8008bd2 <__gethex+0xce>
 8008bcc:	1b64      	subs	r4, r4, r5
 8008bce:	00a7      	lsls	r7, r4, #2
 8008bd0:	e003      	b.n	8008bda <__gethex+0xd6>
 8008bd2:	3501      	adds	r5, #1
 8008bd4:	e7f5      	b.n	8008bc2 <__gethex+0xbe>
 8008bd6:	2c00      	cmp	r4, #0
 8008bd8:	d1f8      	bne.n	8008bcc <__gethex+0xc8>
 8008bda:	2220      	movs	r2, #32
 8008bdc:	782b      	ldrb	r3, [r5, #0]
 8008bde:	002e      	movs	r6, r5
 8008be0:	4393      	bics	r3, r2
 8008be2:	2b50      	cmp	r3, #80	; 0x50
 8008be4:	d11d      	bne.n	8008c22 <__gethex+0x11e>
 8008be6:	786b      	ldrb	r3, [r5, #1]
 8008be8:	2b2b      	cmp	r3, #43	; 0x2b
 8008bea:	d02c      	beq.n	8008c46 <__gethex+0x142>
 8008bec:	2b2d      	cmp	r3, #45	; 0x2d
 8008bee:	d02e      	beq.n	8008c4e <__gethex+0x14a>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	1c6e      	adds	r6, r5, #1
 8008bf4:	9306      	str	r3, [sp, #24]
 8008bf6:	7830      	ldrb	r0, [r6, #0]
 8008bf8:	f7ff ff6e 	bl	8008ad8 <__hexdig_fun>
 8008bfc:	1e43      	subs	r3, r0, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b18      	cmp	r3, #24
 8008c02:	d82b      	bhi.n	8008c5c <__gethex+0x158>
 8008c04:	3810      	subs	r0, #16
 8008c06:	0004      	movs	r4, r0
 8008c08:	7870      	ldrb	r0, [r6, #1]
 8008c0a:	f7ff ff65 	bl	8008ad8 <__hexdig_fun>
 8008c0e:	1e43      	subs	r3, r0, #1
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	3601      	adds	r6, #1
 8008c14:	2b18      	cmp	r3, #24
 8008c16:	d91c      	bls.n	8008c52 <__gethex+0x14e>
 8008c18:	9b06      	ldr	r3, [sp, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d000      	beq.n	8008c20 <__gethex+0x11c>
 8008c1e:	4264      	negs	r4, r4
 8008c20:	193f      	adds	r7, r7, r4
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	601e      	str	r6, [r3, #0]
 8008c26:	9b04      	ldr	r3, [sp, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d019      	beq.n	8008c60 <__gethex+0x15c>
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	42b3      	cmp	r3, r6
 8008c32:	d100      	bne.n	8008c36 <__gethex+0x132>
 8008c34:	3606      	adds	r6, #6
 8008c36:	0030      	movs	r0, r6
 8008c38:	b00d      	add	sp, #52	; 0x34
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	2700      	movs	r7, #0
 8008c40:	9d01      	ldr	r5, [sp, #4]
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	e7c9      	b.n	8008bda <__gethex+0xd6>
 8008c46:	2300      	movs	r3, #0
 8008c48:	9306      	str	r3, [sp, #24]
 8008c4a:	1cae      	adds	r6, r5, #2
 8008c4c:	e7d3      	b.n	8008bf6 <__gethex+0xf2>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e7fa      	b.n	8008c48 <__gethex+0x144>
 8008c52:	230a      	movs	r3, #10
 8008c54:	435c      	muls	r4, r3
 8008c56:	1824      	adds	r4, r4, r0
 8008c58:	3c10      	subs	r4, #16
 8008c5a:	e7d5      	b.n	8008c08 <__gethex+0x104>
 8008c5c:	002e      	movs	r6, r5
 8008c5e:	e7e0      	b.n	8008c22 <__gethex+0x11e>
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	9904      	ldr	r1, [sp, #16]
 8008c64:	1aeb      	subs	r3, r5, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b07      	cmp	r3, #7
 8008c6a:	dc0a      	bgt.n	8008c82 <__gethex+0x17e>
 8008c6c:	9805      	ldr	r0, [sp, #20]
 8008c6e:	f000 fa87 	bl	8009180 <_Balloc>
 8008c72:	1e04      	subs	r4, r0, #0
 8008c74:	d108      	bne.n	8008c88 <__gethex+0x184>
 8008c76:	0002      	movs	r2, r0
 8008c78:	21de      	movs	r1, #222	; 0xde
 8008c7a:	4b64      	ldr	r3, [pc, #400]	; (8008e0c <__gethex+0x308>)
 8008c7c:	4864      	ldr	r0, [pc, #400]	; (8008e10 <__gethex+0x30c>)
 8008c7e:	f001 f9f1 	bl	800a064 <__assert_func>
 8008c82:	3101      	adds	r1, #1
 8008c84:	105b      	asrs	r3, r3, #1
 8008c86:	e7ef      	b.n	8008c68 <__gethex+0x164>
 8008c88:	0003      	movs	r3, r0
 8008c8a:	3314      	adds	r3, #20
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	2300      	movs	r3, #0
 8008c92:	001e      	movs	r6, r3
 8008c94:	9306      	str	r3, [sp, #24]
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	d340      	bcc.n	8008d1e <__gethex+0x21a>
 8008c9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	c540      	stmia	r5!, {r6}
 8008ca2:	1aed      	subs	r5, r5, r3
 8008ca4:	10ad      	asrs	r5, r5, #2
 8008ca6:	0030      	movs	r0, r6
 8008ca8:	6125      	str	r5, [r4, #16]
 8008caa:	f000 fb61 	bl	8009370 <__hi0bits>
 8008cae:	9b02      	ldr	r3, [sp, #8]
 8008cb0:	016d      	lsls	r5, r5, #5
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	1a2e      	subs	r6, r5, r0
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	429e      	cmp	r6, r3
 8008cba:	dd5a      	ble.n	8008d72 <__gethex+0x26e>
 8008cbc:	1af6      	subs	r6, r6, r3
 8008cbe:	0031      	movs	r1, r6
 8008cc0:	0020      	movs	r0, r4
 8008cc2:	f000 ff03 	bl	8009acc <__any_on>
 8008cc6:	1e05      	subs	r5, r0, #0
 8008cc8:	d016      	beq.n	8008cf8 <__gethex+0x1f4>
 8008cca:	2501      	movs	r5, #1
 8008ccc:	211f      	movs	r1, #31
 8008cce:	0028      	movs	r0, r5
 8008cd0:	1e73      	subs	r3, r6, #1
 8008cd2:	4019      	ands	r1, r3
 8008cd4:	4088      	lsls	r0, r1
 8008cd6:	0001      	movs	r1, r0
 8008cd8:	115a      	asrs	r2, r3, #5
 8008cda:	9804      	ldr	r0, [sp, #16]
 8008cdc:	0092      	lsls	r2, r2, #2
 8008cde:	5812      	ldr	r2, [r2, r0]
 8008ce0:	420a      	tst	r2, r1
 8008ce2:	d009      	beq.n	8008cf8 <__gethex+0x1f4>
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dd06      	ble.n	8008cf6 <__gethex+0x1f2>
 8008ce8:	0020      	movs	r0, r4
 8008cea:	1eb1      	subs	r1, r6, #2
 8008cec:	f000 feee 	bl	8009acc <__any_on>
 8008cf0:	3502      	adds	r5, #2
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d100      	bne.n	8008cf8 <__gethex+0x1f4>
 8008cf6:	2502      	movs	r5, #2
 8008cf8:	0031      	movs	r1, r6
 8008cfa:	0020      	movs	r0, r4
 8008cfc:	f7ff fe98 	bl	8008a30 <rshift>
 8008d00:	19bf      	adds	r7, r7, r6
 8008d02:	9b02      	ldr	r3, [sp, #8]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	42bb      	cmp	r3, r7
 8008d0a:	da42      	bge.n	8008d92 <__gethex+0x28e>
 8008d0c:	0021      	movs	r1, r4
 8008d0e:	9805      	ldr	r0, [sp, #20]
 8008d10:	f000 fa7a 	bl	8009208 <_Bfree>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d18:	26a3      	movs	r6, #163	; 0xa3
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	e78b      	b.n	8008c36 <__gethex+0x132>
 8008d1e:	1e6b      	subs	r3, r5, #1
 8008d20:	9308      	str	r3, [sp, #32]
 8008d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d014      	beq.n	8008d54 <__gethex+0x250>
 8008d2a:	9b06      	ldr	r3, [sp, #24]
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d104      	bne.n	8008d3a <__gethex+0x236>
 8008d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d32:	c340      	stmia	r3!, {r6}
 8008d34:	2600      	movs	r6, #0
 8008d36:	9309      	str	r3, [sp, #36]	; 0x24
 8008d38:	9606      	str	r6, [sp, #24]
 8008d3a:	9b08      	ldr	r3, [sp, #32]
 8008d3c:	7818      	ldrb	r0, [r3, #0]
 8008d3e:	f7ff fecb 	bl	8008ad8 <__hexdig_fun>
 8008d42:	230f      	movs	r3, #15
 8008d44:	4018      	ands	r0, r3
 8008d46:	9b06      	ldr	r3, [sp, #24]
 8008d48:	9d08      	ldr	r5, [sp, #32]
 8008d4a:	4098      	lsls	r0, r3
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4306      	orrs	r6, r0
 8008d50:	9306      	str	r3, [sp, #24]
 8008d52:	e7a0      	b.n	8008c96 <__gethex+0x192>
 8008d54:	2301      	movs	r3, #1
 8008d56:	9a03      	ldr	r2, [sp, #12]
 8008d58:	1a9d      	subs	r5, r3, r2
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	195d      	adds	r5, r3, r5
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	429d      	cmp	r5, r3
 8008d62:	d3e2      	bcc.n	8008d2a <__gethex+0x226>
 8008d64:	0028      	movs	r0, r5
 8008d66:	9907      	ldr	r1, [sp, #28]
 8008d68:	f001 f95c 	bl	800a024 <strncmp>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d1dc      	bne.n	8008d2a <__gethex+0x226>
 8008d70:	e791      	b.n	8008c96 <__gethex+0x192>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	2500      	movs	r5, #0
 8008d76:	429e      	cmp	r6, r3
 8008d78:	dac3      	bge.n	8008d02 <__gethex+0x1fe>
 8008d7a:	1b9e      	subs	r6, r3, r6
 8008d7c:	0021      	movs	r1, r4
 8008d7e:	0032      	movs	r2, r6
 8008d80:	9805      	ldr	r0, [sp, #20]
 8008d82:	f000 fc5f 	bl	8009644 <__lshift>
 8008d86:	0003      	movs	r3, r0
 8008d88:	3314      	adds	r3, #20
 8008d8a:	0004      	movs	r4, r0
 8008d8c:	1bbf      	subs	r7, r7, r6
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	e7b7      	b.n	8008d02 <__gethex+0x1fe>
 8008d92:	9b02      	ldr	r3, [sp, #8]
 8008d94:	685e      	ldr	r6, [r3, #4]
 8008d96:	42be      	cmp	r6, r7
 8008d98:	dd71      	ble.n	8008e7e <__gethex+0x37a>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	1bf6      	subs	r6, r6, r7
 8008d9e:	42b3      	cmp	r3, r6
 8008da0:	dc38      	bgt.n	8008e14 <__gethex+0x310>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d026      	beq.n	8008df8 <__gethex+0x2f4>
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d028      	beq.n	8008e00 <__gethex+0x2fc>
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d119      	bne.n	8008de6 <__gethex+0x2e2>
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	42b3      	cmp	r3, r6
 8008db6:	d116      	bne.n	8008de6 <__gethex+0x2e2>
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d10d      	bne.n	8008dd8 <__gethex+0x2d4>
 8008dbc:	9b02      	ldr	r3, [sp, #8]
 8008dbe:	2662      	movs	r6, #98	; 0x62
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	9a01      	ldr	r2, [sp, #4]
 8008dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	2301      	movs	r3, #1
 8008dcc:	9a04      	ldr	r2, [sp, #16]
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dd4:	601c      	str	r4, [r3, #0]
 8008dd6:	e72e      	b.n	8008c36 <__gethex+0x132>
 8008dd8:	9901      	ldr	r1, [sp, #4]
 8008dda:	0020      	movs	r0, r4
 8008ddc:	3901      	subs	r1, #1
 8008dde:	f000 fe75 	bl	8009acc <__any_on>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d1ea      	bne.n	8008dbc <__gethex+0x2b8>
 8008de6:	0021      	movs	r1, r4
 8008de8:	9805      	ldr	r0, [sp, #20]
 8008dea:	f000 fa0d 	bl	8009208 <_Bfree>
 8008dee:	2300      	movs	r3, #0
 8008df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008df2:	2650      	movs	r6, #80	; 0x50
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	e71e      	b.n	8008c36 <__gethex+0x132>
 8008df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1f3      	bne.n	8008de6 <__gethex+0x2e2>
 8008dfe:	e7dd      	b.n	8008dbc <__gethex+0x2b8>
 8008e00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1da      	bne.n	8008dbc <__gethex+0x2b8>
 8008e06:	e7ee      	b.n	8008de6 <__gethex+0x2e2>
 8008e08:	0800cf70 	.word	0x0800cf70
 8008e0c:	0800cef8 	.word	0x0800cef8
 8008e10:	0800cf09 	.word	0x0800cf09
 8008e14:	1e77      	subs	r7, r6, #1
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	d12f      	bne.n	8008e7a <__gethex+0x376>
 8008e1a:	2f00      	cmp	r7, #0
 8008e1c:	d004      	beq.n	8008e28 <__gethex+0x324>
 8008e1e:	0039      	movs	r1, r7
 8008e20:	0020      	movs	r0, r4
 8008e22:	f000 fe53 	bl	8009acc <__any_on>
 8008e26:	0005      	movs	r5, r0
 8008e28:	231f      	movs	r3, #31
 8008e2a:	117a      	asrs	r2, r7, #5
 8008e2c:	401f      	ands	r7, r3
 8008e2e:	3b1e      	subs	r3, #30
 8008e30:	40bb      	lsls	r3, r7
 8008e32:	9904      	ldr	r1, [sp, #16]
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	5852      	ldr	r2, [r2, r1]
 8008e38:	421a      	tst	r2, r3
 8008e3a:	d001      	beq.n	8008e40 <__gethex+0x33c>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	431d      	orrs	r5, r3
 8008e40:	9b01      	ldr	r3, [sp, #4]
 8008e42:	0031      	movs	r1, r6
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	2602      	movs	r6, #2
 8008e48:	0020      	movs	r0, r4
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	f7ff fdf0 	bl	8008a30 <rshift>
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	685f      	ldr	r7, [r3, #4]
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	d041      	beq.n	8008edc <__gethex+0x3d8>
 8008e58:	9b02      	ldr	r3, [sp, #8]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d010      	beq.n	8008e82 <__gethex+0x37e>
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d012      	beq.n	8008e8a <__gethex+0x386>
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d106      	bne.n	8008e76 <__gethex+0x372>
 8008e68:	07aa      	lsls	r2, r5, #30
 8008e6a:	d504      	bpl.n	8008e76 <__gethex+0x372>
 8008e6c:	9a04      	ldr	r2, [sp, #16]
 8008e6e:	6810      	ldr	r0, [r2, #0]
 8008e70:	4305      	orrs	r5, r0
 8008e72:	421d      	tst	r5, r3
 8008e74:	d10c      	bne.n	8008e90 <__gethex+0x38c>
 8008e76:	2310      	movs	r3, #16
 8008e78:	e02f      	b.n	8008eda <__gethex+0x3d6>
 8008e7a:	2501      	movs	r5, #1
 8008e7c:	e7d4      	b.n	8008e28 <__gethex+0x324>
 8008e7e:	2601      	movs	r6, #1
 8008e80:	e7e8      	b.n	8008e54 <__gethex+0x350>
 8008e82:	2301      	movs	r3, #1
 8008e84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f2      	beq.n	8008e76 <__gethex+0x372>
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	2000      	movs	r0, #0
 8008e94:	9303      	str	r3, [sp, #12]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	0023      	movs	r3, r4
 8008e9c:	9a04      	ldr	r2, [sp, #16]
 8008e9e:	3314      	adds	r3, #20
 8008ea0:	1899      	adds	r1, r3, r2
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	1c55      	adds	r5, r2, #1
 8008ea6:	d01e      	beq.n	8008ee6 <__gethex+0x3e2>
 8008ea8:	3201      	adds	r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	0023      	movs	r3, r4
 8008eae:	3314      	adds	r3, #20
 8008eb0:	2e02      	cmp	r6, #2
 8008eb2:	d140      	bne.n	8008f36 <__gethex+0x432>
 8008eb4:	9a02      	ldr	r2, [sp, #8]
 8008eb6:	9901      	ldr	r1, [sp, #4]
 8008eb8:	6812      	ldr	r2, [r2, #0]
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	428a      	cmp	r2, r1
 8008ebe:	d10b      	bne.n	8008ed8 <__gethex+0x3d4>
 8008ec0:	114a      	asrs	r2, r1, #5
 8008ec2:	211f      	movs	r1, #31
 8008ec4:	9801      	ldr	r0, [sp, #4]
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	4001      	ands	r1, r0
 8008eca:	2001      	movs	r0, #1
 8008ecc:	0005      	movs	r5, r0
 8008ece:	408d      	lsls	r5, r1
 8008ed0:	58d3      	ldr	r3, [r2, r3]
 8008ed2:	422b      	tst	r3, r5
 8008ed4:	d000      	beq.n	8008ed8 <__gethex+0x3d4>
 8008ed6:	2601      	movs	r6, #1
 8008ed8:	2320      	movs	r3, #32
 8008eda:	431e      	orrs	r6, r3
 8008edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ede:	601c      	str	r4, [r3, #0]
 8008ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee2:	601f      	str	r7, [r3, #0]
 8008ee4:	e6a7      	b.n	8008c36 <__gethex+0x132>
 8008ee6:	c301      	stmia	r3!, {r0}
 8008ee8:	4299      	cmp	r1, r3
 8008eea:	d8da      	bhi.n	8008ea2 <__gethex+0x39e>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	68a2      	ldr	r2, [r4, #8]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	db17      	blt.n	8008f24 <__gethex+0x420>
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	9805      	ldr	r0, [sp, #20]
 8008ef8:	1c59      	adds	r1, r3, #1
 8008efa:	f000 f941 	bl	8009180 <_Balloc>
 8008efe:	1e05      	subs	r5, r0, #0
 8008f00:	d103      	bne.n	8008f0a <__gethex+0x406>
 8008f02:	0002      	movs	r2, r0
 8008f04:	2184      	movs	r1, #132	; 0x84
 8008f06:	4b1c      	ldr	r3, [pc, #112]	; (8008f78 <__gethex+0x474>)
 8008f08:	e6b8      	b.n	8008c7c <__gethex+0x178>
 8008f0a:	0021      	movs	r1, r4
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	310c      	adds	r1, #12
 8008f10:	1c9a      	adds	r2, r3, #2
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	300c      	adds	r0, #12
 8008f16:	f000 f92a 	bl	800916e <memcpy>
 8008f1a:	0021      	movs	r1, r4
 8008f1c:	9805      	ldr	r0, [sp, #20]
 8008f1e:	f000 f973 	bl	8009208 <_Bfree>
 8008f22:	002c      	movs	r4, r5
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	6122      	str	r2, [r4, #16]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	18e3      	adds	r3, r4, r3
 8008f32:	605a      	str	r2, [r3, #4]
 8008f34:	e7ba      	b.n	8008eac <__gethex+0x3a8>
 8008f36:	6922      	ldr	r2, [r4, #16]
 8008f38:	9903      	ldr	r1, [sp, #12]
 8008f3a:	428a      	cmp	r2, r1
 8008f3c:	dd09      	ble.n	8008f52 <__gethex+0x44e>
 8008f3e:	2101      	movs	r1, #1
 8008f40:	0020      	movs	r0, r4
 8008f42:	f7ff fd75 	bl	8008a30 <rshift>
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	3701      	adds	r7, #1
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	42bb      	cmp	r3, r7
 8008f4e:	dac2      	bge.n	8008ed6 <__gethex+0x3d2>
 8008f50:	e6dc      	b.n	8008d0c <__gethex+0x208>
 8008f52:	221f      	movs	r2, #31
 8008f54:	9d01      	ldr	r5, [sp, #4]
 8008f56:	9901      	ldr	r1, [sp, #4]
 8008f58:	2601      	movs	r6, #1
 8008f5a:	4015      	ands	r5, r2
 8008f5c:	4211      	tst	r1, r2
 8008f5e:	d0bb      	beq.n	8008ed8 <__gethex+0x3d4>
 8008f60:	9a04      	ldr	r2, [sp, #16]
 8008f62:	189b      	adds	r3, r3, r2
 8008f64:	3b04      	subs	r3, #4
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	f000 fa02 	bl	8009370 <__hi0bits>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	1b5d      	subs	r5, r3, r5
 8008f70:	42a8      	cmp	r0, r5
 8008f72:	dbe4      	blt.n	8008f3e <__gethex+0x43a>
 8008f74:	e7b0      	b.n	8008ed8 <__gethex+0x3d4>
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	0800cef8 	.word	0x0800cef8

08008f7c <L_shift>:
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	2520      	movs	r5, #32
 8008f82:	1a9a      	subs	r2, r3, r2
 8008f84:	0092      	lsls	r2, r2, #2
 8008f86:	1aad      	subs	r5, r5, r2
 8008f88:	6843      	ldr	r3, [r0, #4]
 8008f8a:	6806      	ldr	r6, [r0, #0]
 8008f8c:	001c      	movs	r4, r3
 8008f8e:	40ac      	lsls	r4, r5
 8008f90:	40d3      	lsrs	r3, r2
 8008f92:	4334      	orrs	r4, r6
 8008f94:	6004      	str	r4, [r0, #0]
 8008f96:	6043      	str	r3, [r0, #4]
 8008f98:	3004      	adds	r0, #4
 8008f9a:	4288      	cmp	r0, r1
 8008f9c:	d3f4      	bcc.n	8008f88 <L_shift+0xc>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}

08008fa0 <__match>:
 8008fa0:	b530      	push	{r4, r5, lr}
 8008fa2:	6803      	ldr	r3, [r0, #0]
 8008fa4:	780c      	ldrb	r4, [r1, #0]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	2c00      	cmp	r4, #0
 8008faa:	d102      	bne.n	8008fb2 <__match+0x12>
 8008fac:	6003      	str	r3, [r0, #0]
 8008fae:	2001      	movs	r0, #1
 8008fb0:	bd30      	pop	{r4, r5, pc}
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	0015      	movs	r5, r2
 8008fb6:	3d41      	subs	r5, #65	; 0x41
 8008fb8:	2d19      	cmp	r5, #25
 8008fba:	d800      	bhi.n	8008fbe <__match+0x1e>
 8008fbc:	3220      	adds	r2, #32
 8008fbe:	3101      	adds	r1, #1
 8008fc0:	42a2      	cmp	r2, r4
 8008fc2:	d0ef      	beq.n	8008fa4 <__match+0x4>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	e7f3      	b.n	8008fb0 <__match+0x10>

08008fc8 <__hexnan>:
 8008fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fca:	680b      	ldr	r3, [r1, #0]
 8008fcc:	b08b      	sub	sp, #44	; 0x2c
 8008fce:	9201      	str	r2, [sp, #4]
 8008fd0:	9901      	ldr	r1, [sp, #4]
 8008fd2:	115a      	asrs	r2, r3, #5
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	188a      	adds	r2, r1, r2
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	0019      	movs	r1, r3
 8008fdc:	221f      	movs	r2, #31
 8008fde:	4011      	ands	r1, r2
 8008fe0:	9008      	str	r0, [sp, #32]
 8008fe2:	9106      	str	r1, [sp, #24]
 8008fe4:	4213      	tst	r3, r2
 8008fe6:	d002      	beq.n	8008fee <__hexnan+0x26>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	3304      	adds	r3, #4
 8008fec:	9302      	str	r3, [sp, #8]
 8008fee:	9b02      	ldr	r3, [sp, #8]
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	1f1e      	subs	r6, r3, #4
 8008ff4:	0037      	movs	r7, r6
 8008ff6:	0034      	movs	r4, r6
 8008ff8:	9b08      	ldr	r3, [sp, #32]
 8008ffa:	6035      	str	r5, [r6, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	9507      	str	r5, [sp, #28]
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	9503      	str	r5, [sp, #12]
 8009004:	9b05      	ldr	r3, [sp, #20]
 8009006:	3301      	adds	r3, #1
 8009008:	9309      	str	r3, [sp, #36]	; 0x24
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d028      	beq.n	8009066 <__hexnan+0x9e>
 8009014:	9804      	ldr	r0, [sp, #16]
 8009016:	f7ff fd5f 	bl	8008ad8 <__hexdig_fun>
 800901a:	2800      	cmp	r0, #0
 800901c:	d154      	bne.n	80090c8 <__hexnan+0x100>
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	2b20      	cmp	r3, #32
 8009022:	d819      	bhi.n	8009058 <__hexnan+0x90>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	9a07      	ldr	r2, [sp, #28]
 8009028:	4293      	cmp	r3, r2
 800902a:	dd12      	ble.n	8009052 <__hexnan+0x8a>
 800902c:	42bc      	cmp	r4, r7
 800902e:	d206      	bcs.n	800903e <__hexnan+0x76>
 8009030:	2d07      	cmp	r5, #7
 8009032:	dc04      	bgt.n	800903e <__hexnan+0x76>
 8009034:	002a      	movs	r2, r5
 8009036:	0039      	movs	r1, r7
 8009038:	0020      	movs	r0, r4
 800903a:	f7ff ff9f 	bl	8008f7c <L_shift>
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	2508      	movs	r5, #8
 8009042:	429c      	cmp	r4, r3
 8009044:	d905      	bls.n	8009052 <__hexnan+0x8a>
 8009046:	1f27      	subs	r7, r4, #4
 8009048:	2500      	movs	r5, #0
 800904a:	003c      	movs	r4, r7
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	603d      	str	r5, [r7, #0]
 8009050:	9307      	str	r3, [sp, #28]
 8009052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009054:	9305      	str	r3, [sp, #20]
 8009056:	e7d5      	b.n	8009004 <__hexnan+0x3c>
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	2b29      	cmp	r3, #41	; 0x29
 800905c:	d159      	bne.n	8009112 <__hexnan+0x14a>
 800905e:	9b05      	ldr	r3, [sp, #20]
 8009060:	9a08      	ldr	r2, [sp, #32]
 8009062:	3302      	adds	r3, #2
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d052      	beq.n	8009112 <__hexnan+0x14a>
 800906c:	42bc      	cmp	r4, r7
 800906e:	d206      	bcs.n	800907e <__hexnan+0xb6>
 8009070:	2d07      	cmp	r5, #7
 8009072:	dc04      	bgt.n	800907e <__hexnan+0xb6>
 8009074:	002a      	movs	r2, r5
 8009076:	0039      	movs	r1, r7
 8009078:	0020      	movs	r0, r4
 800907a:	f7ff ff7f 	bl	8008f7c <L_shift>
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	429c      	cmp	r4, r3
 8009082:	d935      	bls.n	80090f0 <__hexnan+0x128>
 8009084:	001a      	movs	r2, r3
 8009086:	0023      	movs	r3, r4
 8009088:	cb02      	ldmia	r3!, {r1}
 800908a:	c202      	stmia	r2!, {r1}
 800908c:	429e      	cmp	r6, r3
 800908e:	d2fb      	bcs.n	8009088 <__hexnan+0xc0>
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	1c61      	adds	r1, r4, #1
 8009094:	1eda      	subs	r2, r3, #3
 8009096:	2304      	movs	r3, #4
 8009098:	4291      	cmp	r1, r2
 800909a:	d805      	bhi.n	80090a8 <__hexnan+0xe0>
 800909c:	9b02      	ldr	r3, [sp, #8]
 800909e:	3b04      	subs	r3, #4
 80090a0:	1b1b      	subs	r3, r3, r4
 80090a2:	089b      	lsrs	r3, r3, #2
 80090a4:	3301      	adds	r3, #1
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	9a01      	ldr	r2, [sp, #4]
 80090aa:	18d3      	adds	r3, r2, r3
 80090ac:	2200      	movs	r2, #0
 80090ae:	c304      	stmia	r3!, {r2}
 80090b0:	429e      	cmp	r6, r3
 80090b2:	d2fc      	bcs.n	80090ae <__hexnan+0xe6>
 80090b4:	6833      	ldr	r3, [r6, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <__hexnan+0xfc>
 80090ba:	9b01      	ldr	r3, [sp, #4]
 80090bc:	429e      	cmp	r6, r3
 80090be:	d126      	bne.n	800910e <__hexnan+0x146>
 80090c0:	2301      	movs	r3, #1
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	2005      	movs	r0, #5
 80090c6:	e025      	b.n	8009114 <__hexnan+0x14c>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	3501      	adds	r5, #1
 80090cc:	3301      	adds	r3, #1
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	2d08      	cmp	r5, #8
 80090d2:	dd06      	ble.n	80090e2 <__hexnan+0x11a>
 80090d4:	9b01      	ldr	r3, [sp, #4]
 80090d6:	429c      	cmp	r4, r3
 80090d8:	d9bb      	bls.n	8009052 <__hexnan+0x8a>
 80090da:	2300      	movs	r3, #0
 80090dc:	2501      	movs	r5, #1
 80090de:	3c04      	subs	r4, #4
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	220f      	movs	r2, #15
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	4010      	ands	r0, r2
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	4318      	orrs	r0, r3
 80090ec:	6020      	str	r0, [r4, #0]
 80090ee:	e7b0      	b.n	8009052 <__hexnan+0x8a>
 80090f0:	9b06      	ldr	r3, [sp, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0de      	beq.n	80090b4 <__hexnan+0xec>
 80090f6:	2120      	movs	r1, #32
 80090f8:	9a06      	ldr	r2, [sp, #24]
 80090fa:	9b02      	ldr	r3, [sp, #8]
 80090fc:	1a89      	subs	r1, r1, r2
 80090fe:	2201      	movs	r2, #1
 8009100:	4252      	negs	r2, r2
 8009102:	40ca      	lsrs	r2, r1
 8009104:	3b04      	subs	r3, #4
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	400a      	ands	r2, r1
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	e7d2      	b.n	80090b4 <__hexnan+0xec>
 800910e:	3e04      	subs	r6, #4
 8009110:	e7d0      	b.n	80090b4 <__hexnan+0xec>
 8009112:	2004      	movs	r0, #4
 8009114:	b00b      	add	sp, #44	; 0x2c
 8009116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009118 <_localeconv_r>:
 8009118:	4800      	ldr	r0, [pc, #0]	; (800911c <_localeconv_r+0x4>)
 800911a:	4770      	bx	lr
 800911c:	200001a8 	.word	0x200001a8

08009120 <malloc>:
 8009120:	b510      	push	{r4, lr}
 8009122:	4b03      	ldr	r3, [pc, #12]	; (8009130 <malloc+0x10>)
 8009124:	0001      	movs	r1, r0
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	f000 fd8c 	bl	8009c44 <_malloc_r>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	20000050 	.word	0x20000050

08009134 <__ascii_mbtowc>:
 8009134:	b082      	sub	sp, #8
 8009136:	2900      	cmp	r1, #0
 8009138:	d100      	bne.n	800913c <__ascii_mbtowc+0x8>
 800913a:	a901      	add	r1, sp, #4
 800913c:	1e10      	subs	r0, r2, #0
 800913e:	d006      	beq.n	800914e <__ascii_mbtowc+0x1a>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d006      	beq.n	8009152 <__ascii_mbtowc+0x1e>
 8009144:	7813      	ldrb	r3, [r2, #0]
 8009146:	600b      	str	r3, [r1, #0]
 8009148:	7810      	ldrb	r0, [r2, #0]
 800914a:	1e43      	subs	r3, r0, #1
 800914c:	4198      	sbcs	r0, r3
 800914e:	b002      	add	sp, #8
 8009150:	4770      	bx	lr
 8009152:	2002      	movs	r0, #2
 8009154:	4240      	negs	r0, r0
 8009156:	e7fa      	b.n	800914e <__ascii_mbtowc+0x1a>

08009158 <memchr>:
 8009158:	b2c9      	uxtb	r1, r1
 800915a:	1882      	adds	r2, r0, r2
 800915c:	4290      	cmp	r0, r2
 800915e:	d101      	bne.n	8009164 <memchr+0xc>
 8009160:	2000      	movs	r0, #0
 8009162:	4770      	bx	lr
 8009164:	7803      	ldrb	r3, [r0, #0]
 8009166:	428b      	cmp	r3, r1
 8009168:	d0fb      	beq.n	8009162 <memchr+0xa>
 800916a:	3001      	adds	r0, #1
 800916c:	e7f6      	b.n	800915c <memchr+0x4>

0800916e <memcpy>:
 800916e:	2300      	movs	r3, #0
 8009170:	b510      	push	{r4, lr}
 8009172:	429a      	cmp	r2, r3
 8009174:	d100      	bne.n	8009178 <memcpy+0xa>
 8009176:	bd10      	pop	{r4, pc}
 8009178:	5ccc      	ldrb	r4, [r1, r3]
 800917a:	54c4      	strb	r4, [r0, r3]
 800917c:	3301      	adds	r3, #1
 800917e:	e7f8      	b.n	8009172 <memcpy+0x4>

08009180 <_Balloc>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009184:	0006      	movs	r6, r0
 8009186:	000c      	movs	r4, r1
 8009188:	2d00      	cmp	r5, #0
 800918a:	d10e      	bne.n	80091aa <_Balloc+0x2a>
 800918c:	2010      	movs	r0, #16
 800918e:	f7ff ffc7 	bl	8009120 <malloc>
 8009192:	1e02      	subs	r2, r0, #0
 8009194:	6270      	str	r0, [r6, #36]	; 0x24
 8009196:	d104      	bne.n	80091a2 <_Balloc+0x22>
 8009198:	2166      	movs	r1, #102	; 0x66
 800919a:	4b19      	ldr	r3, [pc, #100]	; (8009200 <_Balloc+0x80>)
 800919c:	4819      	ldr	r0, [pc, #100]	; (8009204 <_Balloc+0x84>)
 800919e:	f000 ff61 	bl	800a064 <__assert_func>
 80091a2:	6045      	str	r5, [r0, #4]
 80091a4:	6085      	str	r5, [r0, #8]
 80091a6:	6005      	str	r5, [r0, #0]
 80091a8:	60c5      	str	r5, [r0, #12]
 80091aa:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80091ac:	68eb      	ldr	r3, [r5, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d013      	beq.n	80091da <_Balloc+0x5a>
 80091b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091b4:	00a2      	lsls	r2, r4, #2
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	189b      	adds	r3, r3, r2
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	2800      	cmp	r0, #0
 80091be:	d118      	bne.n	80091f2 <_Balloc+0x72>
 80091c0:	2101      	movs	r1, #1
 80091c2:	000d      	movs	r5, r1
 80091c4:	40a5      	lsls	r5, r4
 80091c6:	1d6a      	adds	r2, r5, #5
 80091c8:	0030      	movs	r0, r6
 80091ca:	0092      	lsls	r2, r2, #2
 80091cc:	f000 fca1 	bl	8009b12 <_calloc_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d00c      	beq.n	80091ee <_Balloc+0x6e>
 80091d4:	6044      	str	r4, [r0, #4]
 80091d6:	6085      	str	r5, [r0, #8]
 80091d8:	e00d      	b.n	80091f6 <_Balloc+0x76>
 80091da:	2221      	movs	r2, #33	; 0x21
 80091dc:	2104      	movs	r1, #4
 80091de:	0030      	movs	r0, r6
 80091e0:	f000 fc97 	bl	8009b12 <_calloc_r>
 80091e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091e6:	60e8      	str	r0, [r5, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e1      	bne.n	80091b2 <_Balloc+0x32>
 80091ee:	2000      	movs	r0, #0
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
 80091f2:	6802      	ldr	r2, [r0, #0]
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	6103      	str	r3, [r0, #16]
 80091fa:	60c3      	str	r3, [r0, #12]
 80091fc:	e7f8      	b.n	80091f0 <_Balloc+0x70>
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	0800ce86 	.word	0x0800ce86
 8009204:	0800cf84 	.word	0x0800cf84

08009208 <_Bfree>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800920c:	0005      	movs	r5, r0
 800920e:	000c      	movs	r4, r1
 8009210:	2e00      	cmp	r6, #0
 8009212:	d10e      	bne.n	8009232 <_Bfree+0x2a>
 8009214:	2010      	movs	r0, #16
 8009216:	f7ff ff83 	bl	8009120 <malloc>
 800921a:	1e02      	subs	r2, r0, #0
 800921c:	6268      	str	r0, [r5, #36]	; 0x24
 800921e:	d104      	bne.n	800922a <_Bfree+0x22>
 8009220:	218a      	movs	r1, #138	; 0x8a
 8009222:	4b09      	ldr	r3, [pc, #36]	; (8009248 <_Bfree+0x40>)
 8009224:	4809      	ldr	r0, [pc, #36]	; (800924c <_Bfree+0x44>)
 8009226:	f000 ff1d 	bl	800a064 <__assert_func>
 800922a:	6046      	str	r6, [r0, #4]
 800922c:	6086      	str	r6, [r0, #8]
 800922e:	6006      	str	r6, [r0, #0]
 8009230:	60c6      	str	r6, [r0, #12]
 8009232:	2c00      	cmp	r4, #0
 8009234:	d007      	beq.n	8009246 <_Bfree+0x3e>
 8009236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009238:	6862      	ldr	r2, [r4, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	0092      	lsls	r2, r2, #2
 800923e:	189b      	adds	r3, r3, r2
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	6022      	str	r2, [r4, #0]
 8009244:	601c      	str	r4, [r3, #0]
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	0800ce86 	.word	0x0800ce86
 800924c:	0800cf84 	.word	0x0800cf84

08009250 <__multadd>:
 8009250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009252:	000e      	movs	r6, r1
 8009254:	9001      	str	r0, [sp, #4]
 8009256:	000c      	movs	r4, r1
 8009258:	001d      	movs	r5, r3
 800925a:	2000      	movs	r0, #0
 800925c:	690f      	ldr	r7, [r1, #16]
 800925e:	3614      	adds	r6, #20
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	3001      	adds	r0, #1
 8009264:	b299      	uxth	r1, r3
 8009266:	4351      	muls	r1, r2
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	4353      	muls	r3, r2
 800926c:	1949      	adds	r1, r1, r5
 800926e:	0c0d      	lsrs	r5, r1, #16
 8009270:	195b      	adds	r3, r3, r5
 8009272:	0c1d      	lsrs	r5, r3, #16
 8009274:	b289      	uxth	r1, r1
 8009276:	041b      	lsls	r3, r3, #16
 8009278:	185b      	adds	r3, r3, r1
 800927a:	c608      	stmia	r6!, {r3}
 800927c:	4287      	cmp	r7, r0
 800927e:	dcef      	bgt.n	8009260 <__multadd+0x10>
 8009280:	2d00      	cmp	r5, #0
 8009282:	d022      	beq.n	80092ca <__multadd+0x7a>
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	42bb      	cmp	r3, r7
 8009288:	dc19      	bgt.n	80092be <__multadd+0x6e>
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	9801      	ldr	r0, [sp, #4]
 800928e:	1c59      	adds	r1, r3, #1
 8009290:	f7ff ff76 	bl	8009180 <_Balloc>
 8009294:	1e06      	subs	r6, r0, #0
 8009296:	d105      	bne.n	80092a4 <__multadd+0x54>
 8009298:	0002      	movs	r2, r0
 800929a:	21b5      	movs	r1, #181	; 0xb5
 800929c:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <__multadd+0x80>)
 800929e:	480d      	ldr	r0, [pc, #52]	; (80092d4 <__multadd+0x84>)
 80092a0:	f000 fee0 	bl	800a064 <__assert_func>
 80092a4:	0021      	movs	r1, r4
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	310c      	adds	r1, #12
 80092aa:	1c9a      	adds	r2, r3, #2
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	300c      	adds	r0, #12
 80092b0:	f7ff ff5d 	bl	800916e <memcpy>
 80092b4:	0021      	movs	r1, r4
 80092b6:	9801      	ldr	r0, [sp, #4]
 80092b8:	f7ff ffa6 	bl	8009208 <_Bfree>
 80092bc:	0034      	movs	r4, r6
 80092be:	1d3b      	adds	r3, r7, #4
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	18e3      	adds	r3, r4, r3
 80092c4:	605d      	str	r5, [r3, #4]
 80092c6:	1c7b      	adds	r3, r7, #1
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	0020      	movs	r0, r4
 80092cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092ce:	46c0      	nop			; (mov r8, r8)
 80092d0:	0800cef8 	.word	0x0800cef8
 80092d4:	0800cf84 	.word	0x0800cf84

080092d8 <__s2b>:
 80092d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092da:	0006      	movs	r6, r0
 80092dc:	0018      	movs	r0, r3
 80092de:	000c      	movs	r4, r1
 80092e0:	3008      	adds	r0, #8
 80092e2:	2109      	movs	r1, #9
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	0015      	movs	r5, r2
 80092e8:	f7f6 ffb4 	bl	8000254 <__divsi3>
 80092ec:	2301      	movs	r3, #1
 80092ee:	2100      	movs	r1, #0
 80092f0:	4283      	cmp	r3, r0
 80092f2:	db0a      	blt.n	800930a <__s2b+0x32>
 80092f4:	0030      	movs	r0, r6
 80092f6:	f7ff ff43 	bl	8009180 <_Balloc>
 80092fa:	1e01      	subs	r1, r0, #0
 80092fc:	d108      	bne.n	8009310 <__s2b+0x38>
 80092fe:	0002      	movs	r2, r0
 8009300:	4b19      	ldr	r3, [pc, #100]	; (8009368 <__s2b+0x90>)
 8009302:	481a      	ldr	r0, [pc, #104]	; (800936c <__s2b+0x94>)
 8009304:	31ce      	adds	r1, #206	; 0xce
 8009306:	f000 fead 	bl	800a064 <__assert_func>
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	3101      	adds	r1, #1
 800930e:	e7ef      	b.n	80092f0 <__s2b+0x18>
 8009310:	9b08      	ldr	r3, [sp, #32]
 8009312:	6143      	str	r3, [r0, #20]
 8009314:	2301      	movs	r3, #1
 8009316:	6103      	str	r3, [r0, #16]
 8009318:	2d09      	cmp	r5, #9
 800931a:	dd18      	ble.n	800934e <__s2b+0x76>
 800931c:	0023      	movs	r3, r4
 800931e:	3309      	adds	r3, #9
 8009320:	001f      	movs	r7, r3
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	1964      	adds	r4, r4, r5
 8009326:	783b      	ldrb	r3, [r7, #0]
 8009328:	220a      	movs	r2, #10
 800932a:	0030      	movs	r0, r6
 800932c:	3b30      	subs	r3, #48	; 0x30
 800932e:	f7ff ff8f 	bl	8009250 <__multadd>
 8009332:	3701      	adds	r7, #1
 8009334:	0001      	movs	r1, r0
 8009336:	42a7      	cmp	r7, r4
 8009338:	d1f5      	bne.n	8009326 <__s2b+0x4e>
 800933a:	002c      	movs	r4, r5
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	3c08      	subs	r4, #8
 8009340:	191c      	adds	r4, r3, r4
 8009342:	002f      	movs	r7, r5
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	429f      	cmp	r7, r3
 8009348:	db04      	blt.n	8009354 <__s2b+0x7c>
 800934a:	0008      	movs	r0, r1
 800934c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800934e:	2509      	movs	r5, #9
 8009350:	340a      	adds	r4, #10
 8009352:	e7f6      	b.n	8009342 <__s2b+0x6a>
 8009354:	1b63      	subs	r3, r4, r5
 8009356:	5ddb      	ldrb	r3, [r3, r7]
 8009358:	220a      	movs	r2, #10
 800935a:	0030      	movs	r0, r6
 800935c:	3b30      	subs	r3, #48	; 0x30
 800935e:	f7ff ff77 	bl	8009250 <__multadd>
 8009362:	3701      	adds	r7, #1
 8009364:	0001      	movs	r1, r0
 8009366:	e7ed      	b.n	8009344 <__s2b+0x6c>
 8009368:	0800cef8 	.word	0x0800cef8
 800936c:	0800cf84 	.word	0x0800cf84

08009370 <__hi0bits>:
 8009370:	0003      	movs	r3, r0
 8009372:	0c02      	lsrs	r2, r0, #16
 8009374:	2000      	movs	r0, #0
 8009376:	4282      	cmp	r2, r0
 8009378:	d101      	bne.n	800937e <__hi0bits+0xe>
 800937a:	041b      	lsls	r3, r3, #16
 800937c:	3010      	adds	r0, #16
 800937e:	0e1a      	lsrs	r2, r3, #24
 8009380:	d101      	bne.n	8009386 <__hi0bits+0x16>
 8009382:	3008      	adds	r0, #8
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	0f1a      	lsrs	r2, r3, #28
 8009388:	d101      	bne.n	800938e <__hi0bits+0x1e>
 800938a:	3004      	adds	r0, #4
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	0f9a      	lsrs	r2, r3, #30
 8009390:	d101      	bne.n	8009396 <__hi0bits+0x26>
 8009392:	3002      	adds	r0, #2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	db03      	blt.n	80093a2 <__hi0bits+0x32>
 800939a:	3001      	adds	r0, #1
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	d400      	bmi.n	80093a2 <__hi0bits+0x32>
 80093a0:	2020      	movs	r0, #32
 80093a2:	4770      	bx	lr

080093a4 <__lo0bits>:
 80093a4:	6803      	ldr	r3, [r0, #0]
 80093a6:	0002      	movs	r2, r0
 80093a8:	2107      	movs	r1, #7
 80093aa:	0018      	movs	r0, r3
 80093ac:	4008      	ands	r0, r1
 80093ae:	420b      	tst	r3, r1
 80093b0:	d00d      	beq.n	80093ce <__lo0bits+0x2a>
 80093b2:	3906      	subs	r1, #6
 80093b4:	2000      	movs	r0, #0
 80093b6:	420b      	tst	r3, r1
 80093b8:	d105      	bne.n	80093c6 <__lo0bits+0x22>
 80093ba:	3002      	adds	r0, #2
 80093bc:	4203      	tst	r3, r0
 80093be:	d003      	beq.n	80093c8 <__lo0bits+0x24>
 80093c0:	40cb      	lsrs	r3, r1
 80093c2:	0008      	movs	r0, r1
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	4770      	bx	lr
 80093c8:	089b      	lsrs	r3, r3, #2
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	e7fb      	b.n	80093c6 <__lo0bits+0x22>
 80093ce:	b299      	uxth	r1, r3
 80093d0:	2900      	cmp	r1, #0
 80093d2:	d101      	bne.n	80093d8 <__lo0bits+0x34>
 80093d4:	2010      	movs	r0, #16
 80093d6:	0c1b      	lsrs	r3, r3, #16
 80093d8:	b2d9      	uxtb	r1, r3
 80093da:	2900      	cmp	r1, #0
 80093dc:	d101      	bne.n	80093e2 <__lo0bits+0x3e>
 80093de:	3008      	adds	r0, #8
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	0719      	lsls	r1, r3, #28
 80093e4:	d101      	bne.n	80093ea <__lo0bits+0x46>
 80093e6:	3004      	adds	r0, #4
 80093e8:	091b      	lsrs	r3, r3, #4
 80093ea:	0799      	lsls	r1, r3, #30
 80093ec:	d101      	bne.n	80093f2 <__lo0bits+0x4e>
 80093ee:	3002      	adds	r0, #2
 80093f0:	089b      	lsrs	r3, r3, #2
 80093f2:	07d9      	lsls	r1, r3, #31
 80093f4:	d4e9      	bmi.n	80093ca <__lo0bits+0x26>
 80093f6:	3001      	adds	r0, #1
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	d1e6      	bne.n	80093ca <__lo0bits+0x26>
 80093fc:	2020      	movs	r0, #32
 80093fe:	e7e2      	b.n	80093c6 <__lo0bits+0x22>

08009400 <__i2b>:
 8009400:	b510      	push	{r4, lr}
 8009402:	000c      	movs	r4, r1
 8009404:	2101      	movs	r1, #1
 8009406:	f7ff febb 	bl	8009180 <_Balloc>
 800940a:	2800      	cmp	r0, #0
 800940c:	d106      	bne.n	800941c <__i2b+0x1c>
 800940e:	21a0      	movs	r1, #160	; 0xa0
 8009410:	0002      	movs	r2, r0
 8009412:	4b04      	ldr	r3, [pc, #16]	; (8009424 <__i2b+0x24>)
 8009414:	4804      	ldr	r0, [pc, #16]	; (8009428 <__i2b+0x28>)
 8009416:	0049      	lsls	r1, r1, #1
 8009418:	f000 fe24 	bl	800a064 <__assert_func>
 800941c:	2301      	movs	r3, #1
 800941e:	6144      	str	r4, [r0, #20]
 8009420:	6103      	str	r3, [r0, #16]
 8009422:	bd10      	pop	{r4, pc}
 8009424:	0800cef8 	.word	0x0800cef8
 8009428:	0800cf84 	.word	0x0800cf84

0800942c <__multiply>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	690b      	ldr	r3, [r1, #16]
 8009430:	0014      	movs	r4, r2
 8009432:	6912      	ldr	r2, [r2, #16]
 8009434:	000d      	movs	r5, r1
 8009436:	b089      	sub	sp, #36	; 0x24
 8009438:	4293      	cmp	r3, r2
 800943a:	da01      	bge.n	8009440 <__multiply+0x14>
 800943c:	0025      	movs	r5, r4
 800943e:	000c      	movs	r4, r1
 8009440:	692f      	ldr	r7, [r5, #16]
 8009442:	6926      	ldr	r6, [r4, #16]
 8009444:	6869      	ldr	r1, [r5, #4]
 8009446:	19bb      	adds	r3, r7, r6
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	68ab      	ldr	r3, [r5, #8]
 800944c:	19ba      	adds	r2, r7, r6
 800944e:	4293      	cmp	r3, r2
 8009450:	da00      	bge.n	8009454 <__multiply+0x28>
 8009452:	3101      	adds	r1, #1
 8009454:	f7ff fe94 	bl	8009180 <_Balloc>
 8009458:	9001      	str	r0, [sp, #4]
 800945a:	2800      	cmp	r0, #0
 800945c:	d106      	bne.n	800946c <__multiply+0x40>
 800945e:	215e      	movs	r1, #94	; 0x5e
 8009460:	0002      	movs	r2, r0
 8009462:	4b48      	ldr	r3, [pc, #288]	; (8009584 <__multiply+0x158>)
 8009464:	4848      	ldr	r0, [pc, #288]	; (8009588 <__multiply+0x15c>)
 8009466:	31ff      	adds	r1, #255	; 0xff
 8009468:	f000 fdfc 	bl	800a064 <__assert_func>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	3314      	adds	r3, #20
 8009472:	469c      	mov	ip, r3
 8009474:	19bb      	adds	r3, r7, r6
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4463      	add	r3, ip
 800947a:	9303      	str	r3, [sp, #12]
 800947c:	4663      	mov	r3, ip
 800947e:	9903      	ldr	r1, [sp, #12]
 8009480:	428b      	cmp	r3, r1
 8009482:	d32c      	bcc.n	80094de <__multiply+0xb2>
 8009484:	002b      	movs	r3, r5
 8009486:	0022      	movs	r2, r4
 8009488:	3314      	adds	r3, #20
 800948a:	00bf      	lsls	r7, r7, #2
 800948c:	3214      	adds	r2, #20
 800948e:	9306      	str	r3, [sp, #24]
 8009490:	00b6      	lsls	r6, r6, #2
 8009492:	19db      	adds	r3, r3, r7
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	1993      	adds	r3, r2, r6
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	2304      	movs	r3, #4
 800949c:	9305      	str	r3, [sp, #20]
 800949e:	002b      	movs	r3, r5
 80094a0:	9904      	ldr	r1, [sp, #16]
 80094a2:	3315      	adds	r3, #21
 80094a4:	9200      	str	r2, [sp, #0]
 80094a6:	4299      	cmp	r1, r3
 80094a8:	d305      	bcc.n	80094b6 <__multiply+0x8a>
 80094aa:	1b4b      	subs	r3, r1, r5
 80094ac:	3b15      	subs	r3, #21
 80094ae:	089b      	lsrs	r3, r3, #2
 80094b0:	3301      	adds	r3, #1
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	9305      	str	r3, [sp, #20]
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	9a00      	ldr	r2, [sp, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d311      	bcc.n	80094e2 <__multiply+0xb6>
 80094be:	9b02      	ldr	r3, [sp, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dd06      	ble.n	80094d2 <__multiply+0xa6>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	3b04      	subs	r3, #4
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d053      	beq.n	800957a <__multiply+0x14e>
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	9a02      	ldr	r2, [sp, #8]
 80094d6:	0018      	movs	r0, r3
 80094d8:	611a      	str	r2, [r3, #16]
 80094da:	b009      	add	sp, #36	; 0x24
 80094dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094de:	c304      	stmia	r3!, {r2}
 80094e0:	e7cd      	b.n	800947e <__multiply+0x52>
 80094e2:	9b00      	ldr	r3, [sp, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	b298      	uxth	r0, r3
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d01b      	beq.n	8009524 <__multiply+0xf8>
 80094ec:	4667      	mov	r7, ip
 80094ee:	2400      	movs	r4, #0
 80094f0:	9e06      	ldr	r6, [sp, #24]
 80094f2:	ce02      	ldmia	r6!, {r1}
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	b28b      	uxth	r3, r1
 80094f8:	4343      	muls	r3, r0
 80094fa:	b292      	uxth	r2, r2
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	191b      	adds	r3, r3, r4
 8009500:	0c0c      	lsrs	r4, r1, #16
 8009502:	4344      	muls	r4, r0
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	0c11      	lsrs	r1, r2, #16
 8009508:	1861      	adds	r1, r4, r1
 800950a:	0c1c      	lsrs	r4, r3, #16
 800950c:	1909      	adds	r1, r1, r4
 800950e:	0c0c      	lsrs	r4, r1, #16
 8009510:	b29b      	uxth	r3, r3
 8009512:	0409      	lsls	r1, r1, #16
 8009514:	430b      	orrs	r3, r1
 8009516:	c708      	stmia	r7!, {r3}
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	42b3      	cmp	r3, r6
 800951c:	d8e9      	bhi.n	80094f2 <__multiply+0xc6>
 800951e:	4663      	mov	r3, ip
 8009520:	9a05      	ldr	r2, [sp, #20]
 8009522:	509c      	str	r4, [r3, r2]
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	0c1e      	lsrs	r6, r3, #16
 800952a:	d020      	beq.n	800956e <__multiply+0x142>
 800952c:	4663      	mov	r3, ip
 800952e:	002c      	movs	r4, r5
 8009530:	4660      	mov	r0, ip
 8009532:	2700      	movs	r7, #0
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3414      	adds	r4, #20
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	b29b      	uxth	r3, r3
 800953c:	b291      	uxth	r1, r2
 800953e:	4371      	muls	r1, r6
 8009540:	6802      	ldr	r2, [r0, #0]
 8009542:	0c12      	lsrs	r2, r2, #16
 8009544:	1889      	adds	r1, r1, r2
 8009546:	19cf      	adds	r7, r1, r7
 8009548:	0439      	lsls	r1, r7, #16
 800954a:	430b      	orrs	r3, r1
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	cc02      	ldmia	r4!, {r1}
 8009550:	6843      	ldr	r3, [r0, #4]
 8009552:	0c09      	lsrs	r1, r1, #16
 8009554:	4371      	muls	r1, r6
 8009556:	b29b      	uxth	r3, r3
 8009558:	0c3f      	lsrs	r7, r7, #16
 800955a:	18cb      	adds	r3, r1, r3
 800955c:	9a04      	ldr	r2, [sp, #16]
 800955e:	19db      	adds	r3, r3, r7
 8009560:	0c1f      	lsrs	r7, r3, #16
 8009562:	3004      	adds	r0, #4
 8009564:	42a2      	cmp	r2, r4
 8009566:	d8e7      	bhi.n	8009538 <__multiply+0x10c>
 8009568:	4662      	mov	r2, ip
 800956a:	9905      	ldr	r1, [sp, #20]
 800956c:	5053      	str	r3, [r2, r1]
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	3304      	adds	r3, #4
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2304      	movs	r3, #4
 8009576:	449c      	add	ip, r3
 8009578:	e79d      	b.n	80094b6 <__multiply+0x8a>
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	3b01      	subs	r3, #1
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	e79d      	b.n	80094be <__multiply+0x92>
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	0800cef8 	.word	0x0800cef8
 8009588:	0800cf84 	.word	0x0800cf84

0800958c <__pow5mult>:
 800958c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800958e:	2303      	movs	r3, #3
 8009590:	0015      	movs	r5, r2
 8009592:	0007      	movs	r7, r0
 8009594:	000e      	movs	r6, r1
 8009596:	401a      	ands	r2, r3
 8009598:	421d      	tst	r5, r3
 800959a:	d008      	beq.n	80095ae <__pow5mult+0x22>
 800959c:	4925      	ldr	r1, [pc, #148]	; (8009634 <__pow5mult+0xa8>)
 800959e:	3a01      	subs	r2, #1
 80095a0:	0092      	lsls	r2, r2, #2
 80095a2:	5852      	ldr	r2, [r2, r1]
 80095a4:	2300      	movs	r3, #0
 80095a6:	0031      	movs	r1, r6
 80095a8:	f7ff fe52 	bl	8009250 <__multadd>
 80095ac:	0006      	movs	r6, r0
 80095ae:	10ad      	asrs	r5, r5, #2
 80095b0:	d03d      	beq.n	800962e <__pow5mult+0xa2>
 80095b2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80095b4:	2c00      	cmp	r4, #0
 80095b6:	d10f      	bne.n	80095d8 <__pow5mult+0x4c>
 80095b8:	2010      	movs	r0, #16
 80095ba:	f7ff fdb1 	bl	8009120 <malloc>
 80095be:	1e02      	subs	r2, r0, #0
 80095c0:	6278      	str	r0, [r7, #36]	; 0x24
 80095c2:	d105      	bne.n	80095d0 <__pow5mult+0x44>
 80095c4:	21d7      	movs	r1, #215	; 0xd7
 80095c6:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <__pow5mult+0xac>)
 80095c8:	481c      	ldr	r0, [pc, #112]	; (800963c <__pow5mult+0xb0>)
 80095ca:	0049      	lsls	r1, r1, #1
 80095cc:	f000 fd4a 	bl	800a064 <__assert_func>
 80095d0:	6044      	str	r4, [r0, #4]
 80095d2:	6084      	str	r4, [r0, #8]
 80095d4:	6004      	str	r4, [r0, #0]
 80095d6:	60c4      	str	r4, [r0, #12]
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	689c      	ldr	r4, [r3, #8]
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	2c00      	cmp	r4, #0
 80095e0:	d108      	bne.n	80095f4 <__pow5mult+0x68>
 80095e2:	0038      	movs	r0, r7
 80095e4:	4916      	ldr	r1, [pc, #88]	; (8009640 <__pow5mult+0xb4>)
 80095e6:	f7ff ff0b 	bl	8009400 <__i2b>
 80095ea:	9b01      	ldr	r3, [sp, #4]
 80095ec:	0004      	movs	r4, r0
 80095ee:	6098      	str	r0, [r3, #8]
 80095f0:	2300      	movs	r3, #0
 80095f2:	6003      	str	r3, [r0, #0]
 80095f4:	2301      	movs	r3, #1
 80095f6:	421d      	tst	r5, r3
 80095f8:	d00a      	beq.n	8009610 <__pow5mult+0x84>
 80095fa:	0031      	movs	r1, r6
 80095fc:	0022      	movs	r2, r4
 80095fe:	0038      	movs	r0, r7
 8009600:	f7ff ff14 	bl	800942c <__multiply>
 8009604:	0031      	movs	r1, r6
 8009606:	9001      	str	r0, [sp, #4]
 8009608:	0038      	movs	r0, r7
 800960a:	f7ff fdfd 	bl	8009208 <_Bfree>
 800960e:	9e01      	ldr	r6, [sp, #4]
 8009610:	106d      	asrs	r5, r5, #1
 8009612:	d00c      	beq.n	800962e <__pow5mult+0xa2>
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	2800      	cmp	r0, #0
 8009618:	d107      	bne.n	800962a <__pow5mult+0x9e>
 800961a:	0022      	movs	r2, r4
 800961c:	0021      	movs	r1, r4
 800961e:	0038      	movs	r0, r7
 8009620:	f7ff ff04 	bl	800942c <__multiply>
 8009624:	2300      	movs	r3, #0
 8009626:	6020      	str	r0, [r4, #0]
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	0004      	movs	r4, r0
 800962c:	e7e2      	b.n	80095f4 <__pow5mult+0x68>
 800962e:	0030      	movs	r0, r6
 8009630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	0800d0d0 	.word	0x0800d0d0
 8009638:	0800ce86 	.word	0x0800ce86
 800963c:	0800cf84 	.word	0x0800cf84
 8009640:	00000271 	.word	0x00000271

08009644 <__lshift>:
 8009644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009646:	000c      	movs	r4, r1
 8009648:	0017      	movs	r7, r2
 800964a:	6923      	ldr	r3, [r4, #16]
 800964c:	1155      	asrs	r5, r2, #5
 800964e:	b087      	sub	sp, #28
 8009650:	18eb      	adds	r3, r5, r3
 8009652:	9302      	str	r3, [sp, #8]
 8009654:	3301      	adds	r3, #1
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	6849      	ldr	r1, [r1, #4]
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	9004      	str	r0, [sp, #16]
 800965e:	9a01      	ldr	r2, [sp, #4]
 8009660:	4293      	cmp	r3, r2
 8009662:	db10      	blt.n	8009686 <__lshift+0x42>
 8009664:	9804      	ldr	r0, [sp, #16]
 8009666:	f7ff fd8b 	bl	8009180 <_Balloc>
 800966a:	2300      	movs	r3, #0
 800966c:	0002      	movs	r2, r0
 800966e:	0006      	movs	r6, r0
 8009670:	0019      	movs	r1, r3
 8009672:	3214      	adds	r2, #20
 8009674:	4298      	cmp	r0, r3
 8009676:	d10c      	bne.n	8009692 <__lshift+0x4e>
 8009678:	21da      	movs	r1, #218	; 0xda
 800967a:	0002      	movs	r2, r0
 800967c:	4b26      	ldr	r3, [pc, #152]	; (8009718 <__lshift+0xd4>)
 800967e:	4827      	ldr	r0, [pc, #156]	; (800971c <__lshift+0xd8>)
 8009680:	31ff      	adds	r1, #255	; 0xff
 8009682:	f000 fcef 	bl	800a064 <__assert_func>
 8009686:	3101      	adds	r1, #1
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	e7e8      	b.n	800965e <__lshift+0x1a>
 800968c:	0098      	lsls	r0, r3, #2
 800968e:	5011      	str	r1, [r2, r0]
 8009690:	3301      	adds	r3, #1
 8009692:	42ab      	cmp	r3, r5
 8009694:	dbfa      	blt.n	800968c <__lshift+0x48>
 8009696:	43eb      	mvns	r3, r5
 8009698:	17db      	asrs	r3, r3, #31
 800969a:	401d      	ands	r5, r3
 800969c:	211f      	movs	r1, #31
 800969e:	0023      	movs	r3, r4
 80096a0:	0038      	movs	r0, r7
 80096a2:	00ad      	lsls	r5, r5, #2
 80096a4:	1955      	adds	r5, r2, r5
 80096a6:	6922      	ldr	r2, [r4, #16]
 80096a8:	3314      	adds	r3, #20
 80096aa:	0092      	lsls	r2, r2, #2
 80096ac:	4008      	ands	r0, r1
 80096ae:	4684      	mov	ip, r0
 80096b0:	189a      	adds	r2, r3, r2
 80096b2:	420f      	tst	r7, r1
 80096b4:	d02a      	beq.n	800970c <__lshift+0xc8>
 80096b6:	3101      	adds	r1, #1
 80096b8:	1a09      	subs	r1, r1, r0
 80096ba:	9105      	str	r1, [sp, #20]
 80096bc:	2100      	movs	r1, #0
 80096be:	9503      	str	r5, [sp, #12]
 80096c0:	4667      	mov	r7, ip
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	40b8      	lsls	r0, r7
 80096c6:	4301      	orrs	r1, r0
 80096c8:	9803      	ldr	r0, [sp, #12]
 80096ca:	c002      	stmia	r0!, {r1}
 80096cc:	cb02      	ldmia	r3!, {r1}
 80096ce:	9003      	str	r0, [sp, #12]
 80096d0:	9805      	ldr	r0, [sp, #20]
 80096d2:	40c1      	lsrs	r1, r0
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d8f3      	bhi.n	80096c0 <__lshift+0x7c>
 80096d8:	0020      	movs	r0, r4
 80096da:	3015      	adds	r0, #21
 80096dc:	2304      	movs	r3, #4
 80096de:	4282      	cmp	r2, r0
 80096e0:	d304      	bcc.n	80096ec <__lshift+0xa8>
 80096e2:	1b13      	subs	r3, r2, r4
 80096e4:	3b15      	subs	r3, #21
 80096e6:	089b      	lsrs	r3, r3, #2
 80096e8:	3301      	adds	r3, #1
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	50e9      	str	r1, [r5, r3]
 80096ee:	2900      	cmp	r1, #0
 80096f0:	d002      	beq.n	80096f8 <__lshift+0xb4>
 80096f2:	9b02      	ldr	r3, [sp, #8]
 80096f4:	3302      	adds	r3, #2
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	9804      	ldr	r0, [sp, #16]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	0021      	movs	r1, r4
 8009700:	6133      	str	r3, [r6, #16]
 8009702:	f7ff fd81 	bl	8009208 <_Bfree>
 8009706:	0030      	movs	r0, r6
 8009708:	b007      	add	sp, #28
 800970a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970c:	cb02      	ldmia	r3!, {r1}
 800970e:	c502      	stmia	r5!, {r1}
 8009710:	429a      	cmp	r2, r3
 8009712:	d8fb      	bhi.n	800970c <__lshift+0xc8>
 8009714:	e7f0      	b.n	80096f8 <__lshift+0xb4>
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	0800cef8 	.word	0x0800cef8
 800971c:	0800cf84 	.word	0x0800cf84

08009720 <__mcmp>:
 8009720:	6902      	ldr	r2, [r0, #16]
 8009722:	690b      	ldr	r3, [r1, #16]
 8009724:	b530      	push	{r4, r5, lr}
 8009726:	0004      	movs	r4, r0
 8009728:	1ad0      	subs	r0, r2, r3
 800972a:	429a      	cmp	r2, r3
 800972c:	d10d      	bne.n	800974a <__mcmp+0x2a>
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	3414      	adds	r4, #20
 8009732:	3114      	adds	r1, #20
 8009734:	18e2      	adds	r2, r4, r3
 8009736:	18c9      	adds	r1, r1, r3
 8009738:	3a04      	subs	r2, #4
 800973a:	3904      	subs	r1, #4
 800973c:	6815      	ldr	r5, [r2, #0]
 800973e:	680b      	ldr	r3, [r1, #0]
 8009740:	429d      	cmp	r5, r3
 8009742:	d003      	beq.n	800974c <__mcmp+0x2c>
 8009744:	2001      	movs	r0, #1
 8009746:	429d      	cmp	r5, r3
 8009748:	d303      	bcc.n	8009752 <__mcmp+0x32>
 800974a:	bd30      	pop	{r4, r5, pc}
 800974c:	4294      	cmp	r4, r2
 800974e:	d3f3      	bcc.n	8009738 <__mcmp+0x18>
 8009750:	e7fb      	b.n	800974a <__mcmp+0x2a>
 8009752:	4240      	negs	r0, r0
 8009754:	e7f9      	b.n	800974a <__mcmp+0x2a>
	...

08009758 <__mdiff>:
 8009758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975a:	000e      	movs	r6, r1
 800975c:	0007      	movs	r7, r0
 800975e:	0011      	movs	r1, r2
 8009760:	0030      	movs	r0, r6
 8009762:	b087      	sub	sp, #28
 8009764:	0014      	movs	r4, r2
 8009766:	f7ff ffdb 	bl	8009720 <__mcmp>
 800976a:	1e05      	subs	r5, r0, #0
 800976c:	d110      	bne.n	8009790 <__mdiff+0x38>
 800976e:	0001      	movs	r1, r0
 8009770:	0038      	movs	r0, r7
 8009772:	f7ff fd05 	bl	8009180 <_Balloc>
 8009776:	1e02      	subs	r2, r0, #0
 8009778:	d104      	bne.n	8009784 <__mdiff+0x2c>
 800977a:	4b40      	ldr	r3, [pc, #256]	; (800987c <__mdiff+0x124>)
 800977c:	4940      	ldr	r1, [pc, #256]	; (8009880 <__mdiff+0x128>)
 800977e:	4841      	ldr	r0, [pc, #260]	; (8009884 <__mdiff+0x12c>)
 8009780:	f000 fc70 	bl	800a064 <__assert_func>
 8009784:	2301      	movs	r3, #1
 8009786:	6145      	str	r5, [r0, #20]
 8009788:	6103      	str	r3, [r0, #16]
 800978a:	0010      	movs	r0, r2
 800978c:	b007      	add	sp, #28
 800978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009790:	2301      	movs	r3, #1
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	2800      	cmp	r0, #0
 8009796:	db04      	blt.n	80097a2 <__mdiff+0x4a>
 8009798:	0023      	movs	r3, r4
 800979a:	0034      	movs	r4, r6
 800979c:	001e      	movs	r6, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	0038      	movs	r0, r7
 80097a4:	6861      	ldr	r1, [r4, #4]
 80097a6:	f7ff fceb 	bl	8009180 <_Balloc>
 80097aa:	1e02      	subs	r2, r0, #0
 80097ac:	d103      	bne.n	80097b6 <__mdiff+0x5e>
 80097ae:	2190      	movs	r1, #144	; 0x90
 80097b0:	4b32      	ldr	r3, [pc, #200]	; (800987c <__mdiff+0x124>)
 80097b2:	0089      	lsls	r1, r1, #2
 80097b4:	e7e3      	b.n	800977e <__mdiff+0x26>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	2700      	movs	r7, #0
 80097ba:	60c3      	str	r3, [r0, #12]
 80097bc:	6920      	ldr	r0, [r4, #16]
 80097be:	3414      	adds	r4, #20
 80097c0:	9401      	str	r4, [sp, #4]
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	0084      	lsls	r4, r0, #2
 80097c6:	191b      	adds	r3, r3, r4
 80097c8:	0034      	movs	r4, r6
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	6933      	ldr	r3, [r6, #16]
 80097ce:	3414      	adds	r4, #20
 80097d0:	0099      	lsls	r1, r3, #2
 80097d2:	1863      	adds	r3, r4, r1
 80097d4:	9303      	str	r3, [sp, #12]
 80097d6:	0013      	movs	r3, r2
 80097d8:	3314      	adds	r3, #20
 80097da:	469c      	mov	ip, r3
 80097dc:	9305      	str	r3, [sp, #20]
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	cc02      	ldmia	r4!, {r1}
 80097e6:	cb20      	ldmia	r3!, {r5}
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	b2ab      	uxth	r3, r5
 80097ec:	19df      	adds	r7, r3, r7
 80097ee:	b28b      	uxth	r3, r1
 80097f0:	1afb      	subs	r3, r7, r3
 80097f2:	0c09      	lsrs	r1, r1, #16
 80097f4:	0c2d      	lsrs	r5, r5, #16
 80097f6:	1a6d      	subs	r5, r5, r1
 80097f8:	1419      	asrs	r1, r3, #16
 80097fa:	186d      	adds	r5, r5, r1
 80097fc:	4661      	mov	r1, ip
 80097fe:	142f      	asrs	r7, r5, #16
 8009800:	b29b      	uxth	r3, r3
 8009802:	042d      	lsls	r5, r5, #16
 8009804:	432b      	orrs	r3, r5
 8009806:	c108      	stmia	r1!, {r3}
 8009808:	9b03      	ldr	r3, [sp, #12]
 800980a:	468c      	mov	ip, r1
 800980c:	42a3      	cmp	r3, r4
 800980e:	d8e8      	bhi.n	80097e2 <__mdiff+0x8a>
 8009810:	0031      	movs	r1, r6
 8009812:	9c03      	ldr	r4, [sp, #12]
 8009814:	3115      	adds	r1, #21
 8009816:	2304      	movs	r3, #4
 8009818:	428c      	cmp	r4, r1
 800981a:	d304      	bcc.n	8009826 <__mdiff+0xce>
 800981c:	1ba3      	subs	r3, r4, r6
 800981e:	3b15      	subs	r3, #21
 8009820:	089b      	lsrs	r3, r3, #2
 8009822:	3301      	adds	r3, #1
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	9901      	ldr	r1, [sp, #4]
 8009828:	18cc      	adds	r4, r1, r3
 800982a:	9905      	ldr	r1, [sp, #20]
 800982c:	0026      	movs	r6, r4
 800982e:	18cb      	adds	r3, r1, r3
 8009830:	469c      	mov	ip, r3
 8009832:	9902      	ldr	r1, [sp, #8]
 8009834:	428e      	cmp	r6, r1
 8009836:	d310      	bcc.n	800985a <__mdiff+0x102>
 8009838:	9e02      	ldr	r6, [sp, #8]
 800983a:	1ee1      	subs	r1, r4, #3
 800983c:	2500      	movs	r5, #0
 800983e:	428e      	cmp	r6, r1
 8009840:	d304      	bcc.n	800984c <__mdiff+0xf4>
 8009842:	0031      	movs	r1, r6
 8009844:	3103      	adds	r1, #3
 8009846:	1b0c      	subs	r4, r1, r4
 8009848:	08a4      	lsrs	r4, r4, #2
 800984a:	00a5      	lsls	r5, r4, #2
 800984c:	195b      	adds	r3, r3, r5
 800984e:	3b04      	subs	r3, #4
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	2900      	cmp	r1, #0
 8009854:	d00f      	beq.n	8009876 <__mdiff+0x11e>
 8009856:	6110      	str	r0, [r2, #16]
 8009858:	e797      	b.n	800978a <__mdiff+0x32>
 800985a:	ce02      	ldmia	r6!, {r1}
 800985c:	b28d      	uxth	r5, r1
 800985e:	19ed      	adds	r5, r5, r7
 8009860:	0c0f      	lsrs	r7, r1, #16
 8009862:	1429      	asrs	r1, r5, #16
 8009864:	1879      	adds	r1, r7, r1
 8009866:	140f      	asrs	r7, r1, #16
 8009868:	b2ad      	uxth	r5, r5
 800986a:	0409      	lsls	r1, r1, #16
 800986c:	430d      	orrs	r5, r1
 800986e:	4661      	mov	r1, ip
 8009870:	c120      	stmia	r1!, {r5}
 8009872:	468c      	mov	ip, r1
 8009874:	e7dd      	b.n	8009832 <__mdiff+0xda>
 8009876:	3801      	subs	r0, #1
 8009878:	e7e9      	b.n	800984e <__mdiff+0xf6>
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	0800cef8 	.word	0x0800cef8
 8009880:	00000232 	.word	0x00000232
 8009884:	0800cf84 	.word	0x0800cf84

08009888 <__ulp>:
 8009888:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <__ulp+0x40>)
 800988a:	4019      	ands	r1, r3
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <__ulp+0x44>)
 800988e:	18c9      	adds	r1, r1, r3
 8009890:	2900      	cmp	r1, #0
 8009892:	dd04      	ble.n	800989e <__ulp+0x16>
 8009894:	2200      	movs	r2, #0
 8009896:	000b      	movs	r3, r1
 8009898:	0010      	movs	r0, r2
 800989a:	0019      	movs	r1, r3
 800989c:	4770      	bx	lr
 800989e:	4249      	negs	r1, r1
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	1509      	asrs	r1, r1, #20
 80098a6:	2913      	cmp	r1, #19
 80098a8:	dc04      	bgt.n	80098b4 <__ulp+0x2c>
 80098aa:	2080      	movs	r0, #128	; 0x80
 80098ac:	0300      	lsls	r0, r0, #12
 80098ae:	4108      	asrs	r0, r1
 80098b0:	0003      	movs	r3, r0
 80098b2:	e7f1      	b.n	8009898 <__ulp+0x10>
 80098b4:	3914      	subs	r1, #20
 80098b6:	2001      	movs	r0, #1
 80098b8:	291e      	cmp	r1, #30
 80098ba:	dc02      	bgt.n	80098c2 <__ulp+0x3a>
 80098bc:	2080      	movs	r0, #128	; 0x80
 80098be:	0600      	lsls	r0, r0, #24
 80098c0:	40c8      	lsrs	r0, r1
 80098c2:	0002      	movs	r2, r0
 80098c4:	e7e8      	b.n	8009898 <__ulp+0x10>
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	7ff00000 	.word	0x7ff00000
 80098cc:	fcc00000 	.word	0xfcc00000

080098d0 <__b2d>:
 80098d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098d2:	0006      	movs	r6, r0
 80098d4:	6903      	ldr	r3, [r0, #16]
 80098d6:	3614      	adds	r6, #20
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	18f3      	adds	r3, r6, r3
 80098dc:	1f1d      	subs	r5, r3, #4
 80098de:	682c      	ldr	r4, [r5, #0]
 80098e0:	000f      	movs	r7, r1
 80098e2:	0020      	movs	r0, r4
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f7ff fd43 	bl	8009370 <__hi0bits>
 80098ea:	2320      	movs	r3, #32
 80098ec:	1a1b      	subs	r3, r3, r0
 80098ee:	491f      	ldr	r1, [pc, #124]	; (800996c <__b2d+0x9c>)
 80098f0:	603b      	str	r3, [r7, #0]
 80098f2:	280a      	cmp	r0, #10
 80098f4:	dc16      	bgt.n	8009924 <__b2d+0x54>
 80098f6:	230b      	movs	r3, #11
 80098f8:	0027      	movs	r7, r4
 80098fa:	1a1b      	subs	r3, r3, r0
 80098fc:	40df      	lsrs	r7, r3
 80098fe:	4339      	orrs	r1, r7
 8009900:	469c      	mov	ip, r3
 8009902:	000b      	movs	r3, r1
 8009904:	2100      	movs	r1, #0
 8009906:	42ae      	cmp	r6, r5
 8009908:	d202      	bcs.n	8009910 <__b2d+0x40>
 800990a:	9901      	ldr	r1, [sp, #4]
 800990c:	3908      	subs	r1, #8
 800990e:	6809      	ldr	r1, [r1, #0]
 8009910:	3015      	adds	r0, #21
 8009912:	4084      	lsls	r4, r0
 8009914:	4660      	mov	r0, ip
 8009916:	40c1      	lsrs	r1, r0
 8009918:	430c      	orrs	r4, r1
 800991a:	0022      	movs	r2, r4
 800991c:	0010      	movs	r0, r2
 800991e:	0019      	movs	r1, r3
 8009920:	b003      	add	sp, #12
 8009922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009924:	2700      	movs	r7, #0
 8009926:	42ae      	cmp	r6, r5
 8009928:	d202      	bcs.n	8009930 <__b2d+0x60>
 800992a:	9d01      	ldr	r5, [sp, #4]
 800992c:	3d08      	subs	r5, #8
 800992e:	682f      	ldr	r7, [r5, #0]
 8009930:	230b      	movs	r3, #11
 8009932:	425b      	negs	r3, r3
 8009934:	469c      	mov	ip, r3
 8009936:	4484      	add	ip, r0
 8009938:	280b      	cmp	r0, #11
 800993a:	d013      	beq.n	8009964 <__b2d+0x94>
 800993c:	4663      	mov	r3, ip
 800993e:	2020      	movs	r0, #32
 8009940:	409c      	lsls	r4, r3
 8009942:	1ac0      	subs	r0, r0, r3
 8009944:	003b      	movs	r3, r7
 8009946:	40c3      	lsrs	r3, r0
 8009948:	431c      	orrs	r4, r3
 800994a:	4321      	orrs	r1, r4
 800994c:	000b      	movs	r3, r1
 800994e:	2100      	movs	r1, #0
 8009950:	42b5      	cmp	r5, r6
 8009952:	d901      	bls.n	8009958 <__b2d+0x88>
 8009954:	3d04      	subs	r5, #4
 8009956:	6829      	ldr	r1, [r5, #0]
 8009958:	4664      	mov	r4, ip
 800995a:	40c1      	lsrs	r1, r0
 800995c:	40a7      	lsls	r7, r4
 800995e:	430f      	orrs	r7, r1
 8009960:	003a      	movs	r2, r7
 8009962:	e7db      	b.n	800991c <__b2d+0x4c>
 8009964:	4321      	orrs	r1, r4
 8009966:	000b      	movs	r3, r1
 8009968:	e7fa      	b.n	8009960 <__b2d+0x90>
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	3ff00000 	.word	0x3ff00000

08009970 <__d2b>:
 8009970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009972:	2101      	movs	r1, #1
 8009974:	0014      	movs	r4, r2
 8009976:	001e      	movs	r6, r3
 8009978:	9f08      	ldr	r7, [sp, #32]
 800997a:	f7ff fc01 	bl	8009180 <_Balloc>
 800997e:	1e05      	subs	r5, r0, #0
 8009980:	d105      	bne.n	800998e <__d2b+0x1e>
 8009982:	0002      	movs	r2, r0
 8009984:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <__d2b+0xb0>)
 8009986:	4927      	ldr	r1, [pc, #156]	; (8009a24 <__d2b+0xb4>)
 8009988:	4827      	ldr	r0, [pc, #156]	; (8009a28 <__d2b+0xb8>)
 800998a:	f000 fb6b 	bl	800a064 <__assert_func>
 800998e:	0333      	lsls	r3, r6, #12
 8009990:	0076      	lsls	r6, r6, #1
 8009992:	0b1b      	lsrs	r3, r3, #12
 8009994:	0d76      	lsrs	r6, r6, #21
 8009996:	d124      	bne.n	80099e2 <__d2b+0x72>
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	2c00      	cmp	r4, #0
 800999c:	d027      	beq.n	80099ee <__d2b+0x7e>
 800999e:	4668      	mov	r0, sp
 80099a0:	9400      	str	r4, [sp, #0]
 80099a2:	f7ff fcff 	bl	80093a4 <__lo0bits>
 80099a6:	9c00      	ldr	r4, [sp, #0]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d01e      	beq.n	80099ea <__d2b+0x7a>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	2120      	movs	r1, #32
 80099b0:	001a      	movs	r2, r3
 80099b2:	1a09      	subs	r1, r1, r0
 80099b4:	408a      	lsls	r2, r1
 80099b6:	40c3      	lsrs	r3, r0
 80099b8:	4322      	orrs	r2, r4
 80099ba:	616a      	str	r2, [r5, #20]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	9c01      	ldr	r4, [sp, #4]
 80099c0:	61ac      	str	r4, [r5, #24]
 80099c2:	1e63      	subs	r3, r4, #1
 80099c4:	419c      	sbcs	r4, r3
 80099c6:	3401      	adds	r4, #1
 80099c8:	612c      	str	r4, [r5, #16]
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	d018      	beq.n	8009a00 <__d2b+0x90>
 80099ce:	4b17      	ldr	r3, [pc, #92]	; (8009a2c <__d2b+0xbc>)
 80099d0:	18f6      	adds	r6, r6, r3
 80099d2:	2335      	movs	r3, #53	; 0x35
 80099d4:	1836      	adds	r6, r6, r0
 80099d6:	1a18      	subs	r0, r3, r0
 80099d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099da:	603e      	str	r6, [r7, #0]
 80099dc:	6018      	str	r0, [r3, #0]
 80099de:	0028      	movs	r0, r5
 80099e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099e2:	2280      	movs	r2, #128	; 0x80
 80099e4:	0352      	lsls	r2, r2, #13
 80099e6:	4313      	orrs	r3, r2
 80099e8:	e7d6      	b.n	8009998 <__d2b+0x28>
 80099ea:	616c      	str	r4, [r5, #20]
 80099ec:	e7e7      	b.n	80099be <__d2b+0x4e>
 80099ee:	a801      	add	r0, sp, #4
 80099f0:	f7ff fcd8 	bl	80093a4 <__lo0bits>
 80099f4:	2401      	movs	r4, #1
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	612c      	str	r4, [r5, #16]
 80099fa:	616b      	str	r3, [r5, #20]
 80099fc:	3020      	adds	r0, #32
 80099fe:	e7e4      	b.n	80099ca <__d2b+0x5a>
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <__d2b+0xc0>)
 8009a02:	18c0      	adds	r0, r0, r3
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <__d2b+0xc4>)
 8009a06:	6038      	str	r0, [r7, #0]
 8009a08:	18e3      	adds	r3, r4, r3
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	18eb      	adds	r3, r5, r3
 8009a0e:	6958      	ldr	r0, [r3, #20]
 8009a10:	f7ff fcae 	bl	8009370 <__hi0bits>
 8009a14:	0164      	lsls	r4, r4, #5
 8009a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a18:	1a24      	subs	r4, r4, r0
 8009a1a:	601c      	str	r4, [r3, #0]
 8009a1c:	e7df      	b.n	80099de <__d2b+0x6e>
 8009a1e:	46c0      	nop			; (mov r8, r8)
 8009a20:	0800cef8 	.word	0x0800cef8
 8009a24:	0000030a 	.word	0x0000030a
 8009a28:	0800cf84 	.word	0x0800cf84
 8009a2c:	fffffbcd 	.word	0xfffffbcd
 8009a30:	fffffbce 	.word	0xfffffbce
 8009a34:	3fffffff 	.word	0x3fffffff

08009a38 <__ratio>:
 8009a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	000f      	movs	r7, r1
 8009a3e:	a904      	add	r1, sp, #16
 8009a40:	0006      	movs	r6, r0
 8009a42:	f7ff ff45 	bl	80098d0 <__b2d>
 8009a46:	9000      	str	r0, [sp, #0]
 8009a48:	9101      	str	r1, [sp, #4]
 8009a4a:	9c00      	ldr	r4, [sp, #0]
 8009a4c:	9d01      	ldr	r5, [sp, #4]
 8009a4e:	0038      	movs	r0, r7
 8009a50:	a905      	add	r1, sp, #20
 8009a52:	f7ff ff3d 	bl	80098d0 <__b2d>
 8009a56:	9002      	str	r0, [sp, #8]
 8009a58:	9103      	str	r1, [sp, #12]
 8009a5a:	9a02      	ldr	r2, [sp, #8]
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	6931      	ldr	r1, [r6, #16]
 8009a60:	6938      	ldr	r0, [r7, #16]
 8009a62:	9e05      	ldr	r6, [sp, #20]
 8009a64:	1a08      	subs	r0, r1, r0
 8009a66:	9904      	ldr	r1, [sp, #16]
 8009a68:	0140      	lsls	r0, r0, #5
 8009a6a:	1b89      	subs	r1, r1, r6
 8009a6c:	1841      	adds	r1, r0, r1
 8009a6e:	0508      	lsls	r0, r1, #20
 8009a70:	2900      	cmp	r1, #0
 8009a72:	dd07      	ble.n	8009a84 <__ratio+0x4c>
 8009a74:	9901      	ldr	r1, [sp, #4]
 8009a76:	1845      	adds	r5, r0, r1
 8009a78:	0020      	movs	r0, r4
 8009a7a:	0029      	movs	r1, r5
 8009a7c:	f7f7 ff30 	bl	80018e0 <__aeabi_ddiv>
 8009a80:	b007      	add	sp, #28
 8009a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a84:	9903      	ldr	r1, [sp, #12]
 8009a86:	1a0b      	subs	r3, r1, r0
 8009a88:	e7f6      	b.n	8009a78 <__ratio+0x40>

08009a8a <__copybits>:
 8009a8a:	b570      	push	{r4, r5, r6, lr}
 8009a8c:	0014      	movs	r4, r2
 8009a8e:	0005      	movs	r5, r0
 8009a90:	3901      	subs	r1, #1
 8009a92:	6913      	ldr	r3, [r2, #16]
 8009a94:	1149      	asrs	r1, r1, #5
 8009a96:	3101      	adds	r1, #1
 8009a98:	0089      	lsls	r1, r1, #2
 8009a9a:	3414      	adds	r4, #20
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	1841      	adds	r1, r0, r1
 8009aa0:	18e3      	adds	r3, r4, r3
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	d80d      	bhi.n	8009ac2 <__copybits+0x38>
 8009aa6:	0014      	movs	r4, r2
 8009aa8:	3411      	adds	r4, #17
 8009aaa:	2500      	movs	r5, #0
 8009aac:	429c      	cmp	r4, r3
 8009aae:	d803      	bhi.n	8009ab8 <__copybits+0x2e>
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	3b11      	subs	r3, #17
 8009ab4:	089b      	lsrs	r3, r3, #2
 8009ab6:	009d      	lsls	r5, r3, #2
 8009ab8:	2300      	movs	r3, #0
 8009aba:	1940      	adds	r0, r0, r5
 8009abc:	4281      	cmp	r1, r0
 8009abe:	d803      	bhi.n	8009ac8 <__copybits+0x3e>
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	cc40      	ldmia	r4!, {r6}
 8009ac4:	c540      	stmia	r5!, {r6}
 8009ac6:	e7ec      	b.n	8009aa2 <__copybits+0x18>
 8009ac8:	c008      	stmia	r0!, {r3}
 8009aca:	e7f7      	b.n	8009abc <__copybits+0x32>

08009acc <__any_on>:
 8009acc:	0002      	movs	r2, r0
 8009ace:	6900      	ldr	r0, [r0, #16]
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	3214      	adds	r2, #20
 8009ad4:	114b      	asrs	r3, r1, #5
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	db13      	blt.n	8009b02 <__any_on+0x36>
 8009ada:	dd0c      	ble.n	8009af6 <__any_on+0x2a>
 8009adc:	241f      	movs	r4, #31
 8009ade:	0008      	movs	r0, r1
 8009ae0:	4020      	ands	r0, r4
 8009ae2:	4221      	tst	r1, r4
 8009ae4:	d007      	beq.n	8009af6 <__any_on+0x2a>
 8009ae6:	0099      	lsls	r1, r3, #2
 8009ae8:	588c      	ldr	r4, [r1, r2]
 8009aea:	0021      	movs	r1, r4
 8009aec:	40c1      	lsrs	r1, r0
 8009aee:	4081      	lsls	r1, r0
 8009af0:	2001      	movs	r0, #1
 8009af2:	428c      	cmp	r4, r1
 8009af4:	d104      	bne.n	8009b00 <__any_on+0x34>
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	18d3      	adds	r3, r2, r3
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d803      	bhi.n	8009b06 <__any_on+0x3a>
 8009afe:	2000      	movs	r0, #0
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	0003      	movs	r3, r0
 8009b04:	e7f7      	b.n	8009af6 <__any_on+0x2a>
 8009b06:	3b04      	subs	r3, #4
 8009b08:	6819      	ldr	r1, [r3, #0]
 8009b0a:	2900      	cmp	r1, #0
 8009b0c:	d0f5      	beq.n	8009afa <__any_on+0x2e>
 8009b0e:	2001      	movs	r0, #1
 8009b10:	e7f6      	b.n	8009b00 <__any_on+0x34>

08009b12 <_calloc_r>:
 8009b12:	b570      	push	{r4, r5, r6, lr}
 8009b14:	0c13      	lsrs	r3, r2, #16
 8009b16:	0c0d      	lsrs	r5, r1, #16
 8009b18:	d11e      	bne.n	8009b58 <_calloc_r+0x46>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <_calloc_r+0x26>
 8009b1e:	b289      	uxth	r1, r1
 8009b20:	b294      	uxth	r4, r2
 8009b22:	434c      	muls	r4, r1
 8009b24:	0021      	movs	r1, r4
 8009b26:	f000 f88d 	bl	8009c44 <_malloc_r>
 8009b2a:	1e05      	subs	r5, r0, #0
 8009b2c:	d01b      	beq.n	8009b66 <_calloc_r+0x54>
 8009b2e:	0022      	movs	r2, r4
 8009b30:	2100      	movs	r1, #0
 8009b32:	f7fc fb6f 	bl	8006214 <memset>
 8009b36:	e016      	b.n	8009b66 <_calloc_r+0x54>
 8009b38:	1c1d      	adds	r5, r3, #0
 8009b3a:	1c0b      	adds	r3, r1, #0
 8009b3c:	b292      	uxth	r2, r2
 8009b3e:	b289      	uxth	r1, r1
 8009b40:	b29c      	uxth	r4, r3
 8009b42:	4351      	muls	r1, r2
 8009b44:	b2ab      	uxth	r3, r5
 8009b46:	4363      	muls	r3, r4
 8009b48:	0c0c      	lsrs	r4, r1, #16
 8009b4a:	191c      	adds	r4, r3, r4
 8009b4c:	0c22      	lsrs	r2, r4, #16
 8009b4e:	d107      	bne.n	8009b60 <_calloc_r+0x4e>
 8009b50:	0424      	lsls	r4, r4, #16
 8009b52:	b289      	uxth	r1, r1
 8009b54:	430c      	orrs	r4, r1
 8009b56:	e7e5      	b.n	8009b24 <_calloc_r+0x12>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <_calloc_r+0x4e>
 8009b5c:	1c13      	adds	r3, r2, #0
 8009b5e:	e7ed      	b.n	8009b3c <_calloc_r+0x2a>
 8009b60:	230c      	movs	r3, #12
 8009b62:	2500      	movs	r5, #0
 8009b64:	6003      	str	r3, [r0, #0]
 8009b66:	0028      	movs	r0, r5
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b6c <_free_r>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	0005      	movs	r5, r0
 8009b70:	2900      	cmp	r1, #0
 8009b72:	d010      	beq.n	8009b96 <_free_r+0x2a>
 8009b74:	1f0c      	subs	r4, r1, #4
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	da00      	bge.n	8009b7e <_free_r+0x12>
 8009b7c:	18e4      	adds	r4, r4, r3
 8009b7e:	0028      	movs	r0, r5
 8009b80:	f000 fab2 	bl	800a0e8 <__malloc_lock>
 8009b84:	4a1d      	ldr	r2, [pc, #116]	; (8009bfc <_free_r+0x90>)
 8009b86:	6813      	ldr	r3, [r2, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d105      	bne.n	8009b98 <_free_r+0x2c>
 8009b8c:	6063      	str	r3, [r4, #4]
 8009b8e:	6014      	str	r4, [r2, #0]
 8009b90:	0028      	movs	r0, r5
 8009b92:	f000 fab1 	bl	800a0f8 <__malloc_unlock>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	d908      	bls.n	8009bae <_free_r+0x42>
 8009b9c:	6821      	ldr	r1, [r4, #0]
 8009b9e:	1860      	adds	r0, r4, r1
 8009ba0:	4283      	cmp	r3, r0
 8009ba2:	d1f3      	bne.n	8009b8c <_free_r+0x20>
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	1841      	adds	r1, r0, r1
 8009baa:	6021      	str	r1, [r4, #0]
 8009bac:	e7ee      	b.n	8009b8c <_free_r+0x20>
 8009bae:	001a      	movs	r2, r3
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <_free_r+0x4e>
 8009bb6:	42a3      	cmp	r3, r4
 8009bb8:	d9f9      	bls.n	8009bae <_free_r+0x42>
 8009bba:	6811      	ldr	r1, [r2, #0]
 8009bbc:	1850      	adds	r0, r2, r1
 8009bbe:	42a0      	cmp	r0, r4
 8009bc0:	d10b      	bne.n	8009bda <_free_r+0x6e>
 8009bc2:	6820      	ldr	r0, [r4, #0]
 8009bc4:	1809      	adds	r1, r1, r0
 8009bc6:	1850      	adds	r0, r2, r1
 8009bc8:	6011      	str	r1, [r2, #0]
 8009bca:	4283      	cmp	r3, r0
 8009bcc:	d1e0      	bne.n	8009b90 <_free_r+0x24>
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	1841      	adds	r1, r0, r1
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	6053      	str	r3, [r2, #4]
 8009bd8:	e7da      	b.n	8009b90 <_free_r+0x24>
 8009bda:	42a0      	cmp	r0, r4
 8009bdc:	d902      	bls.n	8009be4 <_free_r+0x78>
 8009bde:	230c      	movs	r3, #12
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	e7d5      	b.n	8009b90 <_free_r+0x24>
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	1860      	adds	r0, r4, r1
 8009be8:	4283      	cmp	r3, r0
 8009bea:	d103      	bne.n	8009bf4 <_free_r+0x88>
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	1841      	adds	r1, r0, r1
 8009bf2:	6021      	str	r1, [r4, #0]
 8009bf4:	6063      	str	r3, [r4, #4]
 8009bf6:	6054      	str	r4, [r2, #4]
 8009bf8:	e7ca      	b.n	8009b90 <_free_r+0x24>
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	200002e8 	.word	0x200002e8

08009c00 <sbrk_aligned>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	4e0f      	ldr	r6, [pc, #60]	; (8009c40 <sbrk_aligned+0x40>)
 8009c04:	000d      	movs	r5, r1
 8009c06:	6831      	ldr	r1, [r6, #0]
 8009c08:	0004      	movs	r4, r0
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	d102      	bne.n	8009c14 <sbrk_aligned+0x14>
 8009c0e:	f000 f9f7 	bl	800a000 <_sbrk_r>
 8009c12:	6030      	str	r0, [r6, #0]
 8009c14:	0029      	movs	r1, r5
 8009c16:	0020      	movs	r0, r4
 8009c18:	f000 f9f2 	bl	800a000 <_sbrk_r>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d00a      	beq.n	8009c36 <sbrk_aligned+0x36>
 8009c20:	2303      	movs	r3, #3
 8009c22:	1cc5      	adds	r5, r0, #3
 8009c24:	439d      	bics	r5, r3
 8009c26:	42a8      	cmp	r0, r5
 8009c28:	d007      	beq.n	8009c3a <sbrk_aligned+0x3a>
 8009c2a:	1a29      	subs	r1, r5, r0
 8009c2c:	0020      	movs	r0, r4
 8009c2e:	f000 f9e7 	bl	800a000 <_sbrk_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d101      	bne.n	8009c3a <sbrk_aligned+0x3a>
 8009c36:	2501      	movs	r5, #1
 8009c38:	426d      	negs	r5, r5
 8009c3a:	0028      	movs	r0, r5
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
 8009c3e:	46c0      	nop			; (mov r8, r8)
 8009c40:	200002ec 	.word	0x200002ec

08009c44 <_malloc_r>:
 8009c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c46:	2203      	movs	r2, #3
 8009c48:	1ccb      	adds	r3, r1, #3
 8009c4a:	4393      	bics	r3, r2
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	0006      	movs	r6, r0
 8009c50:	001f      	movs	r7, r3
 8009c52:	2b0c      	cmp	r3, #12
 8009c54:	d232      	bcs.n	8009cbc <_malloc_r+0x78>
 8009c56:	270c      	movs	r7, #12
 8009c58:	42b9      	cmp	r1, r7
 8009c5a:	d831      	bhi.n	8009cc0 <_malloc_r+0x7c>
 8009c5c:	0030      	movs	r0, r6
 8009c5e:	f000 fa43 	bl	800a0e8 <__malloc_lock>
 8009c62:	4d32      	ldr	r5, [pc, #200]	; (8009d2c <_malloc_r+0xe8>)
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	001c      	movs	r4, r3
 8009c68:	2c00      	cmp	r4, #0
 8009c6a:	d12e      	bne.n	8009cca <_malloc_r+0x86>
 8009c6c:	0039      	movs	r1, r7
 8009c6e:	0030      	movs	r0, r6
 8009c70:	f7ff ffc6 	bl	8009c00 <sbrk_aligned>
 8009c74:	0004      	movs	r4, r0
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	d11e      	bne.n	8009cb8 <_malloc_r+0x74>
 8009c7a:	682c      	ldr	r4, [r5, #0]
 8009c7c:	0025      	movs	r5, r4
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	d14a      	bne.n	8009d18 <_malloc_r+0xd4>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	0029      	movs	r1, r5
 8009c86:	18e3      	adds	r3, r4, r3
 8009c88:	0030      	movs	r0, r6
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	f000 f9b8 	bl	800a000 <_sbrk_r>
 8009c90:	9b01      	ldr	r3, [sp, #4]
 8009c92:	4283      	cmp	r3, r0
 8009c94:	d143      	bne.n	8009d1e <_malloc_r+0xda>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	3703      	adds	r7, #3
 8009c9a:	1aff      	subs	r7, r7, r3
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	439f      	bics	r7, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	2f0c      	cmp	r7, #12
 8009ca4:	d200      	bcs.n	8009ca8 <_malloc_r+0x64>
 8009ca6:	270c      	movs	r7, #12
 8009ca8:	0039      	movs	r1, r7
 8009caa:	0030      	movs	r0, r6
 8009cac:	f7ff ffa8 	bl	8009c00 <sbrk_aligned>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d034      	beq.n	8009d1e <_malloc_r+0xda>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	19df      	adds	r7, r3, r7
 8009cb8:	6027      	str	r7, [r4, #0]
 8009cba:	e013      	b.n	8009ce4 <_malloc_r+0xa0>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dacb      	bge.n	8009c58 <_malloc_r+0x14>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	2500      	movs	r5, #0
 8009cc4:	6033      	str	r3, [r6, #0]
 8009cc6:	0028      	movs	r0, r5
 8009cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cca:	6822      	ldr	r2, [r4, #0]
 8009ccc:	1bd1      	subs	r1, r2, r7
 8009cce:	d420      	bmi.n	8009d12 <_malloc_r+0xce>
 8009cd0:	290b      	cmp	r1, #11
 8009cd2:	d917      	bls.n	8009d04 <_malloc_r+0xc0>
 8009cd4:	19e2      	adds	r2, r4, r7
 8009cd6:	6027      	str	r7, [r4, #0]
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	d111      	bne.n	8009d00 <_malloc_r+0xbc>
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	6011      	str	r1, [r2, #0]
 8009ce2:	6053      	str	r3, [r2, #4]
 8009ce4:	0030      	movs	r0, r6
 8009ce6:	0025      	movs	r5, r4
 8009ce8:	f000 fa06 	bl	800a0f8 <__malloc_unlock>
 8009cec:	2207      	movs	r2, #7
 8009cee:	350b      	adds	r5, #11
 8009cf0:	1d23      	adds	r3, r4, #4
 8009cf2:	4395      	bics	r5, r2
 8009cf4:	1aea      	subs	r2, r5, r3
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	d0e5      	beq.n	8009cc6 <_malloc_r+0x82>
 8009cfa:	1b5b      	subs	r3, r3, r5
 8009cfc:	50a3      	str	r3, [r4, r2]
 8009cfe:	e7e2      	b.n	8009cc6 <_malloc_r+0x82>
 8009d00:	605a      	str	r2, [r3, #4]
 8009d02:	e7ec      	b.n	8009cde <_malloc_r+0x9a>
 8009d04:	6862      	ldr	r2, [r4, #4]
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	d101      	bne.n	8009d0e <_malloc_r+0xca>
 8009d0a:	602a      	str	r2, [r5, #0]
 8009d0c:	e7ea      	b.n	8009ce4 <_malloc_r+0xa0>
 8009d0e:	605a      	str	r2, [r3, #4]
 8009d10:	e7e8      	b.n	8009ce4 <_malloc_r+0xa0>
 8009d12:	0023      	movs	r3, r4
 8009d14:	6864      	ldr	r4, [r4, #4]
 8009d16:	e7a7      	b.n	8009c68 <_malloc_r+0x24>
 8009d18:	002c      	movs	r4, r5
 8009d1a:	686d      	ldr	r5, [r5, #4]
 8009d1c:	e7af      	b.n	8009c7e <_malloc_r+0x3a>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	0030      	movs	r0, r6
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	f000 f9e8 	bl	800a0f8 <__malloc_unlock>
 8009d28:	e7cd      	b.n	8009cc6 <_malloc_r+0x82>
 8009d2a:	46c0      	nop			; (mov r8, r8)
 8009d2c:	200002e8 	.word	0x200002e8

08009d30 <__ssputs_r>:
 8009d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d32:	688e      	ldr	r6, [r1, #8]
 8009d34:	b085      	sub	sp, #20
 8009d36:	0007      	movs	r7, r0
 8009d38:	000c      	movs	r4, r1
 8009d3a:	9203      	str	r2, [sp, #12]
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	429e      	cmp	r6, r3
 8009d40:	d83c      	bhi.n	8009dbc <__ssputs_r+0x8c>
 8009d42:	2390      	movs	r3, #144	; 0x90
 8009d44:	898a      	ldrh	r2, [r1, #12]
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	421a      	tst	r2, r3
 8009d4a:	d034      	beq.n	8009db6 <__ssputs_r+0x86>
 8009d4c:	6909      	ldr	r1, [r1, #16]
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	6960      	ldr	r0, [r4, #20]
 8009d52:	1a5b      	subs	r3, r3, r1
 8009d54:	9302      	str	r3, [sp, #8]
 8009d56:	2303      	movs	r3, #3
 8009d58:	4343      	muls	r3, r0
 8009d5a:	0fdd      	lsrs	r5, r3, #31
 8009d5c:	18ed      	adds	r5, r5, r3
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	9802      	ldr	r0, [sp, #8]
 8009d62:	3301      	adds	r3, #1
 8009d64:	181b      	adds	r3, r3, r0
 8009d66:	106d      	asrs	r5, r5, #1
 8009d68:	42ab      	cmp	r3, r5
 8009d6a:	d900      	bls.n	8009d6e <__ssputs_r+0x3e>
 8009d6c:	001d      	movs	r5, r3
 8009d6e:	0553      	lsls	r3, r2, #21
 8009d70:	d532      	bpl.n	8009dd8 <__ssputs_r+0xa8>
 8009d72:	0029      	movs	r1, r5
 8009d74:	0038      	movs	r0, r7
 8009d76:	f7ff ff65 	bl	8009c44 <_malloc_r>
 8009d7a:	1e06      	subs	r6, r0, #0
 8009d7c:	d109      	bne.n	8009d92 <__ssputs_r+0x62>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	603b      	str	r3, [r7, #0]
 8009d82:	2340      	movs	r3, #64	; 0x40
 8009d84:	2001      	movs	r0, #1
 8009d86:	89a2      	ldrh	r2, [r4, #12]
 8009d88:	4240      	negs	r0, r0
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	b005      	add	sp, #20
 8009d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d92:	9a02      	ldr	r2, [sp, #8]
 8009d94:	6921      	ldr	r1, [r4, #16]
 8009d96:	f7ff f9ea 	bl	800916e <memcpy>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <__ssputs_r+0xc0>)
 8009d9e:	401a      	ands	r2, r3
 8009da0:	2380      	movs	r3, #128	; 0x80
 8009da2:	4313      	orrs	r3, r2
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	9b02      	ldr	r3, [sp, #8]
 8009da8:	6126      	str	r6, [r4, #16]
 8009daa:	18f6      	adds	r6, r6, r3
 8009dac:	6026      	str	r6, [r4, #0]
 8009dae:	6165      	str	r5, [r4, #20]
 8009db0:	9e01      	ldr	r6, [sp, #4]
 8009db2:	1aed      	subs	r5, r5, r3
 8009db4:	60a5      	str	r5, [r4, #8]
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	429e      	cmp	r6, r3
 8009dba:	d900      	bls.n	8009dbe <__ssputs_r+0x8e>
 8009dbc:	9e01      	ldr	r6, [sp, #4]
 8009dbe:	0032      	movs	r2, r6
 8009dc0:	9903      	ldr	r1, [sp, #12]
 8009dc2:	6820      	ldr	r0, [r4, #0]
 8009dc4:	f000 f97c 	bl	800a0c0 <memmove>
 8009dc8:	68a3      	ldr	r3, [r4, #8]
 8009dca:	2000      	movs	r0, #0
 8009dcc:	1b9b      	subs	r3, r3, r6
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	199e      	adds	r6, r3, r6
 8009dd4:	6026      	str	r6, [r4, #0]
 8009dd6:	e7da      	b.n	8009d8e <__ssputs_r+0x5e>
 8009dd8:	002a      	movs	r2, r5
 8009dda:	0038      	movs	r0, r7
 8009ddc:	f000 f994 	bl	800a108 <_realloc_r>
 8009de0:	1e06      	subs	r6, r0, #0
 8009de2:	d1e0      	bne.n	8009da6 <__ssputs_r+0x76>
 8009de4:	0038      	movs	r0, r7
 8009de6:	6921      	ldr	r1, [r4, #16]
 8009de8:	f7ff fec0 	bl	8009b6c <_free_r>
 8009dec:	e7c7      	b.n	8009d7e <__ssputs_r+0x4e>
 8009dee:	46c0      	nop			; (mov r8, r8)
 8009df0:	fffffb7f 	.word	0xfffffb7f

08009df4 <_svfiprintf_r>:
 8009df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df6:	b0a1      	sub	sp, #132	; 0x84
 8009df8:	9003      	str	r0, [sp, #12]
 8009dfa:	001d      	movs	r5, r3
 8009dfc:	898b      	ldrh	r3, [r1, #12]
 8009dfe:	000f      	movs	r7, r1
 8009e00:	0016      	movs	r6, r2
 8009e02:	061b      	lsls	r3, r3, #24
 8009e04:	d511      	bpl.n	8009e2a <_svfiprintf_r+0x36>
 8009e06:	690b      	ldr	r3, [r1, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10e      	bne.n	8009e2a <_svfiprintf_r+0x36>
 8009e0c:	2140      	movs	r1, #64	; 0x40
 8009e0e:	f7ff ff19 	bl	8009c44 <_malloc_r>
 8009e12:	6038      	str	r0, [r7, #0]
 8009e14:	6138      	str	r0, [r7, #16]
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d105      	bne.n	8009e26 <_svfiprintf_r+0x32>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	9a03      	ldr	r2, [sp, #12]
 8009e1e:	3801      	subs	r0, #1
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	b021      	add	sp, #132	; 0x84
 8009e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e26:	2340      	movs	r3, #64	; 0x40
 8009e28:	617b      	str	r3, [r7, #20]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	ac08      	add	r4, sp, #32
 8009e2e:	6163      	str	r3, [r4, #20]
 8009e30:	3320      	adds	r3, #32
 8009e32:	7663      	strb	r3, [r4, #25]
 8009e34:	3310      	adds	r3, #16
 8009e36:	76a3      	strb	r3, [r4, #26]
 8009e38:	9507      	str	r5, [sp, #28]
 8009e3a:	0035      	movs	r5, r6
 8009e3c:	782b      	ldrb	r3, [r5, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <_svfiprintf_r+0x52>
 8009e42:	2b25      	cmp	r3, #37	; 0x25
 8009e44:	d147      	bne.n	8009ed6 <_svfiprintf_r+0xe2>
 8009e46:	1bab      	subs	r3, r5, r6
 8009e48:	9305      	str	r3, [sp, #20]
 8009e4a:	42b5      	cmp	r5, r6
 8009e4c:	d00c      	beq.n	8009e68 <_svfiprintf_r+0x74>
 8009e4e:	0032      	movs	r2, r6
 8009e50:	0039      	movs	r1, r7
 8009e52:	9803      	ldr	r0, [sp, #12]
 8009e54:	f7ff ff6c 	bl	8009d30 <__ssputs_r>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d100      	bne.n	8009e5e <_svfiprintf_r+0x6a>
 8009e5c:	e0ae      	b.n	8009fbc <_svfiprintf_r+0x1c8>
 8009e5e:	6962      	ldr	r2, [r4, #20]
 8009e60:	9b05      	ldr	r3, [sp, #20]
 8009e62:	4694      	mov	ip, r2
 8009e64:	4463      	add	r3, ip
 8009e66:	6163      	str	r3, [r4, #20]
 8009e68:	782b      	ldrb	r3, [r5, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d100      	bne.n	8009e70 <_svfiprintf_r+0x7c>
 8009e6e:	e0a5      	b.n	8009fbc <_svfiprintf_r+0x1c8>
 8009e70:	2201      	movs	r2, #1
 8009e72:	2300      	movs	r3, #0
 8009e74:	4252      	negs	r2, r2
 8009e76:	6062      	str	r2, [r4, #4]
 8009e78:	a904      	add	r1, sp, #16
 8009e7a:	3254      	adds	r2, #84	; 0x54
 8009e7c:	1852      	adds	r2, r2, r1
 8009e7e:	1c6e      	adds	r6, r5, #1
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	60e3      	str	r3, [r4, #12]
 8009e84:	60a3      	str	r3, [r4, #8]
 8009e86:	7013      	strb	r3, [r2, #0]
 8009e88:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e8a:	2205      	movs	r2, #5
 8009e8c:	7831      	ldrb	r1, [r6, #0]
 8009e8e:	4854      	ldr	r0, [pc, #336]	; (8009fe0 <_svfiprintf_r+0x1ec>)
 8009e90:	f7ff f962 	bl	8009158 <memchr>
 8009e94:	1c75      	adds	r5, r6, #1
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d11f      	bne.n	8009eda <_svfiprintf_r+0xe6>
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	06d3      	lsls	r3, r2, #27
 8009e9e:	d504      	bpl.n	8009eaa <_svfiprintf_r+0xb6>
 8009ea0:	2353      	movs	r3, #83	; 0x53
 8009ea2:	a904      	add	r1, sp, #16
 8009ea4:	185b      	adds	r3, r3, r1
 8009ea6:	2120      	movs	r1, #32
 8009ea8:	7019      	strb	r1, [r3, #0]
 8009eaa:	0713      	lsls	r3, r2, #28
 8009eac:	d504      	bpl.n	8009eb8 <_svfiprintf_r+0xc4>
 8009eae:	2353      	movs	r3, #83	; 0x53
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	185b      	adds	r3, r3, r1
 8009eb4:	212b      	movs	r1, #43	; 0x2b
 8009eb6:	7019      	strb	r1, [r3, #0]
 8009eb8:	7833      	ldrb	r3, [r6, #0]
 8009eba:	2b2a      	cmp	r3, #42	; 0x2a
 8009ebc:	d016      	beq.n	8009eec <_svfiprintf_r+0xf8>
 8009ebe:	0035      	movs	r5, r6
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	200a      	movs	r0, #10
 8009ec4:	68e3      	ldr	r3, [r4, #12]
 8009ec6:	782a      	ldrb	r2, [r5, #0]
 8009ec8:	1c6e      	adds	r6, r5, #1
 8009eca:	3a30      	subs	r2, #48	; 0x30
 8009ecc:	2a09      	cmp	r2, #9
 8009ece:	d94e      	bls.n	8009f6e <_svfiprintf_r+0x17a>
 8009ed0:	2900      	cmp	r1, #0
 8009ed2:	d111      	bne.n	8009ef8 <_svfiprintf_r+0x104>
 8009ed4:	e017      	b.n	8009f06 <_svfiprintf_r+0x112>
 8009ed6:	3501      	adds	r5, #1
 8009ed8:	e7b0      	b.n	8009e3c <_svfiprintf_r+0x48>
 8009eda:	4b41      	ldr	r3, [pc, #260]	; (8009fe0 <_svfiprintf_r+0x1ec>)
 8009edc:	6822      	ldr	r2, [r4, #0]
 8009ede:	1ac0      	subs	r0, r0, r3
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4083      	lsls	r3, r0
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	002e      	movs	r6, r5
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	e7ce      	b.n	8009e8a <_svfiprintf_r+0x96>
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	1d19      	adds	r1, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	9107      	str	r1, [sp, #28]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	db01      	blt.n	8009efc <_svfiprintf_r+0x108>
 8009ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009efa:	e004      	b.n	8009f06 <_svfiprintf_r+0x112>
 8009efc:	425b      	negs	r3, r3
 8009efe:	60e3      	str	r3, [r4, #12]
 8009f00:	2302      	movs	r3, #2
 8009f02:	4313      	orrs	r3, r2
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	782b      	ldrb	r3, [r5, #0]
 8009f08:	2b2e      	cmp	r3, #46	; 0x2e
 8009f0a:	d10a      	bne.n	8009f22 <_svfiprintf_r+0x12e>
 8009f0c:	786b      	ldrb	r3, [r5, #1]
 8009f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f10:	d135      	bne.n	8009f7e <_svfiprintf_r+0x18a>
 8009f12:	9b07      	ldr	r3, [sp, #28]
 8009f14:	3502      	adds	r5, #2
 8009f16:	1d1a      	adds	r2, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	9207      	str	r2, [sp, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	db2b      	blt.n	8009f78 <_svfiprintf_r+0x184>
 8009f20:	9309      	str	r3, [sp, #36]	; 0x24
 8009f22:	4e30      	ldr	r6, [pc, #192]	; (8009fe4 <_svfiprintf_r+0x1f0>)
 8009f24:	2203      	movs	r2, #3
 8009f26:	0030      	movs	r0, r6
 8009f28:	7829      	ldrb	r1, [r5, #0]
 8009f2a:	f7ff f915 	bl	8009158 <memchr>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d006      	beq.n	8009f40 <_svfiprintf_r+0x14c>
 8009f32:	2340      	movs	r3, #64	; 0x40
 8009f34:	1b80      	subs	r0, r0, r6
 8009f36:	4083      	lsls	r3, r0
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	3501      	adds	r5, #1
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	7829      	ldrb	r1, [r5, #0]
 8009f42:	2206      	movs	r2, #6
 8009f44:	4828      	ldr	r0, [pc, #160]	; (8009fe8 <_svfiprintf_r+0x1f4>)
 8009f46:	1c6e      	adds	r6, r5, #1
 8009f48:	7621      	strb	r1, [r4, #24]
 8009f4a:	f7ff f905 	bl	8009158 <memchr>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d03c      	beq.n	8009fcc <_svfiprintf_r+0x1d8>
 8009f52:	4b26      	ldr	r3, [pc, #152]	; (8009fec <_svfiprintf_r+0x1f8>)
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d125      	bne.n	8009fa4 <_svfiprintf_r+0x1b0>
 8009f58:	2207      	movs	r2, #7
 8009f5a:	9b07      	ldr	r3, [sp, #28]
 8009f5c:	3307      	adds	r3, #7
 8009f5e:	4393      	bics	r3, r2
 8009f60:	3308      	adds	r3, #8
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	6963      	ldr	r3, [r4, #20]
 8009f66:	9a04      	ldr	r2, [sp, #16]
 8009f68:	189b      	adds	r3, r3, r2
 8009f6a:	6163      	str	r3, [r4, #20]
 8009f6c:	e765      	b.n	8009e3a <_svfiprintf_r+0x46>
 8009f6e:	4343      	muls	r3, r0
 8009f70:	0035      	movs	r5, r6
 8009f72:	2101      	movs	r1, #1
 8009f74:	189b      	adds	r3, r3, r2
 8009f76:	e7a6      	b.n	8009ec6 <_svfiprintf_r+0xd2>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	425b      	negs	r3, r3
 8009f7c:	e7d0      	b.n	8009f20 <_svfiprintf_r+0x12c>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	200a      	movs	r0, #10
 8009f82:	001a      	movs	r2, r3
 8009f84:	3501      	adds	r5, #1
 8009f86:	6063      	str	r3, [r4, #4]
 8009f88:	7829      	ldrb	r1, [r5, #0]
 8009f8a:	1c6e      	adds	r6, r5, #1
 8009f8c:	3930      	subs	r1, #48	; 0x30
 8009f8e:	2909      	cmp	r1, #9
 8009f90:	d903      	bls.n	8009f9a <_svfiprintf_r+0x1a6>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d0c5      	beq.n	8009f22 <_svfiprintf_r+0x12e>
 8009f96:	9209      	str	r2, [sp, #36]	; 0x24
 8009f98:	e7c3      	b.n	8009f22 <_svfiprintf_r+0x12e>
 8009f9a:	4342      	muls	r2, r0
 8009f9c:	0035      	movs	r5, r6
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	1852      	adds	r2, r2, r1
 8009fa2:	e7f1      	b.n	8009f88 <_svfiprintf_r+0x194>
 8009fa4:	ab07      	add	r3, sp, #28
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	003a      	movs	r2, r7
 8009faa:	0021      	movs	r1, r4
 8009fac:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <_svfiprintf_r+0x1fc>)
 8009fae:	9803      	ldr	r0, [sp, #12]
 8009fb0:	f7fc f9e2 	bl	8006378 <_printf_float>
 8009fb4:	9004      	str	r0, [sp, #16]
 8009fb6:	9b04      	ldr	r3, [sp, #16]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	d1d3      	bne.n	8009f64 <_svfiprintf_r+0x170>
 8009fbc:	89bb      	ldrh	r3, [r7, #12]
 8009fbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fc0:	065b      	lsls	r3, r3, #25
 8009fc2:	d400      	bmi.n	8009fc6 <_svfiprintf_r+0x1d2>
 8009fc4:	e72d      	b.n	8009e22 <_svfiprintf_r+0x2e>
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	4240      	negs	r0, r0
 8009fca:	e72a      	b.n	8009e22 <_svfiprintf_r+0x2e>
 8009fcc:	ab07      	add	r3, sp, #28
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	003a      	movs	r2, r7
 8009fd2:	0021      	movs	r1, r4
 8009fd4:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <_svfiprintf_r+0x1fc>)
 8009fd6:	9803      	ldr	r0, [sp, #12]
 8009fd8:	f7fc fc80 	bl	80068dc <_printf_i>
 8009fdc:	e7ea      	b.n	8009fb4 <_svfiprintf_r+0x1c0>
 8009fde:	46c0      	nop			; (mov r8, r8)
 8009fe0:	0800d0dc 	.word	0x0800d0dc
 8009fe4:	0800d0e2 	.word	0x0800d0e2
 8009fe8:	0800d0e6 	.word	0x0800d0e6
 8009fec:	08006379 	.word	0x08006379
 8009ff0:	08009d31 	.word	0x08009d31

08009ff4 <nan>:
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	4901      	ldr	r1, [pc, #4]	; (8009ffc <nan+0x8>)
 8009ff8:	4770      	bx	lr
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	7ff80000 	.word	0x7ff80000

0800a000 <_sbrk_r>:
 800a000:	2300      	movs	r3, #0
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	4d06      	ldr	r5, [pc, #24]	; (800a020 <_sbrk_r+0x20>)
 800a006:	0004      	movs	r4, r0
 800a008:	0008      	movs	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7fa fbf0 	bl	80047f0 <_sbrk>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d103      	bne.n	800a01c <_sbrk_r+0x1c>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d000      	beq.n	800a01c <_sbrk_r+0x1c>
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	200002f0 	.word	0x200002f0

0800a024 <strncmp>:
 800a024:	b530      	push	{r4, r5, lr}
 800a026:	0005      	movs	r5, r0
 800a028:	1e10      	subs	r0, r2, #0
 800a02a:	d008      	beq.n	800a03e <strncmp+0x1a>
 800a02c:	2400      	movs	r4, #0
 800a02e:	3a01      	subs	r2, #1
 800a030:	5d2b      	ldrb	r3, [r5, r4]
 800a032:	5d08      	ldrb	r0, [r1, r4]
 800a034:	4283      	cmp	r3, r0
 800a036:	d101      	bne.n	800a03c <strncmp+0x18>
 800a038:	4294      	cmp	r4, r2
 800a03a:	d101      	bne.n	800a040 <strncmp+0x1c>
 800a03c:	1a18      	subs	r0, r3, r0
 800a03e:	bd30      	pop	{r4, r5, pc}
 800a040:	3401      	adds	r4, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1f4      	bne.n	800a030 <strncmp+0xc>
 800a046:	e7f9      	b.n	800a03c <strncmp+0x18>

0800a048 <__ascii_wctomb>:
 800a048:	0003      	movs	r3, r0
 800a04a:	1e08      	subs	r0, r1, #0
 800a04c:	d005      	beq.n	800a05a <__ascii_wctomb+0x12>
 800a04e:	2aff      	cmp	r2, #255	; 0xff
 800a050:	d904      	bls.n	800a05c <__ascii_wctomb+0x14>
 800a052:	228a      	movs	r2, #138	; 0x8a
 800a054:	2001      	movs	r0, #1
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	4240      	negs	r0, r0
 800a05a:	4770      	bx	lr
 800a05c:	2001      	movs	r0, #1
 800a05e:	700a      	strb	r2, [r1, #0]
 800a060:	e7fb      	b.n	800a05a <__ascii_wctomb+0x12>
	...

0800a064 <__assert_func>:
 800a064:	b530      	push	{r4, r5, lr}
 800a066:	0014      	movs	r4, r2
 800a068:	001a      	movs	r2, r3
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <__assert_func+0x2c>)
 800a06c:	0005      	movs	r5, r0
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	b085      	sub	sp, #20
 800a072:	68d8      	ldr	r0, [r3, #12]
 800a074:	4b07      	ldr	r3, [pc, #28]	; (800a094 <__assert_func+0x30>)
 800a076:	2c00      	cmp	r4, #0
 800a078:	d101      	bne.n	800a07e <__assert_func+0x1a>
 800a07a:	4b07      	ldr	r3, [pc, #28]	; (800a098 <__assert_func+0x34>)
 800a07c:	001c      	movs	r4, r3
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	9100      	str	r1, [sp, #0]
 800a082:	002b      	movs	r3, r5
 800a084:	4905      	ldr	r1, [pc, #20]	; (800a09c <__assert_func+0x38>)
 800a086:	9402      	str	r4, [sp, #8]
 800a088:	f000 f80a 	bl	800a0a0 <fiprintf>
 800a08c:	f000 fa9a 	bl	800a5c4 <abort>
 800a090:	20000050 	.word	0x20000050
 800a094:	0800d0ed 	.word	0x0800d0ed
 800a098:	0800d128 	.word	0x0800d128
 800a09c:	0800d0fa 	.word	0x0800d0fa

0800a0a0 <fiprintf>:
 800a0a0:	b40e      	push	{r1, r2, r3}
 800a0a2:	b503      	push	{r0, r1, lr}
 800a0a4:	0001      	movs	r1, r0
 800a0a6:	ab03      	add	r3, sp, #12
 800a0a8:	4804      	ldr	r0, [pc, #16]	; (800a0bc <fiprintf+0x1c>)
 800a0aa:	cb04      	ldmia	r3!, {r2}
 800a0ac:	6800      	ldr	r0, [r0, #0]
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	f000 f880 	bl	800a1b4 <_vfiprintf_r>
 800a0b4:	b002      	add	sp, #8
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	b003      	add	sp, #12
 800a0ba:	4718      	bx	r3
 800a0bc:	20000050 	.word	0x20000050

0800a0c0 <memmove>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	4288      	cmp	r0, r1
 800a0c4:	d902      	bls.n	800a0cc <memmove+0xc>
 800a0c6:	188b      	adds	r3, r1, r2
 800a0c8:	4298      	cmp	r0, r3
 800a0ca:	d303      	bcc.n	800a0d4 <memmove+0x14>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e007      	b.n	800a0e0 <memmove+0x20>
 800a0d0:	5c8b      	ldrb	r3, [r1, r2]
 800a0d2:	5483      	strb	r3, [r0, r2]
 800a0d4:	3a01      	subs	r2, #1
 800a0d6:	d2fb      	bcs.n	800a0d0 <memmove+0x10>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	5ccc      	ldrb	r4, [r1, r3]
 800a0dc:	54c4      	strb	r4, [r0, r3]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d1fa      	bne.n	800a0da <memmove+0x1a>
 800a0e4:	e7f8      	b.n	800a0d8 <memmove+0x18>
	...

0800a0e8 <__malloc_lock>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	4802      	ldr	r0, [pc, #8]	; (800a0f4 <__malloc_lock+0xc>)
 800a0ec:	f000 fc41 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	200002f4 	.word	0x200002f4

0800a0f8 <__malloc_unlock>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4802      	ldr	r0, [pc, #8]	; (800a104 <__malloc_unlock+0xc>)
 800a0fc:	f000 fc3a 	bl	800a974 <__retarget_lock_release_recursive>
 800a100:	bd10      	pop	{r4, pc}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	200002f4 	.word	0x200002f4

0800a108 <_realloc_r>:
 800a108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a10a:	0007      	movs	r7, r0
 800a10c:	000e      	movs	r6, r1
 800a10e:	0014      	movs	r4, r2
 800a110:	2900      	cmp	r1, #0
 800a112:	d105      	bne.n	800a120 <_realloc_r+0x18>
 800a114:	0011      	movs	r1, r2
 800a116:	f7ff fd95 	bl	8009c44 <_malloc_r>
 800a11a:	0005      	movs	r5, r0
 800a11c:	0028      	movs	r0, r5
 800a11e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a120:	2a00      	cmp	r2, #0
 800a122:	d103      	bne.n	800a12c <_realloc_r+0x24>
 800a124:	f7ff fd22 	bl	8009b6c <_free_r>
 800a128:	0025      	movs	r5, r4
 800a12a:	e7f7      	b.n	800a11c <_realloc_r+0x14>
 800a12c:	f000 fc90 	bl	800aa50 <_malloc_usable_size_r>
 800a130:	9001      	str	r0, [sp, #4]
 800a132:	4284      	cmp	r4, r0
 800a134:	d803      	bhi.n	800a13e <_realloc_r+0x36>
 800a136:	0035      	movs	r5, r6
 800a138:	0843      	lsrs	r3, r0, #1
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	d3ee      	bcc.n	800a11c <_realloc_r+0x14>
 800a13e:	0021      	movs	r1, r4
 800a140:	0038      	movs	r0, r7
 800a142:	f7ff fd7f 	bl	8009c44 <_malloc_r>
 800a146:	1e05      	subs	r5, r0, #0
 800a148:	d0e8      	beq.n	800a11c <_realloc_r+0x14>
 800a14a:	9b01      	ldr	r3, [sp, #4]
 800a14c:	0022      	movs	r2, r4
 800a14e:	429c      	cmp	r4, r3
 800a150:	d900      	bls.n	800a154 <_realloc_r+0x4c>
 800a152:	001a      	movs	r2, r3
 800a154:	0031      	movs	r1, r6
 800a156:	0028      	movs	r0, r5
 800a158:	f7ff f809 	bl	800916e <memcpy>
 800a15c:	0031      	movs	r1, r6
 800a15e:	0038      	movs	r0, r7
 800a160:	f7ff fd04 	bl	8009b6c <_free_r>
 800a164:	e7da      	b.n	800a11c <_realloc_r+0x14>

0800a166 <__sfputc_r>:
 800a166:	6893      	ldr	r3, [r2, #8]
 800a168:	b510      	push	{r4, lr}
 800a16a:	3b01      	subs	r3, #1
 800a16c:	6093      	str	r3, [r2, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da04      	bge.n	800a17c <__sfputc_r+0x16>
 800a172:	6994      	ldr	r4, [r2, #24]
 800a174:	42a3      	cmp	r3, r4
 800a176:	db07      	blt.n	800a188 <__sfputc_r+0x22>
 800a178:	290a      	cmp	r1, #10
 800a17a:	d005      	beq.n	800a188 <__sfputc_r+0x22>
 800a17c:	6813      	ldr	r3, [r2, #0]
 800a17e:	1c58      	adds	r0, r3, #1
 800a180:	6010      	str	r0, [r2, #0]
 800a182:	7019      	strb	r1, [r3, #0]
 800a184:	0008      	movs	r0, r1
 800a186:	bd10      	pop	{r4, pc}
 800a188:	f000 f94e 	bl	800a428 <__swbuf_r>
 800a18c:	0001      	movs	r1, r0
 800a18e:	e7f9      	b.n	800a184 <__sfputc_r+0x1e>

0800a190 <__sfputs_r>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	0006      	movs	r6, r0
 800a194:	000f      	movs	r7, r1
 800a196:	0014      	movs	r4, r2
 800a198:	18d5      	adds	r5, r2, r3
 800a19a:	42ac      	cmp	r4, r5
 800a19c:	d101      	bne.n	800a1a2 <__sfputs_r+0x12>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	e007      	b.n	800a1b2 <__sfputs_r+0x22>
 800a1a2:	7821      	ldrb	r1, [r4, #0]
 800a1a4:	003a      	movs	r2, r7
 800a1a6:	0030      	movs	r0, r6
 800a1a8:	f7ff ffdd 	bl	800a166 <__sfputc_r>
 800a1ac:	3401      	adds	r4, #1
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d1f3      	bne.n	800a19a <__sfputs_r+0xa>
 800a1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1b4 <_vfiprintf_r>:
 800a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b6:	b0a1      	sub	sp, #132	; 0x84
 800a1b8:	0006      	movs	r6, r0
 800a1ba:	000c      	movs	r4, r1
 800a1bc:	001f      	movs	r7, r3
 800a1be:	9203      	str	r2, [sp, #12]
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d004      	beq.n	800a1ce <_vfiprintf_r+0x1a>
 800a1c4:	6983      	ldr	r3, [r0, #24]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <_vfiprintf_r+0x1a>
 800a1ca:	f000 fb31 	bl	800a830 <__sinit>
 800a1ce:	4b8e      	ldr	r3, [pc, #568]	; (800a408 <_vfiprintf_r+0x254>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d11c      	bne.n	800a20e <_vfiprintf_r+0x5a>
 800a1d4:	6874      	ldr	r4, [r6, #4]
 800a1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1d8:	07db      	lsls	r3, r3, #31
 800a1da:	d405      	bmi.n	800a1e8 <_vfiprintf_r+0x34>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	059b      	lsls	r3, r3, #22
 800a1e0:	d402      	bmi.n	800a1e8 <_vfiprintf_r+0x34>
 800a1e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e4:	f000 fbc5 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	071b      	lsls	r3, r3, #28
 800a1ec:	d502      	bpl.n	800a1f4 <_vfiprintf_r+0x40>
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d11d      	bne.n	800a230 <_vfiprintf_r+0x7c>
 800a1f4:	0021      	movs	r1, r4
 800a1f6:	0030      	movs	r0, r6
 800a1f8:	f000 f96c 	bl	800a4d4 <__swsetup_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d017      	beq.n	800a230 <_vfiprintf_r+0x7c>
 800a200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a202:	07db      	lsls	r3, r3, #31
 800a204:	d50d      	bpl.n	800a222 <_vfiprintf_r+0x6e>
 800a206:	2001      	movs	r0, #1
 800a208:	4240      	negs	r0, r0
 800a20a:	b021      	add	sp, #132	; 0x84
 800a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20e:	4b7f      	ldr	r3, [pc, #508]	; (800a40c <_vfiprintf_r+0x258>)
 800a210:	429c      	cmp	r4, r3
 800a212:	d101      	bne.n	800a218 <_vfiprintf_r+0x64>
 800a214:	68b4      	ldr	r4, [r6, #8]
 800a216:	e7de      	b.n	800a1d6 <_vfiprintf_r+0x22>
 800a218:	4b7d      	ldr	r3, [pc, #500]	; (800a410 <_vfiprintf_r+0x25c>)
 800a21a:	429c      	cmp	r4, r3
 800a21c:	d1db      	bne.n	800a1d6 <_vfiprintf_r+0x22>
 800a21e:	68f4      	ldr	r4, [r6, #12]
 800a220:	e7d9      	b.n	800a1d6 <_vfiprintf_r+0x22>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	059b      	lsls	r3, r3, #22
 800a226:	d4ee      	bmi.n	800a206 <_vfiprintf_r+0x52>
 800a228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22a:	f000 fba3 	bl	800a974 <__retarget_lock_release_recursive>
 800a22e:	e7ea      	b.n	800a206 <_vfiprintf_r+0x52>
 800a230:	2300      	movs	r3, #0
 800a232:	ad08      	add	r5, sp, #32
 800a234:	616b      	str	r3, [r5, #20]
 800a236:	3320      	adds	r3, #32
 800a238:	766b      	strb	r3, [r5, #25]
 800a23a:	3310      	adds	r3, #16
 800a23c:	76ab      	strb	r3, [r5, #26]
 800a23e:	9707      	str	r7, [sp, #28]
 800a240:	9f03      	ldr	r7, [sp, #12]
 800a242:	783b      	ldrb	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <_vfiprintf_r+0x98>
 800a248:	2b25      	cmp	r3, #37	; 0x25
 800a24a:	d14e      	bne.n	800a2ea <_vfiprintf_r+0x136>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	1afb      	subs	r3, r7, r3
 800a250:	9305      	str	r3, [sp, #20]
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	429f      	cmp	r7, r3
 800a256:	d00d      	beq.n	800a274 <_vfiprintf_r+0xc0>
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	0021      	movs	r1, r4
 800a25c:	0030      	movs	r0, r6
 800a25e:	9a03      	ldr	r2, [sp, #12]
 800a260:	f7ff ff96 	bl	800a190 <__sfputs_r>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d100      	bne.n	800a26a <_vfiprintf_r+0xb6>
 800a268:	e0b5      	b.n	800a3d6 <_vfiprintf_r+0x222>
 800a26a:	696a      	ldr	r2, [r5, #20]
 800a26c:	9b05      	ldr	r3, [sp, #20]
 800a26e:	4694      	mov	ip, r2
 800a270:	4463      	add	r3, ip
 800a272:	616b      	str	r3, [r5, #20]
 800a274:	783b      	ldrb	r3, [r7, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d100      	bne.n	800a27c <_vfiprintf_r+0xc8>
 800a27a:	e0ac      	b.n	800a3d6 <_vfiprintf_r+0x222>
 800a27c:	2201      	movs	r2, #1
 800a27e:	1c7b      	adds	r3, r7, #1
 800a280:	9303      	str	r3, [sp, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	4252      	negs	r2, r2
 800a286:	606a      	str	r2, [r5, #4]
 800a288:	a904      	add	r1, sp, #16
 800a28a:	3254      	adds	r2, #84	; 0x54
 800a28c:	1852      	adds	r2, r2, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	60eb      	str	r3, [r5, #12]
 800a292:	60ab      	str	r3, [r5, #8]
 800a294:	7013      	strb	r3, [r2, #0]
 800a296:	65ab      	str	r3, [r5, #88]	; 0x58
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	2205      	movs	r2, #5
 800a29c:	7819      	ldrb	r1, [r3, #0]
 800a29e:	485d      	ldr	r0, [pc, #372]	; (800a414 <_vfiprintf_r+0x260>)
 800a2a0:	f7fe ff5a 	bl	8009158 <memchr>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	1c5f      	adds	r7, r3, #1
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d120      	bne.n	800a2ee <_vfiprintf_r+0x13a>
 800a2ac:	682a      	ldr	r2, [r5, #0]
 800a2ae:	06d3      	lsls	r3, r2, #27
 800a2b0:	d504      	bpl.n	800a2bc <_vfiprintf_r+0x108>
 800a2b2:	2353      	movs	r3, #83	; 0x53
 800a2b4:	a904      	add	r1, sp, #16
 800a2b6:	185b      	adds	r3, r3, r1
 800a2b8:	2120      	movs	r1, #32
 800a2ba:	7019      	strb	r1, [r3, #0]
 800a2bc:	0713      	lsls	r3, r2, #28
 800a2be:	d504      	bpl.n	800a2ca <_vfiprintf_r+0x116>
 800a2c0:	2353      	movs	r3, #83	; 0x53
 800a2c2:	a904      	add	r1, sp, #16
 800a2c4:	185b      	adds	r3, r3, r1
 800a2c6:	212b      	movs	r1, #43	; 0x2b
 800a2c8:	7019      	strb	r1, [r3, #0]
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d0:	d016      	beq.n	800a300 <_vfiprintf_r+0x14c>
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	68eb      	ldr	r3, [r5, #12]
 800a2d6:	9f03      	ldr	r7, [sp, #12]
 800a2d8:	783a      	ldrb	r2, [r7, #0]
 800a2da:	1c78      	adds	r0, r7, #1
 800a2dc:	3a30      	subs	r2, #48	; 0x30
 800a2de:	4684      	mov	ip, r0
 800a2e0:	2a09      	cmp	r2, #9
 800a2e2:	d94f      	bls.n	800a384 <_vfiprintf_r+0x1d0>
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	d111      	bne.n	800a30c <_vfiprintf_r+0x158>
 800a2e8:	e017      	b.n	800a31a <_vfiprintf_r+0x166>
 800a2ea:	3701      	adds	r7, #1
 800a2ec:	e7a9      	b.n	800a242 <_vfiprintf_r+0x8e>
 800a2ee:	4b49      	ldr	r3, [pc, #292]	; (800a414 <_vfiprintf_r+0x260>)
 800a2f0:	682a      	ldr	r2, [r5, #0]
 800a2f2:	1ac0      	subs	r0, r0, r3
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4083      	lsls	r3, r0
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	9703      	str	r7, [sp, #12]
 800a2fe:	e7cb      	b.n	800a298 <_vfiprintf_r+0xe4>
 800a300:	9b07      	ldr	r3, [sp, #28]
 800a302:	1d19      	adds	r1, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9107      	str	r1, [sp, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	db01      	blt.n	800a310 <_vfiprintf_r+0x15c>
 800a30c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a30e:	e004      	b.n	800a31a <_vfiprintf_r+0x166>
 800a310:	425b      	negs	r3, r3
 800a312:	60eb      	str	r3, [r5, #12]
 800a314:	2302      	movs	r3, #2
 800a316:	4313      	orrs	r3, r2
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	783b      	ldrb	r3, [r7, #0]
 800a31c:	2b2e      	cmp	r3, #46	; 0x2e
 800a31e:	d10a      	bne.n	800a336 <_vfiprintf_r+0x182>
 800a320:	787b      	ldrb	r3, [r7, #1]
 800a322:	2b2a      	cmp	r3, #42	; 0x2a
 800a324:	d137      	bne.n	800a396 <_vfiprintf_r+0x1e2>
 800a326:	9b07      	ldr	r3, [sp, #28]
 800a328:	3702      	adds	r7, #2
 800a32a:	1d1a      	adds	r2, r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	9207      	str	r2, [sp, #28]
 800a330:	2b00      	cmp	r3, #0
 800a332:	db2d      	blt.n	800a390 <_vfiprintf_r+0x1dc>
 800a334:	9309      	str	r3, [sp, #36]	; 0x24
 800a336:	2203      	movs	r2, #3
 800a338:	7839      	ldrb	r1, [r7, #0]
 800a33a:	4837      	ldr	r0, [pc, #220]	; (800a418 <_vfiprintf_r+0x264>)
 800a33c:	f7fe ff0c 	bl	8009158 <memchr>
 800a340:	2800      	cmp	r0, #0
 800a342:	d007      	beq.n	800a354 <_vfiprintf_r+0x1a0>
 800a344:	4b34      	ldr	r3, [pc, #208]	; (800a418 <_vfiprintf_r+0x264>)
 800a346:	682a      	ldr	r2, [r5, #0]
 800a348:	1ac0      	subs	r0, r0, r3
 800a34a:	2340      	movs	r3, #64	; 0x40
 800a34c:	4083      	lsls	r3, r0
 800a34e:	4313      	orrs	r3, r2
 800a350:	3701      	adds	r7, #1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	7839      	ldrb	r1, [r7, #0]
 800a356:	1c7b      	adds	r3, r7, #1
 800a358:	2206      	movs	r2, #6
 800a35a:	4830      	ldr	r0, [pc, #192]	; (800a41c <_vfiprintf_r+0x268>)
 800a35c:	9303      	str	r3, [sp, #12]
 800a35e:	7629      	strb	r1, [r5, #24]
 800a360:	f7fe fefa 	bl	8009158 <memchr>
 800a364:	2800      	cmp	r0, #0
 800a366:	d045      	beq.n	800a3f4 <_vfiprintf_r+0x240>
 800a368:	4b2d      	ldr	r3, [pc, #180]	; (800a420 <_vfiprintf_r+0x26c>)
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d127      	bne.n	800a3be <_vfiprintf_r+0x20a>
 800a36e:	2207      	movs	r2, #7
 800a370:	9b07      	ldr	r3, [sp, #28]
 800a372:	3307      	adds	r3, #7
 800a374:	4393      	bics	r3, r2
 800a376:	3308      	adds	r3, #8
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	696b      	ldr	r3, [r5, #20]
 800a37c:	9a04      	ldr	r2, [sp, #16]
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	616b      	str	r3, [r5, #20]
 800a382:	e75d      	b.n	800a240 <_vfiprintf_r+0x8c>
 800a384:	210a      	movs	r1, #10
 800a386:	434b      	muls	r3, r1
 800a388:	4667      	mov	r7, ip
 800a38a:	189b      	adds	r3, r3, r2
 800a38c:	3909      	subs	r1, #9
 800a38e:	e7a3      	b.n	800a2d8 <_vfiprintf_r+0x124>
 800a390:	2301      	movs	r3, #1
 800a392:	425b      	negs	r3, r3
 800a394:	e7ce      	b.n	800a334 <_vfiprintf_r+0x180>
 800a396:	2300      	movs	r3, #0
 800a398:	001a      	movs	r2, r3
 800a39a:	3701      	adds	r7, #1
 800a39c:	606b      	str	r3, [r5, #4]
 800a39e:	7839      	ldrb	r1, [r7, #0]
 800a3a0:	1c78      	adds	r0, r7, #1
 800a3a2:	3930      	subs	r1, #48	; 0x30
 800a3a4:	4684      	mov	ip, r0
 800a3a6:	2909      	cmp	r1, #9
 800a3a8:	d903      	bls.n	800a3b2 <_vfiprintf_r+0x1fe>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0c3      	beq.n	800a336 <_vfiprintf_r+0x182>
 800a3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b0:	e7c1      	b.n	800a336 <_vfiprintf_r+0x182>
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	435a      	muls	r2, r3
 800a3b6:	4667      	mov	r7, ip
 800a3b8:	1852      	adds	r2, r2, r1
 800a3ba:	3b09      	subs	r3, #9
 800a3bc:	e7ef      	b.n	800a39e <_vfiprintf_r+0x1ea>
 800a3be:	ab07      	add	r3, sp, #28
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	0022      	movs	r2, r4
 800a3c4:	0029      	movs	r1, r5
 800a3c6:	0030      	movs	r0, r6
 800a3c8:	4b16      	ldr	r3, [pc, #88]	; (800a424 <_vfiprintf_r+0x270>)
 800a3ca:	f7fb ffd5 	bl	8006378 <_printf_float>
 800a3ce:	9004      	str	r0, [sp, #16]
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	d1d1      	bne.n	800a37a <_vfiprintf_r+0x1c6>
 800a3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d8:	07db      	lsls	r3, r3, #31
 800a3da:	d405      	bmi.n	800a3e8 <_vfiprintf_r+0x234>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	059b      	lsls	r3, r3, #22
 800a3e0:	d402      	bmi.n	800a3e8 <_vfiprintf_r+0x234>
 800a3e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e4:	f000 fac6 	bl	800a974 <__retarget_lock_release_recursive>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	065b      	lsls	r3, r3, #25
 800a3ec:	d500      	bpl.n	800a3f0 <_vfiprintf_r+0x23c>
 800a3ee:	e70a      	b.n	800a206 <_vfiprintf_r+0x52>
 800a3f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3f2:	e70a      	b.n	800a20a <_vfiprintf_r+0x56>
 800a3f4:	ab07      	add	r3, sp, #28
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	0022      	movs	r2, r4
 800a3fa:	0029      	movs	r1, r5
 800a3fc:	0030      	movs	r0, r6
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <_vfiprintf_r+0x270>)
 800a400:	f7fc fa6c 	bl	80068dc <_printf_i>
 800a404:	e7e3      	b.n	800a3ce <_vfiprintf_r+0x21a>
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	0800d14c 	.word	0x0800d14c
 800a40c:	0800d16c 	.word	0x0800d16c
 800a410:	0800d12c 	.word	0x0800d12c
 800a414:	0800d0dc 	.word	0x0800d0dc
 800a418:	0800d0e2 	.word	0x0800d0e2
 800a41c:	0800d0e6 	.word	0x0800d0e6
 800a420:	08006379 	.word	0x08006379
 800a424:	0800a191 	.word	0x0800a191

0800a428 <__swbuf_r>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	0005      	movs	r5, r0
 800a42c:	000e      	movs	r6, r1
 800a42e:	0014      	movs	r4, r2
 800a430:	2800      	cmp	r0, #0
 800a432:	d004      	beq.n	800a43e <__swbuf_r+0x16>
 800a434:	6983      	ldr	r3, [r0, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <__swbuf_r+0x16>
 800a43a:	f000 f9f9 	bl	800a830 <__sinit>
 800a43e:	4b22      	ldr	r3, [pc, #136]	; (800a4c8 <__swbuf_r+0xa0>)
 800a440:	429c      	cmp	r4, r3
 800a442:	d12e      	bne.n	800a4a2 <__swbuf_r+0x7a>
 800a444:	686c      	ldr	r4, [r5, #4]
 800a446:	69a3      	ldr	r3, [r4, #24]
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	071b      	lsls	r3, r3, #28
 800a44e:	d532      	bpl.n	800a4b6 <__swbuf_r+0x8e>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d02f      	beq.n	800a4b6 <__swbuf_r+0x8e>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	6922      	ldr	r2, [r4, #16]
 800a45a:	b2f7      	uxtb	r7, r6
 800a45c:	1a98      	subs	r0, r3, r2
 800a45e:	6963      	ldr	r3, [r4, #20]
 800a460:	b2f6      	uxtb	r6, r6
 800a462:	4283      	cmp	r3, r0
 800a464:	dc05      	bgt.n	800a472 <__swbuf_r+0x4a>
 800a466:	0021      	movs	r1, r4
 800a468:	0028      	movs	r0, r5
 800a46a:	f000 f93f 	bl	800a6ec <_fflush_r>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d127      	bne.n	800a4c2 <__swbuf_r+0x9a>
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	3001      	adds	r0, #1
 800a476:	3b01      	subs	r3, #1
 800a478:	60a3      	str	r3, [r4, #8]
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	6022      	str	r2, [r4, #0]
 800a480:	701f      	strb	r7, [r3, #0]
 800a482:	6963      	ldr	r3, [r4, #20]
 800a484:	4283      	cmp	r3, r0
 800a486:	d004      	beq.n	800a492 <__swbuf_r+0x6a>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	07db      	lsls	r3, r3, #31
 800a48c:	d507      	bpl.n	800a49e <__swbuf_r+0x76>
 800a48e:	2e0a      	cmp	r6, #10
 800a490:	d105      	bne.n	800a49e <__swbuf_r+0x76>
 800a492:	0021      	movs	r1, r4
 800a494:	0028      	movs	r0, r5
 800a496:	f000 f929 	bl	800a6ec <_fflush_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d111      	bne.n	800a4c2 <__swbuf_r+0x9a>
 800a49e:	0030      	movs	r0, r6
 800a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <__swbuf_r+0xa4>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d101      	bne.n	800a4ac <__swbuf_r+0x84>
 800a4a8:	68ac      	ldr	r4, [r5, #8]
 800a4aa:	e7cc      	b.n	800a446 <__swbuf_r+0x1e>
 800a4ac:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <__swbuf_r+0xa8>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	d1c9      	bne.n	800a446 <__swbuf_r+0x1e>
 800a4b2:	68ec      	ldr	r4, [r5, #12]
 800a4b4:	e7c7      	b.n	800a446 <__swbuf_r+0x1e>
 800a4b6:	0021      	movs	r1, r4
 800a4b8:	0028      	movs	r0, r5
 800a4ba:	f000 f80b 	bl	800a4d4 <__swsetup_r>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0c9      	beq.n	800a456 <__swbuf_r+0x2e>
 800a4c2:	2601      	movs	r6, #1
 800a4c4:	4276      	negs	r6, r6
 800a4c6:	e7ea      	b.n	800a49e <__swbuf_r+0x76>
 800a4c8:	0800d14c 	.word	0x0800d14c
 800a4cc:	0800d16c 	.word	0x0800d16c
 800a4d0:	0800d12c 	.word	0x0800d12c

0800a4d4 <__swsetup_r>:
 800a4d4:	4b37      	ldr	r3, [pc, #220]	; (800a5b4 <__swsetup_r+0xe0>)
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	0006      	movs	r6, r0
 800a4dc:	000c      	movs	r4, r1
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	d005      	beq.n	800a4ee <__swsetup_r+0x1a>
 800a4e2:	69ab      	ldr	r3, [r5, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <__swsetup_r+0x1a>
 800a4e8:	0028      	movs	r0, r5
 800a4ea:	f000 f9a1 	bl	800a830 <__sinit>
 800a4ee:	4b32      	ldr	r3, [pc, #200]	; (800a5b8 <__swsetup_r+0xe4>)
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d10f      	bne.n	800a514 <__swsetup_r+0x40>
 800a4f4:	686c      	ldr	r4, [r5, #4]
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	5ee2      	ldrsh	r2, [r4, r3]
 800a4fa:	b293      	uxth	r3, r2
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	d42d      	bmi.n	800a55c <__swsetup_r+0x88>
 800a500:	06d9      	lsls	r1, r3, #27
 800a502:	d411      	bmi.n	800a528 <__swsetup_r+0x54>
 800a504:	2309      	movs	r3, #9
 800a506:	2001      	movs	r0, #1
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	3337      	adds	r3, #55	; 0x37
 800a50c:	4313      	orrs	r3, r2
 800a50e:	81a3      	strh	r3, [r4, #12]
 800a510:	4240      	negs	r0, r0
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <__swsetup_r+0xe8>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <__swsetup_r+0x4a>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7eb      	b.n	800a4f6 <__swsetup_r+0x22>
 800a51e:	4b28      	ldr	r3, [pc, #160]	; (800a5c0 <__swsetup_r+0xec>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d1e8      	bne.n	800a4f6 <__swsetup_r+0x22>
 800a524:	68ec      	ldr	r4, [r5, #12]
 800a526:	e7e6      	b.n	800a4f6 <__swsetup_r+0x22>
 800a528:	075b      	lsls	r3, r3, #29
 800a52a:	d513      	bpl.n	800a554 <__swsetup_r+0x80>
 800a52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52e:	2900      	cmp	r1, #0
 800a530:	d008      	beq.n	800a544 <__swsetup_r+0x70>
 800a532:	0023      	movs	r3, r4
 800a534:	3344      	adds	r3, #68	; 0x44
 800a536:	4299      	cmp	r1, r3
 800a538:	d002      	beq.n	800a540 <__swsetup_r+0x6c>
 800a53a:	0030      	movs	r0, r6
 800a53c:	f7ff fb16 	bl	8009b6c <_free_r>
 800a540:	2300      	movs	r3, #0
 800a542:	6363      	str	r3, [r4, #52]	; 0x34
 800a544:	2224      	movs	r2, #36	; 0x24
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	4393      	bics	r3, r2
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	2300      	movs	r3, #0
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	2308      	movs	r3, #8
 800a556:	89a2      	ldrh	r2, [r4, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <__swsetup_r+0xa6>
 800a562:	21a0      	movs	r1, #160	; 0xa0
 800a564:	2280      	movs	r2, #128	; 0x80
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	0089      	lsls	r1, r1, #2
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	400b      	ands	r3, r1
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <__swsetup_r+0xa6>
 800a572:	0021      	movs	r1, r4
 800a574:	0030      	movs	r0, r6
 800a576:	f000 fa27 	bl	800a9c8 <__smakebuf_r>
 800a57a:	220c      	movs	r2, #12
 800a57c:	5ea3      	ldrsh	r3, [r4, r2]
 800a57e:	2001      	movs	r0, #1
 800a580:	001a      	movs	r2, r3
 800a582:	b299      	uxth	r1, r3
 800a584:	4002      	ands	r2, r0
 800a586:	4203      	tst	r3, r0
 800a588:	d00f      	beq.n	800a5aa <__swsetup_r+0xd6>
 800a58a:	2200      	movs	r2, #0
 800a58c:	60a2      	str	r2, [r4, #8]
 800a58e:	6962      	ldr	r2, [r4, #20]
 800a590:	4252      	negs	r2, r2
 800a592:	61a2      	str	r2, [r4, #24]
 800a594:	2000      	movs	r0, #0
 800a596:	6922      	ldr	r2, [r4, #16]
 800a598:	4282      	cmp	r2, r0
 800a59a:	d1ba      	bne.n	800a512 <__swsetup_r+0x3e>
 800a59c:	060a      	lsls	r2, r1, #24
 800a59e:	d5b8      	bpl.n	800a512 <__swsetup_r+0x3e>
 800a5a0:	2240      	movs	r2, #64	; 0x40
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	3801      	subs	r0, #1
 800a5a8:	e7b3      	b.n	800a512 <__swsetup_r+0x3e>
 800a5aa:	0788      	lsls	r0, r1, #30
 800a5ac:	d400      	bmi.n	800a5b0 <__swsetup_r+0xdc>
 800a5ae:	6962      	ldr	r2, [r4, #20]
 800a5b0:	60a2      	str	r2, [r4, #8]
 800a5b2:	e7ef      	b.n	800a594 <__swsetup_r+0xc0>
 800a5b4:	20000050 	.word	0x20000050
 800a5b8:	0800d14c 	.word	0x0800d14c
 800a5bc:	0800d16c 	.word	0x0800d16c
 800a5c0:	0800d12c 	.word	0x0800d12c

0800a5c4 <abort>:
 800a5c4:	2006      	movs	r0, #6
 800a5c6:	b510      	push	{r4, lr}
 800a5c8:	f000 fa74 	bl	800aab4 <raise>
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f7fa f89d 	bl	800470c <_exit>
	...

0800a5d4 <__sflush_r>:
 800a5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5d6:	898b      	ldrh	r3, [r1, #12]
 800a5d8:	0005      	movs	r5, r0
 800a5da:	000c      	movs	r4, r1
 800a5dc:	071a      	lsls	r2, r3, #28
 800a5de:	d45f      	bmi.n	800a6a0 <__sflush_r+0xcc>
 800a5e0:	684a      	ldr	r2, [r1, #4]
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	dc04      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	dc01      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	d0fa      	beq.n	800a5ec <__sflush_r+0x18>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2180      	movs	r1, #128	; 0x80
 800a5fa:	682e      	ldr	r6, [r5, #0]
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	001a      	movs	r2, r3
 800a600:	0149      	lsls	r1, r1, #5
 800a602:	400a      	ands	r2, r1
 800a604:	420b      	tst	r3, r1
 800a606:	d034      	beq.n	800a672 <__sflush_r+0x9e>
 800a608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	075b      	lsls	r3, r3, #29
 800a60e:	d506      	bpl.n	800a61e <__sflush_r+0x4a>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	1ac0      	subs	r0, r0, r3
 800a614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <__sflush_r+0x4a>
 800a61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a61c:	1ac0      	subs	r0, r0, r3
 800a61e:	0002      	movs	r2, r0
 800a620:	6a21      	ldr	r1, [r4, #32]
 800a622:	2300      	movs	r3, #0
 800a624:	0028      	movs	r0, r5
 800a626:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a628:	47b8      	blx	r7
 800a62a:	89a1      	ldrh	r1, [r4, #12]
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d106      	bne.n	800a63e <__sflush_r+0x6a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	2b1d      	cmp	r3, #29
 800a634:	d831      	bhi.n	800a69a <__sflush_r+0xc6>
 800a636:	4a2c      	ldr	r2, [pc, #176]	; (800a6e8 <__sflush_r+0x114>)
 800a638:	40da      	lsrs	r2, r3
 800a63a:	07d3      	lsls	r3, r2, #31
 800a63c:	d52d      	bpl.n	800a69a <__sflush_r+0xc6>
 800a63e:	2300      	movs	r3, #0
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	04cb      	lsls	r3, r1, #19
 800a648:	d505      	bpl.n	800a656 <__sflush_r+0x82>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <__sflush_r+0x80>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d100      	bne.n	800a656 <__sflush_r+0x82>
 800a654:	6560      	str	r0, [r4, #84]	; 0x54
 800a656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a658:	602e      	str	r6, [r5, #0]
 800a65a:	2900      	cmp	r1, #0
 800a65c:	d0c6      	beq.n	800a5ec <__sflush_r+0x18>
 800a65e:	0023      	movs	r3, r4
 800a660:	3344      	adds	r3, #68	; 0x44
 800a662:	4299      	cmp	r1, r3
 800a664:	d002      	beq.n	800a66c <__sflush_r+0x98>
 800a666:	0028      	movs	r0, r5
 800a668:	f7ff fa80 	bl	8009b6c <_free_r>
 800a66c:	2000      	movs	r0, #0
 800a66e:	6360      	str	r0, [r4, #52]	; 0x34
 800a670:	e7bd      	b.n	800a5ee <__sflush_r+0x1a>
 800a672:	2301      	movs	r3, #1
 800a674:	0028      	movs	r0, r5
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	47b8      	blx	r7
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d1c5      	bne.n	800a60a <__sflush_r+0x36>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0c2      	beq.n	800a60a <__sflush_r+0x36>
 800a684:	2b1d      	cmp	r3, #29
 800a686:	d001      	beq.n	800a68c <__sflush_r+0xb8>
 800a688:	2b16      	cmp	r3, #22
 800a68a:	d101      	bne.n	800a690 <__sflush_r+0xbc>
 800a68c:	602e      	str	r6, [r5, #0]
 800a68e:	e7ad      	b.n	800a5ec <__sflush_r+0x18>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	89a2      	ldrh	r2, [r4, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	e7a9      	b.n	800a5ee <__sflush_r+0x1a>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	430b      	orrs	r3, r1
 800a69e:	e7fa      	b.n	800a696 <__sflush_r+0xc2>
 800a6a0:	690f      	ldr	r7, [r1, #16]
 800a6a2:	2f00      	cmp	r7, #0
 800a6a4:	d0a2      	beq.n	800a5ec <__sflush_r+0x18>
 800a6a6:	680a      	ldr	r2, [r1, #0]
 800a6a8:	600f      	str	r7, [r1, #0]
 800a6aa:	1bd2      	subs	r2, r2, r7
 800a6ac:	9201      	str	r2, [sp, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	079b      	lsls	r3, r3, #30
 800a6b2:	d100      	bne.n	800a6b6 <__sflush_r+0xe2>
 800a6b4:	694a      	ldr	r2, [r1, #20]
 800a6b6:	60a2      	str	r2, [r4, #8]
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dc00      	bgt.n	800a6c0 <__sflush_r+0xec>
 800a6be:	e795      	b.n	800a5ec <__sflush_r+0x18>
 800a6c0:	003a      	movs	r2, r7
 800a6c2:	0028      	movs	r0, r5
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ca:	47b0      	blx	r6
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	dc06      	bgt.n	800a6de <__sflush_r+0x10a>
 800a6d0:	2340      	movs	r3, #64	; 0x40
 800a6d2:	2001      	movs	r0, #1
 800a6d4:	89a2      	ldrh	r2, [r4, #12]
 800a6d6:	4240      	negs	r0, r0
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	e787      	b.n	800a5ee <__sflush_r+0x1a>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	183f      	adds	r7, r7, r0
 800a6e2:	1a1b      	subs	r3, r3, r0
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	e7e7      	b.n	800a6b8 <__sflush_r+0xe4>
 800a6e8:	20400001 	.word	0x20400001

0800a6ec <_fflush_r>:
 800a6ec:	690b      	ldr	r3, [r1, #16]
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	0005      	movs	r5, r0
 800a6f2:	000c      	movs	r4, r1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <_fflush_r+0x12>
 800a6f8:	2500      	movs	r5, #0
 800a6fa:	0028      	movs	r0, r5
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d004      	beq.n	800a70c <_fflush_r+0x20>
 800a702:	6983      	ldr	r3, [r0, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <_fflush_r+0x20>
 800a708:	f000 f892 	bl	800a830 <__sinit>
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <_fflush_r+0x74>)
 800a70e:	429c      	cmp	r4, r3
 800a710:	d11b      	bne.n	800a74a <_fflush_r+0x5e>
 800a712:	686c      	ldr	r4, [r5, #4]
 800a714:	220c      	movs	r2, #12
 800a716:	5ea3      	ldrsh	r3, [r4, r2]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0ed      	beq.n	800a6f8 <_fflush_r+0xc>
 800a71c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a71e:	07d2      	lsls	r2, r2, #31
 800a720:	d404      	bmi.n	800a72c <_fflush_r+0x40>
 800a722:	059b      	lsls	r3, r3, #22
 800a724:	d402      	bmi.n	800a72c <_fflush_r+0x40>
 800a726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a728:	f000 f923 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a72c:	0028      	movs	r0, r5
 800a72e:	0021      	movs	r1, r4
 800a730:	f7ff ff50 	bl	800a5d4 <__sflush_r>
 800a734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a736:	0005      	movs	r5, r0
 800a738:	07db      	lsls	r3, r3, #31
 800a73a:	d4de      	bmi.n	800a6fa <_fflush_r+0xe>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	059b      	lsls	r3, r3, #22
 800a740:	d4db      	bmi.n	800a6fa <_fflush_r+0xe>
 800a742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a744:	f000 f916 	bl	800a974 <__retarget_lock_release_recursive>
 800a748:	e7d7      	b.n	800a6fa <_fflush_r+0xe>
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <_fflush_r+0x78>)
 800a74c:	429c      	cmp	r4, r3
 800a74e:	d101      	bne.n	800a754 <_fflush_r+0x68>
 800a750:	68ac      	ldr	r4, [r5, #8]
 800a752:	e7df      	b.n	800a714 <_fflush_r+0x28>
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <_fflush_r+0x7c>)
 800a756:	429c      	cmp	r4, r3
 800a758:	d1dc      	bne.n	800a714 <_fflush_r+0x28>
 800a75a:	68ec      	ldr	r4, [r5, #12]
 800a75c:	e7da      	b.n	800a714 <_fflush_r+0x28>
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	0800d14c 	.word	0x0800d14c
 800a764:	0800d16c 	.word	0x0800d16c
 800a768:	0800d12c 	.word	0x0800d12c

0800a76c <std>:
 800a76c:	2300      	movs	r3, #0
 800a76e:	b510      	push	{r4, lr}
 800a770:	0004      	movs	r4, r0
 800a772:	6003      	str	r3, [r0, #0]
 800a774:	6043      	str	r3, [r0, #4]
 800a776:	6083      	str	r3, [r0, #8]
 800a778:	8181      	strh	r1, [r0, #12]
 800a77a:	6643      	str	r3, [r0, #100]	; 0x64
 800a77c:	0019      	movs	r1, r3
 800a77e:	81c2      	strh	r2, [r0, #14]
 800a780:	6103      	str	r3, [r0, #16]
 800a782:	6143      	str	r3, [r0, #20]
 800a784:	6183      	str	r3, [r0, #24]
 800a786:	2208      	movs	r2, #8
 800a788:	305c      	adds	r0, #92	; 0x5c
 800a78a:	f7fb fd43 	bl	8006214 <memset>
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <std+0x38>)
 800a790:	6224      	str	r4, [r4, #32]
 800a792:	6263      	str	r3, [r4, #36]	; 0x24
 800a794:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <std+0x3c>)
 800a796:	62a3      	str	r3, [r4, #40]	; 0x28
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <std+0x40>)
 800a79a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a79c:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <std+0x44>)
 800a79e:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	0800aaf5 	.word	0x0800aaf5
 800a7a8:	0800ab1d 	.word	0x0800ab1d
 800a7ac:	0800ab55 	.word	0x0800ab55
 800a7b0:	0800ab81 	.word	0x0800ab81

0800a7b4 <_cleanup_r>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4902      	ldr	r1, [pc, #8]	; (800a7c0 <_cleanup_r+0xc>)
 800a7b8:	f000 f8ba 	bl	800a930 <_fwalk_reent>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	0800a6ed 	.word	0x0800a6ed

0800a7c4 <__sfmoreglue>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	2568      	movs	r5, #104	; 0x68
 800a7c8:	1e4a      	subs	r2, r1, #1
 800a7ca:	4355      	muls	r5, r2
 800a7cc:	000e      	movs	r6, r1
 800a7ce:	0029      	movs	r1, r5
 800a7d0:	3174      	adds	r1, #116	; 0x74
 800a7d2:	f7ff fa37 	bl	8009c44 <_malloc_r>
 800a7d6:	1e04      	subs	r4, r0, #0
 800a7d8:	d008      	beq.n	800a7ec <__sfmoreglue+0x28>
 800a7da:	2100      	movs	r1, #0
 800a7dc:	002a      	movs	r2, r5
 800a7de:	6001      	str	r1, [r0, #0]
 800a7e0:	6046      	str	r6, [r0, #4]
 800a7e2:	300c      	adds	r0, #12
 800a7e4:	60a0      	str	r0, [r4, #8]
 800a7e6:	3268      	adds	r2, #104	; 0x68
 800a7e8:	f7fb fd14 	bl	8006214 <memset>
 800a7ec:	0020      	movs	r0, r4
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__sfp_lock_acquire>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4802      	ldr	r0, [pc, #8]	; (800a7fc <__sfp_lock_acquire+0xc>)
 800a7f4:	f000 f8bd 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	200002f5 	.word	0x200002f5

0800a800 <__sfp_lock_release>:
 800a800:	b510      	push	{r4, lr}
 800a802:	4802      	ldr	r0, [pc, #8]	; (800a80c <__sfp_lock_release+0xc>)
 800a804:	f000 f8b6 	bl	800a974 <__retarget_lock_release_recursive>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	200002f5 	.word	0x200002f5

0800a810 <__sinit_lock_acquire>:
 800a810:	b510      	push	{r4, lr}
 800a812:	4802      	ldr	r0, [pc, #8]	; (800a81c <__sinit_lock_acquire+0xc>)
 800a814:	f000 f8ad 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	200002f6 	.word	0x200002f6

0800a820 <__sinit_lock_release>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4802      	ldr	r0, [pc, #8]	; (800a82c <__sinit_lock_release+0xc>)
 800a824:	f000 f8a6 	bl	800a974 <__retarget_lock_release_recursive>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	200002f6 	.word	0x200002f6

0800a830 <__sinit>:
 800a830:	b513      	push	{r0, r1, r4, lr}
 800a832:	0004      	movs	r4, r0
 800a834:	f7ff ffec 	bl	800a810 <__sinit_lock_acquire>
 800a838:	69a3      	ldr	r3, [r4, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <__sinit+0x14>
 800a83e:	f7ff ffef 	bl	800a820 <__sinit_lock_release>
 800a842:	bd13      	pop	{r0, r1, r4, pc}
 800a844:	64a3      	str	r3, [r4, #72]	; 0x48
 800a846:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a848:	6523      	str	r3, [r4, #80]	; 0x50
 800a84a:	4b13      	ldr	r3, [pc, #76]	; (800a898 <__sinit+0x68>)
 800a84c:	4a13      	ldr	r2, [pc, #76]	; (800a89c <__sinit+0x6c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	62a2      	str	r2, [r4, #40]	; 0x28
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	42a3      	cmp	r3, r4
 800a856:	d101      	bne.n	800a85c <__sinit+0x2c>
 800a858:	2301      	movs	r3, #1
 800a85a:	61a3      	str	r3, [r4, #24]
 800a85c:	0020      	movs	r0, r4
 800a85e:	f000 f81f 	bl	800a8a0 <__sfp>
 800a862:	6060      	str	r0, [r4, #4]
 800a864:	0020      	movs	r0, r4
 800a866:	f000 f81b 	bl	800a8a0 <__sfp>
 800a86a:	60a0      	str	r0, [r4, #8]
 800a86c:	0020      	movs	r0, r4
 800a86e:	f000 f817 	bl	800a8a0 <__sfp>
 800a872:	2200      	movs	r2, #0
 800a874:	2104      	movs	r1, #4
 800a876:	60e0      	str	r0, [r4, #12]
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	f7ff ff77 	bl	800a76c <std>
 800a87e:	2201      	movs	r2, #1
 800a880:	2109      	movs	r1, #9
 800a882:	68a0      	ldr	r0, [r4, #8]
 800a884:	f7ff ff72 	bl	800a76c <std>
 800a888:	2202      	movs	r2, #2
 800a88a:	2112      	movs	r1, #18
 800a88c:	68e0      	ldr	r0, [r4, #12]
 800a88e:	f7ff ff6d 	bl	800a76c <std>
 800a892:	2301      	movs	r3, #1
 800a894:	61a3      	str	r3, [r4, #24]
 800a896:	e7d2      	b.n	800a83e <__sinit+0xe>
 800a898:	0800cce8 	.word	0x0800cce8
 800a89c:	0800a7b5 	.word	0x0800a7b5

0800a8a0 <__sfp>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	0007      	movs	r7, r0
 800a8a4:	f7ff ffa4 	bl	800a7f0 <__sfp_lock_acquire>
 800a8a8:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <__sfp+0x88>)
 800a8aa:	681e      	ldr	r6, [r3, #0]
 800a8ac:	69b3      	ldr	r3, [r6, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d102      	bne.n	800a8b8 <__sfp+0x18>
 800a8b2:	0030      	movs	r0, r6
 800a8b4:	f7ff ffbc 	bl	800a830 <__sinit>
 800a8b8:	3648      	adds	r6, #72	; 0x48
 800a8ba:	68b4      	ldr	r4, [r6, #8]
 800a8bc:	6873      	ldr	r3, [r6, #4]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	d504      	bpl.n	800a8cc <__sfp+0x2c>
 800a8c2:	6833      	ldr	r3, [r6, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d022      	beq.n	800a90e <__sfp+0x6e>
 800a8c8:	6836      	ldr	r6, [r6, #0]
 800a8ca:	e7f6      	b.n	800a8ba <__sfp+0x1a>
 800a8cc:	220c      	movs	r2, #12
 800a8ce:	5ea5      	ldrsh	r5, [r4, r2]
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	d11a      	bne.n	800a90a <__sfp+0x6a>
 800a8d4:	0020      	movs	r0, r4
 800a8d6:	4b15      	ldr	r3, [pc, #84]	; (800a92c <__sfp+0x8c>)
 800a8d8:	3058      	adds	r0, #88	; 0x58
 800a8da:	60e3      	str	r3, [r4, #12]
 800a8dc:	6665      	str	r5, [r4, #100]	; 0x64
 800a8de:	f000 f847 	bl	800a970 <__retarget_lock_init_recursive>
 800a8e2:	f7ff ff8d 	bl	800a800 <__sfp_lock_release>
 800a8e6:	0020      	movs	r0, r4
 800a8e8:	2208      	movs	r2, #8
 800a8ea:	0029      	movs	r1, r5
 800a8ec:	6025      	str	r5, [r4, #0]
 800a8ee:	60a5      	str	r5, [r4, #8]
 800a8f0:	6065      	str	r5, [r4, #4]
 800a8f2:	6125      	str	r5, [r4, #16]
 800a8f4:	6165      	str	r5, [r4, #20]
 800a8f6:	61a5      	str	r5, [r4, #24]
 800a8f8:	305c      	adds	r0, #92	; 0x5c
 800a8fa:	f7fb fc8b 	bl	8006214 <memset>
 800a8fe:	6365      	str	r5, [r4, #52]	; 0x34
 800a900:	63a5      	str	r5, [r4, #56]	; 0x38
 800a902:	64a5      	str	r5, [r4, #72]	; 0x48
 800a904:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a906:	0020      	movs	r0, r4
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90a:	3468      	adds	r4, #104	; 0x68
 800a90c:	e7d7      	b.n	800a8be <__sfp+0x1e>
 800a90e:	2104      	movs	r1, #4
 800a910:	0038      	movs	r0, r7
 800a912:	f7ff ff57 	bl	800a7c4 <__sfmoreglue>
 800a916:	1e04      	subs	r4, r0, #0
 800a918:	6030      	str	r0, [r6, #0]
 800a91a:	d1d5      	bne.n	800a8c8 <__sfp+0x28>
 800a91c:	f7ff ff70 	bl	800a800 <__sfp_lock_release>
 800a920:	230c      	movs	r3, #12
 800a922:	603b      	str	r3, [r7, #0]
 800a924:	e7ef      	b.n	800a906 <__sfp+0x66>
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	0800cce8 	.word	0x0800cce8
 800a92c:	ffff0001 	.word	0xffff0001

0800a930 <_fwalk_reent>:
 800a930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a932:	0004      	movs	r4, r0
 800a934:	0006      	movs	r6, r0
 800a936:	2700      	movs	r7, #0
 800a938:	9101      	str	r1, [sp, #4]
 800a93a:	3448      	adds	r4, #72	; 0x48
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	68a5      	ldr	r5, [r4, #8]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	3b01      	subs	r3, #1
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	d504      	bpl.n	800a954 <_fwalk_reent+0x24>
 800a94a:	6824      	ldr	r4, [r4, #0]
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	d1f5      	bne.n	800a93c <_fwalk_reent+0xc>
 800a950:	0038      	movs	r0, r7
 800a952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a954:	89ab      	ldrh	r3, [r5, #12]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d908      	bls.n	800a96c <_fwalk_reent+0x3c>
 800a95a:	220e      	movs	r2, #14
 800a95c:	5eab      	ldrsh	r3, [r5, r2]
 800a95e:	3301      	adds	r3, #1
 800a960:	d004      	beq.n	800a96c <_fwalk_reent+0x3c>
 800a962:	0029      	movs	r1, r5
 800a964:	0030      	movs	r0, r6
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	4798      	blx	r3
 800a96a:	4307      	orrs	r7, r0
 800a96c:	3568      	adds	r5, #104	; 0x68
 800a96e:	e7e8      	b.n	800a942 <_fwalk_reent+0x12>

0800a970 <__retarget_lock_init_recursive>:
 800a970:	4770      	bx	lr

0800a972 <__retarget_lock_acquire_recursive>:
 800a972:	4770      	bx	lr

0800a974 <__retarget_lock_release_recursive>:
 800a974:	4770      	bx	lr
	...

0800a978 <__swhatbuf_r>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	000e      	movs	r6, r1
 800a97c:	001d      	movs	r5, r3
 800a97e:	230e      	movs	r3, #14
 800a980:	5ec9      	ldrsh	r1, [r1, r3]
 800a982:	0014      	movs	r4, r2
 800a984:	b096      	sub	sp, #88	; 0x58
 800a986:	2900      	cmp	r1, #0
 800a988:	da08      	bge.n	800a99c <__swhatbuf_r+0x24>
 800a98a:	220c      	movs	r2, #12
 800a98c:	5eb3      	ldrsh	r3, [r6, r2]
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	d411      	bmi.n	800a9ba <__swhatbuf_r+0x42>
 800a996:	2380      	movs	r3, #128	; 0x80
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	e00f      	b.n	800a9bc <__swhatbuf_r+0x44>
 800a99c:	466a      	mov	r2, sp
 800a99e:	f000 f91b 	bl	800abd8 <_fstat_r>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	dbf1      	blt.n	800a98a <__swhatbuf_r+0x12>
 800a9a6:	23f0      	movs	r3, #240	; 0xf0
 800a9a8:	9901      	ldr	r1, [sp, #4]
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	4019      	ands	r1, r3
 800a9ae:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <__swhatbuf_r+0x4c>)
 800a9b0:	18c9      	adds	r1, r1, r3
 800a9b2:	424b      	negs	r3, r1
 800a9b4:	4159      	adcs	r1, r3
 800a9b6:	6029      	str	r1, [r5, #0]
 800a9b8:	e7ed      	b.n	800a996 <__swhatbuf_r+0x1e>
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	2000      	movs	r0, #0
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	b016      	add	sp, #88	; 0x58
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	ffffe000 	.word	0xffffe000

0800a9c8 <__smakebuf_r>:
 800a9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ca:	2602      	movs	r6, #2
 800a9cc:	898b      	ldrh	r3, [r1, #12]
 800a9ce:	0005      	movs	r5, r0
 800a9d0:	000c      	movs	r4, r1
 800a9d2:	4233      	tst	r3, r6
 800a9d4:	d006      	beq.n	800a9e4 <__smakebuf_r+0x1c>
 800a9d6:	0023      	movs	r3, r4
 800a9d8:	3347      	adds	r3, #71	; 0x47
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9e4:	466a      	mov	r2, sp
 800a9e6:	ab01      	add	r3, sp, #4
 800a9e8:	f7ff ffc6 	bl	800a978 <__swhatbuf_r>
 800a9ec:	9900      	ldr	r1, [sp, #0]
 800a9ee:	0007      	movs	r7, r0
 800a9f0:	0028      	movs	r0, r5
 800a9f2:	f7ff f927 	bl	8009c44 <_malloc_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d108      	bne.n	800aa0c <__smakebuf_r+0x44>
 800a9fa:	220c      	movs	r2, #12
 800a9fc:	5ea3      	ldrsh	r3, [r4, r2]
 800a9fe:	059a      	lsls	r2, r3, #22
 800aa00:	d4ef      	bmi.n	800a9e2 <__smakebuf_r+0x1a>
 800aa02:	2203      	movs	r2, #3
 800aa04:	4393      	bics	r3, r2
 800aa06:	431e      	orrs	r6, r3
 800aa08:	81a6      	strh	r6, [r4, #12]
 800aa0a:	e7e4      	b.n	800a9d6 <__smakebuf_r+0xe>
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <__smakebuf_r+0x84>)
 800aa0e:	62ab      	str	r3, [r5, #40]	; 0x28
 800aa10:	2380      	movs	r3, #128	; 0x80
 800aa12:	89a2      	ldrh	r2, [r4, #12]
 800aa14:	6020      	str	r0, [r4, #0]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	9b00      	ldr	r3, [sp, #0]
 800aa1c:	6120      	str	r0, [r4, #16]
 800aa1e:	6163      	str	r3, [r4, #20]
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00d      	beq.n	800aa42 <__smakebuf_r+0x7a>
 800aa26:	0028      	movs	r0, r5
 800aa28:	230e      	movs	r3, #14
 800aa2a:	5ee1      	ldrsh	r1, [r4, r3]
 800aa2c:	f000 f8e6 	bl	800abfc <_isatty_r>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d006      	beq.n	800aa42 <__smakebuf_r+0x7a>
 800aa34:	2203      	movs	r2, #3
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	4393      	bics	r3, r2
 800aa3a:	001a      	movs	r2, r3
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	89a0      	ldrh	r0, [r4, #12]
 800aa44:	4307      	orrs	r7, r0
 800aa46:	81a7      	strh	r7, [r4, #12]
 800aa48:	e7cb      	b.n	800a9e2 <__smakebuf_r+0x1a>
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	0800a7b5 	.word	0x0800a7b5

0800aa50 <_malloc_usable_size_r>:
 800aa50:	1f0b      	subs	r3, r1, #4
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	1f18      	subs	r0, r3, #4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da01      	bge.n	800aa5e <_malloc_usable_size_r+0xe>
 800aa5a:	580b      	ldr	r3, [r1, r0]
 800aa5c:	18c0      	adds	r0, r0, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_raise_r>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	0004      	movs	r4, r0
 800aa64:	000d      	movs	r5, r1
 800aa66:	291f      	cmp	r1, #31
 800aa68:	d904      	bls.n	800aa74 <_raise_r+0x14>
 800aa6a:	2316      	movs	r3, #22
 800aa6c:	6003      	str	r3, [r0, #0]
 800aa6e:	2001      	movs	r0, #1
 800aa70:	4240      	negs	r0, r0
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <_raise_r+0x24>
 800aa7a:	008a      	lsls	r2, r1, #2
 800aa7c:	189b      	adds	r3, r3, r2
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d108      	bne.n	800aa96 <_raise_r+0x36>
 800aa84:	0020      	movs	r0, r4
 800aa86:	f000 f831 	bl	800aaec <_getpid_r>
 800aa8a:	002a      	movs	r2, r5
 800aa8c:	0001      	movs	r1, r0
 800aa8e:	0020      	movs	r0, r4
 800aa90:	f000 f81a 	bl	800aac8 <_kill_r>
 800aa94:	e7ed      	b.n	800aa72 <_raise_r+0x12>
 800aa96:	2000      	movs	r0, #0
 800aa98:	2a01      	cmp	r2, #1
 800aa9a:	d0ea      	beq.n	800aa72 <_raise_r+0x12>
 800aa9c:	1c51      	adds	r1, r2, #1
 800aa9e:	d103      	bne.n	800aaa8 <_raise_r+0x48>
 800aaa0:	2316      	movs	r3, #22
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	e7e4      	b.n	800aa72 <_raise_r+0x12>
 800aaa8:	2400      	movs	r4, #0
 800aaaa:	0028      	movs	r0, r5
 800aaac:	601c      	str	r4, [r3, #0]
 800aaae:	4790      	blx	r2
 800aab0:	0020      	movs	r0, r4
 800aab2:	e7de      	b.n	800aa72 <_raise_r+0x12>

0800aab4 <raise>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <raise+0x10>)
 800aab8:	0001      	movs	r1, r0
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	f7ff ffd0 	bl	800aa60 <_raise_r>
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	20000050 	.word	0x20000050

0800aac8 <_kill_r>:
 800aac8:	2300      	movs	r3, #0
 800aaca:	b570      	push	{r4, r5, r6, lr}
 800aacc:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_kill_r+0x20>)
 800aace:	0004      	movs	r4, r0
 800aad0:	0008      	movs	r0, r1
 800aad2:	0011      	movs	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f9 fe09 	bl	80046ec <_kill>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d103      	bne.n	800aae6 <_kill_r+0x1e>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d000      	beq.n	800aae6 <_kill_r+0x1e>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	200002f0 	.word	0x200002f0

0800aaec <_getpid_r>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	f7f9 fdf7 	bl	80046e0 <_getpid>
 800aaf2:	bd10      	pop	{r4, pc}

0800aaf4 <__sread>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	000c      	movs	r4, r1
 800aaf8:	250e      	movs	r5, #14
 800aafa:	5f49      	ldrsh	r1, [r1, r5]
 800aafc:	f000 f8a4 	bl	800ac48 <_read_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	db03      	blt.n	800ab0c <__sread+0x18>
 800ab04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab06:	181b      	adds	r3, r3, r0
 800ab08:	6563      	str	r3, [r4, #84]	; 0x54
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	4a02      	ldr	r2, [pc, #8]	; (800ab18 <__sread+0x24>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	e7f9      	b.n	800ab0a <__sread+0x16>
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	ffffefff 	.word	0xffffefff

0800ab1c <__swrite>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	001f      	movs	r7, r3
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	0005      	movs	r5, r0
 800ab24:	000c      	movs	r4, r1
 800ab26:	0016      	movs	r6, r2
 800ab28:	05db      	lsls	r3, r3, #23
 800ab2a:	d505      	bpl.n	800ab38 <__swrite+0x1c>
 800ab2c:	230e      	movs	r3, #14
 800ab2e:	5ec9      	ldrsh	r1, [r1, r3]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2302      	movs	r3, #2
 800ab34:	f000 f874 	bl	800ac20 <_lseek_r>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	4a05      	ldr	r2, [pc, #20]	; (800ab50 <__swrite+0x34>)
 800ab3c:	0028      	movs	r0, r5
 800ab3e:	4013      	ands	r3, r2
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	0032      	movs	r2, r6
 800ab44:	230e      	movs	r3, #14
 800ab46:	5ee1      	ldrsh	r1, [r4, r3]
 800ab48:	003b      	movs	r3, r7
 800ab4a:	f000 f81f 	bl	800ab8c <_write_r>
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	ffffefff 	.word	0xffffefff

0800ab54 <__sseek>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	000c      	movs	r4, r1
 800ab58:	250e      	movs	r5, #14
 800ab5a:	5f49      	ldrsh	r1, [r1, r5]
 800ab5c:	f000 f860 	bl	800ac20 <_lseek_r>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	1c42      	adds	r2, r0, #1
 800ab64:	d103      	bne.n	800ab6e <__sseek+0x1a>
 800ab66:	4a05      	ldr	r2, [pc, #20]	; (800ab7c <__sseek+0x28>)
 800ab68:	4013      	ands	r3, r2
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	2280      	movs	r2, #128	; 0x80
 800ab70:	0152      	lsls	r2, r2, #5
 800ab72:	4313      	orrs	r3, r2
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	6560      	str	r0, [r4, #84]	; 0x54
 800ab78:	e7f8      	b.n	800ab6c <__sseek+0x18>
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	ffffefff 	.word	0xffffefff

0800ab80 <__sclose>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	230e      	movs	r3, #14
 800ab84:	5ec9      	ldrsh	r1, [r1, r3]
 800ab86:	f000 f815 	bl	800abb4 <_close_r>
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <_write_r>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	0004      	movs	r4, r0
 800ab90:	0008      	movs	r0, r1
 800ab92:	0011      	movs	r1, r2
 800ab94:	001a      	movs	r2, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	4d05      	ldr	r5, [pc, #20]	; (800abb0 <_write_r+0x24>)
 800ab9a:	602b      	str	r3, [r5, #0]
 800ab9c:	f7f9 fddf 	bl	800475e <_write>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	d103      	bne.n	800abac <_write_r+0x20>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d000      	beq.n	800abac <_write_r+0x20>
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	bd70      	pop	{r4, r5, r6, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	200002f0 	.word	0x200002f0

0800abb4 <_close_r>:
 800abb4:	2300      	movs	r3, #0
 800abb6:	b570      	push	{r4, r5, r6, lr}
 800abb8:	4d06      	ldr	r5, [pc, #24]	; (800abd4 <_close_r+0x20>)
 800abba:	0004      	movs	r4, r0
 800abbc:	0008      	movs	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7f9 fde9 	bl	8004796 <_close>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d103      	bne.n	800abd0 <_close_r+0x1c>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d000      	beq.n	800abd0 <_close_r+0x1c>
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	200002f0 	.word	0x200002f0

0800abd8 <_fstat_r>:
 800abd8:	2300      	movs	r3, #0
 800abda:	b570      	push	{r4, r5, r6, lr}
 800abdc:	4d06      	ldr	r5, [pc, #24]	; (800abf8 <_fstat_r+0x20>)
 800abde:	0004      	movs	r4, r0
 800abe0:	0008      	movs	r0, r1
 800abe2:	0011      	movs	r1, r2
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	f7f9 fde0 	bl	80047aa <_fstat>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d103      	bne.n	800abf6 <_fstat_r+0x1e>
 800abee:	682b      	ldr	r3, [r5, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d000      	beq.n	800abf6 <_fstat_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	200002f0 	.word	0x200002f0

0800abfc <_isatty_r>:
 800abfc:	2300      	movs	r3, #0
 800abfe:	b570      	push	{r4, r5, r6, lr}
 800ac00:	4d06      	ldr	r5, [pc, #24]	; (800ac1c <_isatty_r+0x20>)
 800ac02:	0004      	movs	r4, r0
 800ac04:	0008      	movs	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7f9 fddd 	bl	80047c6 <_isatty>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d103      	bne.n	800ac18 <_isatty_r+0x1c>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d000      	beq.n	800ac18 <_isatty_r+0x1c>
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	200002f0 	.word	0x200002f0

0800ac20 <_lseek_r>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	0004      	movs	r4, r0
 800ac24:	0008      	movs	r0, r1
 800ac26:	0011      	movs	r1, r2
 800ac28:	001a      	movs	r2, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4d05      	ldr	r5, [pc, #20]	; (800ac44 <_lseek_r+0x24>)
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f9 fdd2 	bl	80047d8 <_lseek>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d103      	bne.n	800ac40 <_lseek_r+0x20>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d000      	beq.n	800ac40 <_lseek_r+0x20>
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	200002f0 	.word	0x200002f0

0800ac48 <_read_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	0011      	movs	r1, r2
 800ac50:	001a      	movs	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	4d05      	ldr	r5, [pc, #20]	; (800ac6c <_read_r+0x24>)
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f9 fd64 	bl	8004724 <_read>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d103      	bne.n	800ac68 <_read_r+0x20>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d000      	beq.n	800ac68 <_read_r+0x20>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	200002f0 	.word	0x200002f0

0800ac70 <_init>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac76:	bc08      	pop	{r3}
 800ac78:	469e      	mov	lr, r3
 800ac7a:	4770      	bx	lr

0800ac7c <_fini>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr
